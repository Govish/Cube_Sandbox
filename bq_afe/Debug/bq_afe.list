
bq_afe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f94  08002f94  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002f94  08002f94  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f94  08002f94  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000068  08003004  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003004  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112b1  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002568  00000000  00000000  00031341  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b8  00000000  00000000  000338b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a0  00000000  00000000  00034268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183fc  00000000  00000000  00034b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c3b0  00000000  00000000  0004cf04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078c20  00000000  00000000  000592b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1ed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002684  00000000  00000000  000d1f50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ed0 	.word	0x08002ed0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002ed0 	.word	0x08002ed0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 ffcb 	bl	80021d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 f8d4 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8ef 	bl	8000446 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8c3 	bl	80003fc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000090 	.word	0x20000090

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000090 	.word	0x20000090

080002ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	1dfb      	adds	r3, r7, #7
 80002b6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	001a      	movs	r2, r3
 80002be:	231f      	movs	r3, #31
 80002c0:	401a      	ands	r2, r3
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <NVIC_EnableIRQ+0x28>)
 80002c4:	2101      	movs	r1, #1
 80002c6:	4091      	lsls	r1, r2
 80002c8:	000a      	movs	r2, r1
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	e000e100 	.word	0xe000e100

080002d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	0002      	movs	r2, r0
 80002e0:	6039      	str	r1, [r7, #0]
 80002e2:	1dfb      	adds	r3, r7, #7
 80002e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b7f      	cmp	r3, #127	; 0x7f
 80002ec:	d932      	bls.n	8000354 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ee:	4a2f      	ldr	r2, [pc, #188]	; (80003ac <NVIC_SetPriority+0xd4>)
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	0019      	movs	r1, r3
 80002f6:	230f      	movs	r3, #15
 80002f8:	400b      	ands	r3, r1
 80002fa:	3b08      	subs	r3, #8
 80002fc:	089b      	lsrs	r3, r3, #2
 80002fe:	3306      	adds	r3, #6
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	18d3      	adds	r3, r2, r3
 8000304:	3304      	adds	r3, #4
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	1dfa      	adds	r2, r7, #7
 800030a:	7812      	ldrb	r2, [r2, #0]
 800030c:	0011      	movs	r1, r2
 800030e:	2203      	movs	r2, #3
 8000310:	400a      	ands	r2, r1
 8000312:	00d2      	lsls	r2, r2, #3
 8000314:	21ff      	movs	r1, #255	; 0xff
 8000316:	4091      	lsls	r1, r2
 8000318:	000a      	movs	r2, r1
 800031a:	43d2      	mvns	r2, r2
 800031c:	401a      	ands	r2, r3
 800031e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	019b      	lsls	r3, r3, #6
 8000324:	22ff      	movs	r2, #255	; 0xff
 8000326:	401a      	ands	r2, r3
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	0018      	movs	r0, r3
 800032e:	2303      	movs	r3, #3
 8000330:	4003      	ands	r3, r0
 8000332:	00db      	lsls	r3, r3, #3
 8000334:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000336:	481d      	ldr	r0, [pc, #116]	; (80003ac <NVIC_SetPriority+0xd4>)
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	001c      	movs	r4, r3
 800033e:	230f      	movs	r3, #15
 8000340:	4023      	ands	r3, r4
 8000342:	3b08      	subs	r3, #8
 8000344:	089b      	lsrs	r3, r3, #2
 8000346:	430a      	orrs	r2, r1
 8000348:	3306      	adds	r3, #6
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	18c3      	adds	r3, r0, r3
 800034e:	3304      	adds	r3, #4
 8000350:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000352:	e027      	b.n	80003a4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <NVIC_SetPriority+0xd8>)
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b25b      	sxtb	r3, r3
 800035c:	089b      	lsrs	r3, r3, #2
 800035e:	33c0      	adds	r3, #192	; 0xc0
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	589b      	ldr	r3, [r3, r2]
 8000364:	1dfa      	adds	r2, r7, #7
 8000366:	7812      	ldrb	r2, [r2, #0]
 8000368:	0011      	movs	r1, r2
 800036a:	2203      	movs	r2, #3
 800036c:	400a      	ands	r2, r1
 800036e:	00d2      	lsls	r2, r2, #3
 8000370:	21ff      	movs	r1, #255	; 0xff
 8000372:	4091      	lsls	r1, r2
 8000374:	000a      	movs	r2, r1
 8000376:	43d2      	mvns	r2, r2
 8000378:	401a      	ands	r2, r3
 800037a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	019b      	lsls	r3, r3, #6
 8000380:	22ff      	movs	r2, #255	; 0xff
 8000382:	401a      	ands	r2, r3
 8000384:	1dfb      	adds	r3, r7, #7
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	0018      	movs	r0, r3
 800038a:	2303      	movs	r3, #3
 800038c:	4003      	ands	r3, r0
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000392:	4807      	ldr	r0, [pc, #28]	; (80003b0 <NVIC_SetPriority+0xd8>)
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b25b      	sxtb	r3, r3
 800039a:	089b      	lsrs	r3, r3, #2
 800039c:	430a      	orrs	r2, r1
 800039e:	33c0      	adds	r3, #192	; 0xc0
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	501a      	str	r2, [r3, r0]
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b003      	add	sp, #12
 80003aa:	bd90      	pop	{r4, r7, pc}
 80003ac:	e000ed00 	.word	0xe000ed00
 80003b0:	e000e100 	.word	0xe000e100

080003b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <SysTick_Config+0x40>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d901      	bls.n	80003ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003c6:	2301      	movs	r3, #1
 80003c8:	e010      	b.n	80003ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <SysTick_Config+0x44>)
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	3a01      	subs	r2, #1
 80003d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d2:	2301      	movs	r3, #1
 80003d4:	425b      	negs	r3, r3
 80003d6:	2103      	movs	r1, #3
 80003d8:	0018      	movs	r0, r3
 80003da:	f7ff ff7d 	bl	80002d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <SysTick_Config+0x44>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <SysTick_Config+0x44>)
 80003e6:	2207      	movs	r2, #7
 80003e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	0018      	movs	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b002      	add	sp, #8
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	00ffffff 	.word	0x00ffffff
 80003f8:	e000e010 	.word	0xe000e010

080003fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	210f      	movs	r1, #15
 8000408:	187b      	adds	r3, r7, r1
 800040a:	1c02      	adds	r2, r0, #0
 800040c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	187b      	adds	r3, r7, r1
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	b25b      	sxtb	r3, r3
 8000416:	0011      	movs	r1, r2
 8000418:	0018      	movs	r0, r3
 800041a:	f7ff ff5d 	bl	80002d8 <NVIC_SetPriority>
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b004      	add	sp, #16
 8000424:	bd80      	pop	{r7, pc}

08000426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b082      	sub	sp, #8
 800042a:	af00      	add	r7, sp, #0
 800042c:	0002      	movs	r2, r0
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	b25b      	sxtb	r3, r3
 8000438:	0018      	movs	r0, r3
 800043a:	f7ff ff37 	bl	80002ac <NVIC_EnableIRQ>
}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}

08000446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	0018      	movs	r0, r3
 8000452:	f7ff ffaf 	bl	80003b4 <SysTick_Config>
 8000456:	0003      	movs	r3, r0
}
 8000458:	0018      	movs	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	b002      	add	sp, #8
 800045e:	bd80      	pop	{r7, pc}

08000460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000476:	e155      	b.n	8000724 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	4091      	lsls	r1, r2
 8000482:	000a      	movs	r2, r1
 8000484:	4013      	ands	r3, r2
 8000486:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d100      	bne.n	8000490 <HAL_GPIO_Init+0x30>
 800048e:	e146      	b.n	800071e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d003      	beq.n	80004a0 <HAL_GPIO_Init+0x40>
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	2b12      	cmp	r3, #18
 800049e:	d123      	bne.n	80004e8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	08da      	lsrs	r2, r3, #3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3208      	adds	r2, #8
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	58d3      	ldr	r3, [r2, r3]
 80004ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	2207      	movs	r2, #7
 80004b2:	4013      	ands	r3, r2
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	220f      	movs	r2, #15
 80004b8:	409a      	lsls	r2, r3
 80004ba:	0013      	movs	r3, r2
 80004bc:	43da      	mvns	r2, r3
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	4013      	ands	r3, r2
 80004c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	691a      	ldr	r2, [r3, #16]
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	2107      	movs	r1, #7
 80004cc:	400b      	ands	r3, r1
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	409a      	lsls	r2, r3
 80004d2:	0013      	movs	r3, r2
 80004d4:	693a      	ldr	r2, [r7, #16]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	08da      	lsrs	r2, r3, #3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3208      	adds	r2, #8
 80004e2:	0092      	lsls	r2, r2, #2
 80004e4:	6939      	ldr	r1, [r7, #16]
 80004e6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	2203      	movs	r2, #3
 80004f4:	409a      	lsls	r2, r3
 80004f6:	0013      	movs	r3, r2
 80004f8:	43da      	mvns	r2, r3
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2203      	movs	r2, #3
 8000506:	401a      	ands	r2, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	409a      	lsls	r2, r3
 800050e:	0013      	movs	r3, r2
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4313      	orrs	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d00b      	beq.n	800053c <HAL_GPIO_Init+0xdc>
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d007      	beq.n	800053c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000530:	2b11      	cmp	r3, #17
 8000532:	d003      	beq.n	800053c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b12      	cmp	r3, #18
 800053a:	d130      	bne.n	800059e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2203      	movs	r2, #3
 8000548:	409a      	lsls	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	43da      	mvns	r2, r3
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	409a      	lsls	r2, r3
 800055e:	0013      	movs	r3, r2
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	4313      	orrs	r3, r2
 8000564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000572:	2201      	movs	r2, #1
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	409a      	lsls	r2, r3
 8000578:	0013      	movs	r3, r2
 800057a:	43da      	mvns	r2, r3
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	4013      	ands	r3, r2
 8000580:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	091b      	lsrs	r3, r3, #4
 8000588:	2201      	movs	r2, #1
 800058a:	401a      	ands	r2, r3
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	409a      	lsls	r2, r3
 8000590:	0013      	movs	r3, r2
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	4313      	orrs	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2203      	movs	r2, #3
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0013      	movs	r3, r2
 80005ae:	43da      	mvns	r2, r3
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	4013      	ands	r3, r2
 80005b4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	409a      	lsls	r2, r3
 80005c0:	0013      	movs	r3, r2
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685a      	ldr	r2, [r3, #4]
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	055b      	lsls	r3, r3, #21
 80005d6:	4013      	ands	r3, r2
 80005d8:	d100      	bne.n	80005dc <HAL_GPIO_Init+0x17c>
 80005da:	e0a0      	b.n	800071e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005dc:	4b57      	ldr	r3, [pc, #348]	; (800073c <HAL_GPIO_Init+0x2dc>)
 80005de:	699a      	ldr	r2, [r3, #24]
 80005e0:	4b56      	ldr	r3, [pc, #344]	; (800073c <HAL_GPIO_Init+0x2dc>)
 80005e2:	2101      	movs	r1, #1
 80005e4:	430a      	orrs	r2, r1
 80005e6:	619a      	str	r2, [r3, #24]
 80005e8:	4b54      	ldr	r3, [pc, #336]	; (800073c <HAL_GPIO_Init+0x2dc>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	2201      	movs	r2, #1
 80005ee:	4013      	ands	r3, r2
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005f4:	4a52      	ldr	r2, [pc, #328]	; (8000740 <HAL_GPIO_Init+0x2e0>)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	3302      	adds	r3, #2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	589b      	ldr	r3, [r3, r2]
 8000600:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	2203      	movs	r2, #3
 8000606:	4013      	ands	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	220f      	movs	r2, #15
 800060c:	409a      	lsls	r2, r3
 800060e:	0013      	movs	r3, r2
 8000610:	43da      	mvns	r2, r3
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	4013      	ands	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	429a      	cmp	r2, r3
 8000620:	d019      	beq.n	8000656 <HAL_GPIO_Init+0x1f6>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a47      	ldr	r2, [pc, #284]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d013      	beq.n	8000652 <HAL_GPIO_Init+0x1f2>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a46      	ldr	r2, [pc, #280]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d00d      	beq.n	800064e <HAL_GPIO_Init+0x1ee>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a45      	ldr	r2, [pc, #276]	; (800074c <HAL_GPIO_Init+0x2ec>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d007      	beq.n	800064a <HAL_GPIO_Init+0x1ea>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a44      	ldr	r2, [pc, #272]	; (8000750 <HAL_GPIO_Init+0x2f0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d101      	bne.n	8000646 <HAL_GPIO_Init+0x1e6>
 8000642:	2304      	movs	r3, #4
 8000644:	e008      	b.n	8000658 <HAL_GPIO_Init+0x1f8>
 8000646:	2305      	movs	r3, #5
 8000648:	e006      	b.n	8000658 <HAL_GPIO_Init+0x1f8>
 800064a:	2303      	movs	r3, #3
 800064c:	e004      	b.n	8000658 <HAL_GPIO_Init+0x1f8>
 800064e:	2302      	movs	r3, #2
 8000650:	e002      	b.n	8000658 <HAL_GPIO_Init+0x1f8>
 8000652:	2301      	movs	r3, #1
 8000654:	e000      	b.n	8000658 <HAL_GPIO_Init+0x1f8>
 8000656:	2300      	movs	r3, #0
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	2103      	movs	r1, #3
 800065c:	400a      	ands	r2, r1
 800065e:	0092      	lsls	r2, r2, #2
 8000660:	4093      	lsls	r3, r2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	4313      	orrs	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000668:	4935      	ldr	r1, [pc, #212]	; (8000740 <HAL_GPIO_Init+0x2e0>)
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	089b      	lsrs	r3, r3, #2
 800066e:	3302      	adds	r3, #2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000676:	4b37      	ldr	r3, [pc, #220]	; (8000754 <HAL_GPIO_Init+0x2f4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	43da      	mvns	r2, r3
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	4013      	ands	r3, r2
 8000684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	025b      	lsls	r3, r3, #9
 800068e:	4013      	ands	r3, r2
 8000690:	d003      	beq.n	800069a <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4313      	orrs	r3, r2
 8000698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <HAL_GPIO_Init+0x2f4>)
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <HAL_GPIO_Init+0x2f4>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	43da      	mvns	r2, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	4013      	ands	r3, r2
 80006ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	029b      	lsls	r3, r3, #10
 80006b8:	4013      	ands	r3, r2
 80006ba:	d003      	beq.n	80006c4 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <HAL_GPIO_Init+0x2f4>)
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ca:	4b22      	ldr	r3, [pc, #136]	; (8000754 <HAL_GPIO_Init+0x2f4>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	43da      	mvns	r2, r3
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	4013      	ands	r3, r2
 80006d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	685a      	ldr	r2, [r3, #4]
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	035b      	lsls	r3, r3, #13
 80006e2:	4013      	ands	r3, r2
 80006e4:	d003      	beq.n	80006ee <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 80006e6:	693a      	ldr	r2, [r7, #16]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_GPIO_Init+0x2f4>)
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_GPIO_Init+0x2f4>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	43da      	mvns	r2, r3
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	4013      	ands	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	039b      	lsls	r3, r3, #14
 800070c:	4013      	ands	r3, r2
 800070e:	d003      	beq.n	8000718 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4313      	orrs	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_GPIO_Init+0x2f4>)
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	3301      	adds	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	40da      	lsrs	r2, r3
 800072c:	1e13      	subs	r3, r2, #0
 800072e:	d000      	beq.n	8000732 <HAL_GPIO_Init+0x2d2>
 8000730:	e6a2      	b.n	8000478 <HAL_GPIO_Init+0x18>
  } 
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b006      	add	sp, #24
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000
 8000740:	40010000 	.word	0x40010000
 8000744:	48000400 	.word	0x48000400
 8000748:	48000800 	.word	0x48000800
 800074c:	48000c00 	.word	0x48000c00
 8000750:	48001000 	.word	0x48001000
 8000754:	40010400 	.word	0x40010400

08000758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	0008      	movs	r0, r1
 8000762:	0011      	movs	r1, r2
 8000764:	1cbb      	adds	r3, r7, #2
 8000766:	1c02      	adds	r2, r0, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	1c7b      	adds	r3, r7, #1
 800076c:	1c0a      	adds	r2, r1, #0
 800076e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000770:	1c7b      	adds	r3, r7, #1
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d004      	beq.n	8000782 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000778:	1cbb      	adds	r3, r7, #2
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000780:	e003      	b.n	800078a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000782:	1cbb      	adds	r3, r7, #2
 8000784:	881a      	ldrh	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	1dbb      	adds	r3, r7, #6
 800079e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	1dba      	adds	r2, r7, #6
 80007a6:	8812      	ldrh	r2, [r2, #0]
 80007a8:	4013      	ands	r3, r2
 80007aa:	d008      	beq.n	80007be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80007ae:	1dba      	adds	r2, r7, #6
 80007b0:	8812      	ldrh	r2, [r2, #0]
 80007b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007b4:	1dbb      	adds	r3, r7, #6
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 fcf9 	bl	80021b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40010400 	.word	0x40010400

080007cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e082      	b.n	80008e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2241      	movs	r2, #65	; 0x41
 80007e2:	5c9b      	ldrb	r3, [r3, r2]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d107      	bne.n	80007fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2240      	movs	r2, #64	; 0x40
 80007ee:	2100      	movs	r1, #0
 80007f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fbf7 	bl	8001fe8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2241      	movs	r2, #65	; 0x41
 80007fe:	2124      	movs	r1, #36	; 0x24
 8000800:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2101      	movs	r1, #1
 800080e:	438a      	bics	r2, r1
 8000810:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4934      	ldr	r1, [pc, #208]	; (80008ec <HAL_I2C_Init+0x120>)
 800081c:	400a      	ands	r2, r1
 800081e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	689a      	ldr	r2, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4931      	ldr	r1, [pc, #196]	; (80008f0 <HAL_I2C_Init+0x124>)
 800082c:	400a      	ands	r2, r1
 800082e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d108      	bne.n	800084a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0209      	lsls	r1, r1, #8
 8000844:	430a      	orrs	r2, r1
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	e007      	b.n	800085a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2184      	movs	r1, #132	; 0x84
 8000854:	0209      	lsls	r1, r1, #8
 8000856:	430a      	orrs	r2, r1
 8000858:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d104      	bne.n	800086c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	491f      	ldr	r1, [pc, #124]	; (80008f4 <HAL_I2C_Init+0x128>)
 8000878:	430a      	orrs	r2, r1
 800087a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	68da      	ldr	r2, [r3, #12]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	491a      	ldr	r1, [pc, #104]	; (80008f0 <HAL_I2C_Init+0x124>)
 8000888:	400a      	ands	r2, r1
 800088a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	691a      	ldr	r2, [r3, #16]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	431a      	orrs	r2, r3
 8000896:	0011      	movs	r1, r2
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	021a      	lsls	r2, r3, #8
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	430a      	orrs	r2, r1
 80008a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	69d9      	ldr	r1, [r3, #28]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6a1a      	ldr	r2, [r3, #32]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2241      	movs	r2, #65	; 0x41
 80008d0:	2120      	movs	r1, #32
 80008d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2242      	movs	r2, #66	; 0x42
 80008de:	2100      	movs	r1, #0
 80008e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	f0ffffff 	.word	0xf0ffffff
 80008f0:	ffff7fff 	.word	0xffff7fff
 80008f4:	02008000 	.word	0x02008000

080008f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2241      	movs	r2, #65	; 0x41
 8000906:	5c9b      	ldrb	r3, [r3, r2]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b20      	cmp	r3, #32
 800090c:	d138      	bne.n	8000980 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2240      	movs	r2, #64	; 0x40
 8000912:	5c9b      	ldrb	r3, [r3, r2]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d101      	bne.n	800091c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000918:	2302      	movs	r3, #2
 800091a:	e032      	b.n	8000982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2240      	movs	r2, #64	; 0x40
 8000920:	2101      	movs	r1, #1
 8000922:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2241      	movs	r2, #65	; 0x41
 8000928:	2124      	movs	r1, #36	; 0x24
 800092a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2101      	movs	r1, #1
 8000938:	438a      	bics	r2, r1
 800093a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4911      	ldr	r1, [pc, #68]	; (800098c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000948:	400a      	ands	r2, r1
 800094a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6819      	ldr	r1, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	430a      	orrs	r2, r1
 800095a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2101      	movs	r1, #1
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2241      	movs	r2, #65	; 0x41
 8000970:	2120      	movs	r1, #32
 8000972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2240      	movs	r2, #64	; 0x40
 8000978:	2100      	movs	r1, #0
 800097a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	e000      	b.n	8000982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000980:	2302      	movs	r3, #2
  }
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	ffffefff 	.word	0xffffefff

08000990 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2241      	movs	r2, #65	; 0x41
 80009a2:	5c9b      	ldrb	r3, [r3, r2]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b20      	cmp	r3, #32
 80009a8:	d139      	bne.n	8000a1e <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	5c9b      	ldrb	r3, [r3, r2]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d101      	bne.n	80009b8 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80009b4:	2302      	movs	r3, #2
 80009b6:	e033      	b.n	8000a20 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2240      	movs	r2, #64	; 0x40
 80009bc:	2101      	movs	r1, #1
 80009be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2241      	movs	r2, #65	; 0x41
 80009c4:	2124      	movs	r1, #36	; 0x24
 80009c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2101      	movs	r1, #1
 80009d4:	438a      	bics	r2, r1
 80009d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2101      	movs	r1, #1
 8000a06:	430a      	orrs	r2, r1
 8000a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2241      	movs	r2, #65	; 0x41
 8000a0e:	2120      	movs	r1, #32
 8000a10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2240      	movs	r2, #64	; 0x40
 8000a16:	2100      	movs	r1, #0
 8000a18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8000a1e:	2302      	movs	r3, #2
  }
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b004      	add	sp, #16
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	fffff0ff 	.word	0xfffff0ff

08000a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4013      	ands	r3, r2
 8000a40:	d100      	bne.n	8000a44 <HAL_RCC_OscConfig+0x18>
 8000a42:	e08d      	b.n	8000b60 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a44:	4bc5      	ldr	r3, [pc, #788]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	220c      	movs	r2, #12
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d00e      	beq.n	8000a6e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a50:	4bc2      	ldr	r3, [pc, #776]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	220c      	movs	r2, #12
 8000a56:	4013      	ands	r3, r2
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d116      	bne.n	8000a8a <HAL_RCC_OscConfig+0x5e>
 8000a5c:	4bbf      	ldr	r3, [pc, #764]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	23c0      	movs	r3, #192	; 0xc0
 8000a62:	025b      	lsls	r3, r3, #9
 8000a64:	401a      	ands	r2, r3
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	025b      	lsls	r3, r3, #9
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d10d      	bne.n	8000a8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a6e:	4bbb      	ldr	r3, [pc, #748]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	029b      	lsls	r3, r3, #10
 8000a76:	4013      	ands	r3, r2
 8000a78:	d100      	bne.n	8000a7c <HAL_RCC_OscConfig+0x50>
 8000a7a:	e070      	b.n	8000b5e <HAL_RCC_OscConfig+0x132>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d000      	beq.n	8000a86 <HAL_RCC_OscConfig+0x5a>
 8000a84:	e06b      	b.n	8000b5e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e329      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d107      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x76>
 8000a92:	4bb2      	ldr	r3, [pc, #712]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4bb1      	ldr	r3, [pc, #708]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	0249      	lsls	r1, r1, #9
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	e02f      	b.n	8000b02 <HAL_RCC_OscConfig+0xd6>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10c      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x98>
 8000aaa:	4bac      	ldr	r3, [pc, #688]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4bab      	ldr	r3, [pc, #684]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ab0:	49ab      	ldr	r1, [pc, #684]	; (8000d60 <HAL_RCC_OscConfig+0x334>)
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	4ba9      	ldr	r3, [pc, #676]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	4ba8      	ldr	r3, [pc, #672]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000abc:	49a9      	ldr	r1, [pc, #676]	; (8000d64 <HAL_RCC_OscConfig+0x338>)
 8000abe:	400a      	ands	r2, r1
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	e01e      	b.n	8000b02 <HAL_RCC_OscConfig+0xd6>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	d10e      	bne.n	8000aea <HAL_RCC_OscConfig+0xbe>
 8000acc:	4ba3      	ldr	r3, [pc, #652]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4ba2      	ldr	r3, [pc, #648]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	02c9      	lsls	r1, r1, #11
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	4ba0      	ldr	r3, [pc, #640]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4b9f      	ldr	r3, [pc, #636]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	0249      	lsls	r1, r1, #9
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e00b      	b.n	8000b02 <HAL_RCC_OscConfig+0xd6>
 8000aea:	4b9c      	ldr	r3, [pc, #624]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4b9b      	ldr	r3, [pc, #620]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000af0:	499b      	ldr	r1, [pc, #620]	; (8000d60 <HAL_RCC_OscConfig+0x334>)
 8000af2:	400a      	ands	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	4b99      	ldr	r3, [pc, #612]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b98      	ldr	r3, [pc, #608]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000afc:	4999      	ldr	r1, [pc, #612]	; (8000d64 <HAL_RCC_OscConfig+0x338>)
 8000afe:	400a      	ands	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d014      	beq.n	8000b34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b0a:	f7ff fbc5 	bl	8000298 <HAL_GetTick>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b12:	e008      	b.n	8000b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b14:	f7ff fbc0 	bl	8000298 <HAL_GetTick>
 8000b18:	0002      	movs	r2, r0
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b64      	cmp	r3, #100	; 0x64
 8000b20:	d901      	bls.n	8000b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b22:	2303      	movs	r3, #3
 8000b24:	e2db      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b26:	4b8d      	ldr	r3, [pc, #564]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	029b      	lsls	r3, r3, #10
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d0f0      	beq.n	8000b14 <HAL_RCC_OscConfig+0xe8>
 8000b32:	e015      	b.n	8000b60 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b34:	f7ff fbb0 	bl	8000298 <HAL_GetTick>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b3c:	e008      	b.n	8000b50 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fbab 	bl	8000298 <HAL_GetTick>
 8000b42:	0002      	movs	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	2b64      	cmp	r3, #100	; 0x64
 8000b4a:	d901      	bls.n	8000b50 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e2c6      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b50:	4b82      	ldr	r3, [pc, #520]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	029b      	lsls	r3, r3, #10
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d1f0      	bne.n	8000b3e <HAL_RCC_OscConfig+0x112>
 8000b5c:	e000      	b.n	8000b60 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2202      	movs	r2, #2
 8000b66:	4013      	ands	r3, r2
 8000b68:	d100      	bne.n	8000b6c <HAL_RCC_OscConfig+0x140>
 8000b6a:	e06c      	b.n	8000c46 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b6c:	4b7b      	ldr	r3, [pc, #492]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	220c      	movs	r2, #12
 8000b72:	4013      	ands	r3, r2
 8000b74:	d00e      	beq.n	8000b94 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b76:	4b79      	ldr	r3, [pc, #484]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d11f      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x196>
 8000b82:	4b76      	ldr	r3, [pc, #472]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	23c0      	movs	r3, #192	; 0xc0
 8000b88:	025b      	lsls	r3, r3, #9
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d116      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b94:	4b71      	ldr	r3, [pc, #452]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2202      	movs	r2, #2
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d005      	beq.n	8000baa <HAL_RCC_OscConfig+0x17e>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d001      	beq.n	8000baa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e299      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000baa:	4b6c      	ldr	r3, [pc, #432]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	22f8      	movs	r2, #248	; 0xf8
 8000bb0:	4393      	bics	r3, r2
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	00da      	lsls	r2, r3, #3
 8000bba:	4b68      	ldr	r3, [pc, #416]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc0:	e041      	b.n	8000c46 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d024      	beq.n	8000c14 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bca:	4b64      	ldr	r3, [pc, #400]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd6:	f7ff fb5f 	bl	8000298 <HAL_GetTick>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bde:	e008      	b.n	8000bf2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000be0:	f7ff fb5a 	bl	8000298 <HAL_GetTick>
 8000be4:	0002      	movs	r2, r0
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d901      	bls.n	8000bf2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e275      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf2:	4b5a      	ldr	r3, [pc, #360]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	d0f1      	beq.n	8000be0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bfc:	4b57      	ldr	r3, [pc, #348]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	22f8      	movs	r2, #248	; 0xf8
 8000c02:	4393      	bics	r3, r2
 8000c04:	0019      	movs	r1, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	00da      	lsls	r2, r3, #3
 8000c0c:	4b53      	ldr	r3, [pc, #332]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e018      	b.n	8000c46 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c14:	4b51      	ldr	r3, [pc, #324]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b50      	ldr	r3, [pc, #320]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	438a      	bics	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c20:	f7ff fb3a 	bl	8000298 <HAL_GetTick>
 8000c24:	0003      	movs	r3, r0
 8000c26:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c28:	e008      	b.n	8000c3c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c2a:	f7ff fb35 	bl	8000298 <HAL_GetTick>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d901      	bls.n	8000c3c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e250      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3c:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2202      	movs	r2, #2
 8000c42:	4013      	ands	r3, r2
 8000c44:	d1f1      	bne.n	8000c2a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	d036      	beq.n	8000cbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d019      	beq.n	8000c8c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c58:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c5e:	2101      	movs	r1, #1
 8000c60:	430a      	orrs	r2, r1
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c64:	f7ff fb18 	bl	8000298 <HAL_GetTick>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c6c:	e008      	b.n	8000c80 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c6e:	f7ff fb13 	bl	8000298 <HAL_GetTick>
 8000c72:	0002      	movs	r2, r0
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d901      	bls.n	8000c80 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e22e      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c80:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	2202      	movs	r2, #2
 8000c86:	4013      	ands	r3, r2
 8000c88:	d0f1      	beq.n	8000c6e <HAL_RCC_OscConfig+0x242>
 8000c8a:	e018      	b.n	8000cbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c8c:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c90:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c92:	2101      	movs	r1, #1
 8000c94:	438a      	bics	r2, r1
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c98:	f7ff fafe 	bl	8000298 <HAL_GetTick>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ca0:	e008      	b.n	8000cb4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ca2:	f7ff faf9 	bl	8000298 <HAL_GetTick>
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d901      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e214      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cb4:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb8:	2202      	movs	r2, #2
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d1f1      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d100      	bne.n	8000cca <HAL_RCC_OscConfig+0x29e>
 8000cc8:	e0b6      	b.n	8000e38 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cca:	2317      	movs	r3, #23
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000cd4:	69da      	ldr	r2, [r3, #28]
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	055b      	lsls	r3, r3, #21
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d111      	bne.n	8000d02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ce0:	69da      	ldr	r2, [r3, #28]
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	0549      	lsls	r1, r1, #21
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	61da      	str	r2, [r3, #28]
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000cee:	69da      	ldr	r2, [r3, #28]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	055b      	lsls	r3, r3, #21
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000cfa:	2317      	movs	r3, #23
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_RCC_OscConfig+0x33c>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	d11a      	bne.n	8000d44 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_RCC_OscConfig+0x33c>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_RCC_OscConfig+0x33c>)
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	0049      	lsls	r1, r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d1c:	f7ff fabc 	bl	8000298 <HAL_GetTick>
 8000d20:	0003      	movs	r3, r0
 8000d22:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d24:	e008      	b.n	8000d38 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d26:	f7ff fab7 	bl	8000298 <HAL_GetTick>
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b64      	cmp	r3, #100	; 0x64
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e1d2      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_RCC_OscConfig+0x33c>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4013      	ands	r3, r2
 8000d42:	d0f0      	beq.n	8000d26 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d10f      	bne.n	8000d6c <HAL_RCC_OscConfig+0x340>
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000d4e:	6a1a      	ldr	r2, [r3, #32]
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	430a      	orrs	r2, r1
 8000d56:	621a      	str	r2, [r3, #32]
 8000d58:	e036      	b.n	8000dc8 <HAL_RCC_OscConfig+0x39c>
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	fffeffff 	.word	0xfffeffff
 8000d64:	fffbffff 	.word	0xfffbffff
 8000d68:	40007000 	.word	0x40007000
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10c      	bne.n	8000d8e <HAL_RCC_OscConfig+0x362>
 8000d74:	4bca      	ldr	r3, [pc, #808]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000d76:	6a1a      	ldr	r2, [r3, #32]
 8000d78:	4bc9      	ldr	r3, [pc, #804]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	438a      	bics	r2, r1
 8000d7e:	621a      	str	r2, [r3, #32]
 8000d80:	4bc7      	ldr	r3, [pc, #796]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000d82:	6a1a      	ldr	r2, [r3, #32]
 8000d84:	4bc6      	ldr	r3, [pc, #792]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000d86:	2104      	movs	r1, #4
 8000d88:	438a      	bics	r2, r1
 8000d8a:	621a      	str	r2, [r3, #32]
 8000d8c:	e01c      	b.n	8000dc8 <HAL_RCC_OscConfig+0x39c>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	d10c      	bne.n	8000db0 <HAL_RCC_OscConfig+0x384>
 8000d96:	4bc2      	ldr	r3, [pc, #776]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000d98:	6a1a      	ldr	r2, [r3, #32]
 8000d9a:	4bc1      	ldr	r3, [pc, #772]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	621a      	str	r2, [r3, #32]
 8000da2:	4bbf      	ldr	r3, [pc, #764]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000da4:	6a1a      	ldr	r2, [r3, #32]
 8000da6:	4bbe      	ldr	r3, [pc, #760]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000da8:	2101      	movs	r1, #1
 8000daa:	430a      	orrs	r2, r1
 8000dac:	621a      	str	r2, [r3, #32]
 8000dae:	e00b      	b.n	8000dc8 <HAL_RCC_OscConfig+0x39c>
 8000db0:	4bbb      	ldr	r3, [pc, #748]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000db2:	6a1a      	ldr	r2, [r3, #32]
 8000db4:	4bba      	ldr	r3, [pc, #744]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	438a      	bics	r2, r1
 8000dba:	621a      	str	r2, [r3, #32]
 8000dbc:	4bb8      	ldr	r3, [pc, #736]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000dbe:	6a1a      	ldr	r2, [r3, #32]
 8000dc0:	4bb7      	ldr	r3, [pc, #732]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	438a      	bics	r2, r1
 8000dc6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d014      	beq.n	8000dfa <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd0:	f7ff fa62 	bl	8000298 <HAL_GetTick>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd8:	e009      	b.n	8000dee <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dda:	f7ff fa5d 	bl	8000298 <HAL_GetTick>
 8000dde:	0002      	movs	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	4aaf      	ldr	r2, [pc, #700]	; (80010a4 <HAL_RCC_OscConfig+0x678>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e177      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dee:	4bac      	ldr	r3, [pc, #688]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	2202      	movs	r2, #2
 8000df4:	4013      	ands	r3, r2
 8000df6:	d0f0      	beq.n	8000dda <HAL_RCC_OscConfig+0x3ae>
 8000df8:	e013      	b.n	8000e22 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfa:	f7ff fa4d 	bl	8000298 <HAL_GetTick>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e02:	e009      	b.n	8000e18 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e04:	f7ff fa48 	bl	8000298 <HAL_GetTick>
 8000e08:	0002      	movs	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	4aa5      	ldr	r2, [pc, #660]	; (80010a4 <HAL_RCC_OscConfig+0x678>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e162      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e18:	4ba1      	ldr	r3, [pc, #644]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000e1a:	6a1b      	ldr	r3, [r3, #32]
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d1f0      	bne.n	8000e04 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e22:	2317      	movs	r3, #23
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d105      	bne.n	8000e38 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e2c:	4b9c      	ldr	r3, [pc, #624]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000e2e:	69da      	ldr	r2, [r3, #28]
 8000e30:	4b9b      	ldr	r3, [pc, #620]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000e32:	499d      	ldr	r1, [pc, #628]	; (80010a8 <HAL_RCC_OscConfig+0x67c>)
 8000e34:	400a      	ands	r2, r1
 8000e36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2210      	movs	r2, #16
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d063      	beq.n	8000f0a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d12a      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e4a:	4b95      	ldr	r3, [pc, #596]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4e:	4b94      	ldr	r3, [pc, #592]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000e50:	2104      	movs	r1, #4
 8000e52:	430a      	orrs	r2, r1
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000e56:	4b92      	ldr	r3, [pc, #584]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e5a:	4b91      	ldr	r3, [pc, #580]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fa19 	bl	8000298 <HAL_GetTick>
 8000e66:	0003      	movs	r3, r0
 8000e68:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e6c:	f7ff fa14 	bl	8000298 <HAL_GetTick>
 8000e70:	0002      	movs	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e12f      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e7e:	4b88      	ldr	r3, [pc, #544]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e82:	2202      	movs	r2, #2
 8000e84:	4013      	ands	r3, r2
 8000e86:	d0f1      	beq.n	8000e6c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e88:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8c:	22f8      	movs	r2, #248	; 0xf8
 8000e8e:	4393      	bics	r3, r2
 8000e90:	0019      	movs	r1, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	00da      	lsls	r2, r3, #3
 8000e98:	4b81      	ldr	r3, [pc, #516]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e9e:	e034      	b.n	8000f0a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	3305      	adds	r3, #5
 8000ea6:	d111      	bne.n	8000ecc <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ea8:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eac:	4b7c      	ldr	r3, [pc, #496]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000eae:	2104      	movs	r1, #4
 8000eb0:	438a      	bics	r2, r1
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000eb4:	4b7a      	ldr	r3, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb8:	22f8      	movs	r2, #248	; 0xf8
 8000eba:	4393      	bics	r3, r2
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	00da      	lsls	r2, r3, #3
 8000ec4:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eca:	e01e      	b.n	8000f0a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ecc:	4b74      	ldr	r3, [pc, #464]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed0:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000ed8:	4b71      	ldr	r3, [pc, #452]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000edc:	4b70      	ldr	r3, [pc, #448]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000ede:	2101      	movs	r1, #1
 8000ee0:	438a      	bics	r2, r1
 8000ee2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff f9d8 	bl	8000298 <HAL_GetTick>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000eee:	f7ff f9d3 	bl	8000298 <HAL_GetTick>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e0ee      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f00:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f04:	2202      	movs	r2, #2
 8000f06:	4013      	ands	r3, r2
 8000f08:	d1f1      	bne.n	8000eee <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	4013      	ands	r3, r2
 8000f12:	d05c      	beq.n	8000fce <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000f14:	4b62      	ldr	r3, [pc, #392]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	220c      	movs	r2, #12
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b0c      	cmp	r3, #12
 8000f1e:	d00e      	beq.n	8000f3e <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000f20:	4b5f      	ldr	r3, [pc, #380]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	220c      	movs	r2, #12
 8000f26:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d114      	bne.n	8000f56 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000f2c:	4b5c      	ldr	r3, [pc, #368]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	23c0      	movs	r3, #192	; 0xc0
 8000f32:	025b      	lsls	r3, r3, #9
 8000f34:	401a      	ands	r2, r3
 8000f36:	23c0      	movs	r3, #192	; 0xc0
 8000f38:	025b      	lsls	r3, r3, #9
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d10b      	bne.n	8000f56 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000f3e:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	4013      	ands	r3, r2
 8000f48:	d040      	beq.n	8000fcc <HAL_RCC_OscConfig+0x5a0>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d03c      	beq.n	8000fcc <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0c3      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d01b      	beq.n	8000f96 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000f5e:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f62:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000f64:	2180      	movs	r1, #128	; 0x80
 8000f66:	0249      	lsls	r1, r1, #9
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff f994 	bl	8000298 <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f76:	f7ff f98f 	bl	8000298 <HAL_GetTick>
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e0aa      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f88:	4b45      	ldr	r3, [pc, #276]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	025b      	lsls	r3, r3, #9
 8000f90:	4013      	ands	r3, r2
 8000f92:	d0f0      	beq.n	8000f76 <HAL_RCC_OscConfig+0x54a>
 8000f94:	e01b      	b.n	8000fce <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000f96:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9a:	4b41      	ldr	r3, [pc, #260]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000f9c:	4943      	ldr	r1, [pc, #268]	; (80010ac <HAL_RCC_OscConfig+0x680>)
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff f979 	bl	8000298 <HAL_GetTick>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000fac:	f7ff f974 	bl	8000298 <HAL_GetTick>
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e08f      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000fbe:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x580>
 8000fca:	e000      	b.n	8000fce <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000fcc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d100      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x5ac>
 8000fd6:	e081      	b.n	80010dc <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fd8:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	220c      	movs	r2, #12
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d100      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x5ba>
 8000fe4:	e078      	b.n	80010d8 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d14c      	bne.n	8001088 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8000ff4:	492e      	ldr	r1, [pc, #184]	; (80010b0 <HAL_RCC_OscConfig+0x684>)
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff f94d 	bl	8000298 <HAL_GetTick>
 8000ffe:	0003      	movs	r3, r0
 8001000:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001004:	f7ff f948 	bl	8000298 <HAL_GetTick>
 8001008:	0002      	movs	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e063      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	049b      	lsls	r3, r3, #18
 800101e:	4013      	ands	r3, r2
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	220f      	movs	r2, #15
 8001028:	4393      	bics	r3, r2
 800102a:	0019      	movs	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8001032:	430a      	orrs	r2, r1
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <HAL_RCC_OscConfig+0x688>)
 800103c:	4013      	ands	r3, r2
 800103e:	0019      	movs	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001048:	431a      	orrs	r2, r3
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 800104c:	430a      	orrs	r2, r1
 800104e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	0449      	lsls	r1, r1, #17
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105e:	f7ff f91b 	bl	8000298 <HAL_GetTick>
 8001062:	0003      	movs	r3, r0
 8001064:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001068:	f7ff f916 	bl	8000298 <HAL_GetTick>
 800106c:	0002      	movs	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e031      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	049b      	lsls	r3, r3, #18
 8001082:	4013      	ands	r3, r2
 8001084:	d0f0      	beq.n	8001068 <HAL_RCC_OscConfig+0x63c>
 8001086:	e029      	b.n	80010dc <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <HAL_RCC_OscConfig+0x674>)
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <HAL_RCC_OscConfig+0x684>)
 8001090:	400a      	ands	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff f900 	bl	8000298 <HAL_GetTick>
 8001098:	0003      	movs	r3, r0
 800109a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x69e>
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40021000 	.word	0x40021000
 80010a4:	00001388 	.word	0x00001388
 80010a8:	efffffff 	.word	0xefffffff
 80010ac:	fffeffff 	.word	0xfffeffff
 80010b0:	feffffff 	.word	0xfeffffff
 80010b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b8:	f7ff f8ee 	bl	8000298 <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e009      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_RCC_OscConfig+0x6bc>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	049b      	lsls	r3, r3, #18
 80010d2:	4013      	ands	r3, r2
 80010d4:	d1f0      	bne.n	80010b8 <HAL_RCC_OscConfig+0x68c>
 80010d6:	e001      	b.n	80010dc <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b006      	add	sp, #24
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010fa:	4b7b      	ldr	r3, [pc, #492]	; (80012e8 <HAL_RCC_ClockConfig+0x1fc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2201      	movs	r2, #1
 8001100:	4013      	ands	r3, r2
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d911      	bls.n	800112c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001108:	4b77      	ldr	r3, [pc, #476]	; (80012e8 <HAL_RCC_ClockConfig+0x1fc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2201      	movs	r2, #1
 800110e:	4393      	bics	r3, r2
 8001110:	0019      	movs	r1, r3
 8001112:	4b75      	ldr	r3, [pc, #468]	; (80012e8 <HAL_RCC_ClockConfig+0x1fc>)
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800111a:	4b73      	ldr	r3, [pc, #460]	; (80012e8 <HAL_RCC_ClockConfig+0x1fc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2201      	movs	r2, #1
 8001120:	4013      	ands	r3, r2
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d001      	beq.n	800112c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0d8      	b.n	80012de <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2202      	movs	r2, #2
 8001132:	4013      	ands	r3, r2
 8001134:	d009      	beq.n	800114a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001136:	4b6d      	ldr	r3, [pc, #436]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	22f0      	movs	r2, #240	; 0xf0
 800113c:	4393      	bics	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	4b69      	ldr	r3, [pc, #420]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 8001146:	430a      	orrs	r2, r1
 8001148:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2201      	movs	r2, #1
 8001150:	4013      	ands	r3, r2
 8001152:	d100      	bne.n	8001156 <HAL_RCC_ClockConfig+0x6a>
 8001154:	e089      	b.n	800126a <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d107      	bne.n	800116e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b63      	ldr	r3, [pc, #396]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	029b      	lsls	r3, r3, #10
 8001166:	4013      	ands	r3, r2
 8001168:	d120      	bne.n	80011ac <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e0b7      	b.n	80012de <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	049b      	lsls	r3, r3, #18
 800117e:	4013      	ands	r3, r2
 8001180:	d114      	bne.n	80011ac <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0ab      	b.n	80012de <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d107      	bne.n	800119e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800118e:	4b57      	ldr	r3, [pc, #348]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 8001190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	025b      	lsls	r3, r3, #9
 8001196:	4013      	ands	r3, r2
 8001198:	d108      	bne.n	80011ac <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e09f      	b.n	80012de <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119e:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2202      	movs	r2, #2
 80011a4:	4013      	ands	r3, r2
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e098      	b.n	80012de <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ac:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2203      	movs	r2, #3
 80011b2:	4393      	bics	r3, r2
 80011b4:	0019      	movs	r1, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 80011bc:	430a      	orrs	r2, r1
 80011be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c0:	f7ff f86a 	bl	8000298 <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d111      	bne.n	80011f4 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d0:	e009      	b.n	80011e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d2:	f7ff f861 	bl	8000298 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	4a44      	ldr	r2, [pc, #272]	; (80012f0 <HAL_RCC_ClockConfig+0x204>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e07b      	b.n	80012de <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011e6:	4b41      	ldr	r3, [pc, #260]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	220c      	movs	r2, #12
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d1ef      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xe6>
 80011f2:	e03a      	b.n	800126a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d111      	bne.n	8001220 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011fc:	e009      	b.n	8001212 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fe:	f7ff f84b 	bl	8000298 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	4a39      	ldr	r2, [pc, #228]	; (80012f0 <HAL_RCC_ClockConfig+0x204>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e065      	b.n	80012de <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	220c      	movs	r2, #12
 8001218:	4013      	ands	r3, r2
 800121a:	2b08      	cmp	r3, #8
 800121c:	d1ef      	bne.n	80011fe <HAL_RCC_ClockConfig+0x112>
 800121e:	e024      	b.n	800126a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d11b      	bne.n	8001260 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001228:	e009      	b.n	800123e <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800122a:	f7ff f835 	bl	8000298 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <HAL_RCC_ClockConfig+0x204>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e04f      	b.n	80012de <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	220c      	movs	r2, #12
 8001244:	4013      	ands	r3, r2
 8001246:	2b0c      	cmp	r3, #12
 8001248:	d1ef      	bne.n	800122a <HAL_RCC_ClockConfig+0x13e>
 800124a:	e00e      	b.n	800126a <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124c:	f7ff f824 	bl	8000298 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <HAL_RCC_ClockConfig+0x204>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e03e      	b.n	80012de <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	220c      	movs	r2, #12
 8001266:	4013      	ands	r3, r2
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <HAL_RCC_ClockConfig+0x1fc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2201      	movs	r2, #1
 8001270:	4013      	ands	r3, r2
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d211      	bcs.n	800129c <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_RCC_ClockConfig+0x1fc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	4393      	bics	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_RCC_ClockConfig+0x1fc>)
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_RCC_ClockConfig+0x1fc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2201      	movs	r2, #1
 8001290:	4013      	ands	r3, r2
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e020      	b.n	80012de <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2204      	movs	r2, #4
 80012a2:	4013      	ands	r3, r2
 80012a4:	d009      	beq.n	80012ba <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_RCC_ClockConfig+0x208>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 80012b6:	430a      	orrs	r2, r1
 80012b8:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012ba:	f000 f821 	bl	8001300 <HAL_RCC_GetSysClockFreq>
 80012be:	0001      	movs	r1, r0
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	220f      	movs	r2, #15
 80012c8:	4013      	ands	r3, r2
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_RCC_ClockConfig+0x20c>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	000a      	movs	r2, r1
 80012d0:	40da      	lsrs	r2, r3
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_RCC_ClockConfig+0x210>)
 80012d4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7fe ffb6 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b004      	add	sp, #16
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	40022000 	.word	0x40022000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	00001388 	.word	0x00001388
 80012f4:	fffff8ff 	.word	0xfffff8ff
 80012f8:	08002f18 	.word	0x08002f18
 80012fc:	20000000 	.word	0x20000000

08001300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b08f      	sub	sp, #60	; 0x3c
 8001304:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001306:	2314      	movs	r3, #20
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	4a37      	ldr	r2, [pc, #220]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xe8>)
 800130c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800130e:	c313      	stmia	r3!, {r0, r1, r4}
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4a35      	ldr	r2, [pc, #212]	; (80013ec <HAL_RCC_GetSysClockFreq+0xec>)
 8001318:	ca13      	ldmia	r2!, {r0, r1, r4}
 800131a:	c313      	stmia	r3!, {r0, r1, r4}
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001334:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133c:	220c      	movs	r2, #12
 800133e:	4013      	ands	r3, r2
 8001340:	2b08      	cmp	r3, #8
 8001342:	d006      	beq.n	8001352 <HAL_RCC_GetSysClockFreq+0x52>
 8001344:	2b0c      	cmp	r3, #12
 8001346:	d043      	beq.n	80013d0 <HAL_RCC_GetSysClockFreq+0xd0>
 8001348:	2b04      	cmp	r3, #4
 800134a:	d144      	bne.n	80013d6 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001350:	e044      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	220f      	movs	r2, #15
 8001358:	4013      	ands	r3, r2
 800135a:	2214      	movs	r2, #20
 800135c:	18ba      	adds	r2, r7, r2
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	220f      	movs	r2, #15
 8001368:	4013      	ands	r3, r2
 800136a:	1d3a      	adds	r2, r7, #4
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001372:	23c0      	movs	r3, #192	; 0xc0
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	401a      	ands	r2, r3
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	025b      	lsls	r3, r3, #9
 800137c:	429a      	cmp	r2, r3
 800137e:	d109      	bne.n	8001394 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001382:	481c      	ldr	r0, [pc, #112]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001384:	f7fe fec0 	bl	8000108 <__udivsi3>
 8001388:	0003      	movs	r3, r0
 800138a:	001a      	movs	r2, r3
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	4353      	muls	r3, r2
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
 8001392:	e01a      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001396:	23c0      	movs	r3, #192	; 0xc0
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	401a      	ands	r2, r3
 800139c:	23c0      	movs	r3, #192	; 0xc0
 800139e:	025b      	lsls	r3, r3, #9
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d109      	bne.n	80013b8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80013a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013a8:	f7fe feae 	bl	8000108 <__udivsi3>
 80013ac:	0003      	movs	r3, r0
 80013ae:	001a      	movs	r2, r3
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	4353      	muls	r3, r2
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
 80013b6:	e008      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80013b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ba:	480e      	ldr	r0, [pc, #56]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80013bc:	f7fe fea4 	bl	8000108 <__udivsi3>
 80013c0:	0003      	movs	r3, r0
 80013c2:	001a      	movs	r2, r3
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	4353      	muls	r3, r2
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80013ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013ce:	e005      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013d4:	e002      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80013dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b00f      	add	sp, #60	; 0x3c
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	08002ee8 	.word	0x08002ee8
 80013ec:	08002ef8 	.word	0x08002ef8
 80013f0:	40021000 	.word	0x40021000
 80013f4:	007a1200 	.word	0x007a1200
 80013f8:	02dc6c00 	.word	0x02dc6c00

080013fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <HAL_RCC_GetHCLKFreq+0x10>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	20000000 	.word	0x20000000

08001410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001414:	f7ff fff2 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 8001418:	0001      	movs	r1, r0
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_RCC_GetPCLK1Freq+0x24>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	2207      	movs	r2, #7
 8001422:	4013      	ands	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	40d9      	lsrs	r1, r3
 800142a:	000b      	movs	r3, r1
}    
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	40021000 	.word	0x40021000
 8001438:	08002f28 	.word	0x08002f28

0800143c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	4013      	ands	r3, r2
 8001456:	d100      	bne.n	800145a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001458:	e08f      	b.n	800157a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800145a:	2317      	movs	r3, #23
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001464:	69da      	ldr	r2, [r3, #28]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	055b      	lsls	r3, r3, #21
 800146a:	4013      	ands	r3, r2
 800146c:	d111      	bne.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b6c      	ldr	r3, [pc, #432]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001470:	69da      	ldr	r2, [r3, #28]
 8001472:	4b6b      	ldr	r3, [pc, #428]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001474:	2180      	movs	r1, #128	; 0x80
 8001476:	0549      	lsls	r1, r1, #21
 8001478:	430a      	orrs	r2, r1
 800147a:	61da      	str	r2, [r3, #28]
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800147e:	69da      	ldr	r2, [r3, #28]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	055b      	lsls	r3, r3, #21
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148a:	2317      	movs	r3, #23
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001492:	4b64      	ldr	r3, [pc, #400]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4013      	ands	r3, r2
 800149c:	d11a      	bne.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149e:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b60      	ldr	r3, [pc, #384]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	0049      	lsls	r1, r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ac:	f7fe fef4 	bl	8000298 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e008      	b.n	80014c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b6:	f7fe feef 	bl	8000298 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b64      	cmp	r3, #100	; 0x64
 80014c2:	d901      	bls.n	80014c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0a6      	b.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4b56      	ldr	r3, [pc, #344]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4013      	ands	r3, r2
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80014d6:	6a1a      	ldr	r2, [r3, #32]
 80014d8:	23c0      	movs	r3, #192	; 0xc0
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d034      	beq.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	23c0      	movs	r3, #192	; 0xc0
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4013      	ands	r3, r2
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d02c      	beq.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	4b46      	ldr	r3, [pc, #280]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0249      	lsls	r1, r1, #9
 800150a:	430a      	orrs	r2, r1
 800150c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800150e:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001510:	6a1a      	ldr	r2, [r3, #32]
 8001512:	4b43      	ldr	r3, [pc, #268]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001514:	4945      	ldr	r1, [pc, #276]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001516:	400a      	ands	r2, r1
 8001518:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7fe feb6 	bl	8000298 <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001530:	e009      	b.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7fe feb1 	bl	8000298 <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	4a3c      	ldr	r2, [pc, #240]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e067      	b.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d0f0      	beq.n	8001532 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001550:	4b33      	ldr	r3, [pc, #204]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a34      	ldr	r2, [pc, #208]	; (8001628 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001556:	4013      	ands	r3, r2
 8001558:	0019      	movs	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001560:	430a      	orrs	r2, r1
 8001562:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001564:	2317      	movs	r3, #23
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d105      	bne.n	800157a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156e:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001570:	69da      	ldr	r2, [r3, #28]
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001574:	492f      	ldr	r1, [pc, #188]	; (8001634 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001576:	400a      	ands	r2, r1
 8001578:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2201      	movs	r2, #1
 8001580:	4013      	ands	r3, r2
 8001582:	d009      	beq.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	2203      	movs	r2, #3
 800158a:	4393      	bics	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001594:	430a      	orrs	r2, r1
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d009      	beq.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	0019      	movs	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80015b2:	430a      	orrs	r2, r1
 80015b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2220      	movs	r2, #32
 80015bc:	4013      	ands	r3, r2
 80015be:	d009      	beq.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	2210      	movs	r2, #16
 80015c6:	4393      	bics	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	d009      	beq.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	4393      	bics	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699a      	ldr	r2, [r3, #24]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4013      	ands	r3, r2
 80015fe:	d009      	beq.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	4393      	bics	r3, r2
 8001608:	0019      	movs	r1, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001610:	430a      	orrs	r2, r1
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b006      	add	sp, #24
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	40021000 	.word	0x40021000
 8001624:	40007000 	.word	0x40007000
 8001628:	fffffcff 	.word	0xfffffcff
 800162c:	fffeffff 	.word	0xfffeffff
 8001630:	00001388 	.word	0x00001388
 8001634:	efffffff 	.word	0xefffffff
 8001638:	fffcffff 	.word	0xfffcffff

0800163c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e047      	b.n	80016de <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2269      	movs	r2, #105	; 0x69
 8001652:	5c9b      	ldrb	r3, [r3, r2]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d107      	bne.n	800166a <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2268      	movs	r2, #104	; 0x68
 800165e:	2100      	movs	r1, #0
 8001660:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	0018      	movs	r0, r3
 8001666:	f000 fee3 	bl	8002430 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2269      	movs	r2, #105	; 0x69
 800166e:	2124      	movs	r1, #36	; 0x24
 8001670:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	438a      	bics	r2, r1
 8001680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	0018      	movs	r0, r3
 8001686:	f000 f8d5 	bl	8001834 <UART_SetConfig>
 800168a:	0003      	movs	r3, r0
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e024      	b.n	80016de <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	0018      	movs	r0, r3
 80016a0:	f000 fa84 	bl	8001bac <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	490e      	ldr	r1, [pc, #56]	; (80016e8 <HAL_UART_Init+0xac>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	212a      	movs	r1, #42	; 0x2a
 80016c0:	438a      	bics	r2, r1
 80016c2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	0018      	movs	r0, r3
 80016d8:	f000 fb1c 	bl	8001d14 <UART_CheckIdleState>
 80016dc:	0003      	movs	r3, r0
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	ffffb7ff 	.word	0xffffb7ff

080016ec <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	1dbb      	adds	r3, r7, #6
 80016fa:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2269      	movs	r2, #105	; 0x69
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b20      	cmp	r3, #32
 800170a:	d000      	beq.n	800170e <HAL_UART_Transmit+0x22>
 800170c:	e08c      	b.n	8001828 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_UART_Transmit+0x30>
 8001714:	1dbb      	adds	r3, r7, #6
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e084      	b.n	800182a <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	015b      	lsls	r3, r3, #5
 8001728:	429a      	cmp	r2, r3
 800172a:	d109      	bne.n	8001740 <HAL_UART_Transmit+0x54>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	d001      	beq.n	8001740 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e074      	b.n	800182a <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2268      	movs	r2, #104	; 0x68
 8001744:	5c9b      	ldrb	r3, [r3, r2]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_UART_Transmit+0x62>
 800174a:	2302      	movs	r3, #2
 800174c:	e06d      	b.n	800182a <HAL_UART_Transmit+0x13e>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2268      	movs	r2, #104	; 0x68
 8001752:	2101      	movs	r1, #1
 8001754:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2269      	movs	r2, #105	; 0x69
 8001760:	2121      	movs	r1, #33	; 0x21
 8001762:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001764:	f7fe fd98 	bl	8000298 <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1dba      	adds	r2, r7, #6
 8001770:	2150      	movs	r1, #80	; 0x50
 8001772:	8812      	ldrh	r2, [r2, #0]
 8001774:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1dba      	adds	r2, r7, #6
 800177a:	2152      	movs	r1, #82	; 0x52
 800177c:	8812      	ldrh	r2, [r2, #0]
 800177e:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001780:	e035      	b.n	80017ee <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2252      	movs	r2, #82	; 0x52
 8001786:	5a9b      	ldrh	r3, [r3, r2]
 8001788:	b29b      	uxth	r3, r3
 800178a:	3b01      	subs	r3, #1
 800178c:	b299      	uxth	r1, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2252      	movs	r2, #82	; 0x52
 8001792:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	0013      	movs	r3, r2
 800179e:	2200      	movs	r2, #0
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	f000 fb0f 	bl	8001dc4 <UART_WaitOnFlagUntilTimeout>
 80017a6:	1e03      	subs	r3, r0, #0
 80017a8:	d001      	beq.n	80017ae <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e03d      	b.n	800182a <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	015b      	lsls	r3, r3, #5
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d111      	bne.n	80017de <HAL_UART_Transmit+0xf2>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10d      	bne.n	80017de <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	881a      	ldrh	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	05d2      	lsls	r2, r2, #23
 80017d0:	0dd2      	lsrs	r2, r2, #23
 80017d2:	b292      	uxth	r2, r2
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3302      	adds	r3, #2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	e007      	b.n	80017ee <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	60ba      	str	r2, [r7, #8]
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b292      	uxth	r2, r2
 80017ec:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2252      	movs	r2, #82	; 0x52
 80017f2:	5a9b      	ldrh	r3, [r3, r2]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1c3      	bne.n	8001782 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	0013      	movs	r3, r2
 8001804:	2200      	movs	r2, #0
 8001806:	2140      	movs	r1, #64	; 0x40
 8001808:	f000 fadc 	bl	8001dc4 <UART_WaitOnFlagUntilTimeout>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d001      	beq.n	8001814 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e00a      	b.n	800182a <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2269      	movs	r2, #105	; 0x69
 8001818:	2120      	movs	r1, #32
 800181a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2268      	movs	r2, #104	; 0x68
 8001820:	2100      	movs	r1, #0
 8001822:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e000      	b.n	800182a <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8001828:	2302      	movs	r3, #2
  }
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b006      	add	sp, #24
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001840:	2317      	movs	r3, #23
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	2210      	movs	r2, #16
 8001846:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001848:	230a      	movs	r3, #10
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	2200      	movs	r2, #0
 800184e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001850:	2314      	movs	r3, #20
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	2200      	movs	r2, #0
 8001856:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001858:	2313      	movs	r3, #19
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	4313      	orrs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4ac1      	ldr	r2, [pc, #772]	; (8001b84 <UART_SetConfig+0x350>)
 8001880:	4013      	ands	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4abc      	ldr	r2, [pc, #752]	; (8001b88 <UART_SetConfig+0x354>)
 8001896:	4013      	ands	r3, r2
 8001898:	0019      	movs	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699a      	ldr	r2, [r3, #24]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4ab4      	ldr	r2, [pc, #720]	; (8001b8c <UART_SetConfig+0x358>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4ab0      	ldr	r2, [pc, #704]	; (8001b90 <UART_SetConfig+0x35c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d125      	bne.n	800191e <UART_SetConfig+0xea>
 80018d2:	4bb0      	ldr	r3, [pc, #704]	; (8001b94 <UART_SetConfig+0x360>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	2203      	movs	r2, #3
 80018d8:	4013      	ands	r3, r2
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d00f      	beq.n	80018fe <UART_SetConfig+0xca>
 80018de:	d304      	bcc.n	80018ea <UART_SetConfig+0xb6>
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d011      	beq.n	8001908 <UART_SetConfig+0xd4>
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d005      	beq.n	80018f4 <UART_SetConfig+0xc0>
 80018e8:	e013      	b.n	8001912 <UART_SetConfig+0xde>
 80018ea:	2317      	movs	r3, #23
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e064      	b.n	80019be <UART_SetConfig+0x18a>
 80018f4:	2317      	movs	r3, #23
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	2202      	movs	r2, #2
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e05f      	b.n	80019be <UART_SetConfig+0x18a>
 80018fe:	2317      	movs	r3, #23
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2204      	movs	r2, #4
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e05a      	b.n	80019be <UART_SetConfig+0x18a>
 8001908:	2317      	movs	r3, #23
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	2208      	movs	r2, #8
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e055      	b.n	80019be <UART_SetConfig+0x18a>
 8001912:	2317      	movs	r3, #23
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	2210      	movs	r2, #16
 8001918:	701a      	strb	r2, [r3, #0]
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	e04f      	b.n	80019be <UART_SetConfig+0x18a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a9d      	ldr	r2, [pc, #628]	; (8001b98 <UART_SetConfig+0x364>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d132      	bne.n	800198e <UART_SetConfig+0x15a>
 8001928:	4b9a      	ldr	r3, [pc, #616]	; (8001b94 <UART_SetConfig+0x360>)
 800192a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800192c:	23c0      	movs	r3, #192	; 0xc0
 800192e:	029b      	lsls	r3, r3, #10
 8001930:	4013      	ands	r3, r2
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	0252      	lsls	r2, r2, #9
 8001936:	4293      	cmp	r3, r2
 8001938:	d019      	beq.n	800196e <UART_SetConfig+0x13a>
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	0252      	lsls	r2, r2, #9
 800193e:	4293      	cmp	r3, r2
 8001940:	d802      	bhi.n	8001948 <UART_SetConfig+0x114>
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <UART_SetConfig+0x126>
 8001946:	e01c      	b.n	8001982 <UART_SetConfig+0x14e>
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	0292      	lsls	r2, r2, #10
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <UART_SetConfig+0x144>
 8001950:	22c0      	movs	r2, #192	; 0xc0
 8001952:	0292      	lsls	r2, r2, #10
 8001954:	4293      	cmp	r3, r2
 8001956:	d005      	beq.n	8001964 <UART_SetConfig+0x130>
 8001958:	e013      	b.n	8001982 <UART_SetConfig+0x14e>
 800195a:	2317      	movs	r3, #23
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e02c      	b.n	80019be <UART_SetConfig+0x18a>
 8001964:	2317      	movs	r3, #23
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2202      	movs	r2, #2
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e027      	b.n	80019be <UART_SetConfig+0x18a>
 800196e:	2317      	movs	r3, #23
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	2204      	movs	r2, #4
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	e022      	b.n	80019be <UART_SetConfig+0x18a>
 8001978:	2317      	movs	r3, #23
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	2208      	movs	r2, #8
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	e01d      	b.n	80019be <UART_SetConfig+0x18a>
 8001982:	2317      	movs	r3, #23
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2210      	movs	r2, #16
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	e017      	b.n	80019be <UART_SetConfig+0x18a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a82      	ldr	r2, [pc, #520]	; (8001b9c <UART_SetConfig+0x368>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d104      	bne.n	80019a2 <UART_SetConfig+0x16e>
 8001998:	2317      	movs	r3, #23
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	e00d      	b.n	80019be <UART_SetConfig+0x18a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a7e      	ldr	r2, [pc, #504]	; (8001ba0 <UART_SetConfig+0x36c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d104      	bne.n	80019b6 <UART_SetConfig+0x182>
 80019ac:	2317      	movs	r3, #23
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	e003      	b.n	80019be <UART_SetConfig+0x18a>
 80019b6:	2317      	movs	r3, #23
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	2210      	movs	r2, #16
 80019bc:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d000      	beq.n	80019cc <UART_SetConfig+0x198>
 80019ca:	e077      	b.n	8001abc <UART_SetConfig+0x288>
  {
    switch (clocksource)
 80019cc:	2317      	movs	r3, #23
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d01c      	beq.n	8001a10 <UART_SetConfig+0x1dc>
 80019d6:	dc02      	bgt.n	80019de <UART_SetConfig+0x1aa>
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <UART_SetConfig+0x1b4>
 80019dc:	e04f      	b.n	8001a7e <UART_SetConfig+0x24a>
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d027      	beq.n	8001a32 <UART_SetConfig+0x1fe>
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d039      	beq.n	8001a5a <UART_SetConfig+0x226>
 80019e6:	e04a      	b.n	8001a7e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80019e8:	f7ff fd12 	bl	8001410 <HAL_RCC_GetPCLK1Freq>
 80019ec:	0003      	movs	r3, r0
 80019ee:	005a      	lsls	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	18d2      	adds	r2, r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	0019      	movs	r1, r3
 80019fe:	0010      	movs	r0, r2
 8001a00:	f7fe fb82 	bl	8000108 <__udivsi3>
 8001a04:	0003      	movs	r3, r0
 8001a06:	001a      	movs	r2, r3
 8001a08:	2314      	movs	r3, #20
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	801a      	strh	r2, [r3, #0]
        break;
 8001a0e:	e03b      	b.n	8001a88 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	4a63      	ldr	r2, [pc, #396]	; (8001ba4 <UART_SetConfig+0x370>)
 8001a18:	189a      	adds	r2, r3, r2
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	0019      	movs	r1, r3
 8001a20:	0010      	movs	r0, r2
 8001a22:	f7fe fb71 	bl	8000108 <__udivsi3>
 8001a26:	0003      	movs	r3, r0
 8001a28:	001a      	movs	r2, r3
 8001a2a:	2314      	movs	r3, #20
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	801a      	strh	r2, [r3, #0]
        break;
 8001a30:	e02a      	b.n	8001a88 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a32:	f7ff fc65 	bl	8001300 <HAL_RCC_GetSysClockFreq>
 8001a36:	0003      	movs	r3, r0
 8001a38:	005a      	lsls	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	18d2      	adds	r2, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	0019      	movs	r1, r3
 8001a48:	0010      	movs	r0, r2
 8001a4a:	f7fe fb5d 	bl	8000108 <__udivsi3>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	001a      	movs	r2, r3
 8001a52:	2314      	movs	r3, #20
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	801a      	strh	r2, [r3, #0]
        break;
 8001a58:	e016      	b.n	8001a88 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	0252      	lsls	r2, r2, #9
 8001a64:	189a      	adds	r2, r3, r2
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	0010      	movs	r0, r2
 8001a6e:	f7fe fb4b 	bl	8000108 <__udivsi3>
 8001a72:	0003      	movs	r3, r0
 8001a74:	001a      	movs	r2, r3
 8001a76:	2314      	movs	r3, #20
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	801a      	strh	r2, [r3, #0]
        break;
 8001a7c:	e004      	b.n	8001a88 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001a7e:	2313      	movs	r3, #19
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
        break;
 8001a86:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001a88:	200a      	movs	r0, #10
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	2414      	movs	r4, #20
 8001a8e:	193a      	adds	r2, r7, r4
 8001a90:	8812      	ldrh	r2, [r2, #0]
 8001a92:	210f      	movs	r1, #15
 8001a94:	438a      	bics	r2, r1
 8001a96:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	105b      	asrs	r3, r3, #1
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	b299      	uxth	r1, r3
 8001aa6:	183b      	adds	r3, r7, r0
 8001aa8:	183a      	adds	r2, r7, r0
 8001aaa:	8812      	ldrh	r2, [r2, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	183a      	adds	r2, r7, r0
 8001ab6:	8812      	ldrh	r2, [r2, #0]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	e05b      	b.n	8001b74 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8001abc:	2317      	movs	r3, #23
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d01b      	beq.n	8001afe <UART_SetConfig+0x2ca>
 8001ac6:	dc02      	bgt.n	8001ace <UART_SetConfig+0x29a>
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <UART_SetConfig+0x2a4>
 8001acc:	e04d      	b.n	8001b6a <UART_SetConfig+0x336>
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d026      	beq.n	8001b20 <UART_SetConfig+0x2ec>
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d037      	beq.n	8001b46 <UART_SetConfig+0x312>
 8001ad6:	e048      	b.n	8001b6a <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ad8:	f7ff fc9a 	bl	8001410 <HAL_RCC_GetPCLK1Freq>
 8001adc:	0002      	movs	r2, r0
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	085b      	lsrs	r3, r3, #1
 8001ae4:	18d2      	adds	r2, r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	0019      	movs	r1, r3
 8001aec:	0010      	movs	r0, r2
 8001aee:	f7fe fb0b 	bl	8000108 <__udivsi3>
 8001af2:	0003      	movs	r3, r0
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60da      	str	r2, [r3, #12]
        break;
 8001afc:	e03a      	b.n	8001b74 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	085b      	lsrs	r3, r3, #1
 8001b04:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <UART_SetConfig+0x374>)
 8001b06:	189a      	adds	r2, r3, r2
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	0010      	movs	r0, r2
 8001b10:	f7fe fafa 	bl	8000108 <__udivsi3>
 8001b14:	0003      	movs	r3, r0
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60da      	str	r2, [r3, #12]
        break;
 8001b1e:	e029      	b.n	8001b74 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b20:	f7ff fbee 	bl	8001300 <HAL_RCC_GetSysClockFreq>
 8001b24:	0002      	movs	r2, r0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	18d2      	adds	r2, r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0019      	movs	r1, r3
 8001b34:	0010      	movs	r0, r2
 8001b36:	f7fe fae7 	bl	8000108 <__udivsi3>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60da      	str	r2, [r3, #12]
        break;
 8001b44:	e016      	b.n	8001b74 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	0212      	lsls	r2, r2, #8
 8001b50:	189a      	adds	r2, r3, r2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	0019      	movs	r1, r3
 8001b58:	0010      	movs	r0, r2
 8001b5a:	f7fe fad5 	bl	8000108 <__udivsi3>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60da      	str	r2, [r3, #12]
        break;
 8001b68:	e004      	b.n	8001b74 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001b6a:	2313      	movs	r3, #19
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
        break;
 8001b72:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001b74:	2313      	movs	r3, #19
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	781b      	ldrb	r3, [r3, #0]

}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b007      	add	sp, #28
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	efff69f3 	.word	0xefff69f3
 8001b88:	ffffcfff 	.word	0xffffcfff
 8001b8c:	fffff4ff 	.word	0xfffff4ff
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40004400 	.word	0x40004400
 8001b9c:	40004800 	.word	0x40004800
 8001ba0:	40004c00 	.word	0x40004c00
 8001ba4:	00f42400 	.word	0x00f42400
 8001ba8:	007a1200 	.word	0x007a1200

08001bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d00b      	beq.n	8001bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a4a      	ldr	r2, [pc, #296]	; (8001cf0 <UART_AdvFeatureConfig+0x144>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	2202      	movs	r2, #2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d00b      	beq.n	8001bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4a43      	ldr	r2, [pc, #268]	; (8001cf4 <UART_AdvFeatureConfig+0x148>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d00b      	beq.n	8001c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a3b      	ldr	r2, [pc, #236]	; (8001cf8 <UART_AdvFeatureConfig+0x14c>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	2208      	movs	r2, #8
 8001c20:	4013      	ands	r3, r2
 8001c22:	d00b      	beq.n	8001c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4a34      	ldr	r2, [pc, #208]	; (8001cfc <UART_AdvFeatureConfig+0x150>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2210      	movs	r2, #16
 8001c42:	4013      	ands	r3, r2
 8001c44:	d00b      	beq.n	8001c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a2c      	ldr	r2, [pc, #176]	; (8001d00 <UART_AdvFeatureConfig+0x154>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	2220      	movs	r2, #32
 8001c64:	4013      	ands	r3, r2
 8001c66:	d00b      	beq.n	8001c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <UART_AdvFeatureConfig+0x158>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	2240      	movs	r2, #64	; 0x40
 8001c86:	4013      	ands	r3, r2
 8001c88:	d01d      	beq.n	8001cc6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <UART_AdvFeatureConfig+0x15c>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	035b      	lsls	r3, r3, #13
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d10b      	bne.n	8001cc6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <UART_AdvFeatureConfig+0x160>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d00b      	beq.n	8001ce8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <UART_AdvFeatureConfig+0x164>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	605a      	str	r2, [r3, #4]
  }
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	fffdffff 	.word	0xfffdffff
 8001cf4:	fffeffff 	.word	0xfffeffff
 8001cf8:	fffbffff 	.word	0xfffbffff
 8001cfc:	ffff7fff 	.word	0xffff7fff
 8001d00:	ffffefff 	.word	0xffffefff
 8001d04:	ffffdfff 	.word	0xffffdfff
 8001d08:	ffefffff 	.word	0xffefffff
 8001d0c:	ff9fffff 	.word	0xff9fffff
 8001d10:	fff7ffff 	.word	0xfff7ffff

08001d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001d26:	f7fe fab7 	bl	8000298 <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <UART_CheckIdleState+0xa4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d004      	beq.n	8001d42 <UART_CheckIdleState+0x2e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <UART_CheckIdleState+0xa8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d129      	bne.n	8001d96 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d10d      	bne.n	8001d6c <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	0399      	lsls	r1, r3, #14
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <UART_CheckIdleState+0xac>)
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	0013      	movs	r3, r2
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f000 f830 	bl	8001dc4 <UART_WaitOnFlagUntilTimeout>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d001      	beq.n	8001d6c <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e021      	b.n	8001db0 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2204      	movs	r2, #4
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d10d      	bne.n	8001d96 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	03d9      	lsls	r1, r3, #15
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <UART_CheckIdleState+0xac>)
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	0013      	movs	r3, r2
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f000 f81b 	bl	8001dc4 <UART_WaitOnFlagUntilTimeout>
 8001d8e:	1e03      	subs	r3, r0, #0
 8001d90:	d001      	beq.n	8001d96 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e00c      	b.n	8001db0 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2269      	movs	r2, #105	; 0x69
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	226a      	movs	r2, #106	; 0x6a
 8001da2:	2120      	movs	r1, #32
 8001da4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2268      	movs	r2, #104	; 0x68
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b004      	add	sp, #16
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40004400 	.word	0x40004400
 8001dc0:	01ffffff 	.word	0x01ffffff

08001dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	1dfb      	adds	r3, r7, #7
 8001dd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dd4:	e02b      	b.n	8001e2e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	d028      	beq.n	8001e2e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001de2:	f7fe fa59 	bl	8000298 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d21d      	bcs.n	8001e2e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4916      	ldr	r1, [pc, #88]	; (8001e58 <UART_WaitOnFlagUntilTimeout+0x94>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	438a      	bics	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2269      	movs	r2, #105	; 0x69
 8001e16:	2120      	movs	r1, #32
 8001e18:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	226a      	movs	r2, #106	; 0x6a
 8001e1e:	2120      	movs	r1, #32
 8001e20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2268      	movs	r2, #104	; 0x68
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e00f      	b.n	8001e4e <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	4013      	ands	r3, r2
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	425a      	negs	r2, r3
 8001e3e:	4153      	adcs	r3, r2
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	001a      	movs	r2, r3
 8001e44:	1dfb      	adds	r3, r7, #7
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d0c4      	beq.n	8001dd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	0018      	movs	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b004      	add	sp, #16
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	fffffe5f 	.word	0xfffffe5f

08001e5c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e62:	240c      	movs	r4, #12
 8001e64:	193b      	adds	r3, r7, r4
 8001e66:	0018      	movs	r0, r3
 8001e68:	2314      	movs	r3, #20
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f000 fb7f 	bl	8002570 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <MX_GPIO_Init+0xfc>)
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <MX_GPIO_Init+0xfc>)
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	0309      	lsls	r1, r1, #12
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <MX_GPIO_Init+0xfc>)
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	031b      	lsls	r3, r3, #12
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <MX_GPIO_Init+0xfc>)
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <MX_GPIO_Init+0xfc>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0289      	lsls	r1, r1, #10
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	615a      	str	r2, [r3, #20]
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <MX_GPIO_Init+0xfc>)
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	029b      	lsls	r3, r3, #10
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <MX_GPIO_Init+0xfc>)
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <MX_GPIO_Init+0xfc>)
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	02c9      	lsls	r1, r1, #11
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	615a      	str	r2, [r3, #20]
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <MX_GPIO_Init+0xfc>)
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	02db      	lsls	r3, r3, #11
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ec6:	2390      	movs	r3, #144	; 0x90
 8001ec8:	05db      	lsls	r3, r3, #23
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2120      	movs	r1, #32
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7fe fc42 	bl	8000758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001ed4:	193b      	adds	r3, r7, r4
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	0192      	lsls	r2, r2, #6
 8001eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	2200      	movs	r2, #0
 8001ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	193b      	adds	r3, r7, r4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <MX_GPIO_Init+0x100>)
 8001eec:	0019      	movs	r1, r3
 8001eee:	0010      	movs	r0, r2
 8001ef0:	f7fe fab6 	bl	8000460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ef4:	0021      	movs	r1, r4
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	2220      	movs	r2, #32
 8001efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	2201      	movs	r2, #1
 8001f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	000c      	movs	r4, r1
 8001f10:	187a      	adds	r2, r7, r1
 8001f12:	2390      	movs	r3, #144	; 0x90
 8001f14:	05db      	lsls	r3, r3, #23
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7fe faa1 	bl	8000460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AFE_ALT_Pin;
 8001f1e:	0021      	movs	r1, r4
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	0212      	lsls	r2, r2, #8
 8001f26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <MX_GPIO_Init+0x104>)
 8001f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	2201      	movs	r2, #1
 8001f32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AFE_ALT_GPIO_Port, &GPIO_InitStruct);
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <MX_GPIO_Init+0x108>)
 8001f38:	0019      	movs	r1, r3
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	f7fe fa90 	bl	8000460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2102      	movs	r1, #2
 8001f44:	2007      	movs	r0, #7
 8001f46:	f7fe fa59 	bl	80003fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001f4a:	2007      	movs	r0, #7
 8001f4c:	f7fe fa6b 	bl	8000426 <HAL_NVIC_EnableIRQ>

}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b009      	add	sp, #36	; 0x24
 8001f56:	bd90      	pop	{r4, r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	10210000 	.word	0x10210000
 8001f64:	48000400 	.word	0x48000400

08001f68 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <MX_I2C2_Init+0x78>)
 8001f70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00506682;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <MX_I2C2_Init+0x7c>)
 8001f76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f7fe fc11 	bl	80007cc <HAL_I2C_Init>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001fae:	f000 f909 	bl	80021c4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f7fe fc9e 	bl	80008f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001fbc:	1e03      	subs	r3, r0, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001fc0:	f000 f900 	bl	80021c4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7fe fce1 	bl	8000990 <HAL_I2CEx_ConfigDigitalFilter>
 8001fce:	1e03      	subs	r3, r0, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001fd2:	f000 f8f7 	bl	80021c4 <Error_Handler>
  }

}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000094 	.word	0x20000094
 8001fe0:	40005800 	.word	0x40005800
 8001fe4:	00506682 	.word	0x00506682

08001fe8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	2314      	movs	r3, #20
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	2314      	movs	r3, #20
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	f000 fab8 	bl	8002570 <memset>
  if(i2cHandle->Instance==I2C2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <HAL_I2C_MspInit+0x90>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d132      	bne.n	8002070 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b1c      	ldr	r3, [pc, #112]	; (800207c <HAL_I2C_MspInit+0x94>)
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_I2C_MspInit+0x94>)
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	02c9      	lsls	r1, r1, #11
 8002014:	430a      	orrs	r2, r1
 8002016:	615a      	str	r2, [r3, #20]
 8002018:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_I2C_MspInit+0x94>)
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	02db      	lsls	r3, r3, #11
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002026:	2114      	movs	r1, #20
 8002028:	187b      	adds	r3, r7, r1
 800202a:	22c0      	movs	r2, #192	; 0xc0
 800202c:	01d2      	lsls	r2, r2, #7
 800202e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002030:	187b      	adds	r3, r7, r1
 8002032:	2212      	movs	r2, #18
 8002034:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002036:	187b      	adds	r3, r7, r1
 8002038:	2201      	movs	r2, #1
 800203a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2203      	movs	r2, #3
 8002040:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8002042:	187b      	adds	r3, r7, r1
 8002044:	2205      	movs	r2, #5
 8002046:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	187b      	adds	r3, r7, r1
 800204a:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_I2C_MspInit+0x98>)
 800204c:	0019      	movs	r1, r3
 800204e:	0010      	movs	r0, r2
 8002050:	f7fe fa06 	bl	8000460 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_I2C_MspInit+0x94>)
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_I2C_MspInit+0x94>)
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	03c9      	lsls	r1, r1, #15
 800205e:	430a      	orrs	r2, r1
 8002060:	61da      	str	r2, [r3, #28]
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_I2C_MspInit+0x94>)
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	03db      	lsls	r3, r3, #15
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b00a      	add	sp, #40	; 0x28
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40005800 	.word	0x40005800
 800207c:	40021000 	.word	0x40021000
 8002080:	48000400 	.word	0x48000400

08002084 <_write>:
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len)
{
 8002084:	b5b0      	push	{r4, r5, r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d00a      	beq.n	80020ac <_write+0x28>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d007      	beq.n	80020ac <_write+0x28>
   {
      errno = EBADF;
 800209c:	f000 fa3e 	bl	800251c <__errno>
 80020a0:	0003      	movs	r3, r0
 80020a2:	2209      	movs	r2, #9
 80020a4:	601a      	str	r2, [r3, #0]
      return -1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	425b      	negs	r3, r3
 80020aa:	e011      	b.n	80020d0 <_write+0x4c>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 0xFFFF);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	b29a      	uxth	r2, r3
   HAL_StatusTypeDef status =
 80020b0:	2517      	movs	r5, #23
 80020b2:	197c      	adds	r4, r7, r5
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <_write+0x54>)
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	4808      	ldr	r0, [pc, #32]	; (80020dc <_write+0x58>)
 80020ba:	f7ff fb17 	bl	80016ec <HAL_UART_Transmit>
 80020be:	0003      	movs	r3, r0
 80020c0:	7023      	strb	r3, [r4, #0]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80020c2:	197b      	adds	r3, r7, r5
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <_write+0x4a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	e000      	b.n	80020d0 <_write+0x4c>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b006      	add	sp, #24
 80020d6:	bdb0      	pop	{r4, r5, r7, pc}
 80020d8:	0000ffff 	.word	0x0000ffff
 80020dc:	200000e0 	.word	0x200000e0

080020e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e4:	f7fe f89c 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e8:	f000 f80e 	bl	8002108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ec:	f7ff feb6 	bl	8001e5c <MX_GPIO_Init>
  MX_I2C2_Init();
 80020f0:	f7ff ff3a 	bl	8001f68 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80020f4:	f000 f96c 	bl	80023d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nStarting...\r\n");
 80020f8:	4b02      	ldr	r3, [pc, #8]	; (8002104 <main+0x24>)
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 faa0 	bl	8002640 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002100:	e7fe      	b.n	8002100 <main+0x20>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	08002f08 	.word	0x08002f08

08002108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b099      	sub	sp, #100	; 0x64
 800210c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210e:	242c      	movs	r4, #44	; 0x2c
 8002110:	193b      	adds	r3, r7, r4
 8002112:	0018      	movs	r0, r3
 8002114:	2334      	movs	r3, #52	; 0x34
 8002116:	001a      	movs	r2, r3
 8002118:	2100      	movs	r1, #0
 800211a:	f000 fa29 	bl	8002570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800211e:	231c      	movs	r3, #28
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	0018      	movs	r0, r3
 8002124:	2310      	movs	r3, #16
 8002126:	001a      	movs	r2, r3
 8002128:	2100      	movs	r1, #0
 800212a:	f000 fa21 	bl	8002570 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800212e:	003b      	movs	r3, r7
 8002130:	0018      	movs	r0, r3
 8002132:	231c      	movs	r3, #28
 8002134:	001a      	movs	r2, r3
 8002136:	2100      	movs	r1, #0
 8002138:	f000 fa1a 	bl	8002570 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800213c:	193b      	adds	r3, r7, r4
 800213e:	2220      	movs	r2, #32
 8002140:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002142:	193b      	adds	r3, r7, r4
 8002144:	2201      	movs	r2, #1
 8002146:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002148:	193b      	adds	r3, r7, r4
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800214e:	193b      	adds	r3, r7, r4
 8002150:	0018      	movs	r0, r3
 8002152:	f7fe fc6b 	bl	8000a2c <HAL_RCC_OscConfig>
 8002156:	1e03      	subs	r3, r0, #0
 8002158:	d001      	beq.n	800215e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800215a:	f000 f833 	bl	80021c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215e:	211c      	movs	r1, #28
 8002160:	187b      	adds	r3, r7, r1
 8002162:	2207      	movs	r2, #7
 8002164:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002166:	187b      	adds	r3, r7, r1
 8002168:	2203      	movs	r2, #3
 800216a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800216c:	187b      	adds	r3, r7, r1
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002172:	187b      	adds	r3, r7, r1
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	00d2      	lsls	r2, r2, #3
 8002178:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800217a:	187b      	adds	r3, r7, r1
 800217c:	2101      	movs	r1, #1
 800217e:	0018      	movs	r0, r3
 8002180:	f7fe ffb4 	bl	80010ec <HAL_RCC_ClockConfig>
 8002184:	1e03      	subs	r3, r0, #0
 8002186:	d001      	beq.n	800218c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002188:	f000 f81c 	bl	80021c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800218c:	003b      	movs	r3, r7
 800218e:	2202      	movs	r2, #2
 8002190:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002192:	003b      	movs	r3, r7
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002198:	003b      	movs	r3, r7
 800219a:	0018      	movs	r0, r3
 800219c:	f7ff f94e 	bl	800143c <HAL_RCCEx_PeriphCLKConfig>
 80021a0:	1e03      	subs	r3, r0, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80021a4:	f000 f80e 	bl	80021c4 <Error_Handler>
  }
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b019      	add	sp, #100	; 0x64
 80021ae:	bd90      	pop	{r4, r7, pc}

080021b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	0002      	movs	r2, r0
 80021b8:	1dbb      	adds	r3, r7, #6
 80021ba:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == AFE_ALT_Pin) {
    }
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_MspInit+0x44>)
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_MspInit+0x44>)
 80021dc:	2101      	movs	r1, #1
 80021de:	430a      	orrs	r2, r1
 80021e0:	619a      	str	r2, [r3, #24]
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <HAL_MspInit+0x44>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_MspInit+0x44>)
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_MspInit+0x44>)
 80021f4:	2180      	movs	r1, #128	; 0x80
 80021f6:	0549      	lsls	r1, r1, #21
 80021f8:	430a      	orrs	r2, r1
 80021fa:	61da      	str	r2, [r3, #28]
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_MspInit+0x44>)
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	055b      	lsls	r3, r3, #21
 8002204:	4013      	ands	r3, r2
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b002      	add	sp, #8
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	40021000 	.word	0x40021000

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002240:	f7fe f81e 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	0018      	movs	r0, r3
 8002254:	f7fe fa9e 	bl	8000794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e00a      	b.n	8002286 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002270:	e000      	b.n	8002274 <_read+0x16>
 8002272:	bf00      	nop
 8002274:	0001      	movs	r1, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	60ba      	str	r2, [r7, #8]
 800227c:	b2ca      	uxtb	r2, r1
 800227e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3301      	adds	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	429a      	cmp	r2, r3
 800228c:	dbf0      	blt.n	8002270 <_read+0x12>
	}

return len;
 800228e:	687b      	ldr	r3, [r7, #4]
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b006      	add	sp, #24
 8002296:	bd80      	pop	{r7, pc}

08002298 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	return -1;
 80022a0:	2301      	movs	r3, #1
 80022a2:	425b      	negs	r3, r3
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	0192      	lsls	r2, r2, #6
 80022bc:	605a      	str	r2, [r3, #4]
	return 0;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_isatty>:

int _isatty(int file)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	return 1;
 80022d0:	2301      	movs	r3, #1
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b002      	add	sp, #8
 80022d8:	bd80      	pop	{r7, pc}

080022da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
	return 0;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b004      	add	sp, #16
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <_sbrk+0x50>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <_sbrk+0x16>
		heap_end = &end;
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <_sbrk+0x50>)
 8002302:	4a10      	ldr	r2, [pc, #64]	; (8002344 <_sbrk+0x54>)
 8002304:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <_sbrk+0x50>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <_sbrk+0x50>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	18d3      	adds	r3, r2, r3
 8002314:	466a      	mov	r2, sp
 8002316:	4293      	cmp	r3, r2
 8002318:	d907      	bls.n	800232a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800231a:	f000 f8ff 	bl	800251c <__errno>
 800231e:	0003      	movs	r3, r0
 8002320:	220c      	movs	r2, #12
 8002322:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002324:	2301      	movs	r3, #1
 8002326:	425b      	negs	r3, r3
 8002328:	e006      	b.n	8002338 <_sbrk+0x48>
	}

	heap_end += incr;
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <_sbrk+0x50>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	18d2      	adds	r2, r2, r3
 8002332:	4b03      	ldr	r3, [pc, #12]	; (8002340 <_sbrk+0x50>)
 8002334:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b004      	add	sp, #16
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000084 	.word	0x20000084
 8002344:	20000158 	.word	0x20000158

08002348 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <SystemInit+0x70>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <SystemInit+0x70>)
 8002352:	2101      	movs	r1, #1
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <SystemInit+0x70>)
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <SystemInit+0x70>)
 800235e:	4917      	ldr	r1, [pc, #92]	; (80023bc <SystemInit+0x74>)
 8002360:	400a      	ands	r2, r1
 8002362:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <SystemInit+0x70>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <SystemInit+0x70>)
 800236a:	4915      	ldr	r1, [pc, #84]	; (80023c0 <SystemInit+0x78>)
 800236c:	400a      	ands	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <SystemInit+0x70>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <SystemInit+0x70>)
 8002376:	4913      	ldr	r1, [pc, #76]	; (80023c4 <SystemInit+0x7c>)
 8002378:	400a      	ands	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <SystemInit+0x70>)
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <SystemInit+0x70>)
 8002382:	4911      	ldr	r1, [pc, #68]	; (80023c8 <SystemInit+0x80>)
 8002384:	400a      	ands	r2, r1
 8002386:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <SystemInit+0x70>)
 800238a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <SystemInit+0x70>)
 800238e:	210f      	movs	r1, #15
 8002390:	438a      	bics	r2, r1
 8002392:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <SystemInit+0x70>)
 8002396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <SystemInit+0x70>)
 800239a:	490c      	ldr	r1, [pc, #48]	; (80023cc <SystemInit+0x84>)
 800239c:	400a      	ands	r2, r1
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SystemInit+0x70>)
 80023a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SystemInit+0x70>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	438a      	bics	r2, r1
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <SystemInit+0x70>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]

}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08ffb80c 	.word	0x08ffb80c
 80023c0:	fef6ffff 	.word	0xfef6ffff
 80023c4:	fffbffff 	.word	0xfffbffff
 80023c8:	ffc0ffff 	.word	0xffc0ffff
 80023cc:	fffcfe2c 	.word	0xfffcfe2c

080023d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MX_USART2_UART_Init+0x58>)
 80023d6:	4a15      	ldr	r2, [pc, #84]	; (800242c <MX_USART2_UART_Init+0x5c>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <MX_USART2_UART_Init+0x58>)
 80023dc:	22e1      	movs	r2, #225	; 0xe1
 80023de:	0252      	lsls	r2, r2, #9
 80023e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_USART2_UART_Init+0x58>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <MX_USART2_UART_Init+0x58>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_USART2_UART_Init+0x58>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_USART2_UART_Init+0x58>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MX_USART2_UART_Init+0x58>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_USART2_UART_Init+0x58>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <MX_USART2_UART_Init+0x58>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_USART2_UART_Init+0x58>)
 800240e:	2200      	movs	r2, #0
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <MX_USART2_UART_Init+0x58>)
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff f911 	bl	800163c <HAL_UART_Init>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d001      	beq.n	8002422 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800241e:	f7ff fed1 	bl	80021c4 <Error_Handler>
  }

}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200000e0 	.word	0x200000e0
 800242c:	40004400 	.word	0x40004400

08002430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	2314      	movs	r3, #20
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	0018      	movs	r0, r3
 800243e:	2314      	movs	r3, #20
 8002440:	001a      	movs	r2, r3
 8002442:	2100      	movs	r1, #0
 8002444:	f000 f894 	bl	8002570 <memset>
  if(uartHandle->Instance==USART2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <HAL_UART_MspInit+0x90>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d132      	bne.n	80024b8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_UART_MspInit+0x94>)
 8002454:	69da      	ldr	r2, [r3, #28]
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_UART_MspInit+0x94>)
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	0289      	lsls	r1, r1, #10
 800245c:	430a      	orrs	r2, r1
 800245e:	61da      	str	r2, [r3, #28]
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_UART_MspInit+0x94>)
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_UART_MspInit+0x94>)
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <HAL_UART_MspInit+0x94>)
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	0289      	lsls	r1, r1, #10
 8002478:	430a      	orrs	r2, r1
 800247a:	615a      	str	r2, [r3, #20]
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_UART_MspInit+0x94>)
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800248a:	2114      	movs	r1, #20
 800248c:	187b      	adds	r3, r7, r1
 800248e:	220c      	movs	r2, #12
 8002490:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	187b      	adds	r3, r7, r1
 8002494:	2202      	movs	r2, #2
 8002496:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	187b      	adds	r3, r7, r1
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	2203      	movs	r2, #3
 80024a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	2201      	movs	r2, #1
 80024a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024aa:	187a      	adds	r2, r7, r1
 80024ac:	2390      	movs	r3, #144	; 0x90
 80024ae:	05db      	lsls	r3, r3, #23
 80024b0:	0011      	movs	r1, r2
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7fd ffd4 	bl	8000460 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b00a      	add	sp, #40	; 0x28
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40004400 	.word	0x40004400
 80024c4:	40021000 	.word	0x40021000

080024c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024c8:	480d      	ldr	r0, [pc, #52]	; (8002500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <LoopForever+0x6>)
  ldr r1, =_edata
 80024ce:	490e      	ldr	r1, [pc, #56]	; (8002508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024d0:	4a0e      	ldr	r2, [pc, #56]	; (800250c <LoopForever+0xe>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024e4:	4c0b      	ldr	r4, [pc, #44]	; (8002514 <LoopForever+0x16>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024f2:	f7ff ff29 	bl	8002348 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80024f6:	f000 f817 	bl	8002528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024fa:	f7ff fdf1 	bl	80020e0 <main>

080024fe <LoopForever>:

LoopForever:
    b LoopForever
 80024fe:	e7fe      	b.n	80024fe <LoopForever>
  ldr   r0, =_estack
 8002500:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002508:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800250c:	08002f9c 	.word	0x08002f9c
  ldr r2, =_sbss
 8002510:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002514:	20000154 	.word	0x20000154

08002518 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC1_COMP_IRQHandler>
	...

0800251c <__errno>:
 800251c:	4b01      	ldr	r3, [pc, #4]	; (8002524 <__errno+0x8>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	4770      	bx	lr
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	20000004 	.word	0x20000004

08002528 <__libc_init_array>:
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	2600      	movs	r6, #0
 800252c:	4d0c      	ldr	r5, [pc, #48]	; (8002560 <__libc_init_array+0x38>)
 800252e:	4c0d      	ldr	r4, [pc, #52]	; (8002564 <__libc_init_array+0x3c>)
 8002530:	1b64      	subs	r4, r4, r5
 8002532:	10a4      	asrs	r4, r4, #2
 8002534:	42a6      	cmp	r6, r4
 8002536:	d109      	bne.n	800254c <__libc_init_array+0x24>
 8002538:	2600      	movs	r6, #0
 800253a:	f000 fcc9 	bl	8002ed0 <_init>
 800253e:	4d0a      	ldr	r5, [pc, #40]	; (8002568 <__libc_init_array+0x40>)
 8002540:	4c0a      	ldr	r4, [pc, #40]	; (800256c <__libc_init_array+0x44>)
 8002542:	1b64      	subs	r4, r4, r5
 8002544:	10a4      	asrs	r4, r4, #2
 8002546:	42a6      	cmp	r6, r4
 8002548:	d105      	bne.n	8002556 <__libc_init_array+0x2e>
 800254a:	bd70      	pop	{r4, r5, r6, pc}
 800254c:	00b3      	lsls	r3, r6, #2
 800254e:	58eb      	ldr	r3, [r5, r3]
 8002550:	4798      	blx	r3
 8002552:	3601      	adds	r6, #1
 8002554:	e7ee      	b.n	8002534 <__libc_init_array+0xc>
 8002556:	00b3      	lsls	r3, r6, #2
 8002558:	58eb      	ldr	r3, [r5, r3]
 800255a:	4798      	blx	r3
 800255c:	3601      	adds	r6, #1
 800255e:	e7f2      	b.n	8002546 <__libc_init_array+0x1e>
 8002560:	08002f94 	.word	0x08002f94
 8002564:	08002f94 	.word	0x08002f94
 8002568:	08002f94 	.word	0x08002f94
 800256c:	08002f98 	.word	0x08002f98

08002570 <memset>:
 8002570:	0003      	movs	r3, r0
 8002572:	1812      	adds	r2, r2, r0
 8002574:	4293      	cmp	r3, r2
 8002576:	d100      	bne.n	800257a <memset+0xa>
 8002578:	4770      	bx	lr
 800257a:	7019      	strb	r1, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	e7f9      	b.n	8002574 <memset+0x4>

08002580 <_puts_r>:
 8002580:	b570      	push	{r4, r5, r6, lr}
 8002582:	0005      	movs	r5, r0
 8002584:	000e      	movs	r6, r1
 8002586:	2800      	cmp	r0, #0
 8002588:	d004      	beq.n	8002594 <_puts_r+0x14>
 800258a:	6983      	ldr	r3, [r0, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <_puts_r+0x14>
 8002590:	f000 fa24 	bl	80029dc <__sinit>
 8002594:	69ab      	ldr	r3, [r5, #24]
 8002596:	68ac      	ldr	r4, [r5, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <_puts_r+0x22>
 800259c:	0028      	movs	r0, r5
 800259e:	f000 fa1d 	bl	80029dc <__sinit>
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <_puts_r+0xb4>)
 80025a4:	429c      	cmp	r4, r3
 80025a6:	d10f      	bne.n	80025c8 <_puts_r+0x48>
 80025a8:	686c      	ldr	r4, [r5, #4]
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	071b      	lsls	r3, r3, #28
 80025ae:	d502      	bpl.n	80025b6 <_puts_r+0x36>
 80025b0:	6923      	ldr	r3, [r4, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11f      	bne.n	80025f6 <_puts_r+0x76>
 80025b6:	0021      	movs	r1, r4
 80025b8:	0028      	movs	r0, r5
 80025ba:	f000 f8a1 	bl	8002700 <__swsetup_r>
 80025be:	2800      	cmp	r0, #0
 80025c0:	d019      	beq.n	80025f6 <_puts_r+0x76>
 80025c2:	2001      	movs	r0, #1
 80025c4:	4240      	negs	r0, r0
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <_puts_r+0xb8>)
 80025ca:	429c      	cmp	r4, r3
 80025cc:	d101      	bne.n	80025d2 <_puts_r+0x52>
 80025ce:	68ac      	ldr	r4, [r5, #8]
 80025d0:	e7eb      	b.n	80025aa <_puts_r+0x2a>
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <_puts_r+0xbc>)
 80025d4:	429c      	cmp	r4, r3
 80025d6:	d1e8      	bne.n	80025aa <_puts_r+0x2a>
 80025d8:	68ec      	ldr	r4, [r5, #12]
 80025da:	e7e6      	b.n	80025aa <_puts_r+0x2a>
 80025dc:	3601      	adds	r6, #1
 80025de:	60a3      	str	r3, [r4, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	da04      	bge.n	80025ee <_puts_r+0x6e>
 80025e4:	69a2      	ldr	r2, [r4, #24]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	dc16      	bgt.n	8002618 <_puts_r+0x98>
 80025ea:	290a      	cmp	r1, #10
 80025ec:	d014      	beq.n	8002618 <_puts_r+0x98>
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	6022      	str	r2, [r4, #0]
 80025f4:	7019      	strb	r1, [r3, #0]
 80025f6:	68a3      	ldr	r3, [r4, #8]
 80025f8:	7831      	ldrb	r1, [r6, #0]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	2900      	cmp	r1, #0
 80025fe:	d1ed      	bne.n	80025dc <_puts_r+0x5c>
 8002600:	60a3      	str	r3, [r4, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	da0f      	bge.n	8002626 <_puts_r+0xa6>
 8002606:	0022      	movs	r2, r4
 8002608:	310a      	adds	r1, #10
 800260a:	0028      	movs	r0, r5
 800260c:	f000 f822 	bl	8002654 <__swbuf_r>
 8002610:	1c43      	adds	r3, r0, #1
 8002612:	d0d6      	beq.n	80025c2 <_puts_r+0x42>
 8002614:	200a      	movs	r0, #10
 8002616:	e7d6      	b.n	80025c6 <_puts_r+0x46>
 8002618:	0022      	movs	r2, r4
 800261a:	0028      	movs	r0, r5
 800261c:	f000 f81a 	bl	8002654 <__swbuf_r>
 8002620:	1c43      	adds	r3, r0, #1
 8002622:	d1e8      	bne.n	80025f6 <_puts_r+0x76>
 8002624:	e7cd      	b.n	80025c2 <_puts_r+0x42>
 8002626:	200a      	movs	r0, #10
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	6022      	str	r2, [r4, #0]
 800262e:	7018      	strb	r0, [r3, #0]
 8002630:	e7c9      	b.n	80025c6 <_puts_r+0x46>
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	08002f54 	.word	0x08002f54
 8002638:	08002f74 	.word	0x08002f74
 800263c:	08002f34 	.word	0x08002f34

08002640 <puts>:
 8002640:	b510      	push	{r4, lr}
 8002642:	4b03      	ldr	r3, [pc, #12]	; (8002650 <puts+0x10>)
 8002644:	0001      	movs	r1, r0
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	f7ff ff9a 	bl	8002580 <_puts_r>
 800264c:	bd10      	pop	{r4, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	20000004 	.word	0x20000004

08002654 <__swbuf_r>:
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	0005      	movs	r5, r0
 8002658:	000e      	movs	r6, r1
 800265a:	0014      	movs	r4, r2
 800265c:	2800      	cmp	r0, #0
 800265e:	d004      	beq.n	800266a <__swbuf_r+0x16>
 8002660:	6983      	ldr	r3, [r0, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <__swbuf_r+0x16>
 8002666:	f000 f9b9 	bl	80029dc <__sinit>
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <__swbuf_r+0xa0>)
 800266c:	429c      	cmp	r4, r3
 800266e:	d12d      	bne.n	80026cc <__swbuf_r+0x78>
 8002670:	686c      	ldr	r4, [r5, #4]
 8002672:	69a3      	ldr	r3, [r4, #24]
 8002674:	60a3      	str	r3, [r4, #8]
 8002676:	89a3      	ldrh	r3, [r4, #12]
 8002678:	071b      	lsls	r3, r3, #28
 800267a:	d531      	bpl.n	80026e0 <__swbuf_r+0x8c>
 800267c:	6923      	ldr	r3, [r4, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02e      	beq.n	80026e0 <__swbuf_r+0x8c>
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	6922      	ldr	r2, [r4, #16]
 8002686:	b2f7      	uxtb	r7, r6
 8002688:	1a98      	subs	r0, r3, r2
 800268a:	6963      	ldr	r3, [r4, #20]
 800268c:	b2f6      	uxtb	r6, r6
 800268e:	4283      	cmp	r3, r0
 8002690:	dc05      	bgt.n	800269e <__swbuf_r+0x4a>
 8002692:	0021      	movs	r1, r4
 8002694:	0028      	movs	r0, r5
 8002696:	f000 f933 	bl	8002900 <_fflush_r>
 800269a:	2800      	cmp	r0, #0
 800269c:	d126      	bne.n	80026ec <__swbuf_r+0x98>
 800269e:	68a3      	ldr	r3, [r4, #8]
 80026a0:	3001      	adds	r0, #1
 80026a2:	3b01      	subs	r3, #1
 80026a4:	60a3      	str	r3, [r4, #8]
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	6022      	str	r2, [r4, #0]
 80026ac:	701f      	strb	r7, [r3, #0]
 80026ae:	6963      	ldr	r3, [r4, #20]
 80026b0:	4283      	cmp	r3, r0
 80026b2:	d004      	beq.n	80026be <__swbuf_r+0x6a>
 80026b4:	89a3      	ldrh	r3, [r4, #12]
 80026b6:	07db      	lsls	r3, r3, #31
 80026b8:	d51a      	bpl.n	80026f0 <__swbuf_r+0x9c>
 80026ba:	2e0a      	cmp	r6, #10
 80026bc:	d118      	bne.n	80026f0 <__swbuf_r+0x9c>
 80026be:	0021      	movs	r1, r4
 80026c0:	0028      	movs	r0, r5
 80026c2:	f000 f91d 	bl	8002900 <_fflush_r>
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d012      	beq.n	80026f0 <__swbuf_r+0x9c>
 80026ca:	e00f      	b.n	80026ec <__swbuf_r+0x98>
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <__swbuf_r+0xa4>)
 80026ce:	429c      	cmp	r4, r3
 80026d0:	d101      	bne.n	80026d6 <__swbuf_r+0x82>
 80026d2:	68ac      	ldr	r4, [r5, #8]
 80026d4:	e7cd      	b.n	8002672 <__swbuf_r+0x1e>
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <__swbuf_r+0xa8>)
 80026d8:	429c      	cmp	r4, r3
 80026da:	d1ca      	bne.n	8002672 <__swbuf_r+0x1e>
 80026dc:	68ec      	ldr	r4, [r5, #12]
 80026de:	e7c8      	b.n	8002672 <__swbuf_r+0x1e>
 80026e0:	0021      	movs	r1, r4
 80026e2:	0028      	movs	r0, r5
 80026e4:	f000 f80c 	bl	8002700 <__swsetup_r>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d0ca      	beq.n	8002682 <__swbuf_r+0x2e>
 80026ec:	2601      	movs	r6, #1
 80026ee:	4276      	negs	r6, r6
 80026f0:	0030      	movs	r0, r6
 80026f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026f4:	08002f54 	.word	0x08002f54
 80026f8:	08002f74 	.word	0x08002f74
 80026fc:	08002f34 	.word	0x08002f34

08002700 <__swsetup_r>:
 8002700:	4b36      	ldr	r3, [pc, #216]	; (80027dc <__swsetup_r+0xdc>)
 8002702:	b570      	push	{r4, r5, r6, lr}
 8002704:	681d      	ldr	r5, [r3, #0]
 8002706:	0006      	movs	r6, r0
 8002708:	000c      	movs	r4, r1
 800270a:	2d00      	cmp	r5, #0
 800270c:	d005      	beq.n	800271a <__swsetup_r+0x1a>
 800270e:	69ab      	ldr	r3, [r5, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <__swsetup_r+0x1a>
 8002714:	0028      	movs	r0, r5
 8002716:	f000 f961 	bl	80029dc <__sinit>
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <__swsetup_r+0xe0>)
 800271c:	429c      	cmp	r4, r3
 800271e:	d10f      	bne.n	8002740 <__swsetup_r+0x40>
 8002720:	686c      	ldr	r4, [r5, #4]
 8002722:	230c      	movs	r3, #12
 8002724:	5ee2      	ldrsh	r2, [r4, r3]
 8002726:	b293      	uxth	r3, r2
 8002728:	0719      	lsls	r1, r3, #28
 800272a:	d42d      	bmi.n	8002788 <__swsetup_r+0x88>
 800272c:	06d9      	lsls	r1, r3, #27
 800272e:	d411      	bmi.n	8002754 <__swsetup_r+0x54>
 8002730:	2309      	movs	r3, #9
 8002732:	2001      	movs	r0, #1
 8002734:	6033      	str	r3, [r6, #0]
 8002736:	3337      	adds	r3, #55	; 0x37
 8002738:	4313      	orrs	r3, r2
 800273a:	81a3      	strh	r3, [r4, #12]
 800273c:	4240      	negs	r0, r0
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <__swsetup_r+0xe4>)
 8002742:	429c      	cmp	r4, r3
 8002744:	d101      	bne.n	800274a <__swsetup_r+0x4a>
 8002746:	68ac      	ldr	r4, [r5, #8]
 8002748:	e7eb      	b.n	8002722 <__swsetup_r+0x22>
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <__swsetup_r+0xe8>)
 800274c:	429c      	cmp	r4, r3
 800274e:	d1e8      	bne.n	8002722 <__swsetup_r+0x22>
 8002750:	68ec      	ldr	r4, [r5, #12]
 8002752:	e7e6      	b.n	8002722 <__swsetup_r+0x22>
 8002754:	075b      	lsls	r3, r3, #29
 8002756:	d513      	bpl.n	8002780 <__swsetup_r+0x80>
 8002758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800275a:	2900      	cmp	r1, #0
 800275c:	d008      	beq.n	8002770 <__swsetup_r+0x70>
 800275e:	0023      	movs	r3, r4
 8002760:	3344      	adds	r3, #68	; 0x44
 8002762:	4299      	cmp	r1, r3
 8002764:	d002      	beq.n	800276c <__swsetup_r+0x6c>
 8002766:	0030      	movs	r0, r6
 8002768:	f000 fa38 	bl	8002bdc <_free_r>
 800276c:	2300      	movs	r3, #0
 800276e:	6363      	str	r3, [r4, #52]	; 0x34
 8002770:	2224      	movs	r2, #36	; 0x24
 8002772:	89a3      	ldrh	r3, [r4, #12]
 8002774:	4393      	bics	r3, r2
 8002776:	81a3      	strh	r3, [r4, #12]
 8002778:	2300      	movs	r3, #0
 800277a:	6063      	str	r3, [r4, #4]
 800277c:	6923      	ldr	r3, [r4, #16]
 800277e:	6023      	str	r3, [r4, #0]
 8002780:	2308      	movs	r3, #8
 8002782:	89a2      	ldrh	r2, [r4, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	81a3      	strh	r3, [r4, #12]
 8002788:	6923      	ldr	r3, [r4, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <__swsetup_r+0xa6>
 800278e:	21a0      	movs	r1, #160	; 0xa0
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	89a3      	ldrh	r3, [r4, #12]
 8002794:	0089      	lsls	r1, r1, #2
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	400b      	ands	r3, r1
 800279a:	4293      	cmp	r3, r2
 800279c:	d003      	beq.n	80027a6 <__swsetup_r+0xa6>
 800279e:	0021      	movs	r1, r4
 80027a0:	0030      	movs	r0, r6
 80027a2:	f000 f9d7 	bl	8002b54 <__smakebuf_r>
 80027a6:	2301      	movs	r3, #1
 80027a8:	89a2      	ldrh	r2, [r4, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	d011      	beq.n	80027d2 <__swsetup_r+0xd2>
 80027ae:	2300      	movs	r3, #0
 80027b0:	60a3      	str	r3, [r4, #8]
 80027b2:	6963      	ldr	r3, [r4, #20]
 80027b4:	425b      	negs	r3, r3
 80027b6:	61a3      	str	r3, [r4, #24]
 80027b8:	2000      	movs	r0, #0
 80027ba:	6923      	ldr	r3, [r4, #16]
 80027bc:	4283      	cmp	r3, r0
 80027be:	d1be      	bne.n	800273e <__swsetup_r+0x3e>
 80027c0:	230c      	movs	r3, #12
 80027c2:	5ee2      	ldrsh	r2, [r4, r3]
 80027c4:	0613      	lsls	r3, r2, #24
 80027c6:	d5ba      	bpl.n	800273e <__swsetup_r+0x3e>
 80027c8:	2340      	movs	r3, #64	; 0x40
 80027ca:	4313      	orrs	r3, r2
 80027cc:	81a3      	strh	r3, [r4, #12]
 80027ce:	3801      	subs	r0, #1
 80027d0:	e7b5      	b.n	800273e <__swsetup_r+0x3e>
 80027d2:	0792      	lsls	r2, r2, #30
 80027d4:	d400      	bmi.n	80027d8 <__swsetup_r+0xd8>
 80027d6:	6963      	ldr	r3, [r4, #20]
 80027d8:	60a3      	str	r3, [r4, #8]
 80027da:	e7ed      	b.n	80027b8 <__swsetup_r+0xb8>
 80027dc:	20000004 	.word	0x20000004
 80027e0:	08002f54 	.word	0x08002f54
 80027e4:	08002f74 	.word	0x08002f74
 80027e8:	08002f34 	.word	0x08002f34

080027ec <__sflush_r>:
 80027ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027ee:	898a      	ldrh	r2, [r1, #12]
 80027f0:	0005      	movs	r5, r0
 80027f2:	000c      	movs	r4, r1
 80027f4:	0713      	lsls	r3, r2, #28
 80027f6:	d460      	bmi.n	80028ba <__sflush_r+0xce>
 80027f8:	684b      	ldr	r3, [r1, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	dc04      	bgt.n	8002808 <__sflush_r+0x1c>
 80027fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	dc01      	bgt.n	8002808 <__sflush_r+0x1c>
 8002804:	2000      	movs	r0, #0
 8002806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002808:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800280a:	2f00      	cmp	r7, #0
 800280c:	d0fa      	beq.n	8002804 <__sflush_r+0x18>
 800280e:	2300      	movs	r3, #0
 8002810:	682e      	ldr	r6, [r5, #0]
 8002812:	602b      	str	r3, [r5, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	015b      	lsls	r3, r3, #5
 8002818:	6a21      	ldr	r1, [r4, #32]
 800281a:	401a      	ands	r2, r3
 800281c:	d034      	beq.n	8002888 <__sflush_r+0x9c>
 800281e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002820:	89a3      	ldrh	r3, [r4, #12]
 8002822:	075b      	lsls	r3, r3, #29
 8002824:	d506      	bpl.n	8002834 <__sflush_r+0x48>
 8002826:	6863      	ldr	r3, [r4, #4]
 8002828:	1ac0      	subs	r0, r0, r3
 800282a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <__sflush_r+0x48>
 8002830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002832:	1ac0      	subs	r0, r0, r3
 8002834:	0002      	movs	r2, r0
 8002836:	6a21      	ldr	r1, [r4, #32]
 8002838:	2300      	movs	r3, #0
 800283a:	0028      	movs	r0, r5
 800283c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800283e:	47b8      	blx	r7
 8002840:	89a1      	ldrh	r1, [r4, #12]
 8002842:	1c43      	adds	r3, r0, #1
 8002844:	d106      	bne.n	8002854 <__sflush_r+0x68>
 8002846:	682b      	ldr	r3, [r5, #0]
 8002848:	2b1d      	cmp	r3, #29
 800284a:	d830      	bhi.n	80028ae <__sflush_r+0xc2>
 800284c:	4a2b      	ldr	r2, [pc, #172]	; (80028fc <__sflush_r+0x110>)
 800284e:	40da      	lsrs	r2, r3
 8002850:	07d3      	lsls	r3, r2, #31
 8002852:	d52c      	bpl.n	80028ae <__sflush_r+0xc2>
 8002854:	2300      	movs	r3, #0
 8002856:	6063      	str	r3, [r4, #4]
 8002858:	6923      	ldr	r3, [r4, #16]
 800285a:	6023      	str	r3, [r4, #0]
 800285c:	04cb      	lsls	r3, r1, #19
 800285e:	d505      	bpl.n	800286c <__sflush_r+0x80>
 8002860:	1c43      	adds	r3, r0, #1
 8002862:	d102      	bne.n	800286a <__sflush_r+0x7e>
 8002864:	682b      	ldr	r3, [r5, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d100      	bne.n	800286c <__sflush_r+0x80>
 800286a:	6560      	str	r0, [r4, #84]	; 0x54
 800286c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800286e:	602e      	str	r6, [r5, #0]
 8002870:	2900      	cmp	r1, #0
 8002872:	d0c7      	beq.n	8002804 <__sflush_r+0x18>
 8002874:	0023      	movs	r3, r4
 8002876:	3344      	adds	r3, #68	; 0x44
 8002878:	4299      	cmp	r1, r3
 800287a:	d002      	beq.n	8002882 <__sflush_r+0x96>
 800287c:	0028      	movs	r0, r5
 800287e:	f000 f9ad 	bl	8002bdc <_free_r>
 8002882:	2000      	movs	r0, #0
 8002884:	6360      	str	r0, [r4, #52]	; 0x34
 8002886:	e7be      	b.n	8002806 <__sflush_r+0x1a>
 8002888:	2301      	movs	r3, #1
 800288a:	0028      	movs	r0, r5
 800288c:	47b8      	blx	r7
 800288e:	1c43      	adds	r3, r0, #1
 8002890:	d1c6      	bne.n	8002820 <__sflush_r+0x34>
 8002892:	682b      	ldr	r3, [r5, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0c3      	beq.n	8002820 <__sflush_r+0x34>
 8002898:	2b1d      	cmp	r3, #29
 800289a:	d001      	beq.n	80028a0 <__sflush_r+0xb4>
 800289c:	2b16      	cmp	r3, #22
 800289e:	d101      	bne.n	80028a4 <__sflush_r+0xb8>
 80028a0:	602e      	str	r6, [r5, #0]
 80028a2:	e7af      	b.n	8002804 <__sflush_r+0x18>
 80028a4:	2340      	movs	r3, #64	; 0x40
 80028a6:	89a2      	ldrh	r2, [r4, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	81a3      	strh	r3, [r4, #12]
 80028ac:	e7ab      	b.n	8002806 <__sflush_r+0x1a>
 80028ae:	2340      	movs	r3, #64	; 0x40
 80028b0:	430b      	orrs	r3, r1
 80028b2:	2001      	movs	r0, #1
 80028b4:	81a3      	strh	r3, [r4, #12]
 80028b6:	4240      	negs	r0, r0
 80028b8:	e7a5      	b.n	8002806 <__sflush_r+0x1a>
 80028ba:	690f      	ldr	r7, [r1, #16]
 80028bc:	2f00      	cmp	r7, #0
 80028be:	d0a1      	beq.n	8002804 <__sflush_r+0x18>
 80028c0:	680b      	ldr	r3, [r1, #0]
 80028c2:	600f      	str	r7, [r1, #0]
 80028c4:	1bdb      	subs	r3, r3, r7
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	2300      	movs	r3, #0
 80028ca:	0792      	lsls	r2, r2, #30
 80028cc:	d100      	bne.n	80028d0 <__sflush_r+0xe4>
 80028ce:	694b      	ldr	r3, [r1, #20]
 80028d0:	60a3      	str	r3, [r4, #8]
 80028d2:	9b01      	ldr	r3, [sp, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	dc00      	bgt.n	80028da <__sflush_r+0xee>
 80028d8:	e794      	b.n	8002804 <__sflush_r+0x18>
 80028da:	9b01      	ldr	r3, [sp, #4]
 80028dc:	003a      	movs	r2, r7
 80028de:	6a21      	ldr	r1, [r4, #32]
 80028e0:	0028      	movs	r0, r5
 80028e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028e4:	47b0      	blx	r6
 80028e6:	2800      	cmp	r0, #0
 80028e8:	dc03      	bgt.n	80028f2 <__sflush_r+0x106>
 80028ea:	2340      	movs	r3, #64	; 0x40
 80028ec:	89a2      	ldrh	r2, [r4, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	e7df      	b.n	80028b2 <__sflush_r+0xc6>
 80028f2:	9b01      	ldr	r3, [sp, #4]
 80028f4:	183f      	adds	r7, r7, r0
 80028f6:	1a1b      	subs	r3, r3, r0
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	e7ea      	b.n	80028d2 <__sflush_r+0xe6>
 80028fc:	20400001 	.word	0x20400001

08002900 <_fflush_r>:
 8002900:	690b      	ldr	r3, [r1, #16]
 8002902:	b570      	push	{r4, r5, r6, lr}
 8002904:	0005      	movs	r5, r0
 8002906:	000c      	movs	r4, r1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <_fflush_r+0x10>
 800290c:	2000      	movs	r0, #0
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	2800      	cmp	r0, #0
 8002912:	d004      	beq.n	800291e <_fflush_r+0x1e>
 8002914:	6983      	ldr	r3, [r0, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <_fflush_r+0x1e>
 800291a:	f000 f85f 	bl	80029dc <__sinit>
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <_fflush_r+0x4c>)
 8002920:	429c      	cmp	r4, r3
 8002922:	d109      	bne.n	8002938 <_fflush_r+0x38>
 8002924:	686c      	ldr	r4, [r5, #4]
 8002926:	220c      	movs	r2, #12
 8002928:	5ea3      	ldrsh	r3, [r4, r2]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0ee      	beq.n	800290c <_fflush_r+0xc>
 800292e:	0021      	movs	r1, r4
 8002930:	0028      	movs	r0, r5
 8002932:	f7ff ff5b 	bl	80027ec <__sflush_r>
 8002936:	e7ea      	b.n	800290e <_fflush_r+0xe>
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <_fflush_r+0x50>)
 800293a:	429c      	cmp	r4, r3
 800293c:	d101      	bne.n	8002942 <_fflush_r+0x42>
 800293e:	68ac      	ldr	r4, [r5, #8]
 8002940:	e7f1      	b.n	8002926 <_fflush_r+0x26>
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <_fflush_r+0x54>)
 8002944:	429c      	cmp	r4, r3
 8002946:	d1ee      	bne.n	8002926 <_fflush_r+0x26>
 8002948:	68ec      	ldr	r4, [r5, #12]
 800294a:	e7ec      	b.n	8002926 <_fflush_r+0x26>
 800294c:	08002f54 	.word	0x08002f54
 8002950:	08002f74 	.word	0x08002f74
 8002954:	08002f34 	.word	0x08002f34

08002958 <std>:
 8002958:	2300      	movs	r3, #0
 800295a:	b510      	push	{r4, lr}
 800295c:	0004      	movs	r4, r0
 800295e:	6003      	str	r3, [r0, #0]
 8002960:	6043      	str	r3, [r0, #4]
 8002962:	6083      	str	r3, [r0, #8]
 8002964:	8181      	strh	r1, [r0, #12]
 8002966:	6643      	str	r3, [r0, #100]	; 0x64
 8002968:	81c2      	strh	r2, [r0, #14]
 800296a:	6103      	str	r3, [r0, #16]
 800296c:	6143      	str	r3, [r0, #20]
 800296e:	6183      	str	r3, [r0, #24]
 8002970:	0019      	movs	r1, r3
 8002972:	2208      	movs	r2, #8
 8002974:	305c      	adds	r0, #92	; 0x5c
 8002976:	f7ff fdfb 	bl	8002570 <memset>
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <std+0x38>)
 800297c:	6224      	str	r4, [r4, #32]
 800297e:	6263      	str	r3, [r4, #36]	; 0x24
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <std+0x3c>)
 8002982:	62a3      	str	r3, [r4, #40]	; 0x28
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <std+0x40>)
 8002986:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <std+0x44>)
 800298a:	6323      	str	r3, [r4, #48]	; 0x30
 800298c:	bd10      	pop	{r4, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	08002d51 	.word	0x08002d51
 8002994:	08002d79 	.word	0x08002d79
 8002998:	08002db1 	.word	0x08002db1
 800299c:	08002ddd 	.word	0x08002ddd

080029a0 <_cleanup_r>:
 80029a0:	b510      	push	{r4, lr}
 80029a2:	4902      	ldr	r1, [pc, #8]	; (80029ac <_cleanup_r+0xc>)
 80029a4:	f000 f88c 	bl	8002ac0 <_fwalk_reent>
 80029a8:	bd10      	pop	{r4, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	08002901 	.word	0x08002901

080029b0 <__sfmoreglue>:
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	2568      	movs	r5, #104	; 0x68
 80029b4:	1e4a      	subs	r2, r1, #1
 80029b6:	4355      	muls	r5, r2
 80029b8:	000e      	movs	r6, r1
 80029ba:	0029      	movs	r1, r5
 80029bc:	3174      	adds	r1, #116	; 0x74
 80029be:	f000 f957 	bl	8002c70 <_malloc_r>
 80029c2:	1e04      	subs	r4, r0, #0
 80029c4:	d008      	beq.n	80029d8 <__sfmoreglue+0x28>
 80029c6:	2100      	movs	r1, #0
 80029c8:	002a      	movs	r2, r5
 80029ca:	6001      	str	r1, [r0, #0]
 80029cc:	6046      	str	r6, [r0, #4]
 80029ce:	300c      	adds	r0, #12
 80029d0:	60a0      	str	r0, [r4, #8]
 80029d2:	3268      	adds	r2, #104	; 0x68
 80029d4:	f7ff fdcc 	bl	8002570 <memset>
 80029d8:	0020      	movs	r0, r4
 80029da:	bd70      	pop	{r4, r5, r6, pc}

080029dc <__sinit>:
 80029dc:	6983      	ldr	r3, [r0, #24]
 80029de:	b513      	push	{r0, r1, r4, lr}
 80029e0:	0004      	movs	r4, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d128      	bne.n	8002a38 <__sinit+0x5c>
 80029e6:	6483      	str	r3, [r0, #72]	; 0x48
 80029e8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80029ea:	6503      	str	r3, [r0, #80]	; 0x50
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <__sinit+0x60>)
 80029ee:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <__sinit+0x64>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6282      	str	r2, [r0, #40]	; 0x28
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	4298      	cmp	r0, r3
 80029f8:	d101      	bne.n	80029fe <__sinit+0x22>
 80029fa:	2301      	movs	r3, #1
 80029fc:	6183      	str	r3, [r0, #24]
 80029fe:	0020      	movs	r0, r4
 8002a00:	f000 f820 	bl	8002a44 <__sfp>
 8002a04:	6060      	str	r0, [r4, #4]
 8002a06:	0020      	movs	r0, r4
 8002a08:	f000 f81c 	bl	8002a44 <__sfp>
 8002a0c:	60a0      	str	r0, [r4, #8]
 8002a0e:	0020      	movs	r0, r4
 8002a10:	f000 f818 	bl	8002a44 <__sfp>
 8002a14:	2200      	movs	r2, #0
 8002a16:	60e0      	str	r0, [r4, #12]
 8002a18:	2104      	movs	r1, #4
 8002a1a:	6860      	ldr	r0, [r4, #4]
 8002a1c:	f7ff ff9c 	bl	8002958 <std>
 8002a20:	2201      	movs	r2, #1
 8002a22:	2109      	movs	r1, #9
 8002a24:	68a0      	ldr	r0, [r4, #8]
 8002a26:	f7ff ff97 	bl	8002958 <std>
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	2112      	movs	r1, #18
 8002a2e:	68e0      	ldr	r0, [r4, #12]
 8002a30:	f7ff ff92 	bl	8002958 <std>
 8002a34:	2301      	movs	r3, #1
 8002a36:	61a3      	str	r3, [r4, #24]
 8002a38:	bd13      	pop	{r0, r1, r4, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	08002f30 	.word	0x08002f30
 8002a40:	080029a1 	.word	0x080029a1

08002a44 <__sfp>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <__sfp+0x74>)
 8002a48:	0007      	movs	r7, r0
 8002a4a:	681e      	ldr	r6, [r3, #0]
 8002a4c:	69b3      	ldr	r3, [r6, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <__sfp+0x14>
 8002a52:	0030      	movs	r0, r6
 8002a54:	f7ff ffc2 	bl	80029dc <__sinit>
 8002a58:	3648      	adds	r6, #72	; 0x48
 8002a5a:	68b4      	ldr	r4, [r6, #8]
 8002a5c:	6873      	ldr	r3, [r6, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	d504      	bpl.n	8002a6c <__sfp+0x28>
 8002a62:	6833      	ldr	r3, [r6, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <__sfp+0x34>
 8002a68:	6836      	ldr	r6, [r6, #0]
 8002a6a:	e7f6      	b.n	8002a5a <__sfp+0x16>
 8002a6c:	220c      	movs	r2, #12
 8002a6e:	5ea5      	ldrsh	r5, [r4, r2]
 8002a70:	2d00      	cmp	r5, #0
 8002a72:	d00d      	beq.n	8002a90 <__sfp+0x4c>
 8002a74:	3468      	adds	r4, #104	; 0x68
 8002a76:	e7f2      	b.n	8002a5e <__sfp+0x1a>
 8002a78:	2104      	movs	r1, #4
 8002a7a:	0038      	movs	r0, r7
 8002a7c:	f7ff ff98 	bl	80029b0 <__sfmoreglue>
 8002a80:	6030      	str	r0, [r6, #0]
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d1f0      	bne.n	8002a68 <__sfp+0x24>
 8002a86:	230c      	movs	r3, #12
 8002a88:	0004      	movs	r4, r0
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	0020      	movs	r0, r4
 8002a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a90:	0020      	movs	r0, r4
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <__sfp+0x78>)
 8002a94:	6665      	str	r5, [r4, #100]	; 0x64
 8002a96:	6025      	str	r5, [r4, #0]
 8002a98:	6065      	str	r5, [r4, #4]
 8002a9a:	60a5      	str	r5, [r4, #8]
 8002a9c:	60e3      	str	r3, [r4, #12]
 8002a9e:	6125      	str	r5, [r4, #16]
 8002aa0:	6165      	str	r5, [r4, #20]
 8002aa2:	61a5      	str	r5, [r4, #24]
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	0029      	movs	r1, r5
 8002aa8:	305c      	adds	r0, #92	; 0x5c
 8002aaa:	f7ff fd61 	bl	8002570 <memset>
 8002aae:	6365      	str	r5, [r4, #52]	; 0x34
 8002ab0:	63a5      	str	r5, [r4, #56]	; 0x38
 8002ab2:	64a5      	str	r5, [r4, #72]	; 0x48
 8002ab4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002ab6:	e7e9      	b.n	8002a8c <__sfp+0x48>
 8002ab8:	08002f30 	.word	0x08002f30
 8002abc:	ffff0001 	.word	0xffff0001

08002ac0 <_fwalk_reent>:
 8002ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ac2:	0004      	movs	r4, r0
 8002ac4:	0007      	movs	r7, r0
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	9101      	str	r1, [sp, #4]
 8002aca:	3448      	adds	r4, #72	; 0x48
 8002acc:	2c00      	cmp	r4, #0
 8002ace:	d101      	bne.n	8002ad4 <_fwalk_reent+0x14>
 8002ad0:	0030      	movs	r0, r6
 8002ad2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ad4:	6863      	ldr	r3, [r4, #4]
 8002ad6:	68a5      	ldr	r5, [r4, #8]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	9b00      	ldr	r3, [sp, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	d501      	bpl.n	8002ae6 <_fwalk_reent+0x26>
 8002ae2:	6824      	ldr	r4, [r4, #0]
 8002ae4:	e7f2      	b.n	8002acc <_fwalk_reent+0xc>
 8002ae6:	89ab      	ldrh	r3, [r5, #12]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d908      	bls.n	8002afe <_fwalk_reent+0x3e>
 8002aec:	220e      	movs	r2, #14
 8002aee:	5eab      	ldrsh	r3, [r5, r2]
 8002af0:	3301      	adds	r3, #1
 8002af2:	d004      	beq.n	8002afe <_fwalk_reent+0x3e>
 8002af4:	0029      	movs	r1, r5
 8002af6:	0038      	movs	r0, r7
 8002af8:	9b01      	ldr	r3, [sp, #4]
 8002afa:	4798      	blx	r3
 8002afc:	4306      	orrs	r6, r0
 8002afe:	3568      	adds	r5, #104	; 0x68
 8002b00:	e7eb      	b.n	8002ada <_fwalk_reent+0x1a>
	...

08002b04 <__swhatbuf_r>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	000e      	movs	r6, r1
 8002b08:	001d      	movs	r5, r3
 8002b0a:	230e      	movs	r3, #14
 8002b0c:	5ec9      	ldrsh	r1, [r1, r3]
 8002b0e:	b096      	sub	sp, #88	; 0x58
 8002b10:	0014      	movs	r4, r2
 8002b12:	2900      	cmp	r1, #0
 8002b14:	da07      	bge.n	8002b26 <__swhatbuf_r+0x22>
 8002b16:	2300      	movs	r3, #0
 8002b18:	602b      	str	r3, [r5, #0]
 8002b1a:	89b3      	ldrh	r3, [r6, #12]
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	d411      	bmi.n	8002b44 <__swhatbuf_r+0x40>
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	e00f      	b.n	8002b46 <__swhatbuf_r+0x42>
 8002b26:	466a      	mov	r2, sp
 8002b28:	f000 f984 	bl	8002e34 <_fstat_r>
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	dbf2      	blt.n	8002b16 <__swhatbuf_r+0x12>
 8002b30:	22f0      	movs	r2, #240	; 0xf0
 8002b32:	9b01      	ldr	r3, [sp, #4]
 8002b34:	0212      	lsls	r2, r2, #8
 8002b36:	4013      	ands	r3, r2
 8002b38:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <__swhatbuf_r+0x4c>)
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	425a      	negs	r2, r3
 8002b3e:	4153      	adcs	r3, r2
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	e7ed      	b.n	8002b20 <__swhatbuf_r+0x1c>
 8002b44:	2340      	movs	r3, #64	; 0x40
 8002b46:	2000      	movs	r0, #0
 8002b48:	6023      	str	r3, [r4, #0]
 8002b4a:	b016      	add	sp, #88	; 0x58
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	ffffe000 	.word	0xffffe000

08002b54 <__smakebuf_r>:
 8002b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b56:	2602      	movs	r6, #2
 8002b58:	898b      	ldrh	r3, [r1, #12]
 8002b5a:	0005      	movs	r5, r0
 8002b5c:	000c      	movs	r4, r1
 8002b5e:	4233      	tst	r3, r6
 8002b60:	d006      	beq.n	8002b70 <__smakebuf_r+0x1c>
 8002b62:	0023      	movs	r3, r4
 8002b64:	3347      	adds	r3, #71	; 0x47
 8002b66:	6023      	str	r3, [r4, #0]
 8002b68:	6123      	str	r3, [r4, #16]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	6163      	str	r3, [r4, #20]
 8002b6e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002b70:	ab01      	add	r3, sp, #4
 8002b72:	466a      	mov	r2, sp
 8002b74:	f7ff ffc6 	bl	8002b04 <__swhatbuf_r>
 8002b78:	9900      	ldr	r1, [sp, #0]
 8002b7a:	0007      	movs	r7, r0
 8002b7c:	0028      	movs	r0, r5
 8002b7e:	f000 f877 	bl	8002c70 <_malloc_r>
 8002b82:	2800      	cmp	r0, #0
 8002b84:	d108      	bne.n	8002b98 <__smakebuf_r+0x44>
 8002b86:	220c      	movs	r2, #12
 8002b88:	5ea3      	ldrsh	r3, [r4, r2]
 8002b8a:	059a      	lsls	r2, r3, #22
 8002b8c:	d4ef      	bmi.n	8002b6e <__smakebuf_r+0x1a>
 8002b8e:	2203      	movs	r2, #3
 8002b90:	4393      	bics	r3, r2
 8002b92:	431e      	orrs	r6, r3
 8002b94:	81a6      	strh	r6, [r4, #12]
 8002b96:	e7e4      	b.n	8002b62 <__smakebuf_r+0xe>
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <__smakebuf_r+0x84>)
 8002b9a:	62ab      	str	r3, [r5, #40]	; 0x28
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	89a2      	ldrh	r2, [r4, #12]
 8002ba0:	6020      	str	r0, [r4, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	81a3      	strh	r3, [r4, #12]
 8002ba6:	9b00      	ldr	r3, [sp, #0]
 8002ba8:	6120      	str	r0, [r4, #16]
 8002baa:	6163      	str	r3, [r4, #20]
 8002bac:	9b01      	ldr	r3, [sp, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <__smakebuf_r+0x7a>
 8002bb2:	230e      	movs	r3, #14
 8002bb4:	5ee1      	ldrsh	r1, [r4, r3]
 8002bb6:	0028      	movs	r0, r5
 8002bb8:	f000 f94e 	bl	8002e58 <_isatty_r>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d006      	beq.n	8002bce <__smakebuf_r+0x7a>
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	89a3      	ldrh	r3, [r4, #12]
 8002bc4:	4393      	bics	r3, r2
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	2301      	movs	r3, #1
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	81a3      	strh	r3, [r4, #12]
 8002bce:	89a0      	ldrh	r0, [r4, #12]
 8002bd0:	4338      	orrs	r0, r7
 8002bd2:	81a0      	strh	r0, [r4, #12]
 8002bd4:	e7cb      	b.n	8002b6e <__smakebuf_r+0x1a>
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	080029a1 	.word	0x080029a1

08002bdc <_free_r>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	0005      	movs	r5, r0
 8002be0:	2900      	cmp	r1, #0
 8002be2:	d010      	beq.n	8002c06 <_free_r+0x2a>
 8002be4:	1f0c      	subs	r4, r1, #4
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da00      	bge.n	8002bee <_free_r+0x12>
 8002bec:	18e4      	adds	r4, r4, r3
 8002bee:	0028      	movs	r0, r5
 8002bf0:	f000 f958 	bl	8002ea4 <__malloc_lock>
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <_free_r+0x90>)
 8002bf6:	6813      	ldr	r3, [r2, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <_free_r+0x2c>
 8002bfc:	6063      	str	r3, [r4, #4]
 8002bfe:	6014      	str	r4, [r2, #0]
 8002c00:	0028      	movs	r0, r5
 8002c02:	f000 f950 	bl	8002ea6 <__malloc_unlock>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	42a3      	cmp	r3, r4
 8002c0a:	d909      	bls.n	8002c20 <_free_r+0x44>
 8002c0c:	6821      	ldr	r1, [r4, #0]
 8002c0e:	1860      	adds	r0, r4, r1
 8002c10:	4283      	cmp	r3, r0
 8002c12:	d1f3      	bne.n	8002bfc <_free_r+0x20>
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	1841      	adds	r1, r0, r1
 8002c1a:	6021      	str	r1, [r4, #0]
 8002c1c:	e7ee      	b.n	8002bfc <_free_r+0x20>
 8002c1e:	0013      	movs	r3, r2
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	2a00      	cmp	r2, #0
 8002c24:	d001      	beq.n	8002c2a <_free_r+0x4e>
 8002c26:	42a2      	cmp	r2, r4
 8002c28:	d9f9      	bls.n	8002c1e <_free_r+0x42>
 8002c2a:	6819      	ldr	r1, [r3, #0]
 8002c2c:	1858      	adds	r0, r3, r1
 8002c2e:	42a0      	cmp	r0, r4
 8002c30:	d10b      	bne.n	8002c4a <_free_r+0x6e>
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	1809      	adds	r1, r1, r0
 8002c36:	1858      	adds	r0, r3, r1
 8002c38:	6019      	str	r1, [r3, #0]
 8002c3a:	4282      	cmp	r2, r0
 8002c3c:	d1e0      	bne.n	8002c00 <_free_r+0x24>
 8002c3e:	6810      	ldr	r0, [r2, #0]
 8002c40:	6852      	ldr	r2, [r2, #4]
 8002c42:	1841      	adds	r1, r0, r1
 8002c44:	6019      	str	r1, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	e7da      	b.n	8002c00 <_free_r+0x24>
 8002c4a:	42a0      	cmp	r0, r4
 8002c4c:	d902      	bls.n	8002c54 <_free_r+0x78>
 8002c4e:	230c      	movs	r3, #12
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	e7d5      	b.n	8002c00 <_free_r+0x24>
 8002c54:	6821      	ldr	r1, [r4, #0]
 8002c56:	1860      	adds	r0, r4, r1
 8002c58:	4282      	cmp	r2, r0
 8002c5a:	d103      	bne.n	8002c64 <_free_r+0x88>
 8002c5c:	6810      	ldr	r0, [r2, #0]
 8002c5e:	6852      	ldr	r2, [r2, #4]
 8002c60:	1841      	adds	r1, r0, r1
 8002c62:	6021      	str	r1, [r4, #0]
 8002c64:	6062      	str	r2, [r4, #4]
 8002c66:	605c      	str	r4, [r3, #4]
 8002c68:	e7ca      	b.n	8002c00 <_free_r+0x24>
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	20000088 	.word	0x20000088

08002c70 <_malloc_r>:
 8002c70:	2303      	movs	r3, #3
 8002c72:	b570      	push	{r4, r5, r6, lr}
 8002c74:	1ccd      	adds	r5, r1, #3
 8002c76:	439d      	bics	r5, r3
 8002c78:	3508      	adds	r5, #8
 8002c7a:	0006      	movs	r6, r0
 8002c7c:	2d0c      	cmp	r5, #12
 8002c7e:	d21e      	bcs.n	8002cbe <_malloc_r+0x4e>
 8002c80:	250c      	movs	r5, #12
 8002c82:	42a9      	cmp	r1, r5
 8002c84:	d81d      	bhi.n	8002cc2 <_malloc_r+0x52>
 8002c86:	0030      	movs	r0, r6
 8002c88:	f000 f90c 	bl	8002ea4 <__malloc_lock>
 8002c8c:	4a25      	ldr	r2, [pc, #148]	; (8002d24 <_malloc_r+0xb4>)
 8002c8e:	6814      	ldr	r4, [r2, #0]
 8002c90:	0021      	movs	r1, r4
 8002c92:	2900      	cmp	r1, #0
 8002c94:	d119      	bne.n	8002cca <_malloc_r+0x5a>
 8002c96:	4c24      	ldr	r4, [pc, #144]	; (8002d28 <_malloc_r+0xb8>)
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d103      	bne.n	8002ca6 <_malloc_r+0x36>
 8002c9e:	0030      	movs	r0, r6
 8002ca0:	f000 f844 	bl	8002d2c <_sbrk_r>
 8002ca4:	6020      	str	r0, [r4, #0]
 8002ca6:	0029      	movs	r1, r5
 8002ca8:	0030      	movs	r0, r6
 8002caa:	f000 f83f 	bl	8002d2c <_sbrk_r>
 8002cae:	1c43      	adds	r3, r0, #1
 8002cb0:	d12b      	bne.n	8002d0a <_malloc_r+0x9a>
 8002cb2:	230c      	movs	r3, #12
 8002cb4:	0030      	movs	r0, r6
 8002cb6:	6033      	str	r3, [r6, #0]
 8002cb8:	f000 f8f5 	bl	8002ea6 <__malloc_unlock>
 8002cbc:	e003      	b.n	8002cc6 <_malloc_r+0x56>
 8002cbe:	2d00      	cmp	r5, #0
 8002cc0:	dadf      	bge.n	8002c82 <_malloc_r+0x12>
 8002cc2:	230c      	movs	r3, #12
 8002cc4:	6033      	str	r3, [r6, #0]
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	bd70      	pop	{r4, r5, r6, pc}
 8002cca:	680b      	ldr	r3, [r1, #0]
 8002ccc:	1b5b      	subs	r3, r3, r5
 8002cce:	d419      	bmi.n	8002d04 <_malloc_r+0x94>
 8002cd0:	2b0b      	cmp	r3, #11
 8002cd2:	d903      	bls.n	8002cdc <_malloc_r+0x6c>
 8002cd4:	600b      	str	r3, [r1, #0]
 8002cd6:	18cc      	adds	r4, r1, r3
 8002cd8:	6025      	str	r5, [r4, #0]
 8002cda:	e003      	b.n	8002ce4 <_malloc_r+0x74>
 8002cdc:	684b      	ldr	r3, [r1, #4]
 8002cde:	428c      	cmp	r4, r1
 8002ce0:	d10d      	bne.n	8002cfe <_malloc_r+0x8e>
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	0030      	movs	r0, r6
 8002ce6:	f000 f8de 	bl	8002ea6 <__malloc_unlock>
 8002cea:	0020      	movs	r0, r4
 8002cec:	2207      	movs	r2, #7
 8002cee:	300b      	adds	r0, #11
 8002cf0:	1d23      	adds	r3, r4, #4
 8002cf2:	4390      	bics	r0, r2
 8002cf4:	1ac3      	subs	r3, r0, r3
 8002cf6:	d0e7      	beq.n	8002cc8 <_malloc_r+0x58>
 8002cf8:	425a      	negs	r2, r3
 8002cfa:	50e2      	str	r2, [r4, r3]
 8002cfc:	e7e4      	b.n	8002cc8 <_malloc_r+0x58>
 8002cfe:	6063      	str	r3, [r4, #4]
 8002d00:	000c      	movs	r4, r1
 8002d02:	e7ef      	b.n	8002ce4 <_malloc_r+0x74>
 8002d04:	000c      	movs	r4, r1
 8002d06:	6849      	ldr	r1, [r1, #4]
 8002d08:	e7c3      	b.n	8002c92 <_malloc_r+0x22>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	1cc4      	adds	r4, r0, #3
 8002d0e:	439c      	bics	r4, r3
 8002d10:	42a0      	cmp	r0, r4
 8002d12:	d0e1      	beq.n	8002cd8 <_malloc_r+0x68>
 8002d14:	1a21      	subs	r1, r4, r0
 8002d16:	0030      	movs	r0, r6
 8002d18:	f000 f808 	bl	8002d2c <_sbrk_r>
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	d1db      	bne.n	8002cd8 <_malloc_r+0x68>
 8002d20:	e7c7      	b.n	8002cb2 <_malloc_r+0x42>
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	20000088 	.word	0x20000088
 8002d28:	2000008c 	.word	0x2000008c

08002d2c <_sbrk_r>:
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	b570      	push	{r4, r5, r6, lr}
 8002d30:	4c06      	ldr	r4, [pc, #24]	; (8002d4c <_sbrk_r+0x20>)
 8002d32:	0005      	movs	r5, r0
 8002d34:	0008      	movs	r0, r1
 8002d36:	6023      	str	r3, [r4, #0]
 8002d38:	f7ff fada 	bl	80022f0 <_sbrk>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	d103      	bne.n	8002d48 <_sbrk_r+0x1c>
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d000      	beq.n	8002d48 <_sbrk_r+0x1c>
 8002d46:	602b      	str	r3, [r5, #0]
 8002d48:	bd70      	pop	{r4, r5, r6, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	20000150 	.word	0x20000150

08002d50 <__sread>:
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	000c      	movs	r4, r1
 8002d54:	250e      	movs	r5, #14
 8002d56:	5f49      	ldrsh	r1, [r1, r5]
 8002d58:	f000 f8a6 	bl	8002ea8 <_read_r>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	db03      	blt.n	8002d68 <__sread+0x18>
 8002d60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d62:	181b      	adds	r3, r3, r0
 8002d64:	6563      	str	r3, [r4, #84]	; 0x54
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	89a3      	ldrh	r3, [r4, #12]
 8002d6a:	4a02      	ldr	r2, [pc, #8]	; (8002d74 <__sread+0x24>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	81a3      	strh	r3, [r4, #12]
 8002d70:	e7f9      	b.n	8002d66 <__sread+0x16>
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	ffffefff 	.word	0xffffefff

08002d78 <__swrite>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	001f      	movs	r7, r3
 8002d7c:	898b      	ldrh	r3, [r1, #12]
 8002d7e:	0005      	movs	r5, r0
 8002d80:	000c      	movs	r4, r1
 8002d82:	0016      	movs	r6, r2
 8002d84:	05db      	lsls	r3, r3, #23
 8002d86:	d505      	bpl.n	8002d94 <__swrite+0x1c>
 8002d88:	230e      	movs	r3, #14
 8002d8a:	5ec9      	ldrsh	r1, [r1, r3]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2302      	movs	r3, #2
 8002d90:	f000 f874 	bl	8002e7c <_lseek_r>
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <__swrite+0x34>)
 8002d98:	0028      	movs	r0, r5
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	81a3      	strh	r3, [r4, #12]
 8002d9e:	0032      	movs	r2, r6
 8002da0:	230e      	movs	r3, #14
 8002da2:	5ee1      	ldrsh	r1, [r4, r3]
 8002da4:	003b      	movs	r3, r7
 8002da6:	f000 f81f 	bl	8002de8 <_write_r>
 8002daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dac:	ffffefff 	.word	0xffffefff

08002db0 <__sseek>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	000c      	movs	r4, r1
 8002db4:	250e      	movs	r5, #14
 8002db6:	5f49      	ldrsh	r1, [r1, r5]
 8002db8:	f000 f860 	bl	8002e7c <_lseek_r>
 8002dbc:	89a3      	ldrh	r3, [r4, #12]
 8002dbe:	1c42      	adds	r2, r0, #1
 8002dc0:	d103      	bne.n	8002dca <__sseek+0x1a>
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <__sseek+0x28>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	81a3      	strh	r3, [r4, #12]
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	0152      	lsls	r2, r2, #5
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	81a3      	strh	r3, [r4, #12]
 8002dd2:	6560      	str	r0, [r4, #84]	; 0x54
 8002dd4:	e7f8      	b.n	8002dc8 <__sseek+0x18>
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	ffffefff 	.word	0xffffefff

08002ddc <__sclose>:
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	230e      	movs	r3, #14
 8002de0:	5ec9      	ldrsh	r1, [r1, r3]
 8002de2:	f000 f815 	bl	8002e10 <_close_r>
 8002de6:	bd10      	pop	{r4, pc}

08002de8 <_write_r>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	0005      	movs	r5, r0
 8002dec:	0008      	movs	r0, r1
 8002dee:	0011      	movs	r1, r2
 8002df0:	2200      	movs	r2, #0
 8002df2:	4c06      	ldr	r4, [pc, #24]	; (8002e0c <_write_r+0x24>)
 8002df4:	6022      	str	r2, [r4, #0]
 8002df6:	001a      	movs	r2, r3
 8002df8:	f7ff f944 	bl	8002084 <_write>
 8002dfc:	1c43      	adds	r3, r0, #1
 8002dfe:	d103      	bne.n	8002e08 <_write_r+0x20>
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d000      	beq.n	8002e08 <_write_r+0x20>
 8002e06:	602b      	str	r3, [r5, #0]
 8002e08:	bd70      	pop	{r4, r5, r6, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	20000150 	.word	0x20000150

08002e10 <_close_r>:
 8002e10:	2300      	movs	r3, #0
 8002e12:	b570      	push	{r4, r5, r6, lr}
 8002e14:	4c06      	ldr	r4, [pc, #24]	; (8002e30 <_close_r+0x20>)
 8002e16:	0005      	movs	r5, r0
 8002e18:	0008      	movs	r0, r1
 8002e1a:	6023      	str	r3, [r4, #0]
 8002e1c:	f7ff fa3c 	bl	8002298 <_close>
 8002e20:	1c43      	adds	r3, r0, #1
 8002e22:	d103      	bne.n	8002e2c <_close_r+0x1c>
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d000      	beq.n	8002e2c <_close_r+0x1c>
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	bd70      	pop	{r4, r5, r6, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	20000150 	.word	0x20000150

08002e34 <_fstat_r>:
 8002e34:	2300      	movs	r3, #0
 8002e36:	b570      	push	{r4, r5, r6, lr}
 8002e38:	4c06      	ldr	r4, [pc, #24]	; (8002e54 <_fstat_r+0x20>)
 8002e3a:	0005      	movs	r5, r0
 8002e3c:	0008      	movs	r0, r1
 8002e3e:	0011      	movs	r1, r2
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	f7ff fa33 	bl	80022ac <_fstat>
 8002e46:	1c43      	adds	r3, r0, #1
 8002e48:	d103      	bne.n	8002e52 <_fstat_r+0x1e>
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d000      	beq.n	8002e52 <_fstat_r+0x1e>
 8002e50:	602b      	str	r3, [r5, #0]
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	20000150 	.word	0x20000150

08002e58 <_isatty_r>:
 8002e58:	2300      	movs	r3, #0
 8002e5a:	b570      	push	{r4, r5, r6, lr}
 8002e5c:	4c06      	ldr	r4, [pc, #24]	; (8002e78 <_isatty_r+0x20>)
 8002e5e:	0005      	movs	r5, r0
 8002e60:	0008      	movs	r0, r1
 8002e62:	6023      	str	r3, [r4, #0]
 8002e64:	f7ff fa30 	bl	80022c8 <_isatty>
 8002e68:	1c43      	adds	r3, r0, #1
 8002e6a:	d103      	bne.n	8002e74 <_isatty_r+0x1c>
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d000      	beq.n	8002e74 <_isatty_r+0x1c>
 8002e72:	602b      	str	r3, [r5, #0]
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	20000150 	.word	0x20000150

08002e7c <_lseek_r>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	0005      	movs	r5, r0
 8002e80:	0008      	movs	r0, r1
 8002e82:	0011      	movs	r1, r2
 8002e84:	2200      	movs	r2, #0
 8002e86:	4c06      	ldr	r4, [pc, #24]	; (8002ea0 <_lseek_r+0x24>)
 8002e88:	6022      	str	r2, [r4, #0]
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	f7ff fa25 	bl	80022da <_lseek>
 8002e90:	1c43      	adds	r3, r0, #1
 8002e92:	d103      	bne.n	8002e9c <_lseek_r+0x20>
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d000      	beq.n	8002e9c <_lseek_r+0x20>
 8002e9a:	602b      	str	r3, [r5, #0]
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	20000150 	.word	0x20000150

08002ea4 <__malloc_lock>:
 8002ea4:	4770      	bx	lr

08002ea6 <__malloc_unlock>:
 8002ea6:	4770      	bx	lr

08002ea8 <_read_r>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	0005      	movs	r5, r0
 8002eac:	0008      	movs	r0, r1
 8002eae:	0011      	movs	r1, r2
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4c06      	ldr	r4, [pc, #24]	; (8002ecc <_read_r+0x24>)
 8002eb4:	6022      	str	r2, [r4, #0]
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	f7ff f9d1 	bl	800225e <_read>
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	d103      	bne.n	8002ec8 <_read_r+0x20>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d000      	beq.n	8002ec8 <_read_r+0x20>
 8002ec6:	602b      	str	r3, [r5, #0]
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	20000150 	.word	0x20000150

08002ed0 <_init>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr

08002edc <_fini>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr
