
bq_afe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009000  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  080090c0  080090c0  000190c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800957c  0800957c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800957c  0800957c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800957c  0800957c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200001d8  0800975c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0800975c  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a8a  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002844  00000000  00000000  00032c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  000354d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000910  00000000  00000000  00035f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a8f  00000000  00000000  00036818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d065  00000000  00000000  0004f2a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079bb6  00000000  00000000  0005c30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5ec2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003470  00000000  00000000  000d5f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080090a8 	.word	0x080090a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	080090a8 	.word	0x080090a8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fe55 	bl	80020d8 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fdad 	bl	8001f98 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fe47 	bl	80020d8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe3d 	bl	80020d8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fdcf 	bl	8002010 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fdc5 	bl	8002010 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fb6d 	bl	8000b7c <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 faef 	bl	8000a90 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb5f 	bl	8000b7c <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb55 	bl	8000b7c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fafd 	bl	8000ae0 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 faf3 	bl	8000ae0 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_f2uiz>:
 8000508:	219e      	movs	r1, #158	; 0x9e
 800050a:	b510      	push	{r4, lr}
 800050c:	05c9      	lsls	r1, r1, #23
 800050e:	1c04      	adds	r4, r0, #0
 8000510:	f7ff fff0 	bl	80004f4 <__aeabi_fcmpge>
 8000514:	2800      	cmp	r0, #0
 8000516:	d103      	bne.n	8000520 <__aeabi_f2uiz+0x18>
 8000518:	1c20      	adds	r0, r4, #0
 800051a:	f000 fe75 	bl	8001208 <__aeabi_f2iz>
 800051e:	bd10      	pop	{r4, pc}
 8000520:	219e      	movs	r1, #158	; 0x9e
 8000522:	1c20      	adds	r0, r4, #0
 8000524:	05c9      	lsls	r1, r1, #23
 8000526:	f000 fcab 	bl	8000e80 <__aeabi_fsub>
 800052a:	f000 fe6d 	bl	8001208 <__aeabi_f2iz>
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	061b      	lsls	r3, r3, #24
 8000532:	469c      	mov	ip, r3
 8000534:	4460      	add	r0, ip
 8000536:	e7f2      	b.n	800051e <__aeabi_f2uiz+0x16>

08000538 <__aeabi_fadd>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	4647      	mov	r7, r8
 800053c:	46ce      	mov	lr, r9
 800053e:	0243      	lsls	r3, r0, #9
 8000540:	0a5b      	lsrs	r3, r3, #9
 8000542:	0044      	lsls	r4, r0, #1
 8000544:	0fc2      	lsrs	r2, r0, #31
 8000546:	469c      	mov	ip, r3
 8000548:	0048      	lsls	r0, r1, #1
 800054a:	00dd      	lsls	r5, r3, #3
 800054c:	024b      	lsls	r3, r1, #9
 800054e:	0e24      	lsrs	r4, r4, #24
 8000550:	0a5b      	lsrs	r3, r3, #9
 8000552:	0e00      	lsrs	r0, r0, #24
 8000554:	b580      	push	{r7, lr}
 8000556:	4698      	mov	r8, r3
 8000558:	0026      	movs	r6, r4
 800055a:	4691      	mov	r9, r2
 800055c:	0fc9      	lsrs	r1, r1, #31
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	1a27      	subs	r7, r4, r0
 8000562:	428a      	cmp	r2, r1
 8000564:	d029      	beq.n	80005ba <__aeabi_fadd+0x82>
 8000566:	2f00      	cmp	r7, #0
 8000568:	dd15      	ble.n	8000596 <__aeabi_fadd+0x5e>
 800056a:	2800      	cmp	r0, #0
 800056c:	d14a      	bne.n	8000604 <__aeabi_fadd+0xcc>
 800056e:	2b00      	cmp	r3, #0
 8000570:	d000      	beq.n	8000574 <__aeabi_fadd+0x3c>
 8000572:	e095      	b.n	80006a0 <__aeabi_fadd+0x168>
 8000574:	08ed      	lsrs	r5, r5, #3
 8000576:	2cff      	cmp	r4, #255	; 0xff
 8000578:	d100      	bne.n	800057c <__aeabi_fadd+0x44>
 800057a:	e088      	b.n	800068e <__aeabi_fadd+0x156>
 800057c:	026b      	lsls	r3, r5, #9
 800057e:	0a5b      	lsrs	r3, r3, #9
 8000580:	b2e6      	uxtb	r6, r4
 8000582:	025b      	lsls	r3, r3, #9
 8000584:	05f6      	lsls	r6, r6, #23
 8000586:	0a58      	lsrs	r0, r3, #9
 8000588:	4330      	orrs	r0, r6
 800058a:	07d2      	lsls	r2, r2, #31
 800058c:	4310      	orrs	r0, r2
 800058e:	bc0c      	pop	{r2, r3}
 8000590:	4690      	mov	r8, r2
 8000592:	4699      	mov	r9, r3
 8000594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000596:	2f00      	cmp	r7, #0
 8000598:	d000      	beq.n	800059c <__aeabi_fadd+0x64>
 800059a:	e087      	b.n	80006ac <__aeabi_fadd+0x174>
 800059c:	1c60      	adds	r0, r4, #1
 800059e:	b2c0      	uxtb	r0, r0
 80005a0:	2801      	cmp	r0, #1
 80005a2:	dc00      	bgt.n	80005a6 <__aeabi_fadd+0x6e>
 80005a4:	e0b6      	b.n	8000714 <__aeabi_fadd+0x1dc>
 80005a6:	1aee      	subs	r6, r5, r3
 80005a8:	0172      	lsls	r2, r6, #5
 80005aa:	d500      	bpl.n	80005ae <__aeabi_fadd+0x76>
 80005ac:	e0c5      	b.n	800073a <__aeabi_fadd+0x202>
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d13d      	bne.n	800062e <__aeabi_fadd+0xf6>
 80005b2:	2200      	movs	r2, #0
 80005b4:	2600      	movs	r6, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	e7e3      	b.n	8000582 <__aeabi_fadd+0x4a>
 80005ba:	2f00      	cmp	r7, #0
 80005bc:	dc00      	bgt.n	80005c0 <__aeabi_fadd+0x88>
 80005be:	e096      	b.n	80006ee <__aeabi_fadd+0x1b6>
 80005c0:	2800      	cmp	r0, #0
 80005c2:	d05d      	beq.n	8000680 <__aeabi_fadd+0x148>
 80005c4:	2cff      	cmp	r4, #255	; 0xff
 80005c6:	d060      	beq.n	800068a <__aeabi_fadd+0x152>
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	04d2      	lsls	r2, r2, #19
 80005cc:	4313      	orrs	r3, r2
 80005ce:	2f1b      	cmp	r7, #27
 80005d0:	dd00      	ble.n	80005d4 <__aeabi_fadd+0x9c>
 80005d2:	e0ec      	b.n	80007ae <__aeabi_fadd+0x276>
 80005d4:	2220      	movs	r2, #32
 80005d6:	1bd2      	subs	r2, r2, r7
 80005d8:	0018      	movs	r0, r3
 80005da:	4093      	lsls	r3, r2
 80005dc:	40f8      	lsrs	r0, r7
 80005de:	1e5a      	subs	r2, r3, #1
 80005e0:	4193      	sbcs	r3, r2
 80005e2:	4303      	orrs	r3, r0
 80005e4:	18ed      	adds	r5, r5, r3
 80005e6:	016b      	lsls	r3, r5, #5
 80005e8:	d57b      	bpl.n	80006e2 <__aeabi_fadd+0x1aa>
 80005ea:	3401      	adds	r4, #1
 80005ec:	2cff      	cmp	r4, #255	; 0xff
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0xba>
 80005f0:	e0b7      	b.n	8000762 <__aeabi_fadd+0x22a>
 80005f2:	2201      	movs	r2, #1
 80005f4:	2607      	movs	r6, #7
 80005f6:	402a      	ands	r2, r5
 80005f8:	086b      	lsrs	r3, r5, #1
 80005fa:	4d9a      	ldr	r5, [pc, #616]	; (8000864 <__aeabi_fadd+0x32c>)
 80005fc:	401d      	ands	r5, r3
 80005fe:	4315      	orrs	r5, r2
 8000600:	402e      	ands	r6, r5
 8000602:	e029      	b.n	8000658 <__aeabi_fadd+0x120>
 8000604:	2cff      	cmp	r4, #255	; 0xff
 8000606:	d0b5      	beq.n	8000574 <__aeabi_fadd+0x3c>
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	04d2      	lsls	r2, r2, #19
 800060c:	4313      	orrs	r3, r2
 800060e:	2f1b      	cmp	r7, #27
 8000610:	dd00      	ble.n	8000614 <__aeabi_fadd+0xdc>
 8000612:	e0b2      	b.n	800077a <__aeabi_fadd+0x242>
 8000614:	2220      	movs	r2, #32
 8000616:	1bd2      	subs	r2, r2, r7
 8000618:	0019      	movs	r1, r3
 800061a:	4093      	lsls	r3, r2
 800061c:	40f9      	lsrs	r1, r7
 800061e:	1e5a      	subs	r2, r3, #1
 8000620:	4193      	sbcs	r3, r2
 8000622:	430b      	orrs	r3, r1
 8000624:	1aed      	subs	r5, r5, r3
 8000626:	016b      	lsls	r3, r5, #5
 8000628:	d55b      	bpl.n	80006e2 <__aeabi_fadd+0x1aa>
 800062a:	01ad      	lsls	r5, r5, #6
 800062c:	09ae      	lsrs	r6, r5, #6
 800062e:	0030      	movs	r0, r6
 8000630:	f002 fd08 	bl	8003044 <__clzsi2>
 8000634:	3805      	subs	r0, #5
 8000636:	4086      	lsls	r6, r0
 8000638:	4284      	cmp	r4, r0
 800063a:	dc65      	bgt.n	8000708 <__aeabi_fadd+0x1d0>
 800063c:	1b04      	subs	r4, r0, r4
 800063e:	0033      	movs	r3, r6
 8000640:	2020      	movs	r0, #32
 8000642:	3401      	adds	r4, #1
 8000644:	40e3      	lsrs	r3, r4
 8000646:	1b04      	subs	r4, r0, r4
 8000648:	40a6      	lsls	r6, r4
 800064a:	1e75      	subs	r5, r6, #1
 800064c:	41ae      	sbcs	r6, r5
 800064e:	4333      	orrs	r3, r6
 8000650:	2607      	movs	r6, #7
 8000652:	001d      	movs	r5, r3
 8000654:	2400      	movs	r4, #0
 8000656:	401e      	ands	r6, r3
 8000658:	2201      	movs	r2, #1
 800065a:	464b      	mov	r3, r9
 800065c:	401a      	ands	r2, r3
 800065e:	2e00      	cmp	r6, #0
 8000660:	d004      	beq.n	800066c <__aeabi_fadd+0x134>
 8000662:	230f      	movs	r3, #15
 8000664:	402b      	ands	r3, r5
 8000666:	2b04      	cmp	r3, #4
 8000668:	d000      	beq.n	800066c <__aeabi_fadd+0x134>
 800066a:	3504      	adds	r5, #4
 800066c:	016b      	lsls	r3, r5, #5
 800066e:	d400      	bmi.n	8000672 <__aeabi_fadd+0x13a>
 8000670:	e780      	b.n	8000574 <__aeabi_fadd+0x3c>
 8000672:	3401      	adds	r4, #1
 8000674:	b2e6      	uxtb	r6, r4
 8000676:	2cff      	cmp	r4, #255	; 0xff
 8000678:	d12f      	bne.n	80006da <__aeabi_fadd+0x1a2>
 800067a:	26ff      	movs	r6, #255	; 0xff
 800067c:	2300      	movs	r3, #0
 800067e:	e780      	b.n	8000582 <__aeabi_fadd+0x4a>
 8000680:	2b00      	cmp	r3, #0
 8000682:	d152      	bne.n	800072a <__aeabi_fadd+0x1f2>
 8000684:	2cff      	cmp	r4, #255	; 0xff
 8000686:	d000      	beq.n	800068a <__aeabi_fadd+0x152>
 8000688:	e774      	b.n	8000574 <__aeabi_fadd+0x3c>
 800068a:	000a      	movs	r2, r1
 800068c:	08ed      	lsrs	r5, r5, #3
 800068e:	2d00      	cmp	r5, #0
 8000690:	d0f3      	beq.n	800067a <__aeabi_fadd+0x142>
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	03db      	lsls	r3, r3, #15
 8000696:	432b      	orrs	r3, r5
 8000698:	025b      	lsls	r3, r3, #9
 800069a:	0a5b      	lsrs	r3, r3, #9
 800069c:	26ff      	movs	r6, #255	; 0xff
 800069e:	e770      	b.n	8000582 <__aeabi_fadd+0x4a>
 80006a0:	3f01      	subs	r7, #1
 80006a2:	2f00      	cmp	r7, #0
 80006a4:	d0be      	beq.n	8000624 <__aeabi_fadd+0xec>
 80006a6:	2cff      	cmp	r4, #255	; 0xff
 80006a8:	d1b1      	bne.n	800060e <__aeabi_fadd+0xd6>
 80006aa:	e763      	b.n	8000574 <__aeabi_fadd+0x3c>
 80006ac:	2c00      	cmp	r4, #0
 80006ae:	d047      	beq.n	8000740 <__aeabi_fadd+0x208>
 80006b0:	28ff      	cmp	r0, #255	; 0xff
 80006b2:	d069      	beq.n	8000788 <__aeabi_fadd+0x250>
 80006b4:	2480      	movs	r4, #128	; 0x80
 80006b6:	04e4      	lsls	r4, r4, #19
 80006b8:	427a      	negs	r2, r7
 80006ba:	4325      	orrs	r5, r4
 80006bc:	2a1b      	cmp	r2, #27
 80006be:	dd00      	ble.n	80006c2 <__aeabi_fadd+0x18a>
 80006c0:	e0c5      	b.n	800084e <__aeabi_fadd+0x316>
 80006c2:	002c      	movs	r4, r5
 80006c4:	2620      	movs	r6, #32
 80006c6:	40d4      	lsrs	r4, r2
 80006c8:	1ab2      	subs	r2, r6, r2
 80006ca:	4095      	lsls	r5, r2
 80006cc:	1e6a      	subs	r2, r5, #1
 80006ce:	4195      	sbcs	r5, r2
 80006d0:	4325      	orrs	r5, r4
 80006d2:	1b5d      	subs	r5, r3, r5
 80006d4:	0004      	movs	r4, r0
 80006d6:	4689      	mov	r9, r1
 80006d8:	e7a5      	b.n	8000626 <__aeabi_fadd+0xee>
 80006da:	01ab      	lsls	r3, r5, #6
 80006dc:	0a5b      	lsrs	r3, r3, #9
 80006de:	e750      	b.n	8000582 <__aeabi_fadd+0x4a>
 80006e0:	2400      	movs	r4, #0
 80006e2:	2201      	movs	r2, #1
 80006e4:	464b      	mov	r3, r9
 80006e6:	401a      	ands	r2, r3
 80006e8:	076b      	lsls	r3, r5, #29
 80006ea:	d1ba      	bne.n	8000662 <__aeabi_fadd+0x12a>
 80006ec:	e742      	b.n	8000574 <__aeabi_fadd+0x3c>
 80006ee:	2f00      	cmp	r7, #0
 80006f0:	d13b      	bne.n	800076a <__aeabi_fadd+0x232>
 80006f2:	3401      	adds	r4, #1
 80006f4:	b2e0      	uxtb	r0, r4
 80006f6:	2801      	cmp	r0, #1
 80006f8:	dd4a      	ble.n	8000790 <__aeabi_fadd+0x258>
 80006fa:	2cff      	cmp	r4, #255	; 0xff
 80006fc:	d0bd      	beq.n	800067a <__aeabi_fadd+0x142>
 80006fe:	2607      	movs	r6, #7
 8000700:	18ed      	adds	r5, r5, r3
 8000702:	086d      	lsrs	r5, r5, #1
 8000704:	402e      	ands	r6, r5
 8000706:	e7a7      	b.n	8000658 <__aeabi_fadd+0x120>
 8000708:	2307      	movs	r3, #7
 800070a:	4d57      	ldr	r5, [pc, #348]	; (8000868 <__aeabi_fadd+0x330>)
 800070c:	1a24      	subs	r4, r4, r0
 800070e:	4035      	ands	r5, r6
 8000710:	401e      	ands	r6, r3
 8000712:	e7a1      	b.n	8000658 <__aeabi_fadd+0x120>
 8000714:	2c00      	cmp	r4, #0
 8000716:	d11b      	bne.n	8000750 <__aeabi_fadd+0x218>
 8000718:	2d00      	cmp	r5, #0
 800071a:	d16e      	bne.n	80007fa <__aeabi_fadd+0x2c2>
 800071c:	2b00      	cmp	r3, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x1ea>
 8000720:	e09a      	b.n	8000858 <__aeabi_fadd+0x320>
 8000722:	000a      	movs	r2, r1
 8000724:	001d      	movs	r5, r3
 8000726:	003c      	movs	r4, r7
 8000728:	e724      	b.n	8000574 <__aeabi_fadd+0x3c>
 800072a:	3f01      	subs	r7, #1
 800072c:	2f00      	cmp	r7, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0x1fa>
 8000730:	e758      	b.n	80005e4 <__aeabi_fadd+0xac>
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d000      	beq.n	8000738 <__aeabi_fadd+0x200>
 8000736:	e74a      	b.n	80005ce <__aeabi_fadd+0x96>
 8000738:	e7a7      	b.n	800068a <__aeabi_fadd+0x152>
 800073a:	1b5e      	subs	r6, r3, r5
 800073c:	4689      	mov	r9, r1
 800073e:	e776      	b.n	800062e <__aeabi_fadd+0xf6>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d11c      	bne.n	800077e <__aeabi_fadd+0x246>
 8000744:	000a      	movs	r2, r1
 8000746:	28ff      	cmp	r0, #255	; 0xff
 8000748:	d01f      	beq.n	800078a <__aeabi_fadd+0x252>
 800074a:	0004      	movs	r4, r0
 800074c:	001d      	movs	r5, r3
 800074e:	e711      	b.n	8000574 <__aeabi_fadd+0x3c>
 8000750:	2d00      	cmp	r5, #0
 8000752:	d15d      	bne.n	8000810 <__aeabi_fadd+0x2d8>
 8000754:	2b00      	cmp	r3, #0
 8000756:	d117      	bne.n	8000788 <__aeabi_fadd+0x250>
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	2200      	movs	r2, #0
 800075c:	03db      	lsls	r3, r3, #15
 800075e:	26ff      	movs	r6, #255	; 0xff
 8000760:	e70f      	b.n	8000582 <__aeabi_fadd+0x4a>
 8000762:	000a      	movs	r2, r1
 8000764:	26ff      	movs	r6, #255	; 0xff
 8000766:	2300      	movs	r3, #0
 8000768:	e70b      	b.n	8000582 <__aeabi_fadd+0x4a>
 800076a:	2c00      	cmp	r4, #0
 800076c:	d121      	bne.n	80007b2 <__aeabi_fadd+0x27a>
 800076e:	2d00      	cmp	r5, #0
 8000770:	d166      	bne.n	8000840 <__aeabi_fadd+0x308>
 8000772:	28ff      	cmp	r0, #255	; 0xff
 8000774:	d1e9      	bne.n	800074a <__aeabi_fadd+0x212>
 8000776:	001d      	movs	r5, r3
 8000778:	e787      	b.n	800068a <__aeabi_fadd+0x152>
 800077a:	2301      	movs	r3, #1
 800077c:	e752      	b.n	8000624 <__aeabi_fadd+0xec>
 800077e:	1c7a      	adds	r2, r7, #1
 8000780:	d0a7      	beq.n	80006d2 <__aeabi_fadd+0x19a>
 8000782:	43fa      	mvns	r2, r7
 8000784:	28ff      	cmp	r0, #255	; 0xff
 8000786:	d199      	bne.n	80006bc <__aeabi_fadd+0x184>
 8000788:	000a      	movs	r2, r1
 800078a:	001d      	movs	r5, r3
 800078c:	24ff      	movs	r4, #255	; 0xff
 800078e:	e6f1      	b.n	8000574 <__aeabi_fadd+0x3c>
 8000790:	2e00      	cmp	r6, #0
 8000792:	d121      	bne.n	80007d8 <__aeabi_fadd+0x2a0>
 8000794:	2d00      	cmp	r5, #0
 8000796:	d04f      	beq.n	8000838 <__aeabi_fadd+0x300>
 8000798:	2b00      	cmp	r3, #0
 800079a:	d04c      	beq.n	8000836 <__aeabi_fadd+0x2fe>
 800079c:	18ed      	adds	r5, r5, r3
 800079e:	016b      	lsls	r3, r5, #5
 80007a0:	d59e      	bpl.n	80006e0 <__aeabi_fadd+0x1a8>
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <__aeabi_fadd+0x330>)
 80007a4:	3607      	adds	r6, #7
 80007a6:	402e      	ands	r6, r5
 80007a8:	2401      	movs	r4, #1
 80007aa:	401d      	ands	r5, r3
 80007ac:	e754      	b.n	8000658 <__aeabi_fadd+0x120>
 80007ae:	2301      	movs	r3, #1
 80007b0:	e718      	b.n	80005e4 <__aeabi_fadd+0xac>
 80007b2:	28ff      	cmp	r0, #255	; 0xff
 80007b4:	d0df      	beq.n	8000776 <__aeabi_fadd+0x23e>
 80007b6:	2480      	movs	r4, #128	; 0x80
 80007b8:	04e4      	lsls	r4, r4, #19
 80007ba:	427f      	negs	r7, r7
 80007bc:	4325      	orrs	r5, r4
 80007be:	2f1b      	cmp	r7, #27
 80007c0:	dc4d      	bgt.n	800085e <__aeabi_fadd+0x326>
 80007c2:	2620      	movs	r6, #32
 80007c4:	1bf6      	subs	r6, r6, r7
 80007c6:	002c      	movs	r4, r5
 80007c8:	40b5      	lsls	r5, r6
 80007ca:	40fc      	lsrs	r4, r7
 80007cc:	1e6a      	subs	r2, r5, #1
 80007ce:	4195      	sbcs	r5, r2
 80007d0:	4325      	orrs	r5, r4
 80007d2:	18ed      	adds	r5, r5, r3
 80007d4:	0004      	movs	r4, r0
 80007d6:	e706      	b.n	80005e6 <__aeabi_fadd+0xae>
 80007d8:	2d00      	cmp	r5, #0
 80007da:	d0cc      	beq.n	8000776 <__aeabi_fadd+0x23e>
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0x2aa>
 80007e0:	e753      	b.n	800068a <__aeabi_fadd+0x152>
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	4660      	mov	r0, ip
 80007e6:	03c9      	lsls	r1, r1, #15
 80007e8:	4208      	tst	r0, r1
 80007ea:	d003      	beq.n	80007f4 <__aeabi_fadd+0x2bc>
 80007ec:	4640      	mov	r0, r8
 80007ee:	4208      	tst	r0, r1
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x2bc>
 80007f2:	001d      	movs	r5, r3
 80007f4:	2101      	movs	r1, #1
 80007f6:	4011      	ands	r1, r2
 80007f8:	e747      	b.n	800068a <__aeabi_fadd+0x152>
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fadd+0x2c8>
 80007fe:	e6b9      	b.n	8000574 <__aeabi_fadd+0x3c>
 8000800:	1aea      	subs	r2, r5, r3
 8000802:	0150      	lsls	r0, r2, #5
 8000804:	d525      	bpl.n	8000852 <__aeabi_fadd+0x31a>
 8000806:	2607      	movs	r6, #7
 8000808:	1b5d      	subs	r5, r3, r5
 800080a:	402e      	ands	r6, r5
 800080c:	4689      	mov	r9, r1
 800080e:	e723      	b.n	8000658 <__aeabi_fadd+0x120>
 8000810:	24ff      	movs	r4, #255	; 0xff
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x2e0>
 8000816:	e6ad      	b.n	8000574 <__aeabi_fadd+0x3c>
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	4660      	mov	r0, ip
 800081c:	03d2      	lsls	r2, r2, #15
 800081e:	4210      	tst	r0, r2
 8000820:	d004      	beq.n	800082c <__aeabi_fadd+0x2f4>
 8000822:	4640      	mov	r0, r8
 8000824:	4210      	tst	r0, r2
 8000826:	d101      	bne.n	800082c <__aeabi_fadd+0x2f4>
 8000828:	001d      	movs	r5, r3
 800082a:	4689      	mov	r9, r1
 800082c:	2201      	movs	r2, #1
 800082e:	464b      	mov	r3, r9
 8000830:	24ff      	movs	r4, #255	; 0xff
 8000832:	401a      	ands	r2, r3
 8000834:	e69e      	b.n	8000574 <__aeabi_fadd+0x3c>
 8000836:	002b      	movs	r3, r5
 8000838:	08dd      	lsrs	r5, r3, #3
 800083a:	000a      	movs	r2, r1
 800083c:	2400      	movs	r4, #0
 800083e:	e69d      	b.n	800057c <__aeabi_fadd+0x44>
 8000840:	1c7a      	adds	r2, r7, #1
 8000842:	d0c6      	beq.n	80007d2 <__aeabi_fadd+0x29a>
 8000844:	43ff      	mvns	r7, r7
 8000846:	28ff      	cmp	r0, #255	; 0xff
 8000848:	d1b9      	bne.n	80007be <__aeabi_fadd+0x286>
 800084a:	001d      	movs	r5, r3
 800084c:	e71d      	b.n	800068a <__aeabi_fadd+0x152>
 800084e:	2501      	movs	r5, #1
 8000850:	e73f      	b.n	80006d2 <__aeabi_fadd+0x19a>
 8000852:	1e15      	subs	r5, r2, #0
 8000854:	d000      	beq.n	8000858 <__aeabi_fadd+0x320>
 8000856:	e744      	b.n	80006e2 <__aeabi_fadd+0x1aa>
 8000858:	2200      	movs	r2, #0
 800085a:	2300      	movs	r3, #0
 800085c:	e691      	b.n	8000582 <__aeabi_fadd+0x4a>
 800085e:	2501      	movs	r5, #1
 8000860:	e7b7      	b.n	80007d2 <__aeabi_fadd+0x29a>
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	7dffffff 	.word	0x7dffffff
 8000868:	fbffffff 	.word	0xfbffffff

0800086c <__aeabi_fdiv>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	4657      	mov	r7, sl
 8000870:	464e      	mov	r6, r9
 8000872:	4645      	mov	r5, r8
 8000874:	46de      	mov	lr, fp
 8000876:	0244      	lsls	r4, r0, #9
 8000878:	b5e0      	push	{r5, r6, r7, lr}
 800087a:	0046      	lsls	r6, r0, #1
 800087c:	4688      	mov	r8, r1
 800087e:	0a64      	lsrs	r4, r4, #9
 8000880:	0e36      	lsrs	r6, r6, #24
 8000882:	0fc7      	lsrs	r7, r0, #31
 8000884:	2e00      	cmp	r6, #0
 8000886:	d063      	beq.n	8000950 <__aeabi_fdiv+0xe4>
 8000888:	2eff      	cmp	r6, #255	; 0xff
 800088a:	d024      	beq.n	80008d6 <__aeabi_fdiv+0x6a>
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	00e4      	lsls	r4, r4, #3
 8000890:	04db      	lsls	r3, r3, #19
 8000892:	431c      	orrs	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	4699      	mov	r9, r3
 8000898:	469b      	mov	fp, r3
 800089a:	3e7f      	subs	r6, #127	; 0x7f
 800089c:	4643      	mov	r3, r8
 800089e:	4642      	mov	r2, r8
 80008a0:	025d      	lsls	r5, r3, #9
 80008a2:	0fd2      	lsrs	r2, r2, #31
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	0a6d      	lsrs	r5, r5, #9
 80008a8:	0e1b      	lsrs	r3, r3, #24
 80008aa:	4690      	mov	r8, r2
 80008ac:	4692      	mov	sl, r2
 80008ae:	d065      	beq.n	800097c <__aeabi_fdiv+0x110>
 80008b0:	2bff      	cmp	r3, #255	; 0xff
 80008b2:	d055      	beq.n	8000960 <__aeabi_fdiv+0xf4>
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	2100      	movs	r1, #0
 80008b8:	00ed      	lsls	r5, r5, #3
 80008ba:	04d2      	lsls	r2, r2, #19
 80008bc:	3b7f      	subs	r3, #127	; 0x7f
 80008be:	4315      	orrs	r5, r2
 80008c0:	1af6      	subs	r6, r6, r3
 80008c2:	4643      	mov	r3, r8
 80008c4:	464a      	mov	r2, r9
 80008c6:	407b      	eors	r3, r7
 80008c8:	2a0f      	cmp	r2, #15
 80008ca:	d900      	bls.n	80008ce <__aeabi_fdiv+0x62>
 80008cc:	e08d      	b.n	80009ea <__aeabi_fdiv+0x17e>
 80008ce:	486d      	ldr	r0, [pc, #436]	; (8000a84 <__aeabi_fdiv+0x218>)
 80008d0:	0092      	lsls	r2, r2, #2
 80008d2:	5882      	ldr	r2, [r0, r2]
 80008d4:	4697      	mov	pc, r2
 80008d6:	2c00      	cmp	r4, #0
 80008d8:	d154      	bne.n	8000984 <__aeabi_fdiv+0x118>
 80008da:	2308      	movs	r3, #8
 80008dc:	4699      	mov	r9, r3
 80008de:	3b06      	subs	r3, #6
 80008e0:	26ff      	movs	r6, #255	; 0xff
 80008e2:	469b      	mov	fp, r3
 80008e4:	e7da      	b.n	800089c <__aeabi_fdiv+0x30>
 80008e6:	2500      	movs	r5, #0
 80008e8:	4653      	mov	r3, sl
 80008ea:	2902      	cmp	r1, #2
 80008ec:	d01b      	beq.n	8000926 <__aeabi_fdiv+0xba>
 80008ee:	2903      	cmp	r1, #3
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fdiv+0x88>
 80008f2:	e0bf      	b.n	8000a74 <__aeabi_fdiv+0x208>
 80008f4:	2901      	cmp	r1, #1
 80008f6:	d028      	beq.n	800094a <__aeabi_fdiv+0xde>
 80008f8:	0030      	movs	r0, r6
 80008fa:	307f      	adds	r0, #127	; 0x7f
 80008fc:	2800      	cmp	r0, #0
 80008fe:	dd20      	ble.n	8000942 <__aeabi_fdiv+0xd6>
 8000900:	076a      	lsls	r2, r5, #29
 8000902:	d004      	beq.n	800090e <__aeabi_fdiv+0xa2>
 8000904:	220f      	movs	r2, #15
 8000906:	402a      	ands	r2, r5
 8000908:	2a04      	cmp	r2, #4
 800090a:	d000      	beq.n	800090e <__aeabi_fdiv+0xa2>
 800090c:	3504      	adds	r5, #4
 800090e:	012a      	lsls	r2, r5, #4
 8000910:	d503      	bpl.n	800091a <__aeabi_fdiv+0xae>
 8000912:	0030      	movs	r0, r6
 8000914:	4a5c      	ldr	r2, [pc, #368]	; (8000a88 <__aeabi_fdiv+0x21c>)
 8000916:	3080      	adds	r0, #128	; 0x80
 8000918:	4015      	ands	r5, r2
 800091a:	28fe      	cmp	r0, #254	; 0xfe
 800091c:	dc03      	bgt.n	8000926 <__aeabi_fdiv+0xba>
 800091e:	01ac      	lsls	r4, r5, #6
 8000920:	0a64      	lsrs	r4, r4, #9
 8000922:	b2c2      	uxtb	r2, r0
 8000924:	e001      	b.n	800092a <__aeabi_fdiv+0xbe>
 8000926:	22ff      	movs	r2, #255	; 0xff
 8000928:	2400      	movs	r4, #0
 800092a:	0264      	lsls	r4, r4, #9
 800092c:	05d2      	lsls	r2, r2, #23
 800092e:	0a60      	lsrs	r0, r4, #9
 8000930:	07db      	lsls	r3, r3, #31
 8000932:	4310      	orrs	r0, r2
 8000934:	4318      	orrs	r0, r3
 8000936:	bc3c      	pop	{r2, r3, r4, r5}
 8000938:	4690      	mov	r8, r2
 800093a:	4699      	mov	r9, r3
 800093c:	46a2      	mov	sl, r4
 800093e:	46ab      	mov	fp, r5
 8000940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000942:	2201      	movs	r2, #1
 8000944:	1a10      	subs	r0, r2, r0
 8000946:	281b      	cmp	r0, #27
 8000948:	dd7c      	ble.n	8000a44 <__aeabi_fdiv+0x1d8>
 800094a:	2200      	movs	r2, #0
 800094c:	2400      	movs	r4, #0
 800094e:	e7ec      	b.n	800092a <__aeabi_fdiv+0xbe>
 8000950:	2c00      	cmp	r4, #0
 8000952:	d11d      	bne.n	8000990 <__aeabi_fdiv+0x124>
 8000954:	2304      	movs	r3, #4
 8000956:	4699      	mov	r9, r3
 8000958:	3b03      	subs	r3, #3
 800095a:	2600      	movs	r6, #0
 800095c:	469b      	mov	fp, r3
 800095e:	e79d      	b.n	800089c <__aeabi_fdiv+0x30>
 8000960:	3eff      	subs	r6, #255	; 0xff
 8000962:	2d00      	cmp	r5, #0
 8000964:	d120      	bne.n	80009a8 <__aeabi_fdiv+0x13c>
 8000966:	2102      	movs	r1, #2
 8000968:	4643      	mov	r3, r8
 800096a:	464a      	mov	r2, r9
 800096c:	407b      	eors	r3, r7
 800096e:	430a      	orrs	r2, r1
 8000970:	2a0f      	cmp	r2, #15
 8000972:	d8d8      	bhi.n	8000926 <__aeabi_fdiv+0xba>
 8000974:	4845      	ldr	r0, [pc, #276]	; (8000a8c <__aeabi_fdiv+0x220>)
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	5882      	ldr	r2, [r0, r2]
 800097a:	4697      	mov	pc, r2
 800097c:	2d00      	cmp	r5, #0
 800097e:	d119      	bne.n	80009b4 <__aeabi_fdiv+0x148>
 8000980:	2101      	movs	r1, #1
 8000982:	e7f1      	b.n	8000968 <__aeabi_fdiv+0xfc>
 8000984:	230c      	movs	r3, #12
 8000986:	4699      	mov	r9, r3
 8000988:	3b09      	subs	r3, #9
 800098a:	26ff      	movs	r6, #255	; 0xff
 800098c:	469b      	mov	fp, r3
 800098e:	e785      	b.n	800089c <__aeabi_fdiv+0x30>
 8000990:	0020      	movs	r0, r4
 8000992:	f002 fb57 	bl	8003044 <__clzsi2>
 8000996:	2676      	movs	r6, #118	; 0x76
 8000998:	1f43      	subs	r3, r0, #5
 800099a:	409c      	lsls	r4, r3
 800099c:	2300      	movs	r3, #0
 800099e:	4276      	negs	r6, r6
 80009a0:	1a36      	subs	r6, r6, r0
 80009a2:	4699      	mov	r9, r3
 80009a4:	469b      	mov	fp, r3
 80009a6:	e779      	b.n	800089c <__aeabi_fdiv+0x30>
 80009a8:	464a      	mov	r2, r9
 80009aa:	2303      	movs	r3, #3
 80009ac:	431a      	orrs	r2, r3
 80009ae:	4691      	mov	r9, r2
 80009b0:	2103      	movs	r1, #3
 80009b2:	e786      	b.n	80008c2 <__aeabi_fdiv+0x56>
 80009b4:	0028      	movs	r0, r5
 80009b6:	f002 fb45 	bl	8003044 <__clzsi2>
 80009ba:	1f43      	subs	r3, r0, #5
 80009bc:	1836      	adds	r6, r6, r0
 80009be:	409d      	lsls	r5, r3
 80009c0:	3676      	adds	r6, #118	; 0x76
 80009c2:	2100      	movs	r1, #0
 80009c4:	e77d      	b.n	80008c2 <__aeabi_fdiv+0x56>
 80009c6:	2480      	movs	r4, #128	; 0x80
 80009c8:	2300      	movs	r3, #0
 80009ca:	03e4      	lsls	r4, r4, #15
 80009cc:	22ff      	movs	r2, #255	; 0xff
 80009ce:	e7ac      	b.n	800092a <__aeabi_fdiv+0xbe>
 80009d0:	2500      	movs	r5, #0
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	03db      	lsls	r3, r3, #15
 80009d6:	421c      	tst	r4, r3
 80009d8:	d028      	beq.n	8000a2c <__aeabi_fdiv+0x1c0>
 80009da:	421d      	tst	r5, r3
 80009dc:	d126      	bne.n	8000a2c <__aeabi_fdiv+0x1c0>
 80009de:	432b      	orrs	r3, r5
 80009e0:	025c      	lsls	r4, r3, #9
 80009e2:	0a64      	lsrs	r4, r4, #9
 80009e4:	4643      	mov	r3, r8
 80009e6:	22ff      	movs	r2, #255	; 0xff
 80009e8:	e79f      	b.n	800092a <__aeabi_fdiv+0xbe>
 80009ea:	0162      	lsls	r2, r4, #5
 80009ec:	016c      	lsls	r4, r5, #5
 80009ee:	42a2      	cmp	r2, r4
 80009f0:	d224      	bcs.n	8000a3c <__aeabi_fdiv+0x1d0>
 80009f2:	211b      	movs	r1, #27
 80009f4:	2500      	movs	r5, #0
 80009f6:	3e01      	subs	r6, #1
 80009f8:	2701      	movs	r7, #1
 80009fa:	0010      	movs	r0, r2
 80009fc:	006d      	lsls	r5, r5, #1
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	2800      	cmp	r0, #0
 8000a02:	db01      	blt.n	8000a08 <__aeabi_fdiv+0x19c>
 8000a04:	4294      	cmp	r4, r2
 8000a06:	d801      	bhi.n	8000a0c <__aeabi_fdiv+0x1a0>
 8000a08:	1b12      	subs	r2, r2, r4
 8000a0a:	433d      	orrs	r5, r7
 8000a0c:	3901      	subs	r1, #1
 8000a0e:	2900      	cmp	r1, #0
 8000a10:	d1f3      	bne.n	80009fa <__aeabi_fdiv+0x18e>
 8000a12:	0014      	movs	r4, r2
 8000a14:	1e62      	subs	r2, r4, #1
 8000a16:	4194      	sbcs	r4, r2
 8000a18:	4325      	orrs	r5, r4
 8000a1a:	e76d      	b.n	80008f8 <__aeabi_fdiv+0x8c>
 8000a1c:	46ba      	mov	sl, r7
 8000a1e:	4659      	mov	r1, fp
 8000a20:	0025      	movs	r5, r4
 8000a22:	4653      	mov	r3, sl
 8000a24:	2902      	cmp	r1, #2
 8000a26:	d000      	beq.n	8000a2a <__aeabi_fdiv+0x1be>
 8000a28:	e761      	b.n	80008ee <__aeabi_fdiv+0x82>
 8000a2a:	e77c      	b.n	8000926 <__aeabi_fdiv+0xba>
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	03db      	lsls	r3, r3, #15
 8000a30:	431c      	orrs	r4, r3
 8000a32:	0264      	lsls	r4, r4, #9
 8000a34:	0a64      	lsrs	r4, r4, #9
 8000a36:	003b      	movs	r3, r7
 8000a38:	22ff      	movs	r2, #255	; 0xff
 8000a3a:	e776      	b.n	800092a <__aeabi_fdiv+0xbe>
 8000a3c:	1b12      	subs	r2, r2, r4
 8000a3e:	211a      	movs	r1, #26
 8000a40:	2501      	movs	r5, #1
 8000a42:	e7d9      	b.n	80009f8 <__aeabi_fdiv+0x18c>
 8000a44:	369e      	adds	r6, #158	; 0x9e
 8000a46:	002a      	movs	r2, r5
 8000a48:	40b5      	lsls	r5, r6
 8000a4a:	002c      	movs	r4, r5
 8000a4c:	40c2      	lsrs	r2, r0
 8000a4e:	1e65      	subs	r5, r4, #1
 8000a50:	41ac      	sbcs	r4, r5
 8000a52:	4314      	orrs	r4, r2
 8000a54:	0762      	lsls	r2, r4, #29
 8000a56:	d004      	beq.n	8000a62 <__aeabi_fdiv+0x1f6>
 8000a58:	220f      	movs	r2, #15
 8000a5a:	4022      	ands	r2, r4
 8000a5c:	2a04      	cmp	r2, #4
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fdiv+0x1f6>
 8000a60:	3404      	adds	r4, #4
 8000a62:	0162      	lsls	r2, r4, #5
 8000a64:	d403      	bmi.n	8000a6e <__aeabi_fdiv+0x202>
 8000a66:	01a4      	lsls	r4, r4, #6
 8000a68:	0a64      	lsrs	r4, r4, #9
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	e75d      	b.n	800092a <__aeabi_fdiv+0xbe>
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2400      	movs	r4, #0
 8000a72:	e75a      	b.n	800092a <__aeabi_fdiv+0xbe>
 8000a74:	2480      	movs	r4, #128	; 0x80
 8000a76:	03e4      	lsls	r4, r4, #15
 8000a78:	432c      	orrs	r4, r5
 8000a7a:	0264      	lsls	r4, r4, #9
 8000a7c:	0a64      	lsrs	r4, r4, #9
 8000a7e:	22ff      	movs	r2, #255	; 0xff
 8000a80:	e753      	b.n	800092a <__aeabi_fdiv+0xbe>
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	08009160 	.word	0x08009160
 8000a88:	f7ffffff 	.word	0xf7ffffff
 8000a8c:	080091a0 	.word	0x080091a0

08000a90 <__eqsf2>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	0042      	lsls	r2, r0, #1
 8000a94:	024e      	lsls	r6, r1, #9
 8000a96:	004c      	lsls	r4, r1, #1
 8000a98:	0245      	lsls	r5, r0, #9
 8000a9a:	0a6d      	lsrs	r5, r5, #9
 8000a9c:	0e12      	lsrs	r2, r2, #24
 8000a9e:	0fc3      	lsrs	r3, r0, #31
 8000aa0:	0a76      	lsrs	r6, r6, #9
 8000aa2:	0e24      	lsrs	r4, r4, #24
 8000aa4:	0fc9      	lsrs	r1, r1, #31
 8000aa6:	2aff      	cmp	r2, #255	; 0xff
 8000aa8:	d00f      	beq.n	8000aca <__eqsf2+0x3a>
 8000aaa:	2cff      	cmp	r4, #255	; 0xff
 8000aac:	d011      	beq.n	8000ad2 <__eqsf2+0x42>
 8000aae:	2001      	movs	r0, #1
 8000ab0:	42a2      	cmp	r2, r4
 8000ab2:	d000      	beq.n	8000ab6 <__eqsf2+0x26>
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	42b5      	cmp	r5, r6
 8000ab8:	d1fc      	bne.n	8000ab4 <__eqsf2+0x24>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d00d      	beq.n	8000ada <__eqsf2+0x4a>
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d1f8      	bne.n	8000ab4 <__eqsf2+0x24>
 8000ac2:	0028      	movs	r0, r5
 8000ac4:	1e45      	subs	r5, r0, #1
 8000ac6:	41a8      	sbcs	r0, r5
 8000ac8:	e7f4      	b.n	8000ab4 <__eqsf2+0x24>
 8000aca:	2001      	movs	r0, #1
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d1f1      	bne.n	8000ab4 <__eqsf2+0x24>
 8000ad0:	e7eb      	b.n	8000aaa <__eqsf2+0x1a>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	d1ed      	bne.n	8000ab4 <__eqsf2+0x24>
 8000ad8:	e7e9      	b.n	8000aae <__eqsf2+0x1e>
 8000ada:	2000      	movs	r0, #0
 8000adc:	e7ea      	b.n	8000ab4 <__eqsf2+0x24>
 8000ade:	46c0      	nop			; (mov r8, r8)

08000ae0 <__gesf2>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	004a      	lsls	r2, r1, #1
 8000ae4:	024e      	lsls	r6, r1, #9
 8000ae6:	0245      	lsls	r5, r0, #9
 8000ae8:	0044      	lsls	r4, r0, #1
 8000aea:	0a6d      	lsrs	r5, r5, #9
 8000aec:	0e24      	lsrs	r4, r4, #24
 8000aee:	0fc3      	lsrs	r3, r0, #31
 8000af0:	0a76      	lsrs	r6, r6, #9
 8000af2:	0e12      	lsrs	r2, r2, #24
 8000af4:	0fc9      	lsrs	r1, r1, #31
 8000af6:	2cff      	cmp	r4, #255	; 0xff
 8000af8:	d015      	beq.n	8000b26 <__gesf2+0x46>
 8000afa:	2aff      	cmp	r2, #255	; 0xff
 8000afc:	d00e      	beq.n	8000b1c <__gesf2+0x3c>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d115      	bne.n	8000b2e <__gesf2+0x4e>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d101      	bne.n	8000b0a <__gesf2+0x2a>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d01c      	beq.n	8000b44 <__gesf2+0x64>
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d014      	beq.n	8000b38 <__gesf2+0x58>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d027      	beq.n	8000b62 <__gesf2+0x82>
 8000b12:	2002      	movs	r0, #2
 8000b14:	3b01      	subs	r3, #1
 8000b16:	4018      	ands	r0, r3
 8000b18:	3801      	subs	r0, #1
 8000b1a:	bd70      	pop	{r4, r5, r6, pc}
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d0ee      	beq.n	8000afe <__gesf2+0x1e>
 8000b20:	2002      	movs	r0, #2
 8000b22:	4240      	negs	r0, r0
 8000b24:	e7f9      	b.n	8000b1a <__gesf2+0x3a>
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d1fa      	bne.n	8000b20 <__gesf2+0x40>
 8000b2a:	2aff      	cmp	r2, #255	; 0xff
 8000b2c:	d00e      	beq.n	8000b4c <__gesf2+0x6c>
 8000b2e:	2a00      	cmp	r2, #0
 8000b30:	d10e      	bne.n	8000b50 <__gesf2+0x70>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d0ed      	beq.n	8000b12 <__gesf2+0x32>
 8000b36:	e00b      	b.n	8000b50 <__gesf2+0x70>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	3901      	subs	r1, #1
 8000b3c:	4399      	bics	r1, r3
 8000b3e:	0008      	movs	r0, r1
 8000b40:	3001      	adds	r0, #1
 8000b42:	e7ea      	b.n	8000b1a <__gesf2+0x3a>
 8000b44:	2000      	movs	r0, #0
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e7      	beq.n	8000b1a <__gesf2+0x3a>
 8000b4a:	e7e2      	b.n	8000b12 <__gesf2+0x32>
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d1e7      	bne.n	8000b20 <__gesf2+0x40>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d1de      	bne.n	8000b12 <__gesf2+0x32>
 8000b54:	4294      	cmp	r4, r2
 8000b56:	dd05      	ble.n	8000b64 <__gesf2+0x84>
 8000b58:	2102      	movs	r1, #2
 8000b5a:	1e58      	subs	r0, r3, #1
 8000b5c:	4008      	ands	r0, r1
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7db      	b.n	8000b1a <__gesf2+0x3a>
 8000b62:	2400      	movs	r4, #0
 8000b64:	42a2      	cmp	r2, r4
 8000b66:	dc04      	bgt.n	8000b72 <__gesf2+0x92>
 8000b68:	42b5      	cmp	r5, r6
 8000b6a:	d8d2      	bhi.n	8000b12 <__gesf2+0x32>
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	42b5      	cmp	r5, r6
 8000b70:	d2d3      	bcs.n	8000b1a <__gesf2+0x3a>
 8000b72:	1e58      	subs	r0, r3, #1
 8000b74:	2301      	movs	r3, #1
 8000b76:	4398      	bics	r0, r3
 8000b78:	3001      	adds	r0, #1
 8000b7a:	e7ce      	b.n	8000b1a <__gesf2+0x3a>

08000b7c <__lesf2>:
 8000b7c:	b530      	push	{r4, r5, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0244      	lsls	r4, r0, #9
 8000b82:	024d      	lsls	r5, r1, #9
 8000b84:	0fc3      	lsrs	r3, r0, #31
 8000b86:	0048      	lsls	r0, r1, #1
 8000b88:	0a64      	lsrs	r4, r4, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a6d      	lsrs	r5, r5, #9
 8000b8e:	0e00      	lsrs	r0, r0, #24
 8000b90:	0fc9      	lsrs	r1, r1, #31
 8000b92:	2aff      	cmp	r2, #255	; 0xff
 8000b94:	d012      	beq.n	8000bbc <__lesf2+0x40>
 8000b96:	28ff      	cmp	r0, #255	; 0xff
 8000b98:	d00c      	beq.n	8000bb4 <__lesf2+0x38>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d112      	bne.n	8000bc4 <__lesf2+0x48>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d119      	bne.n	8000bd6 <__lesf2+0x5a>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d117      	bne.n	8000bd6 <__lesf2+0x5a>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d02b      	beq.n	8000c02 <__lesf2+0x86>
 8000baa:	2002      	movs	r0, #2
 8000bac:	3b01      	subs	r3, #1
 8000bae:	4018      	ands	r0, r3
 8000bb0:	3801      	subs	r0, #1
 8000bb2:	e026      	b.n	8000c02 <__lesf2+0x86>
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d0f0      	beq.n	8000b9a <__lesf2+0x1e>
 8000bb8:	2002      	movs	r0, #2
 8000bba:	e022      	b.n	8000c02 <__lesf2+0x86>
 8000bbc:	2c00      	cmp	r4, #0
 8000bbe:	d1fb      	bne.n	8000bb8 <__lesf2+0x3c>
 8000bc0:	28ff      	cmp	r0, #255	; 0xff
 8000bc2:	d01f      	beq.n	8000c04 <__lesf2+0x88>
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	d11f      	bne.n	8000c08 <__lesf2+0x8c>
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d11d      	bne.n	8000c08 <__lesf2+0x8c>
 8000bcc:	2002      	movs	r0, #2
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	4018      	ands	r0, r3
 8000bd2:	3801      	subs	r0, #1
 8000bd4:	e015      	b.n	8000c02 <__lesf2+0x86>
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	d00e      	beq.n	8000bf8 <__lesf2+0x7c>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d1e5      	bne.n	8000baa <__lesf2+0x2e>
 8000bde:	2200      	movs	r2, #0
 8000be0:	4290      	cmp	r0, r2
 8000be2:	dc04      	bgt.n	8000bee <__lesf2+0x72>
 8000be4:	42ac      	cmp	r4, r5
 8000be6:	d8e0      	bhi.n	8000baa <__lesf2+0x2e>
 8000be8:	2000      	movs	r0, #0
 8000bea:	42ac      	cmp	r4, r5
 8000bec:	d209      	bcs.n	8000c02 <__lesf2+0x86>
 8000bee:	1e58      	subs	r0, r3, #1
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	4398      	bics	r0, r3
 8000bf4:	3001      	adds	r0, #1
 8000bf6:	e004      	b.n	8000c02 <__lesf2+0x86>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	3901      	subs	r1, #1
 8000bfc:	4399      	bics	r1, r3
 8000bfe:	0008      	movs	r0, r1
 8000c00:	3001      	adds	r0, #1
 8000c02:	bd30      	pop	{r4, r5, pc}
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d1d7      	bne.n	8000bb8 <__lesf2+0x3c>
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d1ce      	bne.n	8000baa <__lesf2+0x2e>
 8000c0c:	4282      	cmp	r2, r0
 8000c0e:	dde7      	ble.n	8000be0 <__lesf2+0x64>
 8000c10:	2102      	movs	r1, #2
 8000c12:	1e58      	subs	r0, r3, #1
 8000c14:	4008      	ands	r0, r1
 8000c16:	3801      	subs	r0, #1
 8000c18:	e7f3      	b.n	8000c02 <__lesf2+0x86>
 8000c1a:	46c0      	nop			; (mov r8, r8)

08000c1c <__aeabi_fmul>:
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	464e      	mov	r6, r9
 8000c20:	4657      	mov	r7, sl
 8000c22:	4645      	mov	r5, r8
 8000c24:	46de      	mov	lr, fp
 8000c26:	b5e0      	push	{r5, r6, r7, lr}
 8000c28:	0243      	lsls	r3, r0, #9
 8000c2a:	0a5b      	lsrs	r3, r3, #9
 8000c2c:	0045      	lsls	r5, r0, #1
 8000c2e:	b083      	sub	sp, #12
 8000c30:	1c0f      	adds	r7, r1, #0
 8000c32:	4699      	mov	r9, r3
 8000c34:	0e2d      	lsrs	r5, r5, #24
 8000c36:	0fc6      	lsrs	r6, r0, #31
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d057      	beq.n	8000cec <__aeabi_fmul+0xd0>
 8000c3c:	2dff      	cmp	r5, #255	; 0xff
 8000c3e:	d024      	beq.n	8000c8a <__aeabi_fmul+0x6e>
 8000c40:	2080      	movs	r0, #128	; 0x80
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	04c0      	lsls	r0, r0, #19
 8000c46:	4318      	orrs	r0, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4681      	mov	r9, r0
 8000c4c:	469a      	mov	sl, r3
 8000c4e:	469b      	mov	fp, r3
 8000c50:	3d7f      	subs	r5, #127	; 0x7f
 8000c52:	027c      	lsls	r4, r7, #9
 8000c54:	007a      	lsls	r2, r7, #1
 8000c56:	0ffb      	lsrs	r3, r7, #31
 8000c58:	0a64      	lsrs	r4, r4, #9
 8000c5a:	0e12      	lsrs	r2, r2, #24
 8000c5c:	4698      	mov	r8, r3
 8000c5e:	d023      	beq.n	8000ca8 <__aeabi_fmul+0x8c>
 8000c60:	2aff      	cmp	r2, #255	; 0xff
 8000c62:	d04b      	beq.n	8000cfc <__aeabi_fmul+0xe0>
 8000c64:	00e3      	lsls	r3, r4, #3
 8000c66:	2480      	movs	r4, #128	; 0x80
 8000c68:	2000      	movs	r0, #0
 8000c6a:	04e4      	lsls	r4, r4, #19
 8000c6c:	3a7f      	subs	r2, #127	; 0x7f
 8000c6e:	431c      	orrs	r4, r3
 8000c70:	18ad      	adds	r5, r5, r2
 8000c72:	1c6b      	adds	r3, r5, #1
 8000c74:	4647      	mov	r7, r8
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	4653      	mov	r3, sl
 8000c7a:	4077      	eors	r7, r6
 8000c7c:	003a      	movs	r2, r7
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d848      	bhi.n	8000d14 <__aeabi_fmul+0xf8>
 8000c82:	497d      	ldr	r1, [pc, #500]	; (8000e78 <__aeabi_fmul+0x25c>)
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	58cb      	ldr	r3, [r1, r3]
 8000c88:	469f      	mov	pc, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_fmul+0x74>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fmul+0x180>
 8000c90:	3308      	adds	r3, #8
 8000c92:	469a      	mov	sl, r3
 8000c94:	3b06      	subs	r3, #6
 8000c96:	469b      	mov	fp, r3
 8000c98:	027c      	lsls	r4, r7, #9
 8000c9a:	007a      	lsls	r2, r7, #1
 8000c9c:	0ffb      	lsrs	r3, r7, #31
 8000c9e:	25ff      	movs	r5, #255	; 0xff
 8000ca0:	0a64      	lsrs	r4, r4, #9
 8000ca2:	0e12      	lsrs	r2, r2, #24
 8000ca4:	4698      	mov	r8, r3
 8000ca6:	d1db      	bne.n	8000c60 <__aeabi_fmul+0x44>
 8000ca8:	2c00      	cmp	r4, #0
 8000caa:	d000      	beq.n	8000cae <__aeabi_fmul+0x92>
 8000cac:	e090      	b.n	8000dd0 <__aeabi_fmul+0x1b4>
 8000cae:	4652      	mov	r2, sl
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	4692      	mov	sl, r2
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	e7db      	b.n	8000c72 <__aeabi_fmul+0x56>
 8000cba:	464c      	mov	r4, r9
 8000cbc:	4658      	mov	r0, fp
 8000cbe:	0017      	movs	r7, r2
 8000cc0:	2802      	cmp	r0, #2
 8000cc2:	d024      	beq.n	8000d0e <__aeabi_fmul+0xf2>
 8000cc4:	2803      	cmp	r0, #3
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fmul+0xae>
 8000cc8:	e0cf      	b.n	8000e6a <__aeabi_fmul+0x24e>
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	2801      	cmp	r0, #1
 8000cd0:	d14d      	bne.n	8000d6e <__aeabi_fmul+0x152>
 8000cd2:	0258      	lsls	r0, r3, #9
 8000cd4:	05d2      	lsls	r2, r2, #23
 8000cd6:	0a40      	lsrs	r0, r0, #9
 8000cd8:	07ff      	lsls	r7, r7, #31
 8000cda:	4310      	orrs	r0, r2
 8000cdc:	4338      	orrs	r0, r7
 8000cde:	b003      	add	sp, #12
 8000ce0:	bc3c      	pop	{r2, r3, r4, r5}
 8000ce2:	4690      	mov	r8, r2
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	46a2      	mov	sl, r4
 8000ce8:	46ab      	mov	fp, r5
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d15b      	bne.n	8000da8 <__aeabi_fmul+0x18c>
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	469a      	mov	sl, r3
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	2500      	movs	r5, #0
 8000cf8:	469b      	mov	fp, r3
 8000cfa:	e7aa      	b.n	8000c52 <__aeabi_fmul+0x36>
 8000cfc:	35ff      	adds	r5, #255	; 0xff
 8000cfe:	2c00      	cmp	r4, #0
 8000d00:	d160      	bne.n	8000dc4 <__aeabi_fmul+0x1a8>
 8000d02:	4652      	mov	r2, sl
 8000d04:	2302      	movs	r3, #2
 8000d06:	431a      	orrs	r2, r3
 8000d08:	4692      	mov	sl, r2
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	e7b1      	b.n	8000c72 <__aeabi_fmul+0x56>
 8000d0e:	22ff      	movs	r2, #255	; 0xff
 8000d10:	2300      	movs	r3, #0
 8000d12:	e7de      	b.n	8000cd2 <__aeabi_fmul+0xb6>
 8000d14:	464b      	mov	r3, r9
 8000d16:	0c1b      	lsrs	r3, r3, #16
 8000d18:	469c      	mov	ip, r3
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	0426      	lsls	r6, r4, #16
 8000d1e:	0c36      	lsrs	r6, r6, #16
 8000d20:	0418      	lsls	r0, r3, #16
 8000d22:	4661      	mov	r1, ip
 8000d24:	0033      	movs	r3, r6
 8000d26:	0c22      	lsrs	r2, r4, #16
 8000d28:	4664      	mov	r4, ip
 8000d2a:	0c00      	lsrs	r0, r0, #16
 8000d2c:	4343      	muls	r3, r0
 8000d2e:	434e      	muls	r6, r1
 8000d30:	4350      	muls	r0, r2
 8000d32:	4354      	muls	r4, r2
 8000d34:	1980      	adds	r0, r0, r6
 8000d36:	0c1a      	lsrs	r2, r3, #16
 8000d38:	1812      	adds	r2, r2, r0
 8000d3a:	4296      	cmp	r6, r2
 8000d3c:	d903      	bls.n	8000d46 <__aeabi_fmul+0x12a>
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	468c      	mov	ip, r1
 8000d44:	4464      	add	r4, ip
 8000d46:	041b      	lsls	r3, r3, #16
 8000d48:	0c1b      	lsrs	r3, r3, #16
 8000d4a:	0410      	lsls	r0, r2, #16
 8000d4c:	18c0      	adds	r0, r0, r3
 8000d4e:	0183      	lsls	r3, r0, #6
 8000d50:	1e5e      	subs	r6, r3, #1
 8000d52:	41b3      	sbcs	r3, r6
 8000d54:	0e80      	lsrs	r0, r0, #26
 8000d56:	4318      	orrs	r0, r3
 8000d58:	0c13      	lsrs	r3, r2, #16
 8000d5a:	191b      	adds	r3, r3, r4
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	001c      	movs	r4, r3
 8000d62:	0123      	lsls	r3, r4, #4
 8000d64:	d579      	bpl.n	8000e5a <__aeabi_fmul+0x23e>
 8000d66:	2301      	movs	r3, #1
 8000d68:	0862      	lsrs	r2, r4, #1
 8000d6a:	401c      	ands	r4, r3
 8000d6c:	4314      	orrs	r4, r2
 8000d6e:	9a01      	ldr	r2, [sp, #4]
 8000d70:	327f      	adds	r2, #127	; 0x7f
 8000d72:	2a00      	cmp	r2, #0
 8000d74:	dd4d      	ble.n	8000e12 <__aeabi_fmul+0x1f6>
 8000d76:	0763      	lsls	r3, r4, #29
 8000d78:	d004      	beq.n	8000d84 <__aeabi_fmul+0x168>
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	4023      	ands	r3, r4
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d000      	beq.n	8000d84 <__aeabi_fmul+0x168>
 8000d82:	3404      	adds	r4, #4
 8000d84:	0123      	lsls	r3, r4, #4
 8000d86:	d503      	bpl.n	8000d90 <__aeabi_fmul+0x174>
 8000d88:	4b3c      	ldr	r3, [pc, #240]	; (8000e7c <__aeabi_fmul+0x260>)
 8000d8a:	9a01      	ldr	r2, [sp, #4]
 8000d8c:	401c      	ands	r4, r3
 8000d8e:	3280      	adds	r2, #128	; 0x80
 8000d90:	2afe      	cmp	r2, #254	; 0xfe
 8000d92:	dcbc      	bgt.n	8000d0e <__aeabi_fmul+0xf2>
 8000d94:	01a3      	lsls	r3, r4, #6
 8000d96:	0a5b      	lsrs	r3, r3, #9
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	e79a      	b.n	8000cd2 <__aeabi_fmul+0xb6>
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	469a      	mov	sl, r3
 8000da0:	3b09      	subs	r3, #9
 8000da2:	25ff      	movs	r5, #255	; 0xff
 8000da4:	469b      	mov	fp, r3
 8000da6:	e754      	b.n	8000c52 <__aeabi_fmul+0x36>
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 f94b 	bl	8003044 <__clzsi2>
 8000dae:	464a      	mov	r2, r9
 8000db0:	1f43      	subs	r3, r0, #5
 8000db2:	2576      	movs	r5, #118	; 0x76
 8000db4:	409a      	lsls	r2, r3
 8000db6:	2300      	movs	r3, #0
 8000db8:	426d      	negs	r5, r5
 8000dba:	4691      	mov	r9, r2
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	469b      	mov	fp, r3
 8000dc2:	e746      	b.n	8000c52 <__aeabi_fmul+0x36>
 8000dc4:	4652      	mov	r2, sl
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	4692      	mov	sl, r2
 8000dcc:	2003      	movs	r0, #3
 8000dce:	e750      	b.n	8000c72 <__aeabi_fmul+0x56>
 8000dd0:	0020      	movs	r0, r4
 8000dd2:	f002 f937 	bl	8003044 <__clzsi2>
 8000dd6:	1f43      	subs	r3, r0, #5
 8000dd8:	1a2d      	subs	r5, r5, r0
 8000dda:	409c      	lsls	r4, r3
 8000ddc:	3d76      	subs	r5, #118	; 0x76
 8000dde:	2000      	movs	r0, #0
 8000de0:	e747      	b.n	8000c72 <__aeabi_fmul+0x56>
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	2700      	movs	r7, #0
 8000de6:	03db      	lsls	r3, r3, #15
 8000de8:	22ff      	movs	r2, #255	; 0xff
 8000dea:	e772      	b.n	8000cd2 <__aeabi_fmul+0xb6>
 8000dec:	4642      	mov	r2, r8
 8000dee:	e766      	b.n	8000cbe <__aeabi_fmul+0xa2>
 8000df0:	464c      	mov	r4, r9
 8000df2:	0032      	movs	r2, r6
 8000df4:	4658      	mov	r0, fp
 8000df6:	e762      	b.n	8000cbe <__aeabi_fmul+0xa2>
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	464a      	mov	r2, r9
 8000dfc:	03db      	lsls	r3, r3, #15
 8000dfe:	421a      	tst	r2, r3
 8000e00:	d022      	beq.n	8000e48 <__aeabi_fmul+0x22c>
 8000e02:	421c      	tst	r4, r3
 8000e04:	d120      	bne.n	8000e48 <__aeabi_fmul+0x22c>
 8000e06:	4323      	orrs	r3, r4
 8000e08:	025b      	lsls	r3, r3, #9
 8000e0a:	0a5b      	lsrs	r3, r3, #9
 8000e0c:	4647      	mov	r7, r8
 8000e0e:	22ff      	movs	r2, #255	; 0xff
 8000e10:	e75f      	b.n	8000cd2 <__aeabi_fmul+0xb6>
 8000e12:	2301      	movs	r3, #1
 8000e14:	1a9a      	subs	r2, r3, r2
 8000e16:	2a1b      	cmp	r2, #27
 8000e18:	dc21      	bgt.n	8000e5e <__aeabi_fmul+0x242>
 8000e1a:	0023      	movs	r3, r4
 8000e1c:	9901      	ldr	r1, [sp, #4]
 8000e1e:	40d3      	lsrs	r3, r2
 8000e20:	319e      	adds	r1, #158	; 0x9e
 8000e22:	408c      	lsls	r4, r1
 8000e24:	001a      	movs	r2, r3
 8000e26:	0023      	movs	r3, r4
 8000e28:	1e5c      	subs	r4, r3, #1
 8000e2a:	41a3      	sbcs	r3, r4
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	075a      	lsls	r2, r3, #29
 8000e30:	d004      	beq.n	8000e3c <__aeabi_fmul+0x220>
 8000e32:	220f      	movs	r2, #15
 8000e34:	401a      	ands	r2, r3
 8000e36:	2a04      	cmp	r2, #4
 8000e38:	d000      	beq.n	8000e3c <__aeabi_fmul+0x220>
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	015a      	lsls	r2, r3, #5
 8000e3e:	d411      	bmi.n	8000e64 <__aeabi_fmul+0x248>
 8000e40:	019b      	lsls	r3, r3, #6
 8000e42:	0a5b      	lsrs	r3, r3, #9
 8000e44:	2200      	movs	r2, #0
 8000e46:	e744      	b.n	8000cd2 <__aeabi_fmul+0xb6>
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	464a      	mov	r2, r9
 8000e4c:	03db      	lsls	r3, r3, #15
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	0a5b      	lsrs	r3, r3, #9
 8000e54:	0037      	movs	r7, r6
 8000e56:	22ff      	movs	r2, #255	; 0xff
 8000e58:	e73b      	b.n	8000cd2 <__aeabi_fmul+0xb6>
 8000e5a:	9501      	str	r5, [sp, #4]
 8000e5c:	e787      	b.n	8000d6e <__aeabi_fmul+0x152>
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2300      	movs	r3, #0
 8000e62:	e736      	b.n	8000cd2 <__aeabi_fmul+0xb6>
 8000e64:	2201      	movs	r2, #1
 8000e66:	2300      	movs	r3, #0
 8000e68:	e733      	b.n	8000cd2 <__aeabi_fmul+0xb6>
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	03db      	lsls	r3, r3, #15
 8000e6e:	4323      	orrs	r3, r4
 8000e70:	025b      	lsls	r3, r3, #9
 8000e72:	0a5b      	lsrs	r3, r3, #9
 8000e74:	22ff      	movs	r2, #255	; 0xff
 8000e76:	e72c      	b.n	8000cd2 <__aeabi_fmul+0xb6>
 8000e78:	080091e0 	.word	0x080091e0
 8000e7c:	f7ffffff 	.word	0xf7ffffff

08000e80 <__aeabi_fsub>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	4647      	mov	r7, r8
 8000e84:	46ce      	mov	lr, r9
 8000e86:	0044      	lsls	r4, r0, #1
 8000e88:	0fc2      	lsrs	r2, r0, #31
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	0247      	lsls	r7, r0, #9
 8000e8e:	0248      	lsls	r0, r1, #9
 8000e90:	0a40      	lsrs	r0, r0, #9
 8000e92:	4684      	mov	ip, r0
 8000e94:	4666      	mov	r6, ip
 8000e96:	0048      	lsls	r0, r1, #1
 8000e98:	0a7f      	lsrs	r7, r7, #9
 8000e9a:	0e24      	lsrs	r4, r4, #24
 8000e9c:	00f6      	lsls	r6, r6, #3
 8000e9e:	0025      	movs	r5, r4
 8000ea0:	4690      	mov	r8, r2
 8000ea2:	00fb      	lsls	r3, r7, #3
 8000ea4:	0e00      	lsrs	r0, r0, #24
 8000ea6:	0fc9      	lsrs	r1, r1, #31
 8000ea8:	46b1      	mov	r9, r6
 8000eaa:	28ff      	cmp	r0, #255	; 0xff
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_fsub+0x30>
 8000eae:	e085      	b.n	8000fbc <__aeabi_fsub+0x13c>
 8000eb0:	2601      	movs	r6, #1
 8000eb2:	4071      	eors	r1, r6
 8000eb4:	1a26      	subs	r6, r4, r0
 8000eb6:	4291      	cmp	r1, r2
 8000eb8:	d057      	beq.n	8000f6a <__aeabi_fsub+0xea>
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	dd43      	ble.n	8000f46 <__aeabi_fsub+0xc6>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_fsub+0x44>
 8000ec2:	e07f      	b.n	8000fc4 <__aeabi_fsub+0x144>
 8000ec4:	4649      	mov	r1, r9
 8000ec6:	2900      	cmp	r1, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fsub+0x4c>
 8000eca:	e0aa      	b.n	8001022 <__aeabi_fsub+0x1a2>
 8000ecc:	3e01      	subs	r6, #1
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_fsub+0x54>
 8000ed2:	e0f7      	b.n	80010c4 <__aeabi_fsub+0x244>
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	015a      	lsls	r2, r3, #5
 8000ed8:	d400      	bmi.n	8000edc <__aeabi_fsub+0x5c>
 8000eda:	e08b      	b.n	8000ff4 <__aeabi_fsub+0x174>
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	099c      	lsrs	r4, r3, #6
 8000ee0:	0020      	movs	r0, r4
 8000ee2:	f002 f8af 	bl	8003044 <__clzsi2>
 8000ee6:	3805      	subs	r0, #5
 8000ee8:	4084      	lsls	r4, r0
 8000eea:	4285      	cmp	r5, r0
 8000eec:	dd00      	ble.n	8000ef0 <__aeabi_fsub+0x70>
 8000eee:	e0d3      	b.n	8001098 <__aeabi_fsub+0x218>
 8000ef0:	1b45      	subs	r5, r0, r5
 8000ef2:	0023      	movs	r3, r4
 8000ef4:	2020      	movs	r0, #32
 8000ef6:	3501      	adds	r5, #1
 8000ef8:	40eb      	lsrs	r3, r5
 8000efa:	1b45      	subs	r5, r0, r5
 8000efc:	40ac      	lsls	r4, r5
 8000efe:	1e62      	subs	r2, r4, #1
 8000f00:	4194      	sbcs	r4, r2
 8000f02:	4323      	orrs	r3, r4
 8000f04:	2407      	movs	r4, #7
 8000f06:	2500      	movs	r5, #0
 8000f08:	401c      	ands	r4, r3
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4641      	mov	r1, r8
 8000f0e:	400a      	ands	r2, r1
 8000f10:	2c00      	cmp	r4, #0
 8000f12:	d004      	beq.n	8000f1e <__aeabi_fsub+0x9e>
 8000f14:	210f      	movs	r1, #15
 8000f16:	4019      	ands	r1, r3
 8000f18:	2904      	cmp	r1, #4
 8000f1a:	d000      	beq.n	8000f1e <__aeabi_fsub+0x9e>
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	0159      	lsls	r1, r3, #5
 8000f20:	d400      	bmi.n	8000f24 <__aeabi_fsub+0xa4>
 8000f22:	e080      	b.n	8001026 <__aeabi_fsub+0x1a6>
 8000f24:	3501      	adds	r5, #1
 8000f26:	b2ec      	uxtb	r4, r5
 8000f28:	2dff      	cmp	r5, #255	; 0xff
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0xae>
 8000f2c:	e0a3      	b.n	8001076 <__aeabi_fsub+0x1f6>
 8000f2e:	24ff      	movs	r4, #255	; 0xff
 8000f30:	2300      	movs	r3, #0
 8000f32:	025b      	lsls	r3, r3, #9
 8000f34:	05e4      	lsls	r4, r4, #23
 8000f36:	0a58      	lsrs	r0, r3, #9
 8000f38:	07d2      	lsls	r2, r2, #31
 8000f3a:	4320      	orrs	r0, r4
 8000f3c:	4310      	orrs	r0, r2
 8000f3e:	bc0c      	pop	{r2, r3}
 8000f40:	4690      	mov	r8, r2
 8000f42:	4699      	mov	r9, r3
 8000f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d174      	bne.n	8001034 <__aeabi_fsub+0x1b4>
 8000f4a:	1c60      	adds	r0, r4, #1
 8000f4c:	b2c0      	uxtb	r0, r0
 8000f4e:	2801      	cmp	r0, #1
 8000f50:	dc00      	bgt.n	8000f54 <__aeabi_fsub+0xd4>
 8000f52:	e0a7      	b.n	80010a4 <__aeabi_fsub+0x224>
 8000f54:	464a      	mov	r2, r9
 8000f56:	1a9c      	subs	r4, r3, r2
 8000f58:	0162      	lsls	r2, r4, #5
 8000f5a:	d500      	bpl.n	8000f5e <__aeabi_fsub+0xde>
 8000f5c:	e0b6      	b.n	80010cc <__aeabi_fsub+0x24c>
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d1be      	bne.n	8000ee0 <__aeabi_fsub+0x60>
 8000f62:	2200      	movs	r2, #0
 8000f64:	2400      	movs	r4, #0
 8000f66:	2300      	movs	r3, #0
 8000f68:	e7e3      	b.n	8000f32 <__aeabi_fsub+0xb2>
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	dc00      	bgt.n	8000f70 <__aeabi_fsub+0xf0>
 8000f6e:	e085      	b.n	800107c <__aeabi_fsub+0x1fc>
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d046      	beq.n	8001002 <__aeabi_fsub+0x182>
 8000f74:	2cff      	cmp	r4, #255	; 0xff
 8000f76:	d049      	beq.n	800100c <__aeabi_fsub+0x18c>
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	4648      	mov	r0, r9
 8000f7c:	04d2      	lsls	r2, r2, #19
 8000f7e:	4310      	orrs	r0, r2
 8000f80:	4681      	mov	r9, r0
 8000f82:	2201      	movs	r2, #1
 8000f84:	2e1b      	cmp	r6, #27
 8000f86:	dc09      	bgt.n	8000f9c <__aeabi_fsub+0x11c>
 8000f88:	2020      	movs	r0, #32
 8000f8a:	464c      	mov	r4, r9
 8000f8c:	1b80      	subs	r0, r0, r6
 8000f8e:	4084      	lsls	r4, r0
 8000f90:	464a      	mov	r2, r9
 8000f92:	0020      	movs	r0, r4
 8000f94:	40f2      	lsrs	r2, r6
 8000f96:	1e44      	subs	r4, r0, #1
 8000f98:	41a0      	sbcs	r0, r4
 8000f9a:	4302      	orrs	r2, r0
 8000f9c:	189b      	adds	r3, r3, r2
 8000f9e:	015a      	lsls	r2, r3, #5
 8000fa0:	d528      	bpl.n	8000ff4 <__aeabi_fsub+0x174>
 8000fa2:	3501      	adds	r5, #1
 8000fa4:	2dff      	cmp	r5, #255	; 0xff
 8000fa6:	d100      	bne.n	8000faa <__aeabi_fsub+0x12a>
 8000fa8:	e0a8      	b.n	80010fc <__aeabi_fsub+0x27c>
 8000faa:	2201      	movs	r2, #1
 8000fac:	2407      	movs	r4, #7
 8000fae:	4994      	ldr	r1, [pc, #592]	; (8001200 <__aeabi_fsub+0x380>)
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	085b      	lsrs	r3, r3, #1
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	401c      	ands	r4, r3
 8000fba:	e7a6      	b.n	8000f0a <__aeabi_fsub+0x8a>
 8000fbc:	2e00      	cmp	r6, #0
 8000fbe:	d000      	beq.n	8000fc2 <__aeabi_fsub+0x142>
 8000fc0:	e778      	b.n	8000eb4 <__aeabi_fsub+0x34>
 8000fc2:	e775      	b.n	8000eb0 <__aeabi_fsub+0x30>
 8000fc4:	2cff      	cmp	r4, #255	; 0xff
 8000fc6:	d054      	beq.n	8001072 <__aeabi_fsub+0x1f2>
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	4649      	mov	r1, r9
 8000fcc:	04d2      	lsls	r2, r2, #19
 8000fce:	4311      	orrs	r1, r2
 8000fd0:	4689      	mov	r9, r1
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2e1b      	cmp	r6, #27
 8000fd6:	dc09      	bgt.n	8000fec <__aeabi_fsub+0x16c>
 8000fd8:	2120      	movs	r1, #32
 8000fda:	4648      	mov	r0, r9
 8000fdc:	1b89      	subs	r1, r1, r6
 8000fde:	4088      	lsls	r0, r1
 8000fe0:	464a      	mov	r2, r9
 8000fe2:	0001      	movs	r1, r0
 8000fe4:	40f2      	lsrs	r2, r6
 8000fe6:	1e48      	subs	r0, r1, #1
 8000fe8:	4181      	sbcs	r1, r0
 8000fea:	430a      	orrs	r2, r1
 8000fec:	1a9b      	subs	r3, r3, r2
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	d500      	bpl.n	8000ff4 <__aeabi_fsub+0x174>
 8000ff2:	e773      	b.n	8000edc <__aeabi_fsub+0x5c>
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4641      	mov	r1, r8
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	0759      	lsls	r1, r3, #29
 8000ffc:	d000      	beq.n	8001000 <__aeabi_fsub+0x180>
 8000ffe:	e789      	b.n	8000f14 <__aeabi_fsub+0x94>
 8001000:	e011      	b.n	8001026 <__aeabi_fsub+0x1a6>
 8001002:	4648      	mov	r0, r9
 8001004:	2800      	cmp	r0, #0
 8001006:	d158      	bne.n	80010ba <__aeabi_fsub+0x23a>
 8001008:	2cff      	cmp	r4, #255	; 0xff
 800100a:	d10c      	bne.n	8001026 <__aeabi_fsub+0x1a6>
 800100c:	08db      	lsrs	r3, r3, #3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x194>
 8001012:	e78c      	b.n	8000f2e <__aeabi_fsub+0xae>
 8001014:	2080      	movs	r0, #128	; 0x80
 8001016:	03c0      	lsls	r0, r0, #15
 8001018:	4303      	orrs	r3, r0
 800101a:	025b      	lsls	r3, r3, #9
 800101c:	0a5b      	lsrs	r3, r3, #9
 800101e:	24ff      	movs	r4, #255	; 0xff
 8001020:	e787      	b.n	8000f32 <__aeabi_fsub+0xb2>
 8001022:	2cff      	cmp	r4, #255	; 0xff
 8001024:	d025      	beq.n	8001072 <__aeabi_fsub+0x1f2>
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	2dff      	cmp	r5, #255	; 0xff
 800102a:	d0f0      	beq.n	800100e <__aeabi_fsub+0x18e>
 800102c:	025b      	lsls	r3, r3, #9
 800102e:	0a5b      	lsrs	r3, r3, #9
 8001030:	b2ec      	uxtb	r4, r5
 8001032:	e77e      	b.n	8000f32 <__aeabi_fsub+0xb2>
 8001034:	2c00      	cmp	r4, #0
 8001036:	d04d      	beq.n	80010d4 <__aeabi_fsub+0x254>
 8001038:	28ff      	cmp	r0, #255	; 0xff
 800103a:	d018      	beq.n	800106e <__aeabi_fsub+0x1ee>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	04e4      	lsls	r4, r4, #19
 8001040:	4272      	negs	r2, r6
 8001042:	4323      	orrs	r3, r4
 8001044:	2a1b      	cmp	r2, #27
 8001046:	dd00      	ble.n	800104a <__aeabi_fsub+0x1ca>
 8001048:	e0c4      	b.n	80011d4 <__aeabi_fsub+0x354>
 800104a:	001c      	movs	r4, r3
 800104c:	2520      	movs	r5, #32
 800104e:	40d4      	lsrs	r4, r2
 8001050:	1aaa      	subs	r2, r5, r2
 8001052:	4093      	lsls	r3, r2
 8001054:	1e5a      	subs	r2, r3, #1
 8001056:	4193      	sbcs	r3, r2
 8001058:	4323      	orrs	r3, r4
 800105a:	464a      	mov	r2, r9
 800105c:	0005      	movs	r5, r0
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4688      	mov	r8, r1
 8001062:	e738      	b.n	8000ed6 <__aeabi_fsub+0x56>
 8001064:	1c72      	adds	r2, r6, #1
 8001066:	d0f8      	beq.n	800105a <__aeabi_fsub+0x1da>
 8001068:	43f2      	mvns	r2, r6
 800106a:	28ff      	cmp	r0, #255	; 0xff
 800106c:	d1ea      	bne.n	8001044 <__aeabi_fsub+0x1c4>
 800106e:	000a      	movs	r2, r1
 8001070:	464b      	mov	r3, r9
 8001072:	25ff      	movs	r5, #255	; 0xff
 8001074:	e7d7      	b.n	8001026 <__aeabi_fsub+0x1a6>
 8001076:	019b      	lsls	r3, r3, #6
 8001078:	0a5b      	lsrs	r3, r3, #9
 800107a:	e75a      	b.n	8000f32 <__aeabi_fsub+0xb2>
 800107c:	2e00      	cmp	r6, #0
 800107e:	d141      	bne.n	8001104 <__aeabi_fsub+0x284>
 8001080:	1c65      	adds	r5, r4, #1
 8001082:	b2e9      	uxtb	r1, r5
 8001084:	2901      	cmp	r1, #1
 8001086:	dd45      	ble.n	8001114 <__aeabi_fsub+0x294>
 8001088:	2dff      	cmp	r5, #255	; 0xff
 800108a:	d100      	bne.n	800108e <__aeabi_fsub+0x20e>
 800108c:	e74f      	b.n	8000f2e <__aeabi_fsub+0xae>
 800108e:	2407      	movs	r4, #7
 8001090:	444b      	add	r3, r9
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	401c      	ands	r4, r3
 8001096:	e738      	b.n	8000f0a <__aeabi_fsub+0x8a>
 8001098:	2207      	movs	r2, #7
 800109a:	4b5a      	ldr	r3, [pc, #360]	; (8001204 <__aeabi_fsub+0x384>)
 800109c:	1a2d      	subs	r5, r5, r0
 800109e:	4023      	ands	r3, r4
 80010a0:	4014      	ands	r4, r2
 80010a2:	e732      	b.n	8000f0a <__aeabi_fsub+0x8a>
 80010a4:	2c00      	cmp	r4, #0
 80010a6:	d11d      	bne.n	80010e4 <__aeabi_fsub+0x264>
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d17a      	bne.n	80011a2 <__aeabi_fsub+0x322>
 80010ac:	464b      	mov	r3, r9
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d100      	bne.n	80010b4 <__aeabi_fsub+0x234>
 80010b2:	e091      	b.n	80011d8 <__aeabi_fsub+0x358>
 80010b4:	000a      	movs	r2, r1
 80010b6:	2500      	movs	r5, #0
 80010b8:	e7b5      	b.n	8001026 <__aeabi_fsub+0x1a6>
 80010ba:	3e01      	subs	r6, #1
 80010bc:	2e00      	cmp	r6, #0
 80010be:	d119      	bne.n	80010f4 <__aeabi_fsub+0x274>
 80010c0:	444b      	add	r3, r9
 80010c2:	e76c      	b.n	8000f9e <__aeabi_fsub+0x11e>
 80010c4:	2cff      	cmp	r4, #255	; 0xff
 80010c6:	d184      	bne.n	8000fd2 <__aeabi_fsub+0x152>
 80010c8:	25ff      	movs	r5, #255	; 0xff
 80010ca:	e7ac      	b.n	8001026 <__aeabi_fsub+0x1a6>
 80010cc:	464a      	mov	r2, r9
 80010ce:	4688      	mov	r8, r1
 80010d0:	1ad4      	subs	r4, r2, r3
 80010d2:	e705      	b.n	8000ee0 <__aeabi_fsub+0x60>
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1c5      	bne.n	8001064 <__aeabi_fsub+0x1e4>
 80010d8:	000a      	movs	r2, r1
 80010da:	28ff      	cmp	r0, #255	; 0xff
 80010dc:	d0c8      	beq.n	8001070 <__aeabi_fsub+0x1f0>
 80010de:	0005      	movs	r5, r0
 80010e0:	464b      	mov	r3, r9
 80010e2:	e7a0      	b.n	8001026 <__aeabi_fsub+0x1a6>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d149      	bne.n	800117c <__aeabi_fsub+0x2fc>
 80010e8:	464b      	mov	r3, r9
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d077      	beq.n	80011de <__aeabi_fsub+0x35e>
 80010ee:	000a      	movs	r2, r1
 80010f0:	25ff      	movs	r5, #255	; 0xff
 80010f2:	e798      	b.n	8001026 <__aeabi_fsub+0x1a6>
 80010f4:	2cff      	cmp	r4, #255	; 0xff
 80010f6:	d000      	beq.n	80010fa <__aeabi_fsub+0x27a>
 80010f8:	e743      	b.n	8000f82 <__aeabi_fsub+0x102>
 80010fa:	e787      	b.n	800100c <__aeabi_fsub+0x18c>
 80010fc:	000a      	movs	r2, r1
 80010fe:	24ff      	movs	r4, #255	; 0xff
 8001100:	2300      	movs	r3, #0
 8001102:	e716      	b.n	8000f32 <__aeabi_fsub+0xb2>
 8001104:	2c00      	cmp	r4, #0
 8001106:	d115      	bne.n	8001134 <__aeabi_fsub+0x2b4>
 8001108:	2b00      	cmp	r3, #0
 800110a:	d157      	bne.n	80011bc <__aeabi_fsub+0x33c>
 800110c:	28ff      	cmp	r0, #255	; 0xff
 800110e:	d1e6      	bne.n	80010de <__aeabi_fsub+0x25e>
 8001110:	464b      	mov	r3, r9
 8001112:	e77b      	b.n	800100c <__aeabi_fsub+0x18c>
 8001114:	2c00      	cmp	r4, #0
 8001116:	d120      	bne.n	800115a <__aeabi_fsub+0x2da>
 8001118:	2b00      	cmp	r3, #0
 800111a:	d057      	beq.n	80011cc <__aeabi_fsub+0x34c>
 800111c:	4649      	mov	r1, r9
 800111e:	2900      	cmp	r1, #0
 8001120:	d053      	beq.n	80011ca <__aeabi_fsub+0x34a>
 8001122:	444b      	add	r3, r9
 8001124:	015a      	lsls	r2, r3, #5
 8001126:	d568      	bpl.n	80011fa <__aeabi_fsub+0x37a>
 8001128:	2407      	movs	r4, #7
 800112a:	4a36      	ldr	r2, [pc, #216]	; (8001204 <__aeabi_fsub+0x384>)
 800112c:	401c      	ands	r4, r3
 800112e:	2501      	movs	r5, #1
 8001130:	4013      	ands	r3, r2
 8001132:	e6ea      	b.n	8000f0a <__aeabi_fsub+0x8a>
 8001134:	28ff      	cmp	r0, #255	; 0xff
 8001136:	d0eb      	beq.n	8001110 <__aeabi_fsub+0x290>
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	04d2      	lsls	r2, r2, #19
 800113c:	4276      	negs	r6, r6
 800113e:	4313      	orrs	r3, r2
 8001140:	2e1b      	cmp	r6, #27
 8001142:	dc53      	bgt.n	80011ec <__aeabi_fsub+0x36c>
 8001144:	2520      	movs	r5, #32
 8001146:	1bad      	subs	r5, r5, r6
 8001148:	001a      	movs	r2, r3
 800114a:	40ab      	lsls	r3, r5
 800114c:	40f2      	lsrs	r2, r6
 800114e:	1e5c      	subs	r4, r3, #1
 8001150:	41a3      	sbcs	r3, r4
 8001152:	4313      	orrs	r3, r2
 8001154:	444b      	add	r3, r9
 8001156:	0005      	movs	r5, r0
 8001158:	e721      	b.n	8000f9e <__aeabi_fsub+0x11e>
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0d8      	beq.n	8001110 <__aeabi_fsub+0x290>
 800115e:	4649      	mov	r1, r9
 8001160:	2900      	cmp	r1, #0
 8001162:	d100      	bne.n	8001166 <__aeabi_fsub+0x2e6>
 8001164:	e752      	b.n	800100c <__aeabi_fsub+0x18c>
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	03c9      	lsls	r1, r1, #15
 800116a:	420f      	tst	r7, r1
 800116c:	d100      	bne.n	8001170 <__aeabi_fsub+0x2f0>
 800116e:	e74d      	b.n	800100c <__aeabi_fsub+0x18c>
 8001170:	4660      	mov	r0, ip
 8001172:	4208      	tst	r0, r1
 8001174:	d000      	beq.n	8001178 <__aeabi_fsub+0x2f8>
 8001176:	e749      	b.n	800100c <__aeabi_fsub+0x18c>
 8001178:	464b      	mov	r3, r9
 800117a:	e747      	b.n	800100c <__aeabi_fsub+0x18c>
 800117c:	4648      	mov	r0, r9
 800117e:	25ff      	movs	r5, #255	; 0xff
 8001180:	2800      	cmp	r0, #0
 8001182:	d100      	bne.n	8001186 <__aeabi_fsub+0x306>
 8001184:	e74f      	b.n	8001026 <__aeabi_fsub+0x1a6>
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	03d2      	lsls	r2, r2, #15
 800118a:	4217      	tst	r7, r2
 800118c:	d004      	beq.n	8001198 <__aeabi_fsub+0x318>
 800118e:	4660      	mov	r0, ip
 8001190:	4210      	tst	r0, r2
 8001192:	d101      	bne.n	8001198 <__aeabi_fsub+0x318>
 8001194:	464b      	mov	r3, r9
 8001196:	4688      	mov	r8, r1
 8001198:	2201      	movs	r2, #1
 800119a:	4641      	mov	r1, r8
 800119c:	25ff      	movs	r5, #255	; 0xff
 800119e:	400a      	ands	r2, r1
 80011a0:	e741      	b.n	8001026 <__aeabi_fsub+0x1a6>
 80011a2:	4648      	mov	r0, r9
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d01f      	beq.n	80011e8 <__aeabi_fsub+0x368>
 80011a8:	1a1a      	subs	r2, r3, r0
 80011aa:	0150      	lsls	r0, r2, #5
 80011ac:	d520      	bpl.n	80011f0 <__aeabi_fsub+0x370>
 80011ae:	464a      	mov	r2, r9
 80011b0:	2407      	movs	r4, #7
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	401c      	ands	r4, r3
 80011b6:	4688      	mov	r8, r1
 80011b8:	2500      	movs	r5, #0
 80011ba:	e6a6      	b.n	8000f0a <__aeabi_fsub+0x8a>
 80011bc:	1c74      	adds	r4, r6, #1
 80011be:	d0c9      	beq.n	8001154 <__aeabi_fsub+0x2d4>
 80011c0:	43f6      	mvns	r6, r6
 80011c2:	28ff      	cmp	r0, #255	; 0xff
 80011c4:	d1bc      	bne.n	8001140 <__aeabi_fsub+0x2c0>
 80011c6:	464b      	mov	r3, r9
 80011c8:	e720      	b.n	800100c <__aeabi_fsub+0x18c>
 80011ca:	4699      	mov	r9, r3
 80011cc:	464b      	mov	r3, r9
 80011ce:	2500      	movs	r5, #0
 80011d0:	08db      	lsrs	r3, r3, #3
 80011d2:	e72b      	b.n	800102c <__aeabi_fsub+0x1ac>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e740      	b.n	800105a <__aeabi_fsub+0x1da>
 80011d8:	2200      	movs	r2, #0
 80011da:	2300      	movs	r3, #0
 80011dc:	e6a9      	b.n	8000f32 <__aeabi_fsub+0xb2>
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	2200      	movs	r2, #0
 80011e2:	03db      	lsls	r3, r3, #15
 80011e4:	24ff      	movs	r4, #255	; 0xff
 80011e6:	e6a4      	b.n	8000f32 <__aeabi_fsub+0xb2>
 80011e8:	2500      	movs	r5, #0
 80011ea:	e71c      	b.n	8001026 <__aeabi_fsub+0x1a6>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e7b1      	b.n	8001154 <__aeabi_fsub+0x2d4>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d0f1      	beq.n	80011d8 <__aeabi_fsub+0x358>
 80011f4:	0013      	movs	r3, r2
 80011f6:	2500      	movs	r5, #0
 80011f8:	e6fc      	b.n	8000ff4 <__aeabi_fsub+0x174>
 80011fa:	2500      	movs	r5, #0
 80011fc:	e6fa      	b.n	8000ff4 <__aeabi_fsub+0x174>
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	7dffffff 	.word	0x7dffffff
 8001204:	fbffffff 	.word	0xfbffffff

08001208 <__aeabi_f2iz>:
 8001208:	0241      	lsls	r1, r0, #9
 800120a:	0042      	lsls	r2, r0, #1
 800120c:	0fc3      	lsrs	r3, r0, #31
 800120e:	0a49      	lsrs	r1, r1, #9
 8001210:	0e12      	lsrs	r2, r2, #24
 8001212:	2000      	movs	r0, #0
 8001214:	2a7e      	cmp	r2, #126	; 0x7e
 8001216:	d90d      	bls.n	8001234 <__aeabi_f2iz+0x2c>
 8001218:	2a9d      	cmp	r2, #157	; 0x9d
 800121a:	d80c      	bhi.n	8001236 <__aeabi_f2iz+0x2e>
 800121c:	2080      	movs	r0, #128	; 0x80
 800121e:	0400      	lsls	r0, r0, #16
 8001220:	4301      	orrs	r1, r0
 8001222:	2a95      	cmp	r2, #149	; 0x95
 8001224:	dc0a      	bgt.n	800123c <__aeabi_f2iz+0x34>
 8001226:	2096      	movs	r0, #150	; 0x96
 8001228:	1a82      	subs	r2, r0, r2
 800122a:	40d1      	lsrs	r1, r2
 800122c:	4248      	negs	r0, r1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d100      	bne.n	8001234 <__aeabi_f2iz+0x2c>
 8001232:	0008      	movs	r0, r1
 8001234:	4770      	bx	lr
 8001236:	4a03      	ldr	r2, [pc, #12]	; (8001244 <__aeabi_f2iz+0x3c>)
 8001238:	1898      	adds	r0, r3, r2
 800123a:	e7fb      	b.n	8001234 <__aeabi_f2iz+0x2c>
 800123c:	3a96      	subs	r2, #150	; 0x96
 800123e:	4091      	lsls	r1, r2
 8001240:	e7f4      	b.n	800122c <__aeabi_f2iz+0x24>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	7fffffff 	.word	0x7fffffff

08001248 <__aeabi_i2f>:
 8001248:	b570      	push	{r4, r5, r6, lr}
 800124a:	2800      	cmp	r0, #0
 800124c:	d03d      	beq.n	80012ca <__aeabi_i2f+0x82>
 800124e:	17c3      	asrs	r3, r0, #31
 8001250:	18c5      	adds	r5, r0, r3
 8001252:	405d      	eors	r5, r3
 8001254:	0fc4      	lsrs	r4, r0, #31
 8001256:	0028      	movs	r0, r5
 8001258:	f001 fef4 	bl	8003044 <__clzsi2>
 800125c:	229e      	movs	r2, #158	; 0x9e
 800125e:	1a12      	subs	r2, r2, r0
 8001260:	2a96      	cmp	r2, #150	; 0x96
 8001262:	dc07      	bgt.n	8001274 <__aeabi_i2f+0x2c>
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	2808      	cmp	r0, #8
 8001268:	dd33      	ble.n	80012d2 <__aeabi_i2f+0x8a>
 800126a:	3808      	subs	r0, #8
 800126c:	4085      	lsls	r5, r0
 800126e:	0268      	lsls	r0, r5, #9
 8001270:	0a40      	lsrs	r0, r0, #9
 8001272:	e023      	b.n	80012bc <__aeabi_i2f+0x74>
 8001274:	2a99      	cmp	r2, #153	; 0x99
 8001276:	dd0b      	ble.n	8001290 <__aeabi_i2f+0x48>
 8001278:	2305      	movs	r3, #5
 800127a:	0029      	movs	r1, r5
 800127c:	1a1b      	subs	r3, r3, r0
 800127e:	40d9      	lsrs	r1, r3
 8001280:	0003      	movs	r3, r0
 8001282:	331b      	adds	r3, #27
 8001284:	409d      	lsls	r5, r3
 8001286:	002b      	movs	r3, r5
 8001288:	1e5d      	subs	r5, r3, #1
 800128a:	41ab      	sbcs	r3, r5
 800128c:	4319      	orrs	r1, r3
 800128e:	000d      	movs	r5, r1
 8001290:	2805      	cmp	r0, #5
 8001292:	dd01      	ble.n	8001298 <__aeabi_i2f+0x50>
 8001294:	1f43      	subs	r3, r0, #5
 8001296:	409d      	lsls	r5, r3
 8001298:	002b      	movs	r3, r5
 800129a:	490f      	ldr	r1, [pc, #60]	; (80012d8 <__aeabi_i2f+0x90>)
 800129c:	400b      	ands	r3, r1
 800129e:	076e      	lsls	r6, r5, #29
 80012a0:	d009      	beq.n	80012b6 <__aeabi_i2f+0x6e>
 80012a2:	260f      	movs	r6, #15
 80012a4:	4035      	ands	r5, r6
 80012a6:	2d04      	cmp	r5, #4
 80012a8:	d005      	beq.n	80012b6 <__aeabi_i2f+0x6e>
 80012aa:	3304      	adds	r3, #4
 80012ac:	015d      	lsls	r5, r3, #5
 80012ae:	d502      	bpl.n	80012b6 <__aeabi_i2f+0x6e>
 80012b0:	229f      	movs	r2, #159	; 0x9f
 80012b2:	400b      	ands	r3, r1
 80012b4:	1a12      	subs	r2, r2, r0
 80012b6:	019b      	lsls	r3, r3, #6
 80012b8:	0a58      	lsrs	r0, r3, #9
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	0240      	lsls	r0, r0, #9
 80012be:	05d2      	lsls	r2, r2, #23
 80012c0:	0a40      	lsrs	r0, r0, #9
 80012c2:	07e4      	lsls	r4, r4, #31
 80012c4:	4310      	orrs	r0, r2
 80012c6:	4320      	orrs	r0, r4
 80012c8:	bd70      	pop	{r4, r5, r6, pc}
 80012ca:	2400      	movs	r4, #0
 80012cc:	2200      	movs	r2, #0
 80012ce:	2000      	movs	r0, #0
 80012d0:	e7f4      	b.n	80012bc <__aeabi_i2f+0x74>
 80012d2:	0268      	lsls	r0, r5, #9
 80012d4:	0a40      	lsrs	r0, r0, #9
 80012d6:	e7f1      	b.n	80012bc <__aeabi_i2f+0x74>
 80012d8:	fbffffff 	.word	0xfbffffff

080012dc <__aeabi_ui2f>:
 80012dc:	b570      	push	{r4, r5, r6, lr}
 80012de:	1e04      	subs	r4, r0, #0
 80012e0:	d034      	beq.n	800134c <__aeabi_ui2f+0x70>
 80012e2:	f001 feaf 	bl	8003044 <__clzsi2>
 80012e6:	229e      	movs	r2, #158	; 0x9e
 80012e8:	1a12      	subs	r2, r2, r0
 80012ea:	2a96      	cmp	r2, #150	; 0x96
 80012ec:	dc07      	bgt.n	80012fe <__aeabi_ui2f+0x22>
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	2808      	cmp	r0, #8
 80012f2:	dd2e      	ble.n	8001352 <__aeabi_ui2f+0x76>
 80012f4:	3808      	subs	r0, #8
 80012f6:	4084      	lsls	r4, r0
 80012f8:	0260      	lsls	r0, r4, #9
 80012fa:	0a40      	lsrs	r0, r0, #9
 80012fc:	e021      	b.n	8001342 <__aeabi_ui2f+0x66>
 80012fe:	2a99      	cmp	r2, #153	; 0x99
 8001300:	dd09      	ble.n	8001316 <__aeabi_ui2f+0x3a>
 8001302:	0003      	movs	r3, r0
 8001304:	0021      	movs	r1, r4
 8001306:	331b      	adds	r3, #27
 8001308:	4099      	lsls	r1, r3
 800130a:	1e4b      	subs	r3, r1, #1
 800130c:	4199      	sbcs	r1, r3
 800130e:	2305      	movs	r3, #5
 8001310:	1a1b      	subs	r3, r3, r0
 8001312:	40dc      	lsrs	r4, r3
 8001314:	430c      	orrs	r4, r1
 8001316:	2805      	cmp	r0, #5
 8001318:	dd01      	ble.n	800131e <__aeabi_ui2f+0x42>
 800131a:	1f43      	subs	r3, r0, #5
 800131c:	409c      	lsls	r4, r3
 800131e:	0023      	movs	r3, r4
 8001320:	490d      	ldr	r1, [pc, #52]	; (8001358 <__aeabi_ui2f+0x7c>)
 8001322:	400b      	ands	r3, r1
 8001324:	0765      	lsls	r5, r4, #29
 8001326:	d009      	beq.n	800133c <__aeabi_ui2f+0x60>
 8001328:	250f      	movs	r5, #15
 800132a:	402c      	ands	r4, r5
 800132c:	2c04      	cmp	r4, #4
 800132e:	d005      	beq.n	800133c <__aeabi_ui2f+0x60>
 8001330:	3304      	adds	r3, #4
 8001332:	015c      	lsls	r4, r3, #5
 8001334:	d502      	bpl.n	800133c <__aeabi_ui2f+0x60>
 8001336:	229f      	movs	r2, #159	; 0x9f
 8001338:	400b      	ands	r3, r1
 800133a:	1a12      	subs	r2, r2, r0
 800133c:	019b      	lsls	r3, r3, #6
 800133e:	0a58      	lsrs	r0, r3, #9
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	0240      	lsls	r0, r0, #9
 8001344:	05d2      	lsls	r2, r2, #23
 8001346:	0a40      	lsrs	r0, r0, #9
 8001348:	4310      	orrs	r0, r2
 800134a:	bd70      	pop	{r4, r5, r6, pc}
 800134c:	2200      	movs	r2, #0
 800134e:	2000      	movs	r0, #0
 8001350:	e7f7      	b.n	8001342 <__aeabi_ui2f+0x66>
 8001352:	0260      	lsls	r0, r4, #9
 8001354:	0a40      	lsrs	r0, r0, #9
 8001356:	e7f4      	b.n	8001342 <__aeabi_ui2f+0x66>
 8001358:	fbffffff 	.word	0xfbffffff

0800135c <__aeabi_dadd>:
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	464f      	mov	r7, r9
 8001360:	4646      	mov	r6, r8
 8001362:	46d6      	mov	lr, sl
 8001364:	000c      	movs	r4, r1
 8001366:	0309      	lsls	r1, r1, #12
 8001368:	b5c0      	push	{r6, r7, lr}
 800136a:	0a49      	lsrs	r1, r1, #9
 800136c:	0f47      	lsrs	r7, r0, #29
 800136e:	005e      	lsls	r6, r3, #1
 8001370:	4339      	orrs	r1, r7
 8001372:	031f      	lsls	r7, r3, #12
 8001374:	0fdb      	lsrs	r3, r3, #31
 8001376:	469c      	mov	ip, r3
 8001378:	0065      	lsls	r5, r4, #1
 800137a:	0a7b      	lsrs	r3, r7, #9
 800137c:	0f57      	lsrs	r7, r2, #29
 800137e:	431f      	orrs	r7, r3
 8001380:	0d6d      	lsrs	r5, r5, #21
 8001382:	0fe4      	lsrs	r4, r4, #31
 8001384:	0d76      	lsrs	r6, r6, #21
 8001386:	46a1      	mov	r9, r4
 8001388:	00c0      	lsls	r0, r0, #3
 800138a:	46b8      	mov	r8, r7
 800138c:	00d2      	lsls	r2, r2, #3
 800138e:	1bab      	subs	r3, r5, r6
 8001390:	4564      	cmp	r4, ip
 8001392:	d07b      	beq.n	800148c <__aeabi_dadd+0x130>
 8001394:	2b00      	cmp	r3, #0
 8001396:	dd5f      	ble.n	8001458 <__aeabi_dadd+0xfc>
 8001398:	2e00      	cmp	r6, #0
 800139a:	d000      	beq.n	800139e <__aeabi_dadd+0x42>
 800139c:	e0a4      	b.n	80014e8 <__aeabi_dadd+0x18c>
 800139e:	003e      	movs	r6, r7
 80013a0:	4316      	orrs	r6, r2
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dadd+0x4a>
 80013a4:	e112      	b.n	80015cc <__aeabi_dadd+0x270>
 80013a6:	1e5e      	subs	r6, r3, #1
 80013a8:	2e00      	cmp	r6, #0
 80013aa:	d000      	beq.n	80013ae <__aeabi_dadd+0x52>
 80013ac:	e19e      	b.n	80016ec <__aeabi_dadd+0x390>
 80013ae:	1a87      	subs	r7, r0, r2
 80013b0:	4643      	mov	r3, r8
 80013b2:	42b8      	cmp	r0, r7
 80013b4:	4180      	sbcs	r0, r0
 80013b6:	2501      	movs	r5, #1
 80013b8:	1ac9      	subs	r1, r1, r3
 80013ba:	4240      	negs	r0, r0
 80013bc:	1a09      	subs	r1, r1, r0
 80013be:	020b      	lsls	r3, r1, #8
 80013c0:	d400      	bmi.n	80013c4 <__aeabi_dadd+0x68>
 80013c2:	e131      	b.n	8001628 <__aeabi_dadd+0x2cc>
 80013c4:	0249      	lsls	r1, r1, #9
 80013c6:	0a4e      	lsrs	r6, r1, #9
 80013c8:	2e00      	cmp	r6, #0
 80013ca:	d100      	bne.n	80013ce <__aeabi_dadd+0x72>
 80013cc:	e16e      	b.n	80016ac <__aeabi_dadd+0x350>
 80013ce:	0030      	movs	r0, r6
 80013d0:	f001 fe38 	bl	8003044 <__clzsi2>
 80013d4:	0003      	movs	r3, r0
 80013d6:	3b08      	subs	r3, #8
 80013d8:	2b1f      	cmp	r3, #31
 80013da:	dd00      	ble.n	80013de <__aeabi_dadd+0x82>
 80013dc:	e161      	b.n	80016a2 <__aeabi_dadd+0x346>
 80013de:	2220      	movs	r2, #32
 80013e0:	0039      	movs	r1, r7
 80013e2:	1ad2      	subs	r2, r2, r3
 80013e4:	409e      	lsls	r6, r3
 80013e6:	40d1      	lsrs	r1, r2
 80013e8:	409f      	lsls	r7, r3
 80013ea:	430e      	orrs	r6, r1
 80013ec:	429d      	cmp	r5, r3
 80013ee:	dd00      	ble.n	80013f2 <__aeabi_dadd+0x96>
 80013f0:	e151      	b.n	8001696 <__aeabi_dadd+0x33a>
 80013f2:	1b5d      	subs	r5, r3, r5
 80013f4:	1c6b      	adds	r3, r5, #1
 80013f6:	2b1f      	cmp	r3, #31
 80013f8:	dd00      	ble.n	80013fc <__aeabi_dadd+0xa0>
 80013fa:	e17c      	b.n	80016f6 <__aeabi_dadd+0x39a>
 80013fc:	2120      	movs	r1, #32
 80013fe:	1ac9      	subs	r1, r1, r3
 8001400:	003d      	movs	r5, r7
 8001402:	0030      	movs	r0, r6
 8001404:	408f      	lsls	r7, r1
 8001406:	4088      	lsls	r0, r1
 8001408:	40dd      	lsrs	r5, r3
 800140a:	1e79      	subs	r1, r7, #1
 800140c:	418f      	sbcs	r7, r1
 800140e:	0031      	movs	r1, r6
 8001410:	2207      	movs	r2, #7
 8001412:	4328      	orrs	r0, r5
 8001414:	40d9      	lsrs	r1, r3
 8001416:	2500      	movs	r5, #0
 8001418:	4307      	orrs	r7, r0
 800141a:	403a      	ands	r2, r7
 800141c:	2a00      	cmp	r2, #0
 800141e:	d009      	beq.n	8001434 <__aeabi_dadd+0xd8>
 8001420:	230f      	movs	r3, #15
 8001422:	403b      	ands	r3, r7
 8001424:	2b04      	cmp	r3, #4
 8001426:	d005      	beq.n	8001434 <__aeabi_dadd+0xd8>
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	42bb      	cmp	r3, r7
 800142c:	41bf      	sbcs	r7, r7
 800142e:	427f      	negs	r7, r7
 8001430:	19c9      	adds	r1, r1, r7
 8001432:	001f      	movs	r7, r3
 8001434:	020b      	lsls	r3, r1, #8
 8001436:	d400      	bmi.n	800143a <__aeabi_dadd+0xde>
 8001438:	e226      	b.n	8001888 <__aeabi_dadd+0x52c>
 800143a:	1c6a      	adds	r2, r5, #1
 800143c:	4bc6      	ldr	r3, [pc, #792]	; (8001758 <__aeabi_dadd+0x3fc>)
 800143e:	0555      	lsls	r5, r2, #21
 8001440:	0d6d      	lsrs	r5, r5, #21
 8001442:	429a      	cmp	r2, r3
 8001444:	d100      	bne.n	8001448 <__aeabi_dadd+0xec>
 8001446:	e106      	b.n	8001656 <__aeabi_dadd+0x2fa>
 8001448:	4ac4      	ldr	r2, [pc, #784]	; (800175c <__aeabi_dadd+0x400>)
 800144a:	08ff      	lsrs	r7, r7, #3
 800144c:	400a      	ands	r2, r1
 800144e:	0753      	lsls	r3, r2, #29
 8001450:	0252      	lsls	r2, r2, #9
 8001452:	433b      	orrs	r3, r7
 8001454:	0b12      	lsrs	r2, r2, #12
 8001456:	e08e      	b.n	8001576 <__aeabi_dadd+0x21a>
 8001458:	2b00      	cmp	r3, #0
 800145a:	d000      	beq.n	800145e <__aeabi_dadd+0x102>
 800145c:	e0b8      	b.n	80015d0 <__aeabi_dadd+0x274>
 800145e:	1c6b      	adds	r3, r5, #1
 8001460:	055b      	lsls	r3, r3, #21
 8001462:	0d5b      	lsrs	r3, r3, #21
 8001464:	2b01      	cmp	r3, #1
 8001466:	dc00      	bgt.n	800146a <__aeabi_dadd+0x10e>
 8001468:	e130      	b.n	80016cc <__aeabi_dadd+0x370>
 800146a:	1a87      	subs	r7, r0, r2
 800146c:	4643      	mov	r3, r8
 800146e:	42b8      	cmp	r0, r7
 8001470:	41b6      	sbcs	r6, r6
 8001472:	1acb      	subs	r3, r1, r3
 8001474:	4276      	negs	r6, r6
 8001476:	1b9e      	subs	r6, r3, r6
 8001478:	0233      	lsls	r3, r6, #8
 800147a:	d500      	bpl.n	800147e <__aeabi_dadd+0x122>
 800147c:	e14c      	b.n	8001718 <__aeabi_dadd+0x3bc>
 800147e:	003b      	movs	r3, r7
 8001480:	4333      	orrs	r3, r6
 8001482:	d1a1      	bne.n	80013c8 <__aeabi_dadd+0x6c>
 8001484:	2200      	movs	r2, #0
 8001486:	2400      	movs	r4, #0
 8001488:	2500      	movs	r5, #0
 800148a:	e070      	b.n	800156e <__aeabi_dadd+0x212>
 800148c:	2b00      	cmp	r3, #0
 800148e:	dc00      	bgt.n	8001492 <__aeabi_dadd+0x136>
 8001490:	e0e5      	b.n	800165e <__aeabi_dadd+0x302>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d100      	bne.n	8001498 <__aeabi_dadd+0x13c>
 8001496:	e083      	b.n	80015a0 <__aeabi_dadd+0x244>
 8001498:	4eaf      	ldr	r6, [pc, #700]	; (8001758 <__aeabi_dadd+0x3fc>)
 800149a:	42b5      	cmp	r5, r6
 800149c:	d060      	beq.n	8001560 <__aeabi_dadd+0x204>
 800149e:	2680      	movs	r6, #128	; 0x80
 80014a0:	0436      	lsls	r6, r6, #16
 80014a2:	4337      	orrs	r7, r6
 80014a4:	46b8      	mov	r8, r7
 80014a6:	2b38      	cmp	r3, #56	; 0x38
 80014a8:	dc00      	bgt.n	80014ac <__aeabi_dadd+0x150>
 80014aa:	e13e      	b.n	800172a <__aeabi_dadd+0x3ce>
 80014ac:	4643      	mov	r3, r8
 80014ae:	4313      	orrs	r3, r2
 80014b0:	001f      	movs	r7, r3
 80014b2:	1e7a      	subs	r2, r7, #1
 80014b4:	4197      	sbcs	r7, r2
 80014b6:	183f      	adds	r7, r7, r0
 80014b8:	4287      	cmp	r7, r0
 80014ba:	4180      	sbcs	r0, r0
 80014bc:	4240      	negs	r0, r0
 80014be:	1809      	adds	r1, r1, r0
 80014c0:	020b      	lsls	r3, r1, #8
 80014c2:	d400      	bmi.n	80014c6 <__aeabi_dadd+0x16a>
 80014c4:	e0b0      	b.n	8001628 <__aeabi_dadd+0x2cc>
 80014c6:	4ba4      	ldr	r3, [pc, #656]	; (8001758 <__aeabi_dadd+0x3fc>)
 80014c8:	3501      	adds	r5, #1
 80014ca:	429d      	cmp	r5, r3
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0x174>
 80014ce:	e0c3      	b.n	8001658 <__aeabi_dadd+0x2fc>
 80014d0:	4aa2      	ldr	r2, [pc, #648]	; (800175c <__aeabi_dadd+0x400>)
 80014d2:	087b      	lsrs	r3, r7, #1
 80014d4:	400a      	ands	r2, r1
 80014d6:	2101      	movs	r1, #1
 80014d8:	400f      	ands	r7, r1
 80014da:	431f      	orrs	r7, r3
 80014dc:	0851      	lsrs	r1, r2, #1
 80014de:	07d3      	lsls	r3, r2, #31
 80014e0:	2207      	movs	r2, #7
 80014e2:	431f      	orrs	r7, r3
 80014e4:	403a      	ands	r2, r7
 80014e6:	e799      	b.n	800141c <__aeabi_dadd+0xc0>
 80014e8:	4e9b      	ldr	r6, [pc, #620]	; (8001758 <__aeabi_dadd+0x3fc>)
 80014ea:	42b5      	cmp	r5, r6
 80014ec:	d038      	beq.n	8001560 <__aeabi_dadd+0x204>
 80014ee:	2680      	movs	r6, #128	; 0x80
 80014f0:	0436      	lsls	r6, r6, #16
 80014f2:	4337      	orrs	r7, r6
 80014f4:	46b8      	mov	r8, r7
 80014f6:	2b38      	cmp	r3, #56	; 0x38
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0x1a0>
 80014fa:	e0dc      	b.n	80016b6 <__aeabi_dadd+0x35a>
 80014fc:	2b1f      	cmp	r3, #31
 80014fe:	dc00      	bgt.n	8001502 <__aeabi_dadd+0x1a6>
 8001500:	e130      	b.n	8001764 <__aeabi_dadd+0x408>
 8001502:	001e      	movs	r6, r3
 8001504:	4647      	mov	r7, r8
 8001506:	3e20      	subs	r6, #32
 8001508:	40f7      	lsrs	r7, r6
 800150a:	46bc      	mov	ip, r7
 800150c:	2b20      	cmp	r3, #32
 800150e:	d004      	beq.n	800151a <__aeabi_dadd+0x1be>
 8001510:	2640      	movs	r6, #64	; 0x40
 8001512:	1af3      	subs	r3, r6, r3
 8001514:	4646      	mov	r6, r8
 8001516:	409e      	lsls	r6, r3
 8001518:	4332      	orrs	r2, r6
 800151a:	0017      	movs	r7, r2
 800151c:	4663      	mov	r3, ip
 800151e:	1e7a      	subs	r2, r7, #1
 8001520:	4197      	sbcs	r7, r2
 8001522:	431f      	orrs	r7, r3
 8001524:	e0cc      	b.n	80016c0 <__aeabi_dadd+0x364>
 8001526:	2b00      	cmp	r3, #0
 8001528:	d100      	bne.n	800152c <__aeabi_dadd+0x1d0>
 800152a:	e204      	b.n	8001936 <__aeabi_dadd+0x5da>
 800152c:	4643      	mov	r3, r8
 800152e:	4313      	orrs	r3, r2
 8001530:	d100      	bne.n	8001534 <__aeabi_dadd+0x1d8>
 8001532:	e159      	b.n	80017e8 <__aeabi_dadd+0x48c>
 8001534:	074b      	lsls	r3, r1, #29
 8001536:	08c0      	lsrs	r0, r0, #3
 8001538:	4318      	orrs	r0, r3
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	08c9      	lsrs	r1, r1, #3
 800153e:	031b      	lsls	r3, r3, #12
 8001540:	4219      	tst	r1, r3
 8001542:	d008      	beq.n	8001556 <__aeabi_dadd+0x1fa>
 8001544:	4645      	mov	r5, r8
 8001546:	08ed      	lsrs	r5, r5, #3
 8001548:	421d      	tst	r5, r3
 800154a:	d104      	bne.n	8001556 <__aeabi_dadd+0x1fa>
 800154c:	4643      	mov	r3, r8
 800154e:	08d0      	lsrs	r0, r2, #3
 8001550:	0759      	lsls	r1, r3, #29
 8001552:	4308      	orrs	r0, r1
 8001554:	0029      	movs	r1, r5
 8001556:	0f42      	lsrs	r2, r0, #29
 8001558:	00c9      	lsls	r1, r1, #3
 800155a:	4d7f      	ldr	r5, [pc, #508]	; (8001758 <__aeabi_dadd+0x3fc>)
 800155c:	4311      	orrs	r1, r2
 800155e:	00c0      	lsls	r0, r0, #3
 8001560:	074b      	lsls	r3, r1, #29
 8001562:	08ca      	lsrs	r2, r1, #3
 8001564:	497c      	ldr	r1, [pc, #496]	; (8001758 <__aeabi_dadd+0x3fc>)
 8001566:	08c0      	lsrs	r0, r0, #3
 8001568:	4303      	orrs	r3, r0
 800156a:	428d      	cmp	r5, r1
 800156c:	d068      	beq.n	8001640 <__aeabi_dadd+0x2e4>
 800156e:	0312      	lsls	r2, r2, #12
 8001570:	056d      	lsls	r5, r5, #21
 8001572:	0b12      	lsrs	r2, r2, #12
 8001574:	0d6d      	lsrs	r5, r5, #21
 8001576:	2100      	movs	r1, #0
 8001578:	0312      	lsls	r2, r2, #12
 800157a:	0018      	movs	r0, r3
 800157c:	0b13      	lsrs	r3, r2, #12
 800157e:	0d0a      	lsrs	r2, r1, #20
 8001580:	0512      	lsls	r2, r2, #20
 8001582:	431a      	orrs	r2, r3
 8001584:	4b76      	ldr	r3, [pc, #472]	; (8001760 <__aeabi_dadd+0x404>)
 8001586:	052d      	lsls	r5, r5, #20
 8001588:	4013      	ands	r3, r2
 800158a:	432b      	orrs	r3, r5
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	07e4      	lsls	r4, r4, #31
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	4323      	orrs	r3, r4
 8001594:	0019      	movs	r1, r3
 8001596:	bc1c      	pop	{r2, r3, r4}
 8001598:	4690      	mov	r8, r2
 800159a:	4699      	mov	r9, r3
 800159c:	46a2      	mov	sl, r4
 800159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a0:	003e      	movs	r6, r7
 80015a2:	4316      	orrs	r6, r2
 80015a4:	d012      	beq.n	80015cc <__aeabi_dadd+0x270>
 80015a6:	1e5e      	subs	r6, r3, #1
 80015a8:	2e00      	cmp	r6, #0
 80015aa:	d000      	beq.n	80015ae <__aeabi_dadd+0x252>
 80015ac:	e100      	b.n	80017b0 <__aeabi_dadd+0x454>
 80015ae:	1887      	adds	r7, r0, r2
 80015b0:	4287      	cmp	r7, r0
 80015b2:	4180      	sbcs	r0, r0
 80015b4:	4441      	add	r1, r8
 80015b6:	4240      	negs	r0, r0
 80015b8:	1809      	adds	r1, r1, r0
 80015ba:	2501      	movs	r5, #1
 80015bc:	020b      	lsls	r3, r1, #8
 80015be:	d533      	bpl.n	8001628 <__aeabi_dadd+0x2cc>
 80015c0:	2502      	movs	r5, #2
 80015c2:	e785      	b.n	80014d0 <__aeabi_dadd+0x174>
 80015c4:	4664      	mov	r4, ip
 80015c6:	0033      	movs	r3, r6
 80015c8:	4641      	mov	r1, r8
 80015ca:	0010      	movs	r0, r2
 80015cc:	001d      	movs	r5, r3
 80015ce:	e7c7      	b.n	8001560 <__aeabi_dadd+0x204>
 80015d0:	2d00      	cmp	r5, #0
 80015d2:	d000      	beq.n	80015d6 <__aeabi_dadd+0x27a>
 80015d4:	e0da      	b.n	800178c <__aeabi_dadd+0x430>
 80015d6:	000c      	movs	r4, r1
 80015d8:	4304      	orrs	r4, r0
 80015da:	d0f3      	beq.n	80015c4 <__aeabi_dadd+0x268>
 80015dc:	1c5c      	adds	r4, r3, #1
 80015de:	d100      	bne.n	80015e2 <__aeabi_dadd+0x286>
 80015e0:	e19f      	b.n	8001922 <__aeabi_dadd+0x5c6>
 80015e2:	4c5d      	ldr	r4, [pc, #372]	; (8001758 <__aeabi_dadd+0x3fc>)
 80015e4:	42a6      	cmp	r6, r4
 80015e6:	d100      	bne.n	80015ea <__aeabi_dadd+0x28e>
 80015e8:	e12f      	b.n	800184a <__aeabi_dadd+0x4ee>
 80015ea:	43db      	mvns	r3, r3
 80015ec:	2b38      	cmp	r3, #56	; 0x38
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_dadd+0x296>
 80015f0:	e166      	b.n	80018c0 <__aeabi_dadd+0x564>
 80015f2:	2b1f      	cmp	r3, #31
 80015f4:	dd00      	ble.n	80015f8 <__aeabi_dadd+0x29c>
 80015f6:	e183      	b.n	8001900 <__aeabi_dadd+0x5a4>
 80015f8:	2420      	movs	r4, #32
 80015fa:	0005      	movs	r5, r0
 80015fc:	1ae4      	subs	r4, r4, r3
 80015fe:	000f      	movs	r7, r1
 8001600:	40dd      	lsrs	r5, r3
 8001602:	40d9      	lsrs	r1, r3
 8001604:	40a0      	lsls	r0, r4
 8001606:	4643      	mov	r3, r8
 8001608:	40a7      	lsls	r7, r4
 800160a:	1a5b      	subs	r3, r3, r1
 800160c:	1e44      	subs	r4, r0, #1
 800160e:	41a0      	sbcs	r0, r4
 8001610:	4698      	mov	r8, r3
 8001612:	432f      	orrs	r7, r5
 8001614:	4338      	orrs	r0, r7
 8001616:	1a17      	subs	r7, r2, r0
 8001618:	42ba      	cmp	r2, r7
 800161a:	4192      	sbcs	r2, r2
 800161c:	4643      	mov	r3, r8
 800161e:	4252      	negs	r2, r2
 8001620:	1a99      	subs	r1, r3, r2
 8001622:	4664      	mov	r4, ip
 8001624:	0035      	movs	r5, r6
 8001626:	e6ca      	b.n	80013be <__aeabi_dadd+0x62>
 8001628:	2207      	movs	r2, #7
 800162a:	403a      	ands	r2, r7
 800162c:	2a00      	cmp	r2, #0
 800162e:	d000      	beq.n	8001632 <__aeabi_dadd+0x2d6>
 8001630:	e6f6      	b.n	8001420 <__aeabi_dadd+0xc4>
 8001632:	074b      	lsls	r3, r1, #29
 8001634:	08ca      	lsrs	r2, r1, #3
 8001636:	4948      	ldr	r1, [pc, #288]	; (8001758 <__aeabi_dadd+0x3fc>)
 8001638:	08ff      	lsrs	r7, r7, #3
 800163a:	433b      	orrs	r3, r7
 800163c:	428d      	cmp	r5, r1
 800163e:	d196      	bne.n	800156e <__aeabi_dadd+0x212>
 8001640:	0019      	movs	r1, r3
 8001642:	4311      	orrs	r1, r2
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x2ec>
 8001646:	e19e      	b.n	8001986 <__aeabi_dadd+0x62a>
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	0309      	lsls	r1, r1, #12
 800164c:	430a      	orrs	r2, r1
 800164e:	0312      	lsls	r2, r2, #12
 8001650:	0b12      	lsrs	r2, r2, #12
 8001652:	4d41      	ldr	r5, [pc, #260]	; (8001758 <__aeabi_dadd+0x3fc>)
 8001654:	e78f      	b.n	8001576 <__aeabi_dadd+0x21a>
 8001656:	0015      	movs	r5, r2
 8001658:	2200      	movs	r2, #0
 800165a:	2300      	movs	r3, #0
 800165c:	e78b      	b.n	8001576 <__aeabi_dadd+0x21a>
 800165e:	2b00      	cmp	r3, #0
 8001660:	d000      	beq.n	8001664 <__aeabi_dadd+0x308>
 8001662:	e0c7      	b.n	80017f4 <__aeabi_dadd+0x498>
 8001664:	1c6b      	adds	r3, r5, #1
 8001666:	055f      	lsls	r7, r3, #21
 8001668:	0d7f      	lsrs	r7, r7, #21
 800166a:	2f01      	cmp	r7, #1
 800166c:	dc00      	bgt.n	8001670 <__aeabi_dadd+0x314>
 800166e:	e0f1      	b.n	8001854 <__aeabi_dadd+0x4f8>
 8001670:	4d39      	ldr	r5, [pc, #228]	; (8001758 <__aeabi_dadd+0x3fc>)
 8001672:	42ab      	cmp	r3, r5
 8001674:	d100      	bne.n	8001678 <__aeabi_dadd+0x31c>
 8001676:	e0b9      	b.n	80017ec <__aeabi_dadd+0x490>
 8001678:	1885      	adds	r5, r0, r2
 800167a:	000a      	movs	r2, r1
 800167c:	4285      	cmp	r5, r0
 800167e:	4189      	sbcs	r1, r1
 8001680:	4442      	add	r2, r8
 8001682:	4249      	negs	r1, r1
 8001684:	1851      	adds	r1, r2, r1
 8001686:	2207      	movs	r2, #7
 8001688:	07cf      	lsls	r7, r1, #31
 800168a:	086d      	lsrs	r5, r5, #1
 800168c:	432f      	orrs	r7, r5
 800168e:	0849      	lsrs	r1, r1, #1
 8001690:	403a      	ands	r2, r7
 8001692:	001d      	movs	r5, r3
 8001694:	e6c2      	b.n	800141c <__aeabi_dadd+0xc0>
 8001696:	2207      	movs	r2, #7
 8001698:	4930      	ldr	r1, [pc, #192]	; (800175c <__aeabi_dadd+0x400>)
 800169a:	1aed      	subs	r5, r5, r3
 800169c:	4031      	ands	r1, r6
 800169e:	403a      	ands	r2, r7
 80016a0:	e6bc      	b.n	800141c <__aeabi_dadd+0xc0>
 80016a2:	003e      	movs	r6, r7
 80016a4:	3828      	subs	r0, #40	; 0x28
 80016a6:	4086      	lsls	r6, r0
 80016a8:	2700      	movs	r7, #0
 80016aa:	e69f      	b.n	80013ec <__aeabi_dadd+0x90>
 80016ac:	0038      	movs	r0, r7
 80016ae:	f001 fcc9 	bl	8003044 <__clzsi2>
 80016b2:	3020      	adds	r0, #32
 80016b4:	e68e      	b.n	80013d4 <__aeabi_dadd+0x78>
 80016b6:	4643      	mov	r3, r8
 80016b8:	4313      	orrs	r3, r2
 80016ba:	001f      	movs	r7, r3
 80016bc:	1e7a      	subs	r2, r7, #1
 80016be:	4197      	sbcs	r7, r2
 80016c0:	1bc7      	subs	r7, r0, r7
 80016c2:	42b8      	cmp	r0, r7
 80016c4:	4180      	sbcs	r0, r0
 80016c6:	4240      	negs	r0, r0
 80016c8:	1a09      	subs	r1, r1, r0
 80016ca:	e678      	b.n	80013be <__aeabi_dadd+0x62>
 80016cc:	000e      	movs	r6, r1
 80016ce:	003b      	movs	r3, r7
 80016d0:	4306      	orrs	r6, r0
 80016d2:	4313      	orrs	r3, r2
 80016d4:	2d00      	cmp	r5, #0
 80016d6:	d161      	bne.n	800179c <__aeabi_dadd+0x440>
 80016d8:	2e00      	cmp	r6, #0
 80016da:	d000      	beq.n	80016de <__aeabi_dadd+0x382>
 80016dc:	e0f4      	b.n	80018c8 <__aeabi_dadd+0x56c>
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d100      	bne.n	80016e4 <__aeabi_dadd+0x388>
 80016e2:	e11b      	b.n	800191c <__aeabi_dadd+0x5c0>
 80016e4:	4664      	mov	r4, ip
 80016e6:	0039      	movs	r1, r7
 80016e8:	0010      	movs	r0, r2
 80016ea:	e739      	b.n	8001560 <__aeabi_dadd+0x204>
 80016ec:	4f1a      	ldr	r7, [pc, #104]	; (8001758 <__aeabi_dadd+0x3fc>)
 80016ee:	42bb      	cmp	r3, r7
 80016f0:	d07a      	beq.n	80017e8 <__aeabi_dadd+0x48c>
 80016f2:	0033      	movs	r3, r6
 80016f4:	e6ff      	b.n	80014f6 <__aeabi_dadd+0x19a>
 80016f6:	0030      	movs	r0, r6
 80016f8:	3d1f      	subs	r5, #31
 80016fa:	40e8      	lsrs	r0, r5
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	d003      	beq.n	8001708 <__aeabi_dadd+0x3ac>
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	1acb      	subs	r3, r1, r3
 8001704:	409e      	lsls	r6, r3
 8001706:	4337      	orrs	r7, r6
 8001708:	1e7b      	subs	r3, r7, #1
 800170a:	419f      	sbcs	r7, r3
 800170c:	2207      	movs	r2, #7
 800170e:	4307      	orrs	r7, r0
 8001710:	403a      	ands	r2, r7
 8001712:	2100      	movs	r1, #0
 8001714:	2500      	movs	r5, #0
 8001716:	e789      	b.n	800162c <__aeabi_dadd+0x2d0>
 8001718:	1a17      	subs	r7, r2, r0
 800171a:	4643      	mov	r3, r8
 800171c:	42ba      	cmp	r2, r7
 800171e:	41b6      	sbcs	r6, r6
 8001720:	1a59      	subs	r1, r3, r1
 8001722:	4276      	negs	r6, r6
 8001724:	1b8e      	subs	r6, r1, r6
 8001726:	4664      	mov	r4, ip
 8001728:	e64e      	b.n	80013c8 <__aeabi_dadd+0x6c>
 800172a:	2b1f      	cmp	r3, #31
 800172c:	dd00      	ble.n	8001730 <__aeabi_dadd+0x3d4>
 800172e:	e0ad      	b.n	800188c <__aeabi_dadd+0x530>
 8001730:	2620      	movs	r6, #32
 8001732:	4647      	mov	r7, r8
 8001734:	1af6      	subs	r6, r6, r3
 8001736:	40b7      	lsls	r7, r6
 8001738:	46b9      	mov	r9, r7
 800173a:	0017      	movs	r7, r2
 800173c:	46b2      	mov	sl, r6
 800173e:	40df      	lsrs	r7, r3
 8001740:	464e      	mov	r6, r9
 8001742:	433e      	orrs	r6, r7
 8001744:	0037      	movs	r7, r6
 8001746:	4656      	mov	r6, sl
 8001748:	40b2      	lsls	r2, r6
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	41b2      	sbcs	r2, r6
 800174e:	4317      	orrs	r7, r2
 8001750:	4642      	mov	r2, r8
 8001752:	40da      	lsrs	r2, r3
 8001754:	1889      	adds	r1, r1, r2
 8001756:	e6ae      	b.n	80014b6 <__aeabi_dadd+0x15a>
 8001758:	000007ff 	.word	0x000007ff
 800175c:	ff7fffff 	.word	0xff7fffff
 8001760:	800fffff 	.word	0x800fffff
 8001764:	2620      	movs	r6, #32
 8001766:	4647      	mov	r7, r8
 8001768:	1af6      	subs	r6, r6, r3
 800176a:	40b7      	lsls	r7, r6
 800176c:	46b9      	mov	r9, r7
 800176e:	0017      	movs	r7, r2
 8001770:	46b2      	mov	sl, r6
 8001772:	40df      	lsrs	r7, r3
 8001774:	464e      	mov	r6, r9
 8001776:	433e      	orrs	r6, r7
 8001778:	0037      	movs	r7, r6
 800177a:	4656      	mov	r6, sl
 800177c:	40b2      	lsls	r2, r6
 800177e:	1e56      	subs	r6, r2, #1
 8001780:	41b2      	sbcs	r2, r6
 8001782:	4317      	orrs	r7, r2
 8001784:	4642      	mov	r2, r8
 8001786:	40da      	lsrs	r2, r3
 8001788:	1a89      	subs	r1, r1, r2
 800178a:	e799      	b.n	80016c0 <__aeabi_dadd+0x364>
 800178c:	4c7f      	ldr	r4, [pc, #508]	; (800198c <__aeabi_dadd+0x630>)
 800178e:	42a6      	cmp	r6, r4
 8001790:	d05b      	beq.n	800184a <__aeabi_dadd+0x4ee>
 8001792:	2480      	movs	r4, #128	; 0x80
 8001794:	0424      	lsls	r4, r4, #16
 8001796:	425b      	negs	r3, r3
 8001798:	4321      	orrs	r1, r4
 800179a:	e727      	b.n	80015ec <__aeabi_dadd+0x290>
 800179c:	2e00      	cmp	r6, #0
 800179e:	d10c      	bne.n	80017ba <__aeabi_dadd+0x45e>
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dadd+0x44a>
 80017a4:	e0cb      	b.n	800193e <__aeabi_dadd+0x5e2>
 80017a6:	4664      	mov	r4, ip
 80017a8:	0039      	movs	r1, r7
 80017aa:	0010      	movs	r0, r2
 80017ac:	4d77      	ldr	r5, [pc, #476]	; (800198c <__aeabi_dadd+0x630>)
 80017ae:	e6d7      	b.n	8001560 <__aeabi_dadd+0x204>
 80017b0:	4f76      	ldr	r7, [pc, #472]	; (800198c <__aeabi_dadd+0x630>)
 80017b2:	42bb      	cmp	r3, r7
 80017b4:	d018      	beq.n	80017e8 <__aeabi_dadd+0x48c>
 80017b6:	0033      	movs	r3, r6
 80017b8:	e675      	b.n	80014a6 <__aeabi_dadd+0x14a>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d014      	beq.n	80017e8 <__aeabi_dadd+0x48c>
 80017be:	074b      	lsls	r3, r1, #29
 80017c0:	08c0      	lsrs	r0, r0, #3
 80017c2:	4318      	orrs	r0, r3
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	08c9      	lsrs	r1, r1, #3
 80017c8:	031b      	lsls	r3, r3, #12
 80017ca:	4219      	tst	r1, r3
 80017cc:	d007      	beq.n	80017de <__aeabi_dadd+0x482>
 80017ce:	08fc      	lsrs	r4, r7, #3
 80017d0:	421c      	tst	r4, r3
 80017d2:	d104      	bne.n	80017de <__aeabi_dadd+0x482>
 80017d4:	0779      	lsls	r1, r7, #29
 80017d6:	08d0      	lsrs	r0, r2, #3
 80017d8:	4308      	orrs	r0, r1
 80017da:	46e1      	mov	r9, ip
 80017dc:	0021      	movs	r1, r4
 80017de:	464c      	mov	r4, r9
 80017e0:	0f42      	lsrs	r2, r0, #29
 80017e2:	00c9      	lsls	r1, r1, #3
 80017e4:	4311      	orrs	r1, r2
 80017e6:	00c0      	lsls	r0, r0, #3
 80017e8:	4d68      	ldr	r5, [pc, #416]	; (800198c <__aeabi_dadd+0x630>)
 80017ea:	e6b9      	b.n	8001560 <__aeabi_dadd+0x204>
 80017ec:	001d      	movs	r5, r3
 80017ee:	2200      	movs	r2, #0
 80017f0:	2300      	movs	r3, #0
 80017f2:	e6c0      	b.n	8001576 <__aeabi_dadd+0x21a>
 80017f4:	2d00      	cmp	r5, #0
 80017f6:	d15b      	bne.n	80018b0 <__aeabi_dadd+0x554>
 80017f8:	000d      	movs	r5, r1
 80017fa:	4305      	orrs	r5, r0
 80017fc:	d100      	bne.n	8001800 <__aeabi_dadd+0x4a4>
 80017fe:	e6e2      	b.n	80015c6 <__aeabi_dadd+0x26a>
 8001800:	1c5d      	adds	r5, r3, #1
 8001802:	d100      	bne.n	8001806 <__aeabi_dadd+0x4aa>
 8001804:	e0b0      	b.n	8001968 <__aeabi_dadd+0x60c>
 8001806:	4d61      	ldr	r5, [pc, #388]	; (800198c <__aeabi_dadd+0x630>)
 8001808:	42ae      	cmp	r6, r5
 800180a:	d01f      	beq.n	800184c <__aeabi_dadd+0x4f0>
 800180c:	43db      	mvns	r3, r3
 800180e:	2b38      	cmp	r3, #56	; 0x38
 8001810:	dc71      	bgt.n	80018f6 <__aeabi_dadd+0x59a>
 8001812:	2b1f      	cmp	r3, #31
 8001814:	dd00      	ble.n	8001818 <__aeabi_dadd+0x4bc>
 8001816:	e096      	b.n	8001946 <__aeabi_dadd+0x5ea>
 8001818:	2520      	movs	r5, #32
 800181a:	000f      	movs	r7, r1
 800181c:	1aed      	subs	r5, r5, r3
 800181e:	40af      	lsls	r7, r5
 8001820:	46b9      	mov	r9, r7
 8001822:	0007      	movs	r7, r0
 8001824:	46aa      	mov	sl, r5
 8001826:	40df      	lsrs	r7, r3
 8001828:	464d      	mov	r5, r9
 800182a:	433d      	orrs	r5, r7
 800182c:	002f      	movs	r7, r5
 800182e:	4655      	mov	r5, sl
 8001830:	40a8      	lsls	r0, r5
 8001832:	40d9      	lsrs	r1, r3
 8001834:	1e45      	subs	r5, r0, #1
 8001836:	41a8      	sbcs	r0, r5
 8001838:	4488      	add	r8, r1
 800183a:	4307      	orrs	r7, r0
 800183c:	18bf      	adds	r7, r7, r2
 800183e:	4297      	cmp	r7, r2
 8001840:	4192      	sbcs	r2, r2
 8001842:	4251      	negs	r1, r2
 8001844:	4441      	add	r1, r8
 8001846:	0035      	movs	r5, r6
 8001848:	e63a      	b.n	80014c0 <__aeabi_dadd+0x164>
 800184a:	4664      	mov	r4, ip
 800184c:	0035      	movs	r5, r6
 800184e:	4641      	mov	r1, r8
 8001850:	0010      	movs	r0, r2
 8001852:	e685      	b.n	8001560 <__aeabi_dadd+0x204>
 8001854:	000b      	movs	r3, r1
 8001856:	4303      	orrs	r3, r0
 8001858:	2d00      	cmp	r5, #0
 800185a:	d000      	beq.n	800185e <__aeabi_dadd+0x502>
 800185c:	e663      	b.n	8001526 <__aeabi_dadd+0x1ca>
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f5      	beq.n	800184e <__aeabi_dadd+0x4f2>
 8001862:	4643      	mov	r3, r8
 8001864:	4313      	orrs	r3, r2
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x50e>
 8001868:	e67a      	b.n	8001560 <__aeabi_dadd+0x204>
 800186a:	1887      	adds	r7, r0, r2
 800186c:	4287      	cmp	r7, r0
 800186e:	4180      	sbcs	r0, r0
 8001870:	2207      	movs	r2, #7
 8001872:	4441      	add	r1, r8
 8001874:	4240      	negs	r0, r0
 8001876:	1809      	adds	r1, r1, r0
 8001878:	403a      	ands	r2, r7
 800187a:	020b      	lsls	r3, r1, #8
 800187c:	d400      	bmi.n	8001880 <__aeabi_dadd+0x524>
 800187e:	e6d5      	b.n	800162c <__aeabi_dadd+0x2d0>
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <__aeabi_dadd+0x634>)
 8001882:	3501      	adds	r5, #1
 8001884:	4019      	ands	r1, r3
 8001886:	e5c9      	b.n	800141c <__aeabi_dadd+0xc0>
 8001888:	0038      	movs	r0, r7
 800188a:	e669      	b.n	8001560 <__aeabi_dadd+0x204>
 800188c:	001e      	movs	r6, r3
 800188e:	4647      	mov	r7, r8
 8001890:	3e20      	subs	r6, #32
 8001892:	40f7      	lsrs	r7, r6
 8001894:	46bc      	mov	ip, r7
 8001896:	2b20      	cmp	r3, #32
 8001898:	d004      	beq.n	80018a4 <__aeabi_dadd+0x548>
 800189a:	2640      	movs	r6, #64	; 0x40
 800189c:	1af3      	subs	r3, r6, r3
 800189e:	4646      	mov	r6, r8
 80018a0:	409e      	lsls	r6, r3
 80018a2:	4332      	orrs	r2, r6
 80018a4:	0017      	movs	r7, r2
 80018a6:	4663      	mov	r3, ip
 80018a8:	1e7a      	subs	r2, r7, #1
 80018aa:	4197      	sbcs	r7, r2
 80018ac:	431f      	orrs	r7, r3
 80018ae:	e602      	b.n	80014b6 <__aeabi_dadd+0x15a>
 80018b0:	4d36      	ldr	r5, [pc, #216]	; (800198c <__aeabi_dadd+0x630>)
 80018b2:	42ae      	cmp	r6, r5
 80018b4:	d0ca      	beq.n	800184c <__aeabi_dadd+0x4f0>
 80018b6:	2580      	movs	r5, #128	; 0x80
 80018b8:	042d      	lsls	r5, r5, #16
 80018ba:	425b      	negs	r3, r3
 80018bc:	4329      	orrs	r1, r5
 80018be:	e7a6      	b.n	800180e <__aeabi_dadd+0x4b2>
 80018c0:	4308      	orrs	r0, r1
 80018c2:	1e41      	subs	r1, r0, #1
 80018c4:	4188      	sbcs	r0, r1
 80018c6:	e6a6      	b.n	8001616 <__aeabi_dadd+0x2ba>
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x572>
 80018cc:	e648      	b.n	8001560 <__aeabi_dadd+0x204>
 80018ce:	1a87      	subs	r7, r0, r2
 80018d0:	4643      	mov	r3, r8
 80018d2:	42b8      	cmp	r0, r7
 80018d4:	41b6      	sbcs	r6, r6
 80018d6:	1acb      	subs	r3, r1, r3
 80018d8:	4276      	negs	r6, r6
 80018da:	1b9e      	subs	r6, r3, r6
 80018dc:	0233      	lsls	r3, r6, #8
 80018de:	d54b      	bpl.n	8001978 <__aeabi_dadd+0x61c>
 80018e0:	1a17      	subs	r7, r2, r0
 80018e2:	4643      	mov	r3, r8
 80018e4:	42ba      	cmp	r2, r7
 80018e6:	4192      	sbcs	r2, r2
 80018e8:	1a59      	subs	r1, r3, r1
 80018ea:	4252      	negs	r2, r2
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	2207      	movs	r2, #7
 80018f0:	4664      	mov	r4, ip
 80018f2:	403a      	ands	r2, r7
 80018f4:	e592      	b.n	800141c <__aeabi_dadd+0xc0>
 80018f6:	4301      	orrs	r1, r0
 80018f8:	000f      	movs	r7, r1
 80018fa:	1e79      	subs	r1, r7, #1
 80018fc:	418f      	sbcs	r7, r1
 80018fe:	e79d      	b.n	800183c <__aeabi_dadd+0x4e0>
 8001900:	001c      	movs	r4, r3
 8001902:	000f      	movs	r7, r1
 8001904:	3c20      	subs	r4, #32
 8001906:	40e7      	lsrs	r7, r4
 8001908:	2b20      	cmp	r3, #32
 800190a:	d003      	beq.n	8001914 <__aeabi_dadd+0x5b8>
 800190c:	2440      	movs	r4, #64	; 0x40
 800190e:	1ae3      	subs	r3, r4, r3
 8001910:	4099      	lsls	r1, r3
 8001912:	4308      	orrs	r0, r1
 8001914:	1e41      	subs	r1, r0, #1
 8001916:	4188      	sbcs	r0, r1
 8001918:	4338      	orrs	r0, r7
 800191a:	e67c      	b.n	8001616 <__aeabi_dadd+0x2ba>
 800191c:	2200      	movs	r2, #0
 800191e:	2400      	movs	r4, #0
 8001920:	e625      	b.n	800156e <__aeabi_dadd+0x212>
 8001922:	1a17      	subs	r7, r2, r0
 8001924:	4643      	mov	r3, r8
 8001926:	42ba      	cmp	r2, r7
 8001928:	4192      	sbcs	r2, r2
 800192a:	1a59      	subs	r1, r3, r1
 800192c:	4252      	negs	r2, r2
 800192e:	1a89      	subs	r1, r1, r2
 8001930:	4664      	mov	r4, ip
 8001932:	0035      	movs	r5, r6
 8001934:	e543      	b.n	80013be <__aeabi_dadd+0x62>
 8001936:	4641      	mov	r1, r8
 8001938:	0010      	movs	r0, r2
 800193a:	4d14      	ldr	r5, [pc, #80]	; (800198c <__aeabi_dadd+0x630>)
 800193c:	e610      	b.n	8001560 <__aeabi_dadd+0x204>
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	2400      	movs	r4, #0
 8001942:	0312      	lsls	r2, r2, #12
 8001944:	e680      	b.n	8001648 <__aeabi_dadd+0x2ec>
 8001946:	001d      	movs	r5, r3
 8001948:	000f      	movs	r7, r1
 800194a:	3d20      	subs	r5, #32
 800194c:	40ef      	lsrs	r7, r5
 800194e:	46bc      	mov	ip, r7
 8001950:	2b20      	cmp	r3, #32
 8001952:	d003      	beq.n	800195c <__aeabi_dadd+0x600>
 8001954:	2540      	movs	r5, #64	; 0x40
 8001956:	1aeb      	subs	r3, r5, r3
 8001958:	4099      	lsls	r1, r3
 800195a:	4308      	orrs	r0, r1
 800195c:	0007      	movs	r7, r0
 800195e:	4663      	mov	r3, ip
 8001960:	1e78      	subs	r0, r7, #1
 8001962:	4187      	sbcs	r7, r0
 8001964:	431f      	orrs	r7, r3
 8001966:	e769      	b.n	800183c <__aeabi_dadd+0x4e0>
 8001968:	1887      	adds	r7, r0, r2
 800196a:	4297      	cmp	r7, r2
 800196c:	419b      	sbcs	r3, r3
 800196e:	4441      	add	r1, r8
 8001970:	425b      	negs	r3, r3
 8001972:	18c9      	adds	r1, r1, r3
 8001974:	0035      	movs	r5, r6
 8001976:	e5a3      	b.n	80014c0 <__aeabi_dadd+0x164>
 8001978:	003b      	movs	r3, r7
 800197a:	4333      	orrs	r3, r6
 800197c:	d0ce      	beq.n	800191c <__aeabi_dadd+0x5c0>
 800197e:	2207      	movs	r2, #7
 8001980:	0031      	movs	r1, r6
 8001982:	403a      	ands	r2, r7
 8001984:	e652      	b.n	800162c <__aeabi_dadd+0x2d0>
 8001986:	2300      	movs	r3, #0
 8001988:	001a      	movs	r2, r3
 800198a:	e5f4      	b.n	8001576 <__aeabi_dadd+0x21a>
 800198c:	000007ff 	.word	0x000007ff
 8001990:	ff7fffff 	.word	0xff7fffff

08001994 <__aeabi_ddiv>:
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	4657      	mov	r7, sl
 8001998:	46de      	mov	lr, fp
 800199a:	464e      	mov	r6, r9
 800199c:	4645      	mov	r5, r8
 800199e:	b5e0      	push	{r5, r6, r7, lr}
 80019a0:	4683      	mov	fp, r0
 80019a2:	0007      	movs	r7, r0
 80019a4:	030e      	lsls	r6, r1, #12
 80019a6:	0048      	lsls	r0, r1, #1
 80019a8:	b085      	sub	sp, #20
 80019aa:	4692      	mov	sl, r2
 80019ac:	001c      	movs	r4, r3
 80019ae:	0b36      	lsrs	r6, r6, #12
 80019b0:	0d40      	lsrs	r0, r0, #21
 80019b2:	0fcd      	lsrs	r5, r1, #31
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d100      	bne.n	80019ba <__aeabi_ddiv+0x26>
 80019b8:	e09d      	b.n	8001af6 <__aeabi_ddiv+0x162>
 80019ba:	4b95      	ldr	r3, [pc, #596]	; (8001c10 <__aeabi_ddiv+0x27c>)
 80019bc:	4298      	cmp	r0, r3
 80019be:	d039      	beq.n	8001a34 <__aeabi_ddiv+0xa0>
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	00f6      	lsls	r6, r6, #3
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	431e      	orrs	r6, r3
 80019c8:	4a92      	ldr	r2, [pc, #584]	; (8001c14 <__aeabi_ddiv+0x280>)
 80019ca:	0f7b      	lsrs	r3, r7, #29
 80019cc:	4333      	orrs	r3, r6
 80019ce:	4699      	mov	r9, r3
 80019d0:	4694      	mov	ip, r2
 80019d2:	0003      	movs	r3, r0
 80019d4:	4463      	add	r3, ip
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2300      	movs	r3, #0
 80019da:	2600      	movs	r6, #0
 80019dc:	00ff      	lsls	r7, r7, #3
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	0323      	lsls	r3, r4, #12
 80019e2:	0b1b      	lsrs	r3, r3, #12
 80019e4:	4698      	mov	r8, r3
 80019e6:	0063      	lsls	r3, r4, #1
 80019e8:	0fe4      	lsrs	r4, r4, #31
 80019ea:	4652      	mov	r2, sl
 80019ec:	0d5b      	lsrs	r3, r3, #21
 80019ee:	9401      	str	r4, [sp, #4]
 80019f0:	d100      	bne.n	80019f4 <__aeabi_ddiv+0x60>
 80019f2:	e0b3      	b.n	8001b5c <__aeabi_ddiv+0x1c8>
 80019f4:	4986      	ldr	r1, [pc, #536]	; (8001c10 <__aeabi_ddiv+0x27c>)
 80019f6:	428b      	cmp	r3, r1
 80019f8:	d100      	bne.n	80019fc <__aeabi_ddiv+0x68>
 80019fa:	e09e      	b.n	8001b3a <__aeabi_ddiv+0x1a6>
 80019fc:	4642      	mov	r2, r8
 80019fe:	00d1      	lsls	r1, r2, #3
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	0412      	lsls	r2, r2, #16
 8001a04:	430a      	orrs	r2, r1
 8001a06:	4651      	mov	r1, sl
 8001a08:	0f49      	lsrs	r1, r1, #29
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	468b      	mov	fp, r1
 8001a0e:	4981      	ldr	r1, [pc, #516]	; (8001c14 <__aeabi_ddiv+0x280>)
 8001a10:	4652      	mov	r2, sl
 8001a12:	468c      	mov	ip, r1
 8001a14:	9900      	ldr	r1, [sp, #0]
 8001a16:	4463      	add	r3, ip
 8001a18:	1acb      	subs	r3, r1, r3
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	00d2      	lsls	r2, r2, #3
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	002b      	movs	r3, r5
 8001a22:	4063      	eors	r3, r4
 8001a24:	469a      	mov	sl, r3
 8001a26:	2e0f      	cmp	r6, #15
 8001a28:	d900      	bls.n	8001a2c <__aeabi_ddiv+0x98>
 8001a2a:	e105      	b.n	8001c38 <__aeabi_ddiv+0x2a4>
 8001a2c:	4b7a      	ldr	r3, [pc, #488]	; (8001c18 <__aeabi_ddiv+0x284>)
 8001a2e:	00b6      	lsls	r6, r6, #2
 8001a30:	599b      	ldr	r3, [r3, r6]
 8001a32:	469f      	mov	pc, r3
 8001a34:	465b      	mov	r3, fp
 8001a36:	4333      	orrs	r3, r6
 8001a38:	4699      	mov	r9, r3
 8001a3a:	d000      	beq.n	8001a3e <__aeabi_ddiv+0xaa>
 8001a3c:	e0b8      	b.n	8001bb0 <__aeabi_ddiv+0x21c>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	2608      	movs	r6, #8
 8001a42:	2700      	movs	r7, #0
 8001a44:	9000      	str	r0, [sp, #0]
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	e7ca      	b.n	80019e0 <__aeabi_ddiv+0x4c>
 8001a4a:	46cb      	mov	fp, r9
 8001a4c:	003a      	movs	r2, r7
 8001a4e:	9902      	ldr	r1, [sp, #8]
 8001a50:	9501      	str	r5, [sp, #4]
 8001a52:	9b01      	ldr	r3, [sp, #4]
 8001a54:	469a      	mov	sl, r3
 8001a56:	2902      	cmp	r1, #2
 8001a58:	d027      	beq.n	8001aaa <__aeabi_ddiv+0x116>
 8001a5a:	2903      	cmp	r1, #3
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_ddiv+0xcc>
 8001a5e:	e280      	b.n	8001f62 <__aeabi_ddiv+0x5ce>
 8001a60:	2901      	cmp	r1, #1
 8001a62:	d044      	beq.n	8001aee <__aeabi_ddiv+0x15a>
 8001a64:	496d      	ldr	r1, [pc, #436]	; (8001c1c <__aeabi_ddiv+0x288>)
 8001a66:	9b00      	ldr	r3, [sp, #0]
 8001a68:	468c      	mov	ip, r1
 8001a6a:	4463      	add	r3, ip
 8001a6c:	001c      	movs	r4, r3
 8001a6e:	2c00      	cmp	r4, #0
 8001a70:	dd38      	ble.n	8001ae4 <__aeabi_ddiv+0x150>
 8001a72:	0753      	lsls	r3, r2, #29
 8001a74:	d000      	beq.n	8001a78 <__aeabi_ddiv+0xe4>
 8001a76:	e213      	b.n	8001ea0 <__aeabi_ddiv+0x50c>
 8001a78:	08d2      	lsrs	r2, r2, #3
 8001a7a:	465b      	mov	r3, fp
 8001a7c:	01db      	lsls	r3, r3, #7
 8001a7e:	d509      	bpl.n	8001a94 <__aeabi_ddiv+0x100>
 8001a80:	4659      	mov	r1, fp
 8001a82:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <__aeabi_ddiv+0x28c>)
 8001a84:	4019      	ands	r1, r3
 8001a86:	468b      	mov	fp, r1
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	00c9      	lsls	r1, r1, #3
 8001a8c:	468c      	mov	ip, r1
 8001a8e:	9b00      	ldr	r3, [sp, #0]
 8001a90:	4463      	add	r3, ip
 8001a92:	001c      	movs	r4, r3
 8001a94:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <__aeabi_ddiv+0x290>)
 8001a96:	429c      	cmp	r4, r3
 8001a98:	dc07      	bgt.n	8001aaa <__aeabi_ddiv+0x116>
 8001a9a:	465b      	mov	r3, fp
 8001a9c:	0564      	lsls	r4, r4, #21
 8001a9e:	075f      	lsls	r7, r3, #29
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	4317      	orrs	r7, r2
 8001aa4:	0b1b      	lsrs	r3, r3, #12
 8001aa6:	0d62      	lsrs	r2, r4, #21
 8001aa8:	e002      	b.n	8001ab0 <__aeabi_ddiv+0x11c>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2700      	movs	r7, #0
 8001aae:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <__aeabi_ddiv+0x27c>)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	031b      	lsls	r3, r3, #12
 8001ab4:	0b1c      	lsrs	r4, r3, #12
 8001ab6:	0d0b      	lsrs	r3, r1, #20
 8001ab8:	051b      	lsls	r3, r3, #20
 8001aba:	4323      	orrs	r3, r4
 8001abc:	0514      	lsls	r4, r2, #20
 8001abe:	4a5a      	ldr	r2, [pc, #360]	; (8001c28 <__aeabi_ddiv+0x294>)
 8001ac0:	0038      	movs	r0, r7
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	431c      	orrs	r4, r3
 8001ac6:	4653      	mov	r3, sl
 8001ac8:	0064      	lsls	r4, r4, #1
 8001aca:	07db      	lsls	r3, r3, #31
 8001acc:	0864      	lsrs	r4, r4, #1
 8001ace:	431c      	orrs	r4, r3
 8001ad0:	0021      	movs	r1, r4
 8001ad2:	b005      	add	sp, #20
 8001ad4:	bc3c      	pop	{r2, r3, r4, r5}
 8001ad6:	4690      	mov	r8, r2
 8001ad8:	4699      	mov	r9, r3
 8001ada:	46a2      	mov	sl, r4
 8001adc:	46ab      	mov	fp, r5
 8001ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4252      	negs	r2, r2
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	1b1b      	subs	r3, r3, r4
 8001ae8:	2b38      	cmp	r3, #56	; 0x38
 8001aea:	dc00      	bgt.n	8001aee <__aeabi_ddiv+0x15a>
 8001aec:	e1ad      	b.n	8001e4a <__aeabi_ddiv+0x4b6>
 8001aee:	2200      	movs	r2, #0
 8001af0:	2300      	movs	r3, #0
 8001af2:	2700      	movs	r7, #0
 8001af4:	e7dc      	b.n	8001ab0 <__aeabi_ddiv+0x11c>
 8001af6:	465b      	mov	r3, fp
 8001af8:	4333      	orrs	r3, r6
 8001afa:	4699      	mov	r9, r3
 8001afc:	d05e      	beq.n	8001bbc <__aeabi_ddiv+0x228>
 8001afe:	2e00      	cmp	r6, #0
 8001b00:	d100      	bne.n	8001b04 <__aeabi_ddiv+0x170>
 8001b02:	e18a      	b.n	8001e1a <__aeabi_ddiv+0x486>
 8001b04:	0030      	movs	r0, r6
 8001b06:	f001 fa9d 	bl	8003044 <__clzsi2>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	3b0b      	subs	r3, #11
 8001b0e:	2b1c      	cmp	r3, #28
 8001b10:	dd00      	ble.n	8001b14 <__aeabi_ddiv+0x180>
 8001b12:	e17b      	b.n	8001e0c <__aeabi_ddiv+0x478>
 8001b14:	221d      	movs	r2, #29
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	465a      	mov	r2, fp
 8001b1a:	0001      	movs	r1, r0
 8001b1c:	40da      	lsrs	r2, r3
 8001b1e:	3908      	subs	r1, #8
 8001b20:	408e      	lsls	r6, r1
 8001b22:	0013      	movs	r3, r2
 8001b24:	465f      	mov	r7, fp
 8001b26:	4333      	orrs	r3, r6
 8001b28:	4699      	mov	r9, r3
 8001b2a:	408f      	lsls	r7, r1
 8001b2c:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <__aeabi_ddiv+0x298>)
 8001b2e:	2600      	movs	r6, #0
 8001b30:	1a1b      	subs	r3, r3, r0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2300      	movs	r3, #0
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	e752      	b.n	80019e0 <__aeabi_ddiv+0x4c>
 8001b3a:	4641      	mov	r1, r8
 8001b3c:	4653      	mov	r3, sl
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	493b      	ldr	r1, [pc, #236]	; (8001c30 <__aeabi_ddiv+0x29c>)
 8001b42:	469b      	mov	fp, r3
 8001b44:	468c      	mov	ip, r1
 8001b46:	9b00      	ldr	r3, [sp, #0]
 8001b48:	4463      	add	r3, ip
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	465b      	mov	r3, fp
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d13b      	bne.n	8001bca <__aeabi_ddiv+0x236>
 8001b52:	2302      	movs	r3, #2
 8001b54:	2200      	movs	r2, #0
 8001b56:	431e      	orrs	r6, r3
 8001b58:	2102      	movs	r1, #2
 8001b5a:	e761      	b.n	8001a20 <__aeabi_ddiv+0x8c>
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	469b      	mov	fp, r3
 8001b62:	d037      	beq.n	8001bd4 <__aeabi_ddiv+0x240>
 8001b64:	4643      	mov	r3, r8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d100      	bne.n	8001b6c <__aeabi_ddiv+0x1d8>
 8001b6a:	e162      	b.n	8001e32 <__aeabi_ddiv+0x49e>
 8001b6c:	4640      	mov	r0, r8
 8001b6e:	f001 fa69 	bl	8003044 <__clzsi2>
 8001b72:	0003      	movs	r3, r0
 8001b74:	3b0b      	subs	r3, #11
 8001b76:	2b1c      	cmp	r3, #28
 8001b78:	dd00      	ble.n	8001b7c <__aeabi_ddiv+0x1e8>
 8001b7a:	e153      	b.n	8001e24 <__aeabi_ddiv+0x490>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	4641      	mov	r1, r8
 8001b80:	3a08      	subs	r2, #8
 8001b82:	4091      	lsls	r1, r2
 8001b84:	4688      	mov	r8, r1
 8001b86:	211d      	movs	r1, #29
 8001b88:	1acb      	subs	r3, r1, r3
 8001b8a:	4651      	mov	r1, sl
 8001b8c:	40d9      	lsrs	r1, r3
 8001b8e:	000b      	movs	r3, r1
 8001b90:	4641      	mov	r1, r8
 8001b92:	430b      	orrs	r3, r1
 8001b94:	469b      	mov	fp, r3
 8001b96:	4653      	mov	r3, sl
 8001b98:	4093      	lsls	r3, r2
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	9b00      	ldr	r3, [sp, #0]
 8001b9e:	4925      	ldr	r1, [pc, #148]	; (8001c34 <__aeabi_ddiv+0x2a0>)
 8001ba0:	469c      	mov	ip, r3
 8001ba2:	4460      	add	r0, ip
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	468c      	mov	ip, r1
 8001ba8:	4463      	add	r3, ip
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2100      	movs	r1, #0
 8001bae:	e737      	b.n	8001a20 <__aeabi_ddiv+0x8c>
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	46b1      	mov	r9, r6
 8001bb4:	9000      	str	r0, [sp, #0]
 8001bb6:	260c      	movs	r6, #12
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	e711      	b.n	80019e0 <__aeabi_ddiv+0x4c>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	2604      	movs	r6, #4
 8001bc4:	2700      	movs	r7, #0
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	e70a      	b.n	80019e0 <__aeabi_ddiv+0x4c>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	46c3      	mov	fp, r8
 8001bce:	431e      	orrs	r6, r3
 8001bd0:	2103      	movs	r1, #3
 8001bd2:	e725      	b.n	8001a20 <__aeabi_ddiv+0x8c>
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	431e      	orrs	r6, r3
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2101      	movs	r1, #1
 8001bdc:	e720      	b.n	8001a20 <__aeabi_ddiv+0x8c>
 8001bde:	2300      	movs	r3, #0
 8001be0:	469a      	mov	sl, r3
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	2700      	movs	r7, #0
 8001be6:	031b      	lsls	r3, r3, #12
 8001be8:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <__aeabi_ddiv+0x27c>)
 8001bea:	e761      	b.n	8001ab0 <__aeabi_ddiv+0x11c>
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	4649      	mov	r1, r9
 8001bf0:	031b      	lsls	r3, r3, #12
 8001bf2:	4219      	tst	r1, r3
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_ddiv+0x264>
 8001bf6:	e0e2      	b.n	8001dbe <__aeabi_ddiv+0x42a>
 8001bf8:	4659      	mov	r1, fp
 8001bfa:	4219      	tst	r1, r3
 8001bfc:	d000      	beq.n	8001c00 <__aeabi_ddiv+0x26c>
 8001bfe:	e0de      	b.n	8001dbe <__aeabi_ddiv+0x42a>
 8001c00:	430b      	orrs	r3, r1
 8001c02:	031b      	lsls	r3, r3, #12
 8001c04:	0017      	movs	r7, r2
 8001c06:	0b1b      	lsrs	r3, r3, #12
 8001c08:	46a2      	mov	sl, r4
 8001c0a:	4a01      	ldr	r2, [pc, #4]	; (8001c10 <__aeabi_ddiv+0x27c>)
 8001c0c:	e750      	b.n	8001ab0 <__aeabi_ddiv+0x11c>
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	000007ff 	.word	0x000007ff
 8001c14:	fffffc01 	.word	0xfffffc01
 8001c18:	08009220 	.word	0x08009220
 8001c1c:	000003ff 	.word	0x000003ff
 8001c20:	feffffff 	.word	0xfeffffff
 8001c24:	000007fe 	.word	0x000007fe
 8001c28:	800fffff 	.word	0x800fffff
 8001c2c:	fffffc0d 	.word	0xfffffc0d
 8001c30:	fffff801 	.word	0xfffff801
 8001c34:	000003f3 	.word	0x000003f3
 8001c38:	45d9      	cmp	r9, fp
 8001c3a:	d900      	bls.n	8001c3e <__aeabi_ddiv+0x2aa>
 8001c3c:	e0cb      	b.n	8001dd6 <__aeabi_ddiv+0x442>
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_ddiv+0x2ae>
 8001c40:	e0c6      	b.n	8001dd0 <__aeabi_ddiv+0x43c>
 8001c42:	003c      	movs	r4, r7
 8001c44:	4648      	mov	r0, r9
 8001c46:	2700      	movs	r7, #0
 8001c48:	9b00      	ldr	r3, [sp, #0]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	465b      	mov	r3, fp
 8001c50:	0e16      	lsrs	r6, r2, #24
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	431e      	orrs	r6, r3
 8001c56:	0213      	lsls	r3, r2, #8
 8001c58:	4698      	mov	r8, r3
 8001c5a:	0433      	lsls	r3, r6, #16
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	4699      	mov	r9, r3
 8001c60:	0c31      	lsrs	r1, r6, #16
 8001c62:	9101      	str	r1, [sp, #4]
 8001c64:	f7fe fae8 	bl	8000238 <__aeabi_uidivmod>
 8001c68:	464a      	mov	r2, r9
 8001c6a:	4342      	muls	r2, r0
 8001c6c:	040b      	lsls	r3, r1, #16
 8001c6e:	0c21      	lsrs	r1, r4, #16
 8001c70:	0005      	movs	r5, r0
 8001c72:	4319      	orrs	r1, r3
 8001c74:	428a      	cmp	r2, r1
 8001c76:	d907      	bls.n	8001c88 <__aeabi_ddiv+0x2f4>
 8001c78:	1989      	adds	r1, r1, r6
 8001c7a:	3d01      	subs	r5, #1
 8001c7c:	428e      	cmp	r6, r1
 8001c7e:	d803      	bhi.n	8001c88 <__aeabi_ddiv+0x2f4>
 8001c80:	428a      	cmp	r2, r1
 8001c82:	d901      	bls.n	8001c88 <__aeabi_ddiv+0x2f4>
 8001c84:	1e85      	subs	r5, r0, #2
 8001c86:	1989      	adds	r1, r1, r6
 8001c88:	1a88      	subs	r0, r1, r2
 8001c8a:	9901      	ldr	r1, [sp, #4]
 8001c8c:	f7fe fad4 	bl	8000238 <__aeabi_uidivmod>
 8001c90:	0409      	lsls	r1, r1, #16
 8001c92:	468c      	mov	ip, r1
 8001c94:	464a      	mov	r2, r9
 8001c96:	0421      	lsls	r1, r4, #16
 8001c98:	4664      	mov	r4, ip
 8001c9a:	4342      	muls	r2, r0
 8001c9c:	0c09      	lsrs	r1, r1, #16
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	4321      	orrs	r1, r4
 8001ca2:	428a      	cmp	r2, r1
 8001ca4:	d904      	bls.n	8001cb0 <__aeabi_ddiv+0x31c>
 8001ca6:	1989      	adds	r1, r1, r6
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	428e      	cmp	r6, r1
 8001cac:	d800      	bhi.n	8001cb0 <__aeabi_ddiv+0x31c>
 8001cae:	e0f1      	b.n	8001e94 <__aeabi_ddiv+0x500>
 8001cb0:	042d      	lsls	r5, r5, #16
 8001cb2:	431d      	orrs	r5, r3
 8001cb4:	46ab      	mov	fp, r5
 8001cb6:	4643      	mov	r3, r8
 8001cb8:	1a89      	subs	r1, r1, r2
 8001cba:	4642      	mov	r2, r8
 8001cbc:	0c28      	lsrs	r0, r5, #16
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	0c1d      	lsrs	r5, r3, #16
 8001cc2:	465b      	mov	r3, fp
 8001cc4:	0c14      	lsrs	r4, r2, #16
 8001cc6:	0022      	movs	r2, r4
 8001cc8:	041b      	lsls	r3, r3, #16
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	435a      	muls	r2, r3
 8001cce:	9403      	str	r4, [sp, #12]
 8001cd0:	436b      	muls	r3, r5
 8001cd2:	4344      	muls	r4, r0
 8001cd4:	9502      	str	r5, [sp, #8]
 8001cd6:	4368      	muls	r0, r5
 8001cd8:	191b      	adds	r3, r3, r4
 8001cda:	0c15      	lsrs	r5, r2, #16
 8001cdc:	18eb      	adds	r3, r5, r3
 8001cde:	429c      	cmp	r4, r3
 8001ce0:	d903      	bls.n	8001cea <__aeabi_ddiv+0x356>
 8001ce2:	2480      	movs	r4, #128	; 0x80
 8001ce4:	0264      	lsls	r4, r4, #9
 8001ce6:	46a4      	mov	ip, r4
 8001ce8:	4460      	add	r0, ip
 8001cea:	0c1c      	lsrs	r4, r3, #16
 8001cec:	0415      	lsls	r5, r2, #16
 8001cee:	041b      	lsls	r3, r3, #16
 8001cf0:	0c2d      	lsrs	r5, r5, #16
 8001cf2:	1820      	adds	r0, r4, r0
 8001cf4:	195d      	adds	r5, r3, r5
 8001cf6:	4281      	cmp	r1, r0
 8001cf8:	d377      	bcc.n	8001dea <__aeabi_ddiv+0x456>
 8001cfa:	d073      	beq.n	8001de4 <__aeabi_ddiv+0x450>
 8001cfc:	1a0c      	subs	r4, r1, r0
 8001cfe:	4aa2      	ldr	r2, [pc, #648]	; (8001f88 <__aeabi_ddiv+0x5f4>)
 8001d00:	1b7d      	subs	r5, r7, r5
 8001d02:	42af      	cmp	r7, r5
 8001d04:	41bf      	sbcs	r7, r7
 8001d06:	4694      	mov	ip, r2
 8001d08:	9b00      	ldr	r3, [sp, #0]
 8001d0a:	427f      	negs	r7, r7
 8001d0c:	4463      	add	r3, ip
 8001d0e:	1be0      	subs	r0, r4, r7
 8001d10:	001c      	movs	r4, r3
 8001d12:	4286      	cmp	r6, r0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x384>
 8001d16:	e0db      	b.n	8001ed0 <__aeabi_ddiv+0x53c>
 8001d18:	9901      	ldr	r1, [sp, #4]
 8001d1a:	f7fe fa8d 	bl	8000238 <__aeabi_uidivmod>
 8001d1e:	464a      	mov	r2, r9
 8001d20:	4342      	muls	r2, r0
 8001d22:	040b      	lsls	r3, r1, #16
 8001d24:	0c29      	lsrs	r1, r5, #16
 8001d26:	0007      	movs	r7, r0
 8001d28:	4319      	orrs	r1, r3
 8001d2a:	428a      	cmp	r2, r1
 8001d2c:	d907      	bls.n	8001d3e <__aeabi_ddiv+0x3aa>
 8001d2e:	1989      	adds	r1, r1, r6
 8001d30:	3f01      	subs	r7, #1
 8001d32:	428e      	cmp	r6, r1
 8001d34:	d803      	bhi.n	8001d3e <__aeabi_ddiv+0x3aa>
 8001d36:	428a      	cmp	r2, r1
 8001d38:	d901      	bls.n	8001d3e <__aeabi_ddiv+0x3aa>
 8001d3a:	1e87      	subs	r7, r0, #2
 8001d3c:	1989      	adds	r1, r1, r6
 8001d3e:	1a88      	subs	r0, r1, r2
 8001d40:	9901      	ldr	r1, [sp, #4]
 8001d42:	f7fe fa79 	bl	8000238 <__aeabi_uidivmod>
 8001d46:	0409      	lsls	r1, r1, #16
 8001d48:	464a      	mov	r2, r9
 8001d4a:	4689      	mov	r9, r1
 8001d4c:	0429      	lsls	r1, r5, #16
 8001d4e:	464d      	mov	r5, r9
 8001d50:	4342      	muls	r2, r0
 8001d52:	0c09      	lsrs	r1, r1, #16
 8001d54:	0003      	movs	r3, r0
 8001d56:	4329      	orrs	r1, r5
 8001d58:	428a      	cmp	r2, r1
 8001d5a:	d907      	bls.n	8001d6c <__aeabi_ddiv+0x3d8>
 8001d5c:	1989      	adds	r1, r1, r6
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	428e      	cmp	r6, r1
 8001d62:	d803      	bhi.n	8001d6c <__aeabi_ddiv+0x3d8>
 8001d64:	428a      	cmp	r2, r1
 8001d66:	d901      	bls.n	8001d6c <__aeabi_ddiv+0x3d8>
 8001d68:	1e83      	subs	r3, r0, #2
 8001d6a:	1989      	adds	r1, r1, r6
 8001d6c:	043f      	lsls	r7, r7, #16
 8001d6e:	1a89      	subs	r1, r1, r2
 8001d70:	003a      	movs	r2, r7
 8001d72:	9f03      	ldr	r7, [sp, #12]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	0038      	movs	r0, r7
 8001d78:	0413      	lsls	r3, r2, #16
 8001d7a:	0c1b      	lsrs	r3, r3, #16
 8001d7c:	4358      	muls	r0, r3
 8001d7e:	4681      	mov	r9, r0
 8001d80:	9802      	ldr	r0, [sp, #8]
 8001d82:	0c15      	lsrs	r5, r2, #16
 8001d84:	436f      	muls	r7, r5
 8001d86:	4343      	muls	r3, r0
 8001d88:	4345      	muls	r5, r0
 8001d8a:	4648      	mov	r0, r9
 8001d8c:	0c00      	lsrs	r0, r0, #16
 8001d8e:	4684      	mov	ip, r0
 8001d90:	19db      	adds	r3, r3, r7
 8001d92:	4463      	add	r3, ip
 8001d94:	429f      	cmp	r7, r3
 8001d96:	d903      	bls.n	8001da0 <__aeabi_ddiv+0x40c>
 8001d98:	2080      	movs	r0, #128	; 0x80
 8001d9a:	0240      	lsls	r0, r0, #9
 8001d9c:	4684      	mov	ip, r0
 8001d9e:	4465      	add	r5, ip
 8001da0:	4648      	mov	r0, r9
 8001da2:	0c1f      	lsrs	r7, r3, #16
 8001da4:	0400      	lsls	r0, r0, #16
 8001da6:	041b      	lsls	r3, r3, #16
 8001da8:	0c00      	lsrs	r0, r0, #16
 8001daa:	197d      	adds	r5, r7, r5
 8001dac:	1818      	adds	r0, r3, r0
 8001dae:	42a9      	cmp	r1, r5
 8001db0:	d200      	bcs.n	8001db4 <__aeabi_ddiv+0x420>
 8001db2:	e084      	b.n	8001ebe <__aeabi_ddiv+0x52a>
 8001db4:	d100      	bne.n	8001db8 <__aeabi_ddiv+0x424>
 8001db6:	e07f      	b.n	8001eb8 <__aeabi_ddiv+0x524>
 8001db8:	2301      	movs	r3, #1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	e657      	b.n	8001a6e <__aeabi_ddiv+0xda>
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	464a      	mov	r2, r9
 8001dc2:	031b      	lsls	r3, r3, #12
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	031b      	lsls	r3, r3, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	46aa      	mov	sl, r5
 8001dcc:	4a6f      	ldr	r2, [pc, #444]	; (8001f8c <__aeabi_ddiv+0x5f8>)
 8001dce:	e66f      	b.n	8001ab0 <__aeabi_ddiv+0x11c>
 8001dd0:	42ba      	cmp	r2, r7
 8001dd2:	d900      	bls.n	8001dd6 <__aeabi_ddiv+0x442>
 8001dd4:	e735      	b.n	8001c42 <__aeabi_ddiv+0x2ae>
 8001dd6:	464b      	mov	r3, r9
 8001dd8:	07dc      	lsls	r4, r3, #31
 8001dda:	0858      	lsrs	r0, r3, #1
 8001ddc:	087b      	lsrs	r3, r7, #1
 8001dde:	431c      	orrs	r4, r3
 8001de0:	07ff      	lsls	r7, r7, #31
 8001de2:	e734      	b.n	8001c4e <__aeabi_ddiv+0x2ba>
 8001de4:	2400      	movs	r4, #0
 8001de6:	42af      	cmp	r7, r5
 8001de8:	d289      	bcs.n	8001cfe <__aeabi_ddiv+0x36a>
 8001dea:	4447      	add	r7, r8
 8001dec:	4547      	cmp	r7, r8
 8001dee:	41a4      	sbcs	r4, r4
 8001df0:	465b      	mov	r3, fp
 8001df2:	4264      	negs	r4, r4
 8001df4:	19a4      	adds	r4, r4, r6
 8001df6:	1864      	adds	r4, r4, r1
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	42a6      	cmp	r6, r4
 8001dfc:	d21e      	bcs.n	8001e3c <__aeabi_ddiv+0x4a8>
 8001dfe:	42a0      	cmp	r0, r4
 8001e00:	d86d      	bhi.n	8001ede <__aeabi_ddiv+0x54a>
 8001e02:	d100      	bne.n	8001e06 <__aeabi_ddiv+0x472>
 8001e04:	e0b6      	b.n	8001f74 <__aeabi_ddiv+0x5e0>
 8001e06:	1a24      	subs	r4, r4, r0
 8001e08:	469b      	mov	fp, r3
 8001e0a:	e778      	b.n	8001cfe <__aeabi_ddiv+0x36a>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	465a      	mov	r2, fp
 8001e10:	3b28      	subs	r3, #40	; 0x28
 8001e12:	409a      	lsls	r2, r3
 8001e14:	2700      	movs	r7, #0
 8001e16:	4691      	mov	r9, r2
 8001e18:	e688      	b.n	8001b2c <__aeabi_ddiv+0x198>
 8001e1a:	4658      	mov	r0, fp
 8001e1c:	f001 f912 	bl	8003044 <__clzsi2>
 8001e20:	3020      	adds	r0, #32
 8001e22:	e672      	b.n	8001b0a <__aeabi_ddiv+0x176>
 8001e24:	0003      	movs	r3, r0
 8001e26:	4652      	mov	r2, sl
 8001e28:	3b28      	subs	r3, #40	; 0x28
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	4693      	mov	fp, r2
 8001e2e:	2200      	movs	r2, #0
 8001e30:	e6b4      	b.n	8001b9c <__aeabi_ddiv+0x208>
 8001e32:	4650      	mov	r0, sl
 8001e34:	f001 f906 	bl	8003044 <__clzsi2>
 8001e38:	3020      	adds	r0, #32
 8001e3a:	e69a      	b.n	8001b72 <__aeabi_ddiv+0x1de>
 8001e3c:	42a6      	cmp	r6, r4
 8001e3e:	d1e2      	bne.n	8001e06 <__aeabi_ddiv+0x472>
 8001e40:	45b8      	cmp	r8, r7
 8001e42:	d9dc      	bls.n	8001dfe <__aeabi_ddiv+0x46a>
 8001e44:	1a34      	subs	r4, r6, r0
 8001e46:	469b      	mov	fp, r3
 8001e48:	e759      	b.n	8001cfe <__aeabi_ddiv+0x36a>
 8001e4a:	2b1f      	cmp	r3, #31
 8001e4c:	dc65      	bgt.n	8001f1a <__aeabi_ddiv+0x586>
 8001e4e:	4c50      	ldr	r4, [pc, #320]	; (8001f90 <__aeabi_ddiv+0x5fc>)
 8001e50:	9900      	ldr	r1, [sp, #0]
 8001e52:	46a4      	mov	ip, r4
 8001e54:	465c      	mov	r4, fp
 8001e56:	4461      	add	r1, ip
 8001e58:	0008      	movs	r0, r1
 8001e5a:	408c      	lsls	r4, r1
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	4082      	lsls	r2, r0
 8001e60:	40d9      	lsrs	r1, r3
 8001e62:	1e50      	subs	r0, r2, #1
 8001e64:	4182      	sbcs	r2, r0
 8001e66:	430c      	orrs	r4, r1
 8001e68:	4314      	orrs	r4, r2
 8001e6a:	465a      	mov	r2, fp
 8001e6c:	40da      	lsrs	r2, r3
 8001e6e:	0013      	movs	r3, r2
 8001e70:	0762      	lsls	r2, r4, #29
 8001e72:	d009      	beq.n	8001e88 <__aeabi_ddiv+0x4f4>
 8001e74:	220f      	movs	r2, #15
 8001e76:	4022      	ands	r2, r4
 8001e78:	2a04      	cmp	r2, #4
 8001e7a:	d005      	beq.n	8001e88 <__aeabi_ddiv+0x4f4>
 8001e7c:	0022      	movs	r2, r4
 8001e7e:	1d14      	adds	r4, r2, #4
 8001e80:	4294      	cmp	r4, r2
 8001e82:	4189      	sbcs	r1, r1
 8001e84:	4249      	negs	r1, r1
 8001e86:	185b      	adds	r3, r3, r1
 8001e88:	021a      	lsls	r2, r3, #8
 8001e8a:	d562      	bpl.n	8001f52 <__aeabi_ddiv+0x5be>
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2700      	movs	r7, #0
 8001e92:	e60d      	b.n	8001ab0 <__aeabi_ddiv+0x11c>
 8001e94:	428a      	cmp	r2, r1
 8001e96:	d800      	bhi.n	8001e9a <__aeabi_ddiv+0x506>
 8001e98:	e70a      	b.n	8001cb0 <__aeabi_ddiv+0x31c>
 8001e9a:	1e83      	subs	r3, r0, #2
 8001e9c:	1989      	adds	r1, r1, r6
 8001e9e:	e707      	b.n	8001cb0 <__aeabi_ddiv+0x31c>
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_ddiv+0x516>
 8001ea8:	e5e6      	b.n	8001a78 <__aeabi_ddiv+0xe4>
 8001eaa:	1d17      	adds	r7, r2, #4
 8001eac:	4297      	cmp	r7, r2
 8001eae:	4192      	sbcs	r2, r2
 8001eb0:	4253      	negs	r3, r2
 8001eb2:	449b      	add	fp, r3
 8001eb4:	08fa      	lsrs	r2, r7, #3
 8001eb6:	e5e0      	b.n	8001a7a <__aeabi_ddiv+0xe6>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d100      	bne.n	8001ebe <__aeabi_ddiv+0x52a>
 8001ebc:	e5d7      	b.n	8001a6e <__aeabi_ddiv+0xda>
 8001ebe:	1871      	adds	r1, r6, r1
 8001ec0:	1e53      	subs	r3, r2, #1
 8001ec2:	42b1      	cmp	r1, r6
 8001ec4:	d327      	bcc.n	8001f16 <__aeabi_ddiv+0x582>
 8001ec6:	42a9      	cmp	r1, r5
 8001ec8:	d315      	bcc.n	8001ef6 <__aeabi_ddiv+0x562>
 8001eca:	d058      	beq.n	8001f7e <__aeabi_ddiv+0x5ea>
 8001ecc:	001a      	movs	r2, r3
 8001ece:	e773      	b.n	8001db8 <__aeabi_ddiv+0x424>
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	dc00      	bgt.n	8001ed6 <__aeabi_ddiv+0x542>
 8001ed4:	e604      	b.n	8001ae0 <__aeabi_ddiv+0x14c>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	2200      	movs	r2, #0
 8001eda:	449b      	add	fp, r3
 8001edc:	e5cd      	b.n	8001a7a <__aeabi_ddiv+0xe6>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	4447      	add	r7, r8
 8001ee2:	4547      	cmp	r7, r8
 8001ee4:	4189      	sbcs	r1, r1
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	469c      	mov	ip, r3
 8001eea:	4249      	negs	r1, r1
 8001eec:	1989      	adds	r1, r1, r6
 8001eee:	190c      	adds	r4, r1, r4
 8001ef0:	44e3      	add	fp, ip
 8001ef2:	1a24      	subs	r4, r4, r0
 8001ef4:	e703      	b.n	8001cfe <__aeabi_ddiv+0x36a>
 8001ef6:	4643      	mov	r3, r8
 8001ef8:	005f      	lsls	r7, r3, #1
 8001efa:	4547      	cmp	r7, r8
 8001efc:	419b      	sbcs	r3, r3
 8001efe:	46b8      	mov	r8, r7
 8001f00:	425b      	negs	r3, r3
 8001f02:	199e      	adds	r6, r3, r6
 8001f04:	3a02      	subs	r2, #2
 8001f06:	1989      	adds	r1, r1, r6
 8001f08:	42a9      	cmp	r1, r5
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_ddiv+0x57a>
 8001f0c:	e754      	b.n	8001db8 <__aeabi_ddiv+0x424>
 8001f0e:	4540      	cmp	r0, r8
 8001f10:	d000      	beq.n	8001f14 <__aeabi_ddiv+0x580>
 8001f12:	e751      	b.n	8001db8 <__aeabi_ddiv+0x424>
 8001f14:	e5ab      	b.n	8001a6e <__aeabi_ddiv+0xda>
 8001f16:	001a      	movs	r2, r3
 8001f18:	e7f6      	b.n	8001f08 <__aeabi_ddiv+0x574>
 8001f1a:	211f      	movs	r1, #31
 8001f1c:	465f      	mov	r7, fp
 8001f1e:	4249      	negs	r1, r1
 8001f20:	1b0c      	subs	r4, r1, r4
 8001f22:	40e7      	lsrs	r7, r4
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d007      	beq.n	8001f38 <__aeabi_ddiv+0x5a4>
 8001f28:	491a      	ldr	r1, [pc, #104]	; (8001f94 <__aeabi_ddiv+0x600>)
 8001f2a:	9b00      	ldr	r3, [sp, #0]
 8001f2c:	468c      	mov	ip, r1
 8001f2e:	4463      	add	r3, ip
 8001f30:	0018      	movs	r0, r3
 8001f32:	465b      	mov	r3, fp
 8001f34:	4083      	lsls	r3, r0
 8001f36:	431a      	orrs	r2, r3
 8001f38:	1e50      	subs	r0, r2, #1
 8001f3a:	4182      	sbcs	r2, r0
 8001f3c:	433a      	orrs	r2, r7
 8001f3e:	2707      	movs	r7, #7
 8001f40:	2300      	movs	r3, #0
 8001f42:	4017      	ands	r7, r2
 8001f44:	d009      	beq.n	8001f5a <__aeabi_ddiv+0x5c6>
 8001f46:	210f      	movs	r1, #15
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4011      	ands	r1, r2
 8001f4c:	0014      	movs	r4, r2
 8001f4e:	2904      	cmp	r1, #4
 8001f50:	d195      	bne.n	8001e7e <__aeabi_ddiv+0x4ea>
 8001f52:	0022      	movs	r2, r4
 8001f54:	075f      	lsls	r7, r3, #29
 8001f56:	025b      	lsls	r3, r3, #9
 8001f58:	0b1b      	lsrs	r3, r3, #12
 8001f5a:	08d2      	lsrs	r2, r2, #3
 8001f5c:	4317      	orrs	r7, r2
 8001f5e:	2200      	movs	r2, #0
 8001f60:	e5a6      	b.n	8001ab0 <__aeabi_ddiv+0x11c>
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	4659      	mov	r1, fp
 8001f66:	031b      	lsls	r3, r3, #12
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	031b      	lsls	r3, r3, #12
 8001f6c:	0017      	movs	r7, r2
 8001f6e:	0b1b      	lsrs	r3, r3, #12
 8001f70:	4a06      	ldr	r2, [pc, #24]	; (8001f8c <__aeabi_ddiv+0x5f8>)
 8001f72:	e59d      	b.n	8001ab0 <__aeabi_ddiv+0x11c>
 8001f74:	42bd      	cmp	r5, r7
 8001f76:	d8b2      	bhi.n	8001ede <__aeabi_ddiv+0x54a>
 8001f78:	469b      	mov	fp, r3
 8001f7a:	2400      	movs	r4, #0
 8001f7c:	e6bf      	b.n	8001cfe <__aeabi_ddiv+0x36a>
 8001f7e:	4580      	cmp	r8, r0
 8001f80:	d3b9      	bcc.n	8001ef6 <__aeabi_ddiv+0x562>
 8001f82:	001a      	movs	r2, r3
 8001f84:	e7c3      	b.n	8001f0e <__aeabi_ddiv+0x57a>
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	000003ff 	.word	0x000003ff
 8001f8c:	000007ff 	.word	0x000007ff
 8001f90:	0000041e 	.word	0x0000041e
 8001f94:	0000043e 	.word	0x0000043e

08001f98 <__eqdf2>:
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	464f      	mov	r7, r9
 8001f9c:	4646      	mov	r6, r8
 8001f9e:	46d6      	mov	lr, sl
 8001fa0:	4684      	mov	ip, r0
 8001fa2:	b5c0      	push	{r6, r7, lr}
 8001fa4:	4680      	mov	r8, r0
 8001fa6:	4e19      	ldr	r6, [pc, #100]	; (800200c <__eqdf2+0x74>)
 8001fa8:	0318      	lsls	r0, r3, #12
 8001faa:	030f      	lsls	r7, r1, #12
 8001fac:	004d      	lsls	r5, r1, #1
 8001fae:	0b00      	lsrs	r0, r0, #12
 8001fb0:	005c      	lsls	r4, r3, #1
 8001fb2:	4682      	mov	sl, r0
 8001fb4:	0b3f      	lsrs	r7, r7, #12
 8001fb6:	0d6d      	lsrs	r5, r5, #21
 8001fb8:	0fc9      	lsrs	r1, r1, #31
 8001fba:	4691      	mov	r9, r2
 8001fbc:	0d64      	lsrs	r4, r4, #21
 8001fbe:	0fdb      	lsrs	r3, r3, #31
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	42b5      	cmp	r5, r6
 8001fc4:	d00a      	beq.n	8001fdc <__eqdf2+0x44>
 8001fc6:	42b4      	cmp	r4, r6
 8001fc8:	d003      	beq.n	8001fd2 <__eqdf2+0x3a>
 8001fca:	42a5      	cmp	r5, r4
 8001fcc:	d101      	bne.n	8001fd2 <__eqdf2+0x3a>
 8001fce:	4557      	cmp	r7, sl
 8001fd0:	d00c      	beq.n	8001fec <__eqdf2+0x54>
 8001fd2:	bc1c      	pop	{r2, r3, r4}
 8001fd4:	4690      	mov	r8, r2
 8001fd6:	4699      	mov	r9, r3
 8001fd8:	46a2      	mov	sl, r4
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fdc:	4666      	mov	r6, ip
 8001fde:	433e      	orrs	r6, r7
 8001fe0:	d1f7      	bne.n	8001fd2 <__eqdf2+0x3a>
 8001fe2:	42ac      	cmp	r4, r5
 8001fe4:	d1f5      	bne.n	8001fd2 <__eqdf2+0x3a>
 8001fe6:	4654      	mov	r4, sl
 8001fe8:	4314      	orrs	r4, r2
 8001fea:	d1f2      	bne.n	8001fd2 <__eqdf2+0x3a>
 8001fec:	2001      	movs	r0, #1
 8001fee:	45c8      	cmp	r8, r9
 8001ff0:	d1ef      	bne.n	8001fd2 <__eqdf2+0x3a>
 8001ff2:	4299      	cmp	r1, r3
 8001ff4:	d007      	beq.n	8002006 <__eqdf2+0x6e>
 8001ff6:	2d00      	cmp	r5, #0
 8001ff8:	d1eb      	bne.n	8001fd2 <__eqdf2+0x3a>
 8001ffa:	4663      	mov	r3, ip
 8001ffc:	431f      	orrs	r7, r3
 8001ffe:	0038      	movs	r0, r7
 8002000:	1e47      	subs	r7, r0, #1
 8002002:	41b8      	sbcs	r0, r7
 8002004:	e7e5      	b.n	8001fd2 <__eqdf2+0x3a>
 8002006:	2000      	movs	r0, #0
 8002008:	e7e3      	b.n	8001fd2 <__eqdf2+0x3a>
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	000007ff 	.word	0x000007ff

08002010 <__gedf2>:
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002012:	464f      	mov	r7, r9
 8002014:	4646      	mov	r6, r8
 8002016:	46d6      	mov	lr, sl
 8002018:	004d      	lsls	r5, r1, #1
 800201a:	b5c0      	push	{r6, r7, lr}
 800201c:	030e      	lsls	r6, r1, #12
 800201e:	0fc9      	lsrs	r1, r1, #31
 8002020:	468a      	mov	sl, r1
 8002022:	492c      	ldr	r1, [pc, #176]	; (80020d4 <__gedf2+0xc4>)
 8002024:	031f      	lsls	r7, r3, #12
 8002026:	005c      	lsls	r4, r3, #1
 8002028:	4680      	mov	r8, r0
 800202a:	0b36      	lsrs	r6, r6, #12
 800202c:	0d6d      	lsrs	r5, r5, #21
 800202e:	4691      	mov	r9, r2
 8002030:	0b3f      	lsrs	r7, r7, #12
 8002032:	0d64      	lsrs	r4, r4, #21
 8002034:	0fdb      	lsrs	r3, r3, #31
 8002036:	428d      	cmp	r5, r1
 8002038:	d01e      	beq.n	8002078 <__gedf2+0x68>
 800203a:	428c      	cmp	r4, r1
 800203c:	d016      	beq.n	800206c <__gedf2+0x5c>
 800203e:	2d00      	cmp	r5, #0
 8002040:	d11e      	bne.n	8002080 <__gedf2+0x70>
 8002042:	4330      	orrs	r0, r6
 8002044:	4684      	mov	ip, r0
 8002046:	2c00      	cmp	r4, #0
 8002048:	d101      	bne.n	800204e <__gedf2+0x3e>
 800204a:	433a      	orrs	r2, r7
 800204c:	d023      	beq.n	8002096 <__gedf2+0x86>
 800204e:	4662      	mov	r2, ip
 8002050:	2a00      	cmp	r2, #0
 8002052:	d01a      	beq.n	800208a <__gedf2+0x7a>
 8002054:	459a      	cmp	sl, r3
 8002056:	d029      	beq.n	80020ac <__gedf2+0x9c>
 8002058:	4651      	mov	r1, sl
 800205a:	2002      	movs	r0, #2
 800205c:	3901      	subs	r1, #1
 800205e:	4008      	ands	r0, r1
 8002060:	3801      	subs	r0, #1
 8002062:	bc1c      	pop	{r2, r3, r4}
 8002064:	4690      	mov	r8, r2
 8002066:	4699      	mov	r9, r3
 8002068:	46a2      	mov	sl, r4
 800206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800206c:	0039      	movs	r1, r7
 800206e:	4311      	orrs	r1, r2
 8002070:	d0e5      	beq.n	800203e <__gedf2+0x2e>
 8002072:	2002      	movs	r0, #2
 8002074:	4240      	negs	r0, r0
 8002076:	e7f4      	b.n	8002062 <__gedf2+0x52>
 8002078:	4330      	orrs	r0, r6
 800207a:	d1fa      	bne.n	8002072 <__gedf2+0x62>
 800207c:	42ac      	cmp	r4, r5
 800207e:	d00f      	beq.n	80020a0 <__gedf2+0x90>
 8002080:	2c00      	cmp	r4, #0
 8002082:	d10f      	bne.n	80020a4 <__gedf2+0x94>
 8002084:	433a      	orrs	r2, r7
 8002086:	d0e7      	beq.n	8002058 <__gedf2+0x48>
 8002088:	e00c      	b.n	80020a4 <__gedf2+0x94>
 800208a:	2201      	movs	r2, #1
 800208c:	3b01      	subs	r3, #1
 800208e:	4393      	bics	r3, r2
 8002090:	0018      	movs	r0, r3
 8002092:	3001      	adds	r0, #1
 8002094:	e7e5      	b.n	8002062 <__gedf2+0x52>
 8002096:	4663      	mov	r3, ip
 8002098:	2000      	movs	r0, #0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0e1      	beq.n	8002062 <__gedf2+0x52>
 800209e:	e7db      	b.n	8002058 <__gedf2+0x48>
 80020a0:	433a      	orrs	r2, r7
 80020a2:	d1e6      	bne.n	8002072 <__gedf2+0x62>
 80020a4:	459a      	cmp	sl, r3
 80020a6:	d1d7      	bne.n	8002058 <__gedf2+0x48>
 80020a8:	42a5      	cmp	r5, r4
 80020aa:	dcd5      	bgt.n	8002058 <__gedf2+0x48>
 80020ac:	42a5      	cmp	r5, r4
 80020ae:	db05      	blt.n	80020bc <__gedf2+0xac>
 80020b0:	42be      	cmp	r6, r7
 80020b2:	d8d1      	bhi.n	8002058 <__gedf2+0x48>
 80020b4:	d008      	beq.n	80020c8 <__gedf2+0xb8>
 80020b6:	2000      	movs	r0, #0
 80020b8:	42be      	cmp	r6, r7
 80020ba:	d2d2      	bcs.n	8002062 <__gedf2+0x52>
 80020bc:	4650      	mov	r0, sl
 80020be:	2301      	movs	r3, #1
 80020c0:	3801      	subs	r0, #1
 80020c2:	4398      	bics	r0, r3
 80020c4:	3001      	adds	r0, #1
 80020c6:	e7cc      	b.n	8002062 <__gedf2+0x52>
 80020c8:	45c8      	cmp	r8, r9
 80020ca:	d8c5      	bhi.n	8002058 <__gedf2+0x48>
 80020cc:	2000      	movs	r0, #0
 80020ce:	45c8      	cmp	r8, r9
 80020d0:	d3f4      	bcc.n	80020bc <__gedf2+0xac>
 80020d2:	e7c6      	b.n	8002062 <__gedf2+0x52>
 80020d4:	000007ff 	.word	0x000007ff

080020d8 <__ledf2>:
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	464f      	mov	r7, r9
 80020dc:	4646      	mov	r6, r8
 80020de:	46d6      	mov	lr, sl
 80020e0:	004d      	lsls	r5, r1, #1
 80020e2:	b5c0      	push	{r6, r7, lr}
 80020e4:	030e      	lsls	r6, r1, #12
 80020e6:	0fc9      	lsrs	r1, r1, #31
 80020e8:	468a      	mov	sl, r1
 80020ea:	492e      	ldr	r1, [pc, #184]	; (80021a4 <__ledf2+0xcc>)
 80020ec:	031f      	lsls	r7, r3, #12
 80020ee:	005c      	lsls	r4, r3, #1
 80020f0:	4680      	mov	r8, r0
 80020f2:	0b36      	lsrs	r6, r6, #12
 80020f4:	0d6d      	lsrs	r5, r5, #21
 80020f6:	4691      	mov	r9, r2
 80020f8:	0b3f      	lsrs	r7, r7, #12
 80020fa:	0d64      	lsrs	r4, r4, #21
 80020fc:	0fdb      	lsrs	r3, r3, #31
 80020fe:	428d      	cmp	r5, r1
 8002100:	d018      	beq.n	8002134 <__ledf2+0x5c>
 8002102:	428c      	cmp	r4, r1
 8002104:	d011      	beq.n	800212a <__ledf2+0x52>
 8002106:	2d00      	cmp	r5, #0
 8002108:	d118      	bne.n	800213c <__ledf2+0x64>
 800210a:	4330      	orrs	r0, r6
 800210c:	4684      	mov	ip, r0
 800210e:	2c00      	cmp	r4, #0
 8002110:	d11e      	bne.n	8002150 <__ledf2+0x78>
 8002112:	433a      	orrs	r2, r7
 8002114:	d11c      	bne.n	8002150 <__ledf2+0x78>
 8002116:	4663      	mov	r3, ip
 8002118:	2000      	movs	r0, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d030      	beq.n	8002180 <__ledf2+0xa8>
 800211e:	4651      	mov	r1, sl
 8002120:	2002      	movs	r0, #2
 8002122:	3901      	subs	r1, #1
 8002124:	4008      	ands	r0, r1
 8002126:	3801      	subs	r0, #1
 8002128:	e02a      	b.n	8002180 <__ledf2+0xa8>
 800212a:	0039      	movs	r1, r7
 800212c:	4311      	orrs	r1, r2
 800212e:	d0ea      	beq.n	8002106 <__ledf2+0x2e>
 8002130:	2002      	movs	r0, #2
 8002132:	e025      	b.n	8002180 <__ledf2+0xa8>
 8002134:	4330      	orrs	r0, r6
 8002136:	d1fb      	bne.n	8002130 <__ledf2+0x58>
 8002138:	42ac      	cmp	r4, r5
 800213a:	d026      	beq.n	800218a <__ledf2+0xb2>
 800213c:	2c00      	cmp	r4, #0
 800213e:	d126      	bne.n	800218e <__ledf2+0xb6>
 8002140:	433a      	orrs	r2, r7
 8002142:	d124      	bne.n	800218e <__ledf2+0xb6>
 8002144:	4651      	mov	r1, sl
 8002146:	2002      	movs	r0, #2
 8002148:	3901      	subs	r1, #1
 800214a:	4008      	ands	r0, r1
 800214c:	3801      	subs	r0, #1
 800214e:	e017      	b.n	8002180 <__ledf2+0xa8>
 8002150:	4662      	mov	r2, ip
 8002152:	2a00      	cmp	r2, #0
 8002154:	d00f      	beq.n	8002176 <__ledf2+0x9e>
 8002156:	459a      	cmp	sl, r3
 8002158:	d1e1      	bne.n	800211e <__ledf2+0x46>
 800215a:	42a5      	cmp	r5, r4
 800215c:	db05      	blt.n	800216a <__ledf2+0x92>
 800215e:	42be      	cmp	r6, r7
 8002160:	d8dd      	bhi.n	800211e <__ledf2+0x46>
 8002162:	d019      	beq.n	8002198 <__ledf2+0xc0>
 8002164:	2000      	movs	r0, #0
 8002166:	42be      	cmp	r6, r7
 8002168:	d20a      	bcs.n	8002180 <__ledf2+0xa8>
 800216a:	4650      	mov	r0, sl
 800216c:	2301      	movs	r3, #1
 800216e:	3801      	subs	r0, #1
 8002170:	4398      	bics	r0, r3
 8002172:	3001      	adds	r0, #1
 8002174:	e004      	b.n	8002180 <__ledf2+0xa8>
 8002176:	2201      	movs	r2, #1
 8002178:	3b01      	subs	r3, #1
 800217a:	4393      	bics	r3, r2
 800217c:	0018      	movs	r0, r3
 800217e:	3001      	adds	r0, #1
 8002180:	bc1c      	pop	{r2, r3, r4}
 8002182:	4690      	mov	r8, r2
 8002184:	4699      	mov	r9, r3
 8002186:	46a2      	mov	sl, r4
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218a:	433a      	orrs	r2, r7
 800218c:	d1d0      	bne.n	8002130 <__ledf2+0x58>
 800218e:	459a      	cmp	sl, r3
 8002190:	d1c5      	bne.n	800211e <__ledf2+0x46>
 8002192:	42a5      	cmp	r5, r4
 8002194:	dcc3      	bgt.n	800211e <__ledf2+0x46>
 8002196:	e7e0      	b.n	800215a <__ledf2+0x82>
 8002198:	45c8      	cmp	r8, r9
 800219a:	d8c0      	bhi.n	800211e <__ledf2+0x46>
 800219c:	2000      	movs	r0, #0
 800219e:	45c8      	cmp	r8, r9
 80021a0:	d3e3      	bcc.n	800216a <__ledf2+0x92>
 80021a2:	e7ed      	b.n	8002180 <__ledf2+0xa8>
 80021a4:	000007ff 	.word	0x000007ff

080021a8 <__aeabi_dmul>:
 80021a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021aa:	4657      	mov	r7, sl
 80021ac:	46de      	mov	lr, fp
 80021ae:	464e      	mov	r6, r9
 80021b0:	4645      	mov	r5, r8
 80021b2:	b5e0      	push	{r5, r6, r7, lr}
 80021b4:	4683      	mov	fp, r0
 80021b6:	0006      	movs	r6, r0
 80021b8:	030f      	lsls	r7, r1, #12
 80021ba:	0048      	lsls	r0, r1, #1
 80021bc:	b087      	sub	sp, #28
 80021be:	4692      	mov	sl, r2
 80021c0:	001d      	movs	r5, r3
 80021c2:	0b3f      	lsrs	r7, r7, #12
 80021c4:	0d40      	lsrs	r0, r0, #21
 80021c6:	0fcc      	lsrs	r4, r1, #31
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dmul+0x26>
 80021cc:	e06f      	b.n	80022ae <__aeabi_dmul+0x106>
 80021ce:	4bde      	ldr	r3, [pc, #888]	; (8002548 <__aeabi_dmul+0x3a0>)
 80021d0:	4298      	cmp	r0, r3
 80021d2:	d038      	beq.n	8002246 <__aeabi_dmul+0x9e>
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	00ff      	lsls	r7, r7, #3
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	431f      	orrs	r7, r3
 80021dc:	0f73      	lsrs	r3, r6, #29
 80021de:	433b      	orrs	r3, r7
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	4bda      	ldr	r3, [pc, #872]	; (800254c <__aeabi_dmul+0x3a4>)
 80021e4:	2700      	movs	r7, #0
 80021e6:	4699      	mov	r9, r3
 80021e8:	2300      	movs	r3, #0
 80021ea:	469b      	mov	fp, r3
 80021ec:	00f6      	lsls	r6, r6, #3
 80021ee:	4481      	add	r9, r0
 80021f0:	032b      	lsls	r3, r5, #12
 80021f2:	0069      	lsls	r1, r5, #1
 80021f4:	0b1b      	lsrs	r3, r3, #12
 80021f6:	4652      	mov	r2, sl
 80021f8:	4698      	mov	r8, r3
 80021fa:	0d49      	lsrs	r1, r1, #21
 80021fc:	0fed      	lsrs	r5, r5, #31
 80021fe:	2900      	cmp	r1, #0
 8002200:	d100      	bne.n	8002204 <__aeabi_dmul+0x5c>
 8002202:	e085      	b.n	8002310 <__aeabi_dmul+0x168>
 8002204:	4bd0      	ldr	r3, [pc, #832]	; (8002548 <__aeabi_dmul+0x3a0>)
 8002206:	4299      	cmp	r1, r3
 8002208:	d100      	bne.n	800220c <__aeabi_dmul+0x64>
 800220a:	e073      	b.n	80022f4 <__aeabi_dmul+0x14c>
 800220c:	4643      	mov	r3, r8
 800220e:	00da      	lsls	r2, r3, #3
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	4313      	orrs	r3, r2
 8002216:	4652      	mov	r2, sl
 8002218:	48cc      	ldr	r0, [pc, #816]	; (800254c <__aeabi_dmul+0x3a4>)
 800221a:	0f52      	lsrs	r2, r2, #29
 800221c:	4684      	mov	ip, r0
 800221e:	4313      	orrs	r3, r2
 8002220:	4652      	mov	r2, sl
 8002222:	2000      	movs	r0, #0
 8002224:	4461      	add	r1, ip
 8002226:	00d2      	lsls	r2, r2, #3
 8002228:	4489      	add	r9, r1
 800222a:	0021      	movs	r1, r4
 800222c:	4069      	eors	r1, r5
 800222e:	9100      	str	r1, [sp, #0]
 8002230:	468c      	mov	ip, r1
 8002232:	2101      	movs	r1, #1
 8002234:	4449      	add	r1, r9
 8002236:	468a      	mov	sl, r1
 8002238:	2f0f      	cmp	r7, #15
 800223a:	d900      	bls.n	800223e <__aeabi_dmul+0x96>
 800223c:	e090      	b.n	8002360 <__aeabi_dmul+0x1b8>
 800223e:	49c4      	ldr	r1, [pc, #784]	; (8002550 <__aeabi_dmul+0x3a8>)
 8002240:	00bf      	lsls	r7, r7, #2
 8002242:	59cf      	ldr	r7, [r1, r7]
 8002244:	46bf      	mov	pc, r7
 8002246:	465b      	mov	r3, fp
 8002248:	433b      	orrs	r3, r7
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	d000      	beq.n	8002250 <__aeabi_dmul+0xa8>
 800224e:	e16a      	b.n	8002526 <__aeabi_dmul+0x37e>
 8002250:	2302      	movs	r3, #2
 8002252:	2708      	movs	r7, #8
 8002254:	2600      	movs	r6, #0
 8002256:	4681      	mov	r9, r0
 8002258:	469b      	mov	fp, r3
 800225a:	e7c9      	b.n	80021f0 <__aeabi_dmul+0x48>
 800225c:	0032      	movs	r2, r6
 800225e:	4658      	mov	r0, fp
 8002260:	9b01      	ldr	r3, [sp, #4]
 8002262:	4661      	mov	r1, ip
 8002264:	9100      	str	r1, [sp, #0]
 8002266:	2802      	cmp	r0, #2
 8002268:	d100      	bne.n	800226c <__aeabi_dmul+0xc4>
 800226a:	e075      	b.n	8002358 <__aeabi_dmul+0x1b0>
 800226c:	2803      	cmp	r0, #3
 800226e:	d100      	bne.n	8002272 <__aeabi_dmul+0xca>
 8002270:	e1fe      	b.n	8002670 <__aeabi_dmul+0x4c8>
 8002272:	2801      	cmp	r0, #1
 8002274:	d000      	beq.n	8002278 <__aeabi_dmul+0xd0>
 8002276:	e12c      	b.n	80024d2 <__aeabi_dmul+0x32a>
 8002278:	2300      	movs	r3, #0
 800227a:	2700      	movs	r7, #0
 800227c:	2600      	movs	r6, #0
 800227e:	2500      	movs	r5, #0
 8002280:	033f      	lsls	r7, r7, #12
 8002282:	0d2a      	lsrs	r2, r5, #20
 8002284:	0b3f      	lsrs	r7, r7, #12
 8002286:	48b3      	ldr	r0, [pc, #716]	; (8002554 <__aeabi_dmul+0x3ac>)
 8002288:	0512      	lsls	r2, r2, #20
 800228a:	433a      	orrs	r2, r7
 800228c:	4002      	ands	r2, r0
 800228e:	051b      	lsls	r3, r3, #20
 8002290:	4313      	orrs	r3, r2
 8002292:	9a00      	ldr	r2, [sp, #0]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	07d1      	lsls	r1, r2, #31
 8002298:	085b      	lsrs	r3, r3, #1
 800229a:	430b      	orrs	r3, r1
 800229c:	0030      	movs	r0, r6
 800229e:	0019      	movs	r1, r3
 80022a0:	b007      	add	sp, #28
 80022a2:	bc3c      	pop	{r2, r3, r4, r5}
 80022a4:	4690      	mov	r8, r2
 80022a6:	4699      	mov	r9, r3
 80022a8:	46a2      	mov	sl, r4
 80022aa:	46ab      	mov	fp, r5
 80022ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ae:	465b      	mov	r3, fp
 80022b0:	433b      	orrs	r3, r7
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dmul+0x110>
 80022b6:	e12f      	b.n	8002518 <__aeabi_dmul+0x370>
 80022b8:	2f00      	cmp	r7, #0
 80022ba:	d100      	bne.n	80022be <__aeabi_dmul+0x116>
 80022bc:	e1a5      	b.n	800260a <__aeabi_dmul+0x462>
 80022be:	0038      	movs	r0, r7
 80022c0:	f000 fec0 	bl	8003044 <__clzsi2>
 80022c4:	0003      	movs	r3, r0
 80022c6:	3b0b      	subs	r3, #11
 80022c8:	2b1c      	cmp	r3, #28
 80022ca:	dd00      	ble.n	80022ce <__aeabi_dmul+0x126>
 80022cc:	e196      	b.n	80025fc <__aeabi_dmul+0x454>
 80022ce:	221d      	movs	r2, #29
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	465a      	mov	r2, fp
 80022d4:	0001      	movs	r1, r0
 80022d6:	40da      	lsrs	r2, r3
 80022d8:	465e      	mov	r6, fp
 80022da:	3908      	subs	r1, #8
 80022dc:	408f      	lsls	r7, r1
 80022de:	0013      	movs	r3, r2
 80022e0:	408e      	lsls	r6, r1
 80022e2:	433b      	orrs	r3, r7
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	4b9c      	ldr	r3, [pc, #624]	; (8002558 <__aeabi_dmul+0x3b0>)
 80022e8:	2700      	movs	r7, #0
 80022ea:	1a1b      	subs	r3, r3, r0
 80022ec:	4699      	mov	r9, r3
 80022ee:	2300      	movs	r3, #0
 80022f0:	469b      	mov	fp, r3
 80022f2:	e77d      	b.n	80021f0 <__aeabi_dmul+0x48>
 80022f4:	4641      	mov	r1, r8
 80022f6:	4653      	mov	r3, sl
 80022f8:	430b      	orrs	r3, r1
 80022fa:	4993      	ldr	r1, [pc, #588]	; (8002548 <__aeabi_dmul+0x3a0>)
 80022fc:	468c      	mov	ip, r1
 80022fe:	44e1      	add	r9, ip
 8002300:	2b00      	cmp	r3, #0
 8002302:	d000      	beq.n	8002306 <__aeabi_dmul+0x15e>
 8002304:	e11a      	b.n	800253c <__aeabi_dmul+0x394>
 8002306:	2202      	movs	r2, #2
 8002308:	2002      	movs	r0, #2
 800230a:	4317      	orrs	r7, r2
 800230c:	2200      	movs	r2, #0
 800230e:	e78c      	b.n	800222a <__aeabi_dmul+0x82>
 8002310:	4313      	orrs	r3, r2
 8002312:	d100      	bne.n	8002316 <__aeabi_dmul+0x16e>
 8002314:	e10d      	b.n	8002532 <__aeabi_dmul+0x38a>
 8002316:	4643      	mov	r3, r8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d100      	bne.n	800231e <__aeabi_dmul+0x176>
 800231c:	e181      	b.n	8002622 <__aeabi_dmul+0x47a>
 800231e:	4640      	mov	r0, r8
 8002320:	f000 fe90 	bl	8003044 <__clzsi2>
 8002324:	0002      	movs	r2, r0
 8002326:	3a0b      	subs	r2, #11
 8002328:	2a1c      	cmp	r2, #28
 800232a:	dd00      	ble.n	800232e <__aeabi_dmul+0x186>
 800232c:	e172      	b.n	8002614 <__aeabi_dmul+0x46c>
 800232e:	0001      	movs	r1, r0
 8002330:	4643      	mov	r3, r8
 8002332:	3908      	subs	r1, #8
 8002334:	408b      	lsls	r3, r1
 8002336:	4698      	mov	r8, r3
 8002338:	231d      	movs	r3, #29
 800233a:	1a9a      	subs	r2, r3, r2
 800233c:	4653      	mov	r3, sl
 800233e:	40d3      	lsrs	r3, r2
 8002340:	001a      	movs	r2, r3
 8002342:	4643      	mov	r3, r8
 8002344:	4313      	orrs	r3, r2
 8002346:	4652      	mov	r2, sl
 8002348:	408a      	lsls	r2, r1
 800234a:	4649      	mov	r1, r9
 800234c:	1a08      	subs	r0, r1, r0
 800234e:	4982      	ldr	r1, [pc, #520]	; (8002558 <__aeabi_dmul+0x3b0>)
 8002350:	4689      	mov	r9, r1
 8002352:	4481      	add	r9, r0
 8002354:	2000      	movs	r0, #0
 8002356:	e768      	b.n	800222a <__aeabi_dmul+0x82>
 8002358:	4b7b      	ldr	r3, [pc, #492]	; (8002548 <__aeabi_dmul+0x3a0>)
 800235a:	2700      	movs	r7, #0
 800235c:	2600      	movs	r6, #0
 800235e:	e78e      	b.n	800227e <__aeabi_dmul+0xd6>
 8002360:	0c14      	lsrs	r4, r2, #16
 8002362:	0412      	lsls	r2, r2, #16
 8002364:	0c12      	lsrs	r2, r2, #16
 8002366:	0011      	movs	r1, r2
 8002368:	0c37      	lsrs	r7, r6, #16
 800236a:	0436      	lsls	r6, r6, #16
 800236c:	0c35      	lsrs	r5, r6, #16
 800236e:	4379      	muls	r1, r7
 8002370:	0028      	movs	r0, r5
 8002372:	468c      	mov	ip, r1
 8002374:	002e      	movs	r6, r5
 8002376:	4360      	muls	r0, r4
 8002378:	4460      	add	r0, ip
 800237a:	4683      	mov	fp, r0
 800237c:	4356      	muls	r6, r2
 800237e:	0021      	movs	r1, r4
 8002380:	0c30      	lsrs	r0, r6, #16
 8002382:	4680      	mov	r8, r0
 8002384:	4658      	mov	r0, fp
 8002386:	4379      	muls	r1, r7
 8002388:	4440      	add	r0, r8
 800238a:	9102      	str	r1, [sp, #8]
 800238c:	4584      	cmp	ip, r0
 800238e:	d906      	bls.n	800239e <__aeabi_dmul+0x1f6>
 8002390:	4688      	mov	r8, r1
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	0249      	lsls	r1, r1, #9
 8002396:	468c      	mov	ip, r1
 8002398:	44e0      	add	r8, ip
 800239a:	4641      	mov	r1, r8
 800239c:	9102      	str	r1, [sp, #8]
 800239e:	0436      	lsls	r6, r6, #16
 80023a0:	0c01      	lsrs	r1, r0, #16
 80023a2:	0c36      	lsrs	r6, r6, #16
 80023a4:	0400      	lsls	r0, r0, #16
 80023a6:	468b      	mov	fp, r1
 80023a8:	1981      	adds	r1, r0, r6
 80023aa:	0c1e      	lsrs	r6, r3, #16
 80023ac:	041b      	lsls	r3, r3, #16
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	9103      	str	r1, [sp, #12]
 80023b2:	0019      	movs	r1, r3
 80023b4:	4379      	muls	r1, r7
 80023b6:	468c      	mov	ip, r1
 80023b8:	0028      	movs	r0, r5
 80023ba:	4375      	muls	r5, r6
 80023bc:	4465      	add	r5, ip
 80023be:	46a8      	mov	r8, r5
 80023c0:	4358      	muls	r0, r3
 80023c2:	0c05      	lsrs	r5, r0, #16
 80023c4:	4445      	add	r5, r8
 80023c6:	4377      	muls	r7, r6
 80023c8:	42a9      	cmp	r1, r5
 80023ca:	d903      	bls.n	80023d4 <__aeabi_dmul+0x22c>
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4467      	add	r7, ip
 80023d4:	0c29      	lsrs	r1, r5, #16
 80023d6:	468c      	mov	ip, r1
 80023d8:	0039      	movs	r1, r7
 80023da:	0400      	lsls	r0, r0, #16
 80023dc:	0c00      	lsrs	r0, r0, #16
 80023de:	042d      	lsls	r5, r5, #16
 80023e0:	182d      	adds	r5, r5, r0
 80023e2:	4461      	add	r1, ip
 80023e4:	44ab      	add	fp, r5
 80023e6:	9105      	str	r1, [sp, #20]
 80023e8:	4659      	mov	r1, fp
 80023ea:	9104      	str	r1, [sp, #16]
 80023ec:	9901      	ldr	r1, [sp, #4]
 80023ee:	040f      	lsls	r7, r1, #16
 80023f0:	0c3f      	lsrs	r7, r7, #16
 80023f2:	0c08      	lsrs	r0, r1, #16
 80023f4:	0039      	movs	r1, r7
 80023f6:	4351      	muls	r1, r2
 80023f8:	4342      	muls	r2, r0
 80023fa:	4690      	mov	r8, r2
 80023fc:	0002      	movs	r2, r0
 80023fe:	468c      	mov	ip, r1
 8002400:	0c09      	lsrs	r1, r1, #16
 8002402:	468b      	mov	fp, r1
 8002404:	4362      	muls	r2, r4
 8002406:	437c      	muls	r4, r7
 8002408:	4444      	add	r4, r8
 800240a:	445c      	add	r4, fp
 800240c:	45a0      	cmp	r8, r4
 800240e:	d903      	bls.n	8002418 <__aeabi_dmul+0x270>
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0249      	lsls	r1, r1, #9
 8002414:	4688      	mov	r8, r1
 8002416:	4442      	add	r2, r8
 8002418:	0c21      	lsrs	r1, r4, #16
 800241a:	4688      	mov	r8, r1
 800241c:	4661      	mov	r1, ip
 800241e:	0409      	lsls	r1, r1, #16
 8002420:	0c09      	lsrs	r1, r1, #16
 8002422:	468c      	mov	ip, r1
 8002424:	0039      	movs	r1, r7
 8002426:	4359      	muls	r1, r3
 8002428:	4343      	muls	r3, r0
 800242a:	4370      	muls	r0, r6
 800242c:	437e      	muls	r6, r7
 800242e:	0c0f      	lsrs	r7, r1, #16
 8002430:	18f6      	adds	r6, r6, r3
 8002432:	0424      	lsls	r4, r4, #16
 8002434:	19be      	adds	r6, r7, r6
 8002436:	4464      	add	r4, ip
 8002438:	4442      	add	r2, r8
 800243a:	468c      	mov	ip, r1
 800243c:	42b3      	cmp	r3, r6
 800243e:	d903      	bls.n	8002448 <__aeabi_dmul+0x2a0>
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	025b      	lsls	r3, r3, #9
 8002444:	4698      	mov	r8, r3
 8002446:	4440      	add	r0, r8
 8002448:	9b02      	ldr	r3, [sp, #8]
 800244a:	4661      	mov	r1, ip
 800244c:	4698      	mov	r8, r3
 800244e:	9b04      	ldr	r3, [sp, #16]
 8002450:	0437      	lsls	r7, r6, #16
 8002452:	4443      	add	r3, r8
 8002454:	469b      	mov	fp, r3
 8002456:	45ab      	cmp	fp, r5
 8002458:	41ad      	sbcs	r5, r5
 800245a:	426b      	negs	r3, r5
 800245c:	040d      	lsls	r5, r1, #16
 800245e:	9905      	ldr	r1, [sp, #20]
 8002460:	0c2d      	lsrs	r5, r5, #16
 8002462:	468c      	mov	ip, r1
 8002464:	197f      	adds	r7, r7, r5
 8002466:	4467      	add	r7, ip
 8002468:	18fd      	adds	r5, r7, r3
 800246a:	46a8      	mov	r8, r5
 800246c:	465d      	mov	r5, fp
 800246e:	192d      	adds	r5, r5, r4
 8002470:	42a5      	cmp	r5, r4
 8002472:	41a4      	sbcs	r4, r4
 8002474:	4693      	mov	fp, r2
 8002476:	4264      	negs	r4, r4
 8002478:	46a4      	mov	ip, r4
 800247a:	44c3      	add	fp, r8
 800247c:	44dc      	add	ip, fp
 800247e:	428f      	cmp	r7, r1
 8002480:	41bf      	sbcs	r7, r7
 8002482:	4598      	cmp	r8, r3
 8002484:	419b      	sbcs	r3, r3
 8002486:	4593      	cmp	fp, r2
 8002488:	4192      	sbcs	r2, r2
 800248a:	45a4      	cmp	ip, r4
 800248c:	41a4      	sbcs	r4, r4
 800248e:	425b      	negs	r3, r3
 8002490:	427f      	negs	r7, r7
 8002492:	431f      	orrs	r7, r3
 8002494:	0c36      	lsrs	r6, r6, #16
 8002496:	4252      	negs	r2, r2
 8002498:	4264      	negs	r4, r4
 800249a:	19bf      	adds	r7, r7, r6
 800249c:	4322      	orrs	r2, r4
 800249e:	18bf      	adds	r7, r7, r2
 80024a0:	4662      	mov	r2, ip
 80024a2:	1838      	adds	r0, r7, r0
 80024a4:	0243      	lsls	r3, r0, #9
 80024a6:	0dd2      	lsrs	r2, r2, #23
 80024a8:	9903      	ldr	r1, [sp, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	026a      	lsls	r2, r5, #9
 80024ae:	430a      	orrs	r2, r1
 80024b0:	1e50      	subs	r0, r2, #1
 80024b2:	4182      	sbcs	r2, r0
 80024b4:	4661      	mov	r1, ip
 80024b6:	0ded      	lsrs	r5, r5, #23
 80024b8:	432a      	orrs	r2, r5
 80024ba:	024e      	lsls	r6, r1, #9
 80024bc:	4332      	orrs	r2, r6
 80024be:	01d9      	lsls	r1, r3, #7
 80024c0:	d400      	bmi.n	80024c4 <__aeabi_dmul+0x31c>
 80024c2:	e0b3      	b.n	800262c <__aeabi_dmul+0x484>
 80024c4:	2601      	movs	r6, #1
 80024c6:	0850      	lsrs	r0, r2, #1
 80024c8:	4032      	ands	r2, r6
 80024ca:	4302      	orrs	r2, r0
 80024cc:	07de      	lsls	r6, r3, #31
 80024ce:	4332      	orrs	r2, r6
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	4c22      	ldr	r4, [pc, #136]	; (800255c <__aeabi_dmul+0x3b4>)
 80024d4:	4454      	add	r4, sl
 80024d6:	2c00      	cmp	r4, #0
 80024d8:	dd62      	ble.n	80025a0 <__aeabi_dmul+0x3f8>
 80024da:	0751      	lsls	r1, r2, #29
 80024dc:	d009      	beq.n	80024f2 <__aeabi_dmul+0x34a>
 80024de:	200f      	movs	r0, #15
 80024e0:	4010      	ands	r0, r2
 80024e2:	2804      	cmp	r0, #4
 80024e4:	d005      	beq.n	80024f2 <__aeabi_dmul+0x34a>
 80024e6:	1d10      	adds	r0, r2, #4
 80024e8:	4290      	cmp	r0, r2
 80024ea:	4192      	sbcs	r2, r2
 80024ec:	4252      	negs	r2, r2
 80024ee:	189b      	adds	r3, r3, r2
 80024f0:	0002      	movs	r2, r0
 80024f2:	01d9      	lsls	r1, r3, #7
 80024f4:	d504      	bpl.n	8002500 <__aeabi_dmul+0x358>
 80024f6:	2480      	movs	r4, #128	; 0x80
 80024f8:	4819      	ldr	r0, [pc, #100]	; (8002560 <__aeabi_dmul+0x3b8>)
 80024fa:	00e4      	lsls	r4, r4, #3
 80024fc:	4003      	ands	r3, r0
 80024fe:	4454      	add	r4, sl
 8002500:	4818      	ldr	r0, [pc, #96]	; (8002564 <__aeabi_dmul+0x3bc>)
 8002502:	4284      	cmp	r4, r0
 8002504:	dd00      	ble.n	8002508 <__aeabi_dmul+0x360>
 8002506:	e727      	b.n	8002358 <__aeabi_dmul+0x1b0>
 8002508:	075e      	lsls	r6, r3, #29
 800250a:	025b      	lsls	r3, r3, #9
 800250c:	08d2      	lsrs	r2, r2, #3
 800250e:	0b1f      	lsrs	r7, r3, #12
 8002510:	0563      	lsls	r3, r4, #21
 8002512:	4316      	orrs	r6, r2
 8002514:	0d5b      	lsrs	r3, r3, #21
 8002516:	e6b2      	b.n	800227e <__aeabi_dmul+0xd6>
 8002518:	2300      	movs	r3, #0
 800251a:	4699      	mov	r9, r3
 800251c:	3301      	adds	r3, #1
 800251e:	2704      	movs	r7, #4
 8002520:	2600      	movs	r6, #0
 8002522:	469b      	mov	fp, r3
 8002524:	e664      	b.n	80021f0 <__aeabi_dmul+0x48>
 8002526:	2303      	movs	r3, #3
 8002528:	9701      	str	r7, [sp, #4]
 800252a:	4681      	mov	r9, r0
 800252c:	270c      	movs	r7, #12
 800252e:	469b      	mov	fp, r3
 8002530:	e65e      	b.n	80021f0 <__aeabi_dmul+0x48>
 8002532:	2201      	movs	r2, #1
 8002534:	2001      	movs	r0, #1
 8002536:	4317      	orrs	r7, r2
 8002538:	2200      	movs	r2, #0
 800253a:	e676      	b.n	800222a <__aeabi_dmul+0x82>
 800253c:	2303      	movs	r3, #3
 800253e:	2003      	movs	r0, #3
 8002540:	431f      	orrs	r7, r3
 8002542:	4643      	mov	r3, r8
 8002544:	e671      	b.n	800222a <__aeabi_dmul+0x82>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	000007ff 	.word	0x000007ff
 800254c:	fffffc01 	.word	0xfffffc01
 8002550:	08009260 	.word	0x08009260
 8002554:	800fffff 	.word	0x800fffff
 8002558:	fffffc0d 	.word	0xfffffc0d
 800255c:	000003ff 	.word	0x000003ff
 8002560:	feffffff 	.word	0xfeffffff
 8002564:	000007fe 	.word	0x000007fe
 8002568:	2300      	movs	r3, #0
 800256a:	2780      	movs	r7, #128	; 0x80
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	033f      	lsls	r7, r7, #12
 8002570:	2600      	movs	r6, #0
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <__aeabi_dmul+0x4d8>)
 8002574:	e683      	b.n	800227e <__aeabi_dmul+0xd6>
 8002576:	9b01      	ldr	r3, [sp, #4]
 8002578:	0032      	movs	r2, r6
 800257a:	46a4      	mov	ip, r4
 800257c:	4658      	mov	r0, fp
 800257e:	e670      	b.n	8002262 <__aeabi_dmul+0xba>
 8002580:	46ac      	mov	ip, r5
 8002582:	e66e      	b.n	8002262 <__aeabi_dmul+0xba>
 8002584:	2780      	movs	r7, #128	; 0x80
 8002586:	9901      	ldr	r1, [sp, #4]
 8002588:	033f      	lsls	r7, r7, #12
 800258a:	4239      	tst	r1, r7
 800258c:	d02d      	beq.n	80025ea <__aeabi_dmul+0x442>
 800258e:	423b      	tst	r3, r7
 8002590:	d12b      	bne.n	80025ea <__aeabi_dmul+0x442>
 8002592:	431f      	orrs	r7, r3
 8002594:	033f      	lsls	r7, r7, #12
 8002596:	0b3f      	lsrs	r7, r7, #12
 8002598:	9500      	str	r5, [sp, #0]
 800259a:	0016      	movs	r6, r2
 800259c:	4b38      	ldr	r3, [pc, #224]	; (8002680 <__aeabi_dmul+0x4d8>)
 800259e:	e66e      	b.n	800227e <__aeabi_dmul+0xd6>
 80025a0:	2501      	movs	r5, #1
 80025a2:	1b2d      	subs	r5, r5, r4
 80025a4:	2d38      	cmp	r5, #56	; 0x38
 80025a6:	dd00      	ble.n	80025aa <__aeabi_dmul+0x402>
 80025a8:	e666      	b.n	8002278 <__aeabi_dmul+0xd0>
 80025aa:	2d1f      	cmp	r5, #31
 80025ac:	dc40      	bgt.n	8002630 <__aeabi_dmul+0x488>
 80025ae:	4835      	ldr	r0, [pc, #212]	; (8002684 <__aeabi_dmul+0x4dc>)
 80025b0:	001c      	movs	r4, r3
 80025b2:	4450      	add	r0, sl
 80025b4:	0016      	movs	r6, r2
 80025b6:	4082      	lsls	r2, r0
 80025b8:	4084      	lsls	r4, r0
 80025ba:	40ee      	lsrs	r6, r5
 80025bc:	1e50      	subs	r0, r2, #1
 80025be:	4182      	sbcs	r2, r0
 80025c0:	4334      	orrs	r4, r6
 80025c2:	4314      	orrs	r4, r2
 80025c4:	40eb      	lsrs	r3, r5
 80025c6:	0762      	lsls	r2, r4, #29
 80025c8:	d009      	beq.n	80025de <__aeabi_dmul+0x436>
 80025ca:	220f      	movs	r2, #15
 80025cc:	4022      	ands	r2, r4
 80025ce:	2a04      	cmp	r2, #4
 80025d0:	d005      	beq.n	80025de <__aeabi_dmul+0x436>
 80025d2:	0022      	movs	r2, r4
 80025d4:	1d14      	adds	r4, r2, #4
 80025d6:	4294      	cmp	r4, r2
 80025d8:	4180      	sbcs	r0, r0
 80025da:	4240      	negs	r0, r0
 80025dc:	181b      	adds	r3, r3, r0
 80025de:	021a      	lsls	r2, r3, #8
 80025e0:	d53e      	bpl.n	8002660 <__aeabi_dmul+0x4b8>
 80025e2:	2301      	movs	r3, #1
 80025e4:	2700      	movs	r7, #0
 80025e6:	2600      	movs	r6, #0
 80025e8:	e649      	b.n	800227e <__aeabi_dmul+0xd6>
 80025ea:	2780      	movs	r7, #128	; 0x80
 80025ec:	9b01      	ldr	r3, [sp, #4]
 80025ee:	033f      	lsls	r7, r7, #12
 80025f0:	431f      	orrs	r7, r3
 80025f2:	033f      	lsls	r7, r7, #12
 80025f4:	0b3f      	lsrs	r7, r7, #12
 80025f6:	9400      	str	r4, [sp, #0]
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <__aeabi_dmul+0x4d8>)
 80025fa:	e640      	b.n	800227e <__aeabi_dmul+0xd6>
 80025fc:	0003      	movs	r3, r0
 80025fe:	465a      	mov	r2, fp
 8002600:	3b28      	subs	r3, #40	; 0x28
 8002602:	409a      	lsls	r2, r3
 8002604:	2600      	movs	r6, #0
 8002606:	9201      	str	r2, [sp, #4]
 8002608:	e66d      	b.n	80022e6 <__aeabi_dmul+0x13e>
 800260a:	4658      	mov	r0, fp
 800260c:	f000 fd1a 	bl	8003044 <__clzsi2>
 8002610:	3020      	adds	r0, #32
 8002612:	e657      	b.n	80022c4 <__aeabi_dmul+0x11c>
 8002614:	0003      	movs	r3, r0
 8002616:	4652      	mov	r2, sl
 8002618:	3b28      	subs	r3, #40	; 0x28
 800261a:	409a      	lsls	r2, r3
 800261c:	0013      	movs	r3, r2
 800261e:	2200      	movs	r2, #0
 8002620:	e693      	b.n	800234a <__aeabi_dmul+0x1a2>
 8002622:	4650      	mov	r0, sl
 8002624:	f000 fd0e 	bl	8003044 <__clzsi2>
 8002628:	3020      	adds	r0, #32
 800262a:	e67b      	b.n	8002324 <__aeabi_dmul+0x17c>
 800262c:	46ca      	mov	sl, r9
 800262e:	e750      	b.n	80024d2 <__aeabi_dmul+0x32a>
 8002630:	201f      	movs	r0, #31
 8002632:	001e      	movs	r6, r3
 8002634:	4240      	negs	r0, r0
 8002636:	1b04      	subs	r4, r0, r4
 8002638:	40e6      	lsrs	r6, r4
 800263a:	2d20      	cmp	r5, #32
 800263c:	d003      	beq.n	8002646 <__aeabi_dmul+0x49e>
 800263e:	4c12      	ldr	r4, [pc, #72]	; (8002688 <__aeabi_dmul+0x4e0>)
 8002640:	4454      	add	r4, sl
 8002642:	40a3      	lsls	r3, r4
 8002644:	431a      	orrs	r2, r3
 8002646:	1e50      	subs	r0, r2, #1
 8002648:	4182      	sbcs	r2, r0
 800264a:	4332      	orrs	r2, r6
 800264c:	2607      	movs	r6, #7
 800264e:	2700      	movs	r7, #0
 8002650:	4016      	ands	r6, r2
 8002652:	d009      	beq.n	8002668 <__aeabi_dmul+0x4c0>
 8002654:	200f      	movs	r0, #15
 8002656:	2300      	movs	r3, #0
 8002658:	4010      	ands	r0, r2
 800265a:	0014      	movs	r4, r2
 800265c:	2804      	cmp	r0, #4
 800265e:	d1b9      	bne.n	80025d4 <__aeabi_dmul+0x42c>
 8002660:	0022      	movs	r2, r4
 8002662:	075e      	lsls	r6, r3, #29
 8002664:	025b      	lsls	r3, r3, #9
 8002666:	0b1f      	lsrs	r7, r3, #12
 8002668:	08d2      	lsrs	r2, r2, #3
 800266a:	4316      	orrs	r6, r2
 800266c:	2300      	movs	r3, #0
 800266e:	e606      	b.n	800227e <__aeabi_dmul+0xd6>
 8002670:	2780      	movs	r7, #128	; 0x80
 8002672:	033f      	lsls	r7, r7, #12
 8002674:	431f      	orrs	r7, r3
 8002676:	033f      	lsls	r7, r7, #12
 8002678:	0b3f      	lsrs	r7, r7, #12
 800267a:	0016      	movs	r6, r2
 800267c:	4b00      	ldr	r3, [pc, #0]	; (8002680 <__aeabi_dmul+0x4d8>)
 800267e:	e5fe      	b.n	800227e <__aeabi_dmul+0xd6>
 8002680:	000007ff 	.word	0x000007ff
 8002684:	0000041e 	.word	0x0000041e
 8002688:	0000043e 	.word	0x0000043e

0800268c <__aeabi_dsub>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	4657      	mov	r7, sl
 8002690:	464e      	mov	r6, r9
 8002692:	4645      	mov	r5, r8
 8002694:	46de      	mov	lr, fp
 8002696:	000c      	movs	r4, r1
 8002698:	0309      	lsls	r1, r1, #12
 800269a:	b5e0      	push	{r5, r6, r7, lr}
 800269c:	0a49      	lsrs	r1, r1, #9
 800269e:	0f46      	lsrs	r6, r0, #29
 80026a0:	005f      	lsls	r7, r3, #1
 80026a2:	4331      	orrs	r1, r6
 80026a4:	031e      	lsls	r6, r3, #12
 80026a6:	0fdb      	lsrs	r3, r3, #31
 80026a8:	0a76      	lsrs	r6, r6, #9
 80026aa:	469b      	mov	fp, r3
 80026ac:	0f53      	lsrs	r3, r2, #29
 80026ae:	4333      	orrs	r3, r6
 80026b0:	4ec8      	ldr	r6, [pc, #800]	; (80029d4 <__aeabi_dsub+0x348>)
 80026b2:	0065      	lsls	r5, r4, #1
 80026b4:	00c0      	lsls	r0, r0, #3
 80026b6:	0fe4      	lsrs	r4, r4, #31
 80026b8:	00d2      	lsls	r2, r2, #3
 80026ba:	0d6d      	lsrs	r5, r5, #21
 80026bc:	46a2      	mov	sl, r4
 80026be:	4681      	mov	r9, r0
 80026c0:	0d7f      	lsrs	r7, r7, #21
 80026c2:	469c      	mov	ip, r3
 80026c4:	4690      	mov	r8, r2
 80026c6:	42b7      	cmp	r7, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dsub+0x40>
 80026ca:	e0b9      	b.n	8002840 <__aeabi_dsub+0x1b4>
 80026cc:	465b      	mov	r3, fp
 80026ce:	2601      	movs	r6, #1
 80026d0:	4073      	eors	r3, r6
 80026d2:	469b      	mov	fp, r3
 80026d4:	1bee      	subs	r6, r5, r7
 80026d6:	45a3      	cmp	fp, r4
 80026d8:	d100      	bne.n	80026dc <__aeabi_dsub+0x50>
 80026da:	e083      	b.n	80027e4 <__aeabi_dsub+0x158>
 80026dc:	2e00      	cmp	r6, #0
 80026de:	dd63      	ble.n	80027a8 <__aeabi_dsub+0x11c>
 80026e0:	2f00      	cmp	r7, #0
 80026e2:	d000      	beq.n	80026e6 <__aeabi_dsub+0x5a>
 80026e4:	e0b1      	b.n	800284a <__aeabi_dsub+0x1be>
 80026e6:	4663      	mov	r3, ip
 80026e8:	4313      	orrs	r3, r2
 80026ea:	d100      	bne.n	80026ee <__aeabi_dsub+0x62>
 80026ec:	e123      	b.n	8002936 <__aeabi_dsub+0x2aa>
 80026ee:	1e73      	subs	r3, r6, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d000      	beq.n	80026f6 <__aeabi_dsub+0x6a>
 80026f4:	e1ba      	b.n	8002a6c <__aeabi_dsub+0x3e0>
 80026f6:	1a86      	subs	r6, r0, r2
 80026f8:	4663      	mov	r3, ip
 80026fa:	42b0      	cmp	r0, r6
 80026fc:	4180      	sbcs	r0, r0
 80026fe:	2501      	movs	r5, #1
 8002700:	1ac9      	subs	r1, r1, r3
 8002702:	4240      	negs	r0, r0
 8002704:	1a09      	subs	r1, r1, r0
 8002706:	020b      	lsls	r3, r1, #8
 8002708:	d400      	bmi.n	800270c <__aeabi_dsub+0x80>
 800270a:	e147      	b.n	800299c <__aeabi_dsub+0x310>
 800270c:	0249      	lsls	r1, r1, #9
 800270e:	0a4b      	lsrs	r3, r1, #9
 8002710:	4698      	mov	r8, r3
 8002712:	4643      	mov	r3, r8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dsub+0x8e>
 8002718:	e189      	b.n	8002a2e <__aeabi_dsub+0x3a2>
 800271a:	4640      	mov	r0, r8
 800271c:	f000 fc92 	bl	8003044 <__clzsi2>
 8002720:	0003      	movs	r3, r0
 8002722:	3b08      	subs	r3, #8
 8002724:	2b1f      	cmp	r3, #31
 8002726:	dd00      	ble.n	800272a <__aeabi_dsub+0x9e>
 8002728:	e17c      	b.n	8002a24 <__aeabi_dsub+0x398>
 800272a:	2220      	movs	r2, #32
 800272c:	0030      	movs	r0, r6
 800272e:	1ad2      	subs	r2, r2, r3
 8002730:	4641      	mov	r1, r8
 8002732:	40d0      	lsrs	r0, r2
 8002734:	4099      	lsls	r1, r3
 8002736:	0002      	movs	r2, r0
 8002738:	409e      	lsls	r6, r3
 800273a:	430a      	orrs	r2, r1
 800273c:	429d      	cmp	r5, r3
 800273e:	dd00      	ble.n	8002742 <__aeabi_dsub+0xb6>
 8002740:	e16a      	b.n	8002a18 <__aeabi_dsub+0x38c>
 8002742:	1b5d      	subs	r5, r3, r5
 8002744:	1c6b      	adds	r3, r5, #1
 8002746:	2b1f      	cmp	r3, #31
 8002748:	dd00      	ble.n	800274c <__aeabi_dsub+0xc0>
 800274a:	e194      	b.n	8002a76 <__aeabi_dsub+0x3ea>
 800274c:	2120      	movs	r1, #32
 800274e:	0010      	movs	r0, r2
 8002750:	0035      	movs	r5, r6
 8002752:	1ac9      	subs	r1, r1, r3
 8002754:	408e      	lsls	r6, r1
 8002756:	40da      	lsrs	r2, r3
 8002758:	4088      	lsls	r0, r1
 800275a:	40dd      	lsrs	r5, r3
 800275c:	1e71      	subs	r1, r6, #1
 800275e:	418e      	sbcs	r6, r1
 8002760:	0011      	movs	r1, r2
 8002762:	2207      	movs	r2, #7
 8002764:	4328      	orrs	r0, r5
 8002766:	2500      	movs	r5, #0
 8002768:	4306      	orrs	r6, r0
 800276a:	4032      	ands	r2, r6
 800276c:	2a00      	cmp	r2, #0
 800276e:	d009      	beq.n	8002784 <__aeabi_dsub+0xf8>
 8002770:	230f      	movs	r3, #15
 8002772:	4033      	ands	r3, r6
 8002774:	2b04      	cmp	r3, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dsub+0xf8>
 8002778:	1d33      	adds	r3, r6, #4
 800277a:	42b3      	cmp	r3, r6
 800277c:	41b6      	sbcs	r6, r6
 800277e:	4276      	negs	r6, r6
 8002780:	1989      	adds	r1, r1, r6
 8002782:	001e      	movs	r6, r3
 8002784:	020b      	lsls	r3, r1, #8
 8002786:	d400      	bmi.n	800278a <__aeabi_dsub+0xfe>
 8002788:	e23d      	b.n	8002c06 <__aeabi_dsub+0x57a>
 800278a:	1c6a      	adds	r2, r5, #1
 800278c:	4b91      	ldr	r3, [pc, #580]	; (80029d4 <__aeabi_dsub+0x348>)
 800278e:	0555      	lsls	r5, r2, #21
 8002790:	0d6d      	lsrs	r5, r5, #21
 8002792:	429a      	cmp	r2, r3
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x10c>
 8002796:	e119      	b.n	80029cc <__aeabi_dsub+0x340>
 8002798:	4a8f      	ldr	r2, [pc, #572]	; (80029d8 <__aeabi_dsub+0x34c>)
 800279a:	08f6      	lsrs	r6, r6, #3
 800279c:	400a      	ands	r2, r1
 800279e:	0757      	lsls	r7, r2, #29
 80027a0:	0252      	lsls	r2, r2, #9
 80027a2:	4337      	orrs	r7, r6
 80027a4:	0b12      	lsrs	r2, r2, #12
 80027a6:	e09b      	b.n	80028e0 <__aeabi_dsub+0x254>
 80027a8:	2e00      	cmp	r6, #0
 80027aa:	d000      	beq.n	80027ae <__aeabi_dsub+0x122>
 80027ac:	e0c5      	b.n	800293a <__aeabi_dsub+0x2ae>
 80027ae:	1c6e      	adds	r6, r5, #1
 80027b0:	0576      	lsls	r6, r6, #21
 80027b2:	0d76      	lsrs	r6, r6, #21
 80027b4:	2e01      	cmp	r6, #1
 80027b6:	dc00      	bgt.n	80027ba <__aeabi_dsub+0x12e>
 80027b8:	e148      	b.n	8002a4c <__aeabi_dsub+0x3c0>
 80027ba:	4667      	mov	r7, ip
 80027bc:	1a86      	subs	r6, r0, r2
 80027be:	1bcb      	subs	r3, r1, r7
 80027c0:	42b0      	cmp	r0, r6
 80027c2:	41bf      	sbcs	r7, r7
 80027c4:	427f      	negs	r7, r7
 80027c6:	46b8      	mov	r8, r7
 80027c8:	001f      	movs	r7, r3
 80027ca:	4643      	mov	r3, r8
 80027cc:	1aff      	subs	r7, r7, r3
 80027ce:	003b      	movs	r3, r7
 80027d0:	46b8      	mov	r8, r7
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	d500      	bpl.n	80027d8 <__aeabi_dsub+0x14c>
 80027d6:	e15f      	b.n	8002a98 <__aeabi_dsub+0x40c>
 80027d8:	4337      	orrs	r7, r6
 80027da:	d19a      	bne.n	8002712 <__aeabi_dsub+0x86>
 80027dc:	2200      	movs	r2, #0
 80027de:	2400      	movs	r4, #0
 80027e0:	2500      	movs	r5, #0
 80027e2:	e079      	b.n	80028d8 <__aeabi_dsub+0x24c>
 80027e4:	2e00      	cmp	r6, #0
 80027e6:	dc00      	bgt.n	80027ea <__aeabi_dsub+0x15e>
 80027e8:	e0fa      	b.n	80029e0 <__aeabi_dsub+0x354>
 80027ea:	2f00      	cmp	r7, #0
 80027ec:	d100      	bne.n	80027f0 <__aeabi_dsub+0x164>
 80027ee:	e08d      	b.n	800290c <__aeabi_dsub+0x280>
 80027f0:	4b78      	ldr	r3, [pc, #480]	; (80029d4 <__aeabi_dsub+0x348>)
 80027f2:	429d      	cmp	r5, r3
 80027f4:	d067      	beq.n	80028c6 <__aeabi_dsub+0x23a>
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	4667      	mov	r7, ip
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	431f      	orrs	r7, r3
 80027fe:	46bc      	mov	ip, r7
 8002800:	2e38      	cmp	r6, #56	; 0x38
 8002802:	dc00      	bgt.n	8002806 <__aeabi_dsub+0x17a>
 8002804:	e152      	b.n	8002aac <__aeabi_dsub+0x420>
 8002806:	4663      	mov	r3, ip
 8002808:	4313      	orrs	r3, r2
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	4193      	sbcs	r3, r2
 800280e:	181e      	adds	r6, r3, r0
 8002810:	4286      	cmp	r6, r0
 8002812:	4180      	sbcs	r0, r0
 8002814:	4240      	negs	r0, r0
 8002816:	1809      	adds	r1, r1, r0
 8002818:	020b      	lsls	r3, r1, #8
 800281a:	d400      	bmi.n	800281e <__aeabi_dsub+0x192>
 800281c:	e0be      	b.n	800299c <__aeabi_dsub+0x310>
 800281e:	4b6d      	ldr	r3, [pc, #436]	; (80029d4 <__aeabi_dsub+0x348>)
 8002820:	3501      	adds	r5, #1
 8002822:	429d      	cmp	r5, r3
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x19c>
 8002826:	e0d2      	b.n	80029ce <__aeabi_dsub+0x342>
 8002828:	4a6b      	ldr	r2, [pc, #428]	; (80029d8 <__aeabi_dsub+0x34c>)
 800282a:	0873      	lsrs	r3, r6, #1
 800282c:	400a      	ands	r2, r1
 800282e:	2101      	movs	r1, #1
 8002830:	400e      	ands	r6, r1
 8002832:	431e      	orrs	r6, r3
 8002834:	0851      	lsrs	r1, r2, #1
 8002836:	07d3      	lsls	r3, r2, #31
 8002838:	2207      	movs	r2, #7
 800283a:	431e      	orrs	r6, r3
 800283c:	4032      	ands	r2, r6
 800283e:	e795      	b.n	800276c <__aeabi_dsub+0xe0>
 8002840:	001e      	movs	r6, r3
 8002842:	4316      	orrs	r6, r2
 8002844:	d000      	beq.n	8002848 <__aeabi_dsub+0x1bc>
 8002846:	e745      	b.n	80026d4 <__aeabi_dsub+0x48>
 8002848:	e740      	b.n	80026cc <__aeabi_dsub+0x40>
 800284a:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <__aeabi_dsub+0x348>)
 800284c:	429d      	cmp	r5, r3
 800284e:	d03a      	beq.n	80028c6 <__aeabi_dsub+0x23a>
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	4667      	mov	r7, ip
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	431f      	orrs	r7, r3
 8002858:	46bc      	mov	ip, r7
 800285a:	2e38      	cmp	r6, #56	; 0x38
 800285c:	dd00      	ble.n	8002860 <__aeabi_dsub+0x1d4>
 800285e:	e0eb      	b.n	8002a38 <__aeabi_dsub+0x3ac>
 8002860:	2e1f      	cmp	r6, #31
 8002862:	dc00      	bgt.n	8002866 <__aeabi_dsub+0x1da>
 8002864:	e13a      	b.n	8002adc <__aeabi_dsub+0x450>
 8002866:	0033      	movs	r3, r6
 8002868:	4667      	mov	r7, ip
 800286a:	3b20      	subs	r3, #32
 800286c:	40df      	lsrs	r7, r3
 800286e:	003b      	movs	r3, r7
 8002870:	2e20      	cmp	r6, #32
 8002872:	d005      	beq.n	8002880 <__aeabi_dsub+0x1f4>
 8002874:	2740      	movs	r7, #64	; 0x40
 8002876:	1bbf      	subs	r7, r7, r6
 8002878:	4666      	mov	r6, ip
 800287a:	40be      	lsls	r6, r7
 800287c:	4332      	orrs	r2, r6
 800287e:	4690      	mov	r8, r2
 8002880:	4646      	mov	r6, r8
 8002882:	1e72      	subs	r2, r6, #1
 8002884:	4196      	sbcs	r6, r2
 8002886:	4333      	orrs	r3, r6
 8002888:	e0da      	b.n	8002a40 <__aeabi_dsub+0x3b4>
 800288a:	2b00      	cmp	r3, #0
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x204>
 800288e:	e214      	b.n	8002cba <__aeabi_dsub+0x62e>
 8002890:	4663      	mov	r3, ip
 8002892:	4313      	orrs	r3, r2
 8002894:	d100      	bne.n	8002898 <__aeabi_dsub+0x20c>
 8002896:	e168      	b.n	8002b6a <__aeabi_dsub+0x4de>
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	074e      	lsls	r6, r1, #29
 800289c:	08c0      	lsrs	r0, r0, #3
 800289e:	08c9      	lsrs	r1, r1, #3
 80028a0:	031b      	lsls	r3, r3, #12
 80028a2:	4306      	orrs	r6, r0
 80028a4:	4219      	tst	r1, r3
 80028a6:	d008      	beq.n	80028ba <__aeabi_dsub+0x22e>
 80028a8:	4660      	mov	r0, ip
 80028aa:	08c0      	lsrs	r0, r0, #3
 80028ac:	4218      	tst	r0, r3
 80028ae:	d104      	bne.n	80028ba <__aeabi_dsub+0x22e>
 80028b0:	4663      	mov	r3, ip
 80028b2:	0001      	movs	r1, r0
 80028b4:	08d2      	lsrs	r2, r2, #3
 80028b6:	075e      	lsls	r6, r3, #29
 80028b8:	4316      	orrs	r6, r2
 80028ba:	00f3      	lsls	r3, r6, #3
 80028bc:	4699      	mov	r9, r3
 80028be:	00c9      	lsls	r1, r1, #3
 80028c0:	0f72      	lsrs	r2, r6, #29
 80028c2:	4d44      	ldr	r5, [pc, #272]	; (80029d4 <__aeabi_dsub+0x348>)
 80028c4:	4311      	orrs	r1, r2
 80028c6:	464b      	mov	r3, r9
 80028c8:	08de      	lsrs	r6, r3, #3
 80028ca:	4b42      	ldr	r3, [pc, #264]	; (80029d4 <__aeabi_dsub+0x348>)
 80028cc:	074f      	lsls	r7, r1, #29
 80028ce:	4337      	orrs	r7, r6
 80028d0:	08ca      	lsrs	r2, r1, #3
 80028d2:	429d      	cmp	r5, r3
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x24c>
 80028d6:	e06e      	b.n	80029b6 <__aeabi_dsub+0x32a>
 80028d8:	0312      	lsls	r2, r2, #12
 80028da:	056d      	lsls	r5, r5, #21
 80028dc:	0b12      	lsrs	r2, r2, #12
 80028de:	0d6d      	lsrs	r5, r5, #21
 80028e0:	2100      	movs	r1, #0
 80028e2:	0312      	lsls	r2, r2, #12
 80028e4:	0b13      	lsrs	r3, r2, #12
 80028e6:	0d0a      	lsrs	r2, r1, #20
 80028e8:	0512      	lsls	r2, r2, #20
 80028ea:	431a      	orrs	r2, r3
 80028ec:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <__aeabi_dsub+0x350>)
 80028ee:	052d      	lsls	r5, r5, #20
 80028f0:	4013      	ands	r3, r2
 80028f2:	432b      	orrs	r3, r5
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	07e4      	lsls	r4, r4, #31
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	4323      	orrs	r3, r4
 80028fc:	0038      	movs	r0, r7
 80028fe:	0019      	movs	r1, r3
 8002900:	bc3c      	pop	{r2, r3, r4, r5}
 8002902:	4690      	mov	r8, r2
 8002904:	4699      	mov	r9, r3
 8002906:	46a2      	mov	sl, r4
 8002908:	46ab      	mov	fp, r5
 800290a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800290c:	4663      	mov	r3, ip
 800290e:	4313      	orrs	r3, r2
 8002910:	d011      	beq.n	8002936 <__aeabi_dsub+0x2aa>
 8002912:	1e73      	subs	r3, r6, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d000      	beq.n	800291a <__aeabi_dsub+0x28e>
 8002918:	e107      	b.n	8002b2a <__aeabi_dsub+0x49e>
 800291a:	1886      	adds	r6, r0, r2
 800291c:	4286      	cmp	r6, r0
 800291e:	4180      	sbcs	r0, r0
 8002920:	4461      	add	r1, ip
 8002922:	4240      	negs	r0, r0
 8002924:	1809      	adds	r1, r1, r0
 8002926:	2501      	movs	r5, #1
 8002928:	020b      	lsls	r3, r1, #8
 800292a:	d537      	bpl.n	800299c <__aeabi_dsub+0x310>
 800292c:	2502      	movs	r5, #2
 800292e:	e77b      	b.n	8002828 <__aeabi_dsub+0x19c>
 8002930:	003e      	movs	r6, r7
 8002932:	4661      	mov	r1, ip
 8002934:	4691      	mov	r9, r2
 8002936:	0035      	movs	r5, r6
 8002938:	e7c5      	b.n	80028c6 <__aeabi_dsub+0x23a>
 800293a:	465c      	mov	r4, fp
 800293c:	2d00      	cmp	r5, #0
 800293e:	d000      	beq.n	8002942 <__aeabi_dsub+0x2b6>
 8002940:	e0e1      	b.n	8002b06 <__aeabi_dsub+0x47a>
 8002942:	000b      	movs	r3, r1
 8002944:	4303      	orrs	r3, r0
 8002946:	d0f3      	beq.n	8002930 <__aeabi_dsub+0x2a4>
 8002948:	1c73      	adds	r3, r6, #1
 800294a:	d100      	bne.n	800294e <__aeabi_dsub+0x2c2>
 800294c:	e1ac      	b.n	8002ca8 <__aeabi_dsub+0x61c>
 800294e:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <__aeabi_dsub+0x348>)
 8002950:	429f      	cmp	r7, r3
 8002952:	d100      	bne.n	8002956 <__aeabi_dsub+0x2ca>
 8002954:	e13a      	b.n	8002bcc <__aeabi_dsub+0x540>
 8002956:	43f3      	mvns	r3, r6
 8002958:	2b38      	cmp	r3, #56	; 0x38
 800295a:	dd00      	ble.n	800295e <__aeabi_dsub+0x2d2>
 800295c:	e16f      	b.n	8002c3e <__aeabi_dsub+0x5b2>
 800295e:	2b1f      	cmp	r3, #31
 8002960:	dd00      	ble.n	8002964 <__aeabi_dsub+0x2d8>
 8002962:	e18c      	b.n	8002c7e <__aeabi_dsub+0x5f2>
 8002964:	2520      	movs	r5, #32
 8002966:	000e      	movs	r6, r1
 8002968:	1aed      	subs	r5, r5, r3
 800296a:	40ae      	lsls	r6, r5
 800296c:	46b0      	mov	r8, r6
 800296e:	0006      	movs	r6, r0
 8002970:	46aa      	mov	sl, r5
 8002972:	40de      	lsrs	r6, r3
 8002974:	4645      	mov	r5, r8
 8002976:	4335      	orrs	r5, r6
 8002978:	002e      	movs	r6, r5
 800297a:	4655      	mov	r5, sl
 800297c:	40d9      	lsrs	r1, r3
 800297e:	40a8      	lsls	r0, r5
 8002980:	4663      	mov	r3, ip
 8002982:	1e45      	subs	r5, r0, #1
 8002984:	41a8      	sbcs	r0, r5
 8002986:	1a5b      	subs	r3, r3, r1
 8002988:	469c      	mov	ip, r3
 800298a:	4330      	orrs	r0, r6
 800298c:	1a16      	subs	r6, r2, r0
 800298e:	42b2      	cmp	r2, r6
 8002990:	4192      	sbcs	r2, r2
 8002992:	4663      	mov	r3, ip
 8002994:	4252      	negs	r2, r2
 8002996:	1a99      	subs	r1, r3, r2
 8002998:	003d      	movs	r5, r7
 800299a:	e6b4      	b.n	8002706 <__aeabi_dsub+0x7a>
 800299c:	2207      	movs	r2, #7
 800299e:	4032      	ands	r2, r6
 80029a0:	2a00      	cmp	r2, #0
 80029a2:	d000      	beq.n	80029a6 <__aeabi_dsub+0x31a>
 80029a4:	e6e4      	b.n	8002770 <__aeabi_dsub+0xe4>
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <__aeabi_dsub+0x348>)
 80029a8:	08f6      	lsrs	r6, r6, #3
 80029aa:	074f      	lsls	r7, r1, #29
 80029ac:	4337      	orrs	r7, r6
 80029ae:	08ca      	lsrs	r2, r1, #3
 80029b0:	429d      	cmp	r5, r3
 80029b2:	d000      	beq.n	80029b6 <__aeabi_dsub+0x32a>
 80029b4:	e790      	b.n	80028d8 <__aeabi_dsub+0x24c>
 80029b6:	003b      	movs	r3, r7
 80029b8:	4313      	orrs	r3, r2
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x332>
 80029bc:	e1a6      	b.n	8002d0c <__aeabi_dsub+0x680>
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	031b      	lsls	r3, r3, #12
 80029c2:	431a      	orrs	r2, r3
 80029c4:	0312      	lsls	r2, r2, #12
 80029c6:	0b12      	lsrs	r2, r2, #12
 80029c8:	4d02      	ldr	r5, [pc, #8]	; (80029d4 <__aeabi_dsub+0x348>)
 80029ca:	e789      	b.n	80028e0 <__aeabi_dsub+0x254>
 80029cc:	0015      	movs	r5, r2
 80029ce:	2200      	movs	r2, #0
 80029d0:	2700      	movs	r7, #0
 80029d2:	e785      	b.n	80028e0 <__aeabi_dsub+0x254>
 80029d4:	000007ff 	.word	0x000007ff
 80029d8:	ff7fffff 	.word	0xff7fffff
 80029dc:	800fffff 	.word	0x800fffff
 80029e0:	2e00      	cmp	r6, #0
 80029e2:	d000      	beq.n	80029e6 <__aeabi_dsub+0x35a>
 80029e4:	e0c7      	b.n	8002b76 <__aeabi_dsub+0x4ea>
 80029e6:	1c6b      	adds	r3, r5, #1
 80029e8:	055e      	lsls	r6, r3, #21
 80029ea:	0d76      	lsrs	r6, r6, #21
 80029ec:	2e01      	cmp	r6, #1
 80029ee:	dc00      	bgt.n	80029f2 <__aeabi_dsub+0x366>
 80029f0:	e0f0      	b.n	8002bd4 <__aeabi_dsub+0x548>
 80029f2:	4dc8      	ldr	r5, [pc, #800]	; (8002d14 <__aeabi_dsub+0x688>)
 80029f4:	42ab      	cmp	r3, r5
 80029f6:	d100      	bne.n	80029fa <__aeabi_dsub+0x36e>
 80029f8:	e0b9      	b.n	8002b6e <__aeabi_dsub+0x4e2>
 80029fa:	1885      	adds	r5, r0, r2
 80029fc:	000a      	movs	r2, r1
 80029fe:	4285      	cmp	r5, r0
 8002a00:	4189      	sbcs	r1, r1
 8002a02:	4462      	add	r2, ip
 8002a04:	4249      	negs	r1, r1
 8002a06:	1851      	adds	r1, r2, r1
 8002a08:	2207      	movs	r2, #7
 8002a0a:	07ce      	lsls	r6, r1, #31
 8002a0c:	086d      	lsrs	r5, r5, #1
 8002a0e:	432e      	orrs	r6, r5
 8002a10:	0849      	lsrs	r1, r1, #1
 8002a12:	4032      	ands	r2, r6
 8002a14:	001d      	movs	r5, r3
 8002a16:	e6a9      	b.n	800276c <__aeabi_dsub+0xe0>
 8002a18:	49bf      	ldr	r1, [pc, #764]	; (8002d18 <__aeabi_dsub+0x68c>)
 8002a1a:	1aed      	subs	r5, r5, r3
 8002a1c:	4011      	ands	r1, r2
 8002a1e:	2207      	movs	r2, #7
 8002a20:	4032      	ands	r2, r6
 8002a22:	e6a3      	b.n	800276c <__aeabi_dsub+0xe0>
 8002a24:	0032      	movs	r2, r6
 8002a26:	3828      	subs	r0, #40	; 0x28
 8002a28:	4082      	lsls	r2, r0
 8002a2a:	2600      	movs	r6, #0
 8002a2c:	e686      	b.n	800273c <__aeabi_dsub+0xb0>
 8002a2e:	0030      	movs	r0, r6
 8002a30:	f000 fb08 	bl	8003044 <__clzsi2>
 8002a34:	3020      	adds	r0, #32
 8002a36:	e673      	b.n	8002720 <__aeabi_dsub+0x94>
 8002a38:	4663      	mov	r3, ip
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	1e5a      	subs	r2, r3, #1
 8002a3e:	4193      	sbcs	r3, r2
 8002a40:	1ac6      	subs	r6, r0, r3
 8002a42:	42b0      	cmp	r0, r6
 8002a44:	4180      	sbcs	r0, r0
 8002a46:	4240      	negs	r0, r0
 8002a48:	1a09      	subs	r1, r1, r0
 8002a4a:	e65c      	b.n	8002706 <__aeabi_dsub+0x7a>
 8002a4c:	000e      	movs	r6, r1
 8002a4e:	4667      	mov	r7, ip
 8002a50:	4306      	orrs	r6, r0
 8002a52:	4317      	orrs	r7, r2
 8002a54:	2d00      	cmp	r5, #0
 8002a56:	d15e      	bne.n	8002b16 <__aeabi_dsub+0x48a>
 8002a58:	2e00      	cmp	r6, #0
 8002a5a:	d000      	beq.n	8002a5e <__aeabi_dsub+0x3d2>
 8002a5c:	e0f3      	b.n	8002c46 <__aeabi_dsub+0x5ba>
 8002a5e:	2f00      	cmp	r7, #0
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x3d8>
 8002a62:	e11e      	b.n	8002ca2 <__aeabi_dsub+0x616>
 8002a64:	465c      	mov	r4, fp
 8002a66:	4661      	mov	r1, ip
 8002a68:	4691      	mov	r9, r2
 8002a6a:	e72c      	b.n	80028c6 <__aeabi_dsub+0x23a>
 8002a6c:	4fa9      	ldr	r7, [pc, #676]	; (8002d14 <__aeabi_dsub+0x688>)
 8002a6e:	42be      	cmp	r6, r7
 8002a70:	d07b      	beq.n	8002b6a <__aeabi_dsub+0x4de>
 8002a72:	001e      	movs	r6, r3
 8002a74:	e6f1      	b.n	800285a <__aeabi_dsub+0x1ce>
 8002a76:	0010      	movs	r0, r2
 8002a78:	3d1f      	subs	r5, #31
 8002a7a:	40e8      	lsrs	r0, r5
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d003      	beq.n	8002a88 <__aeabi_dsub+0x3fc>
 8002a80:	2140      	movs	r1, #64	; 0x40
 8002a82:	1acb      	subs	r3, r1, r3
 8002a84:	409a      	lsls	r2, r3
 8002a86:	4316      	orrs	r6, r2
 8002a88:	1e73      	subs	r3, r6, #1
 8002a8a:	419e      	sbcs	r6, r3
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	4306      	orrs	r6, r0
 8002a90:	4032      	ands	r2, r6
 8002a92:	2100      	movs	r1, #0
 8002a94:	2500      	movs	r5, #0
 8002a96:	e783      	b.n	80029a0 <__aeabi_dsub+0x314>
 8002a98:	1a16      	subs	r6, r2, r0
 8002a9a:	4663      	mov	r3, ip
 8002a9c:	42b2      	cmp	r2, r6
 8002a9e:	4180      	sbcs	r0, r0
 8002aa0:	1a59      	subs	r1, r3, r1
 8002aa2:	4240      	negs	r0, r0
 8002aa4:	1a0b      	subs	r3, r1, r0
 8002aa6:	4698      	mov	r8, r3
 8002aa8:	465c      	mov	r4, fp
 8002aaa:	e632      	b.n	8002712 <__aeabi_dsub+0x86>
 8002aac:	2e1f      	cmp	r6, #31
 8002aae:	dd00      	ble.n	8002ab2 <__aeabi_dsub+0x426>
 8002ab0:	e0ab      	b.n	8002c0a <__aeabi_dsub+0x57e>
 8002ab2:	2720      	movs	r7, #32
 8002ab4:	1bbb      	subs	r3, r7, r6
 8002ab6:	469a      	mov	sl, r3
 8002ab8:	4663      	mov	r3, ip
 8002aba:	4657      	mov	r7, sl
 8002abc:	40bb      	lsls	r3, r7
 8002abe:	4699      	mov	r9, r3
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	464f      	mov	r7, r9
 8002ac4:	40f3      	lsrs	r3, r6
 8002ac6:	431f      	orrs	r7, r3
 8002ac8:	003b      	movs	r3, r7
 8002aca:	4657      	mov	r7, sl
 8002acc:	40ba      	lsls	r2, r7
 8002ace:	1e57      	subs	r7, r2, #1
 8002ad0:	41ba      	sbcs	r2, r7
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	4662      	mov	r2, ip
 8002ad6:	40f2      	lsrs	r2, r6
 8002ad8:	1889      	adds	r1, r1, r2
 8002ada:	e698      	b.n	800280e <__aeabi_dsub+0x182>
 8002adc:	2720      	movs	r7, #32
 8002ade:	1bbb      	subs	r3, r7, r6
 8002ae0:	469a      	mov	sl, r3
 8002ae2:	4663      	mov	r3, ip
 8002ae4:	4657      	mov	r7, sl
 8002ae6:	40bb      	lsls	r3, r7
 8002ae8:	4699      	mov	r9, r3
 8002aea:	0013      	movs	r3, r2
 8002aec:	464f      	mov	r7, r9
 8002aee:	40f3      	lsrs	r3, r6
 8002af0:	431f      	orrs	r7, r3
 8002af2:	003b      	movs	r3, r7
 8002af4:	4657      	mov	r7, sl
 8002af6:	40ba      	lsls	r2, r7
 8002af8:	1e57      	subs	r7, r2, #1
 8002afa:	41ba      	sbcs	r2, r7
 8002afc:	4313      	orrs	r3, r2
 8002afe:	4662      	mov	r2, ip
 8002b00:	40f2      	lsrs	r2, r6
 8002b02:	1a89      	subs	r1, r1, r2
 8002b04:	e79c      	b.n	8002a40 <__aeabi_dsub+0x3b4>
 8002b06:	4b83      	ldr	r3, [pc, #524]	; (8002d14 <__aeabi_dsub+0x688>)
 8002b08:	429f      	cmp	r7, r3
 8002b0a:	d05f      	beq.n	8002bcc <__aeabi_dsub+0x540>
 8002b0c:	2580      	movs	r5, #128	; 0x80
 8002b0e:	042d      	lsls	r5, r5, #16
 8002b10:	4273      	negs	r3, r6
 8002b12:	4329      	orrs	r1, r5
 8002b14:	e720      	b.n	8002958 <__aeabi_dsub+0x2cc>
 8002b16:	2e00      	cmp	r6, #0
 8002b18:	d10c      	bne.n	8002b34 <__aeabi_dsub+0x4a8>
 8002b1a:	2f00      	cmp	r7, #0
 8002b1c:	d100      	bne.n	8002b20 <__aeabi_dsub+0x494>
 8002b1e:	e0d0      	b.n	8002cc2 <__aeabi_dsub+0x636>
 8002b20:	465c      	mov	r4, fp
 8002b22:	4661      	mov	r1, ip
 8002b24:	4691      	mov	r9, r2
 8002b26:	4d7b      	ldr	r5, [pc, #492]	; (8002d14 <__aeabi_dsub+0x688>)
 8002b28:	e6cd      	b.n	80028c6 <__aeabi_dsub+0x23a>
 8002b2a:	4f7a      	ldr	r7, [pc, #488]	; (8002d14 <__aeabi_dsub+0x688>)
 8002b2c:	42be      	cmp	r6, r7
 8002b2e:	d01c      	beq.n	8002b6a <__aeabi_dsub+0x4de>
 8002b30:	001e      	movs	r6, r3
 8002b32:	e665      	b.n	8002800 <__aeabi_dsub+0x174>
 8002b34:	2f00      	cmp	r7, #0
 8002b36:	d018      	beq.n	8002b6a <__aeabi_dsub+0x4de>
 8002b38:	08c0      	lsrs	r0, r0, #3
 8002b3a:	074e      	lsls	r6, r1, #29
 8002b3c:	4306      	orrs	r6, r0
 8002b3e:	2080      	movs	r0, #128	; 0x80
 8002b40:	08c9      	lsrs	r1, r1, #3
 8002b42:	0300      	lsls	r0, r0, #12
 8002b44:	4201      	tst	r1, r0
 8002b46:	d008      	beq.n	8002b5a <__aeabi_dsub+0x4ce>
 8002b48:	4663      	mov	r3, ip
 8002b4a:	08dc      	lsrs	r4, r3, #3
 8002b4c:	4204      	tst	r4, r0
 8002b4e:	d104      	bne.n	8002b5a <__aeabi_dsub+0x4ce>
 8002b50:	0021      	movs	r1, r4
 8002b52:	46da      	mov	sl, fp
 8002b54:	08d2      	lsrs	r2, r2, #3
 8002b56:	075e      	lsls	r6, r3, #29
 8002b58:	4316      	orrs	r6, r2
 8002b5a:	00f3      	lsls	r3, r6, #3
 8002b5c:	4699      	mov	r9, r3
 8002b5e:	2401      	movs	r4, #1
 8002b60:	4653      	mov	r3, sl
 8002b62:	00c9      	lsls	r1, r1, #3
 8002b64:	0f72      	lsrs	r2, r6, #29
 8002b66:	4311      	orrs	r1, r2
 8002b68:	401c      	ands	r4, r3
 8002b6a:	4d6a      	ldr	r5, [pc, #424]	; (8002d14 <__aeabi_dsub+0x688>)
 8002b6c:	e6ab      	b.n	80028c6 <__aeabi_dsub+0x23a>
 8002b6e:	001d      	movs	r5, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	2700      	movs	r7, #0
 8002b74:	e6b4      	b.n	80028e0 <__aeabi_dsub+0x254>
 8002b76:	2d00      	cmp	r5, #0
 8002b78:	d159      	bne.n	8002c2e <__aeabi_dsub+0x5a2>
 8002b7a:	000b      	movs	r3, r1
 8002b7c:	4303      	orrs	r3, r0
 8002b7e:	d100      	bne.n	8002b82 <__aeabi_dsub+0x4f6>
 8002b80:	e6d6      	b.n	8002930 <__aeabi_dsub+0x2a4>
 8002b82:	1c73      	adds	r3, r6, #1
 8002b84:	d100      	bne.n	8002b88 <__aeabi_dsub+0x4fc>
 8002b86:	e0b2      	b.n	8002cee <__aeabi_dsub+0x662>
 8002b88:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <__aeabi_dsub+0x688>)
 8002b8a:	429f      	cmp	r7, r3
 8002b8c:	d01e      	beq.n	8002bcc <__aeabi_dsub+0x540>
 8002b8e:	43f3      	mvns	r3, r6
 8002b90:	2b38      	cmp	r3, #56	; 0x38
 8002b92:	dc6f      	bgt.n	8002c74 <__aeabi_dsub+0x5e8>
 8002b94:	2b1f      	cmp	r3, #31
 8002b96:	dd00      	ble.n	8002b9a <__aeabi_dsub+0x50e>
 8002b98:	e097      	b.n	8002cca <__aeabi_dsub+0x63e>
 8002b9a:	2520      	movs	r5, #32
 8002b9c:	000e      	movs	r6, r1
 8002b9e:	1aed      	subs	r5, r5, r3
 8002ba0:	40ae      	lsls	r6, r5
 8002ba2:	46b0      	mov	r8, r6
 8002ba4:	0006      	movs	r6, r0
 8002ba6:	46aa      	mov	sl, r5
 8002ba8:	40de      	lsrs	r6, r3
 8002baa:	4645      	mov	r5, r8
 8002bac:	4335      	orrs	r5, r6
 8002bae:	002e      	movs	r6, r5
 8002bb0:	4655      	mov	r5, sl
 8002bb2:	40a8      	lsls	r0, r5
 8002bb4:	40d9      	lsrs	r1, r3
 8002bb6:	1e45      	subs	r5, r0, #1
 8002bb8:	41a8      	sbcs	r0, r5
 8002bba:	448c      	add	ip, r1
 8002bbc:	4306      	orrs	r6, r0
 8002bbe:	18b6      	adds	r6, r6, r2
 8002bc0:	4296      	cmp	r6, r2
 8002bc2:	4192      	sbcs	r2, r2
 8002bc4:	4251      	negs	r1, r2
 8002bc6:	4461      	add	r1, ip
 8002bc8:	003d      	movs	r5, r7
 8002bca:	e625      	b.n	8002818 <__aeabi_dsub+0x18c>
 8002bcc:	003d      	movs	r5, r7
 8002bce:	4661      	mov	r1, ip
 8002bd0:	4691      	mov	r9, r2
 8002bd2:	e678      	b.n	80028c6 <__aeabi_dsub+0x23a>
 8002bd4:	000b      	movs	r3, r1
 8002bd6:	4303      	orrs	r3, r0
 8002bd8:	2d00      	cmp	r5, #0
 8002bda:	d000      	beq.n	8002bde <__aeabi_dsub+0x552>
 8002bdc:	e655      	b.n	800288a <__aeabi_dsub+0x1fe>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f5      	beq.n	8002bce <__aeabi_dsub+0x542>
 8002be2:	4663      	mov	r3, ip
 8002be4:	4313      	orrs	r3, r2
 8002be6:	d100      	bne.n	8002bea <__aeabi_dsub+0x55e>
 8002be8:	e66d      	b.n	80028c6 <__aeabi_dsub+0x23a>
 8002bea:	1886      	adds	r6, r0, r2
 8002bec:	4286      	cmp	r6, r0
 8002bee:	4180      	sbcs	r0, r0
 8002bf0:	4461      	add	r1, ip
 8002bf2:	4240      	negs	r0, r0
 8002bf4:	1809      	adds	r1, r1, r0
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	020b      	lsls	r3, r1, #8
 8002bfa:	d400      	bmi.n	8002bfe <__aeabi_dsub+0x572>
 8002bfc:	e6d0      	b.n	80029a0 <__aeabi_dsub+0x314>
 8002bfe:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <__aeabi_dsub+0x68c>)
 8002c00:	3501      	adds	r5, #1
 8002c02:	4019      	ands	r1, r3
 8002c04:	e5b2      	b.n	800276c <__aeabi_dsub+0xe0>
 8002c06:	46b1      	mov	r9, r6
 8002c08:	e65d      	b.n	80028c6 <__aeabi_dsub+0x23a>
 8002c0a:	0033      	movs	r3, r6
 8002c0c:	4667      	mov	r7, ip
 8002c0e:	3b20      	subs	r3, #32
 8002c10:	40df      	lsrs	r7, r3
 8002c12:	003b      	movs	r3, r7
 8002c14:	2e20      	cmp	r6, #32
 8002c16:	d005      	beq.n	8002c24 <__aeabi_dsub+0x598>
 8002c18:	2740      	movs	r7, #64	; 0x40
 8002c1a:	1bbf      	subs	r7, r7, r6
 8002c1c:	4666      	mov	r6, ip
 8002c1e:	40be      	lsls	r6, r7
 8002c20:	4332      	orrs	r2, r6
 8002c22:	4690      	mov	r8, r2
 8002c24:	4646      	mov	r6, r8
 8002c26:	1e72      	subs	r2, r6, #1
 8002c28:	4196      	sbcs	r6, r2
 8002c2a:	4333      	orrs	r3, r6
 8002c2c:	e5ef      	b.n	800280e <__aeabi_dsub+0x182>
 8002c2e:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <__aeabi_dsub+0x688>)
 8002c30:	429f      	cmp	r7, r3
 8002c32:	d0cb      	beq.n	8002bcc <__aeabi_dsub+0x540>
 8002c34:	2580      	movs	r5, #128	; 0x80
 8002c36:	042d      	lsls	r5, r5, #16
 8002c38:	4273      	negs	r3, r6
 8002c3a:	4329      	orrs	r1, r5
 8002c3c:	e7a8      	b.n	8002b90 <__aeabi_dsub+0x504>
 8002c3e:	4308      	orrs	r0, r1
 8002c40:	1e41      	subs	r1, r0, #1
 8002c42:	4188      	sbcs	r0, r1
 8002c44:	e6a2      	b.n	800298c <__aeabi_dsub+0x300>
 8002c46:	2f00      	cmp	r7, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x5c0>
 8002c4a:	e63c      	b.n	80028c6 <__aeabi_dsub+0x23a>
 8002c4c:	4663      	mov	r3, ip
 8002c4e:	1a86      	subs	r6, r0, r2
 8002c50:	1acf      	subs	r7, r1, r3
 8002c52:	42b0      	cmp	r0, r6
 8002c54:	419b      	sbcs	r3, r3
 8002c56:	425b      	negs	r3, r3
 8002c58:	1afb      	subs	r3, r7, r3
 8002c5a:	4698      	mov	r8, r3
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	d54e      	bpl.n	8002cfe <__aeabi_dsub+0x672>
 8002c60:	1a16      	subs	r6, r2, r0
 8002c62:	4663      	mov	r3, ip
 8002c64:	42b2      	cmp	r2, r6
 8002c66:	4192      	sbcs	r2, r2
 8002c68:	1a59      	subs	r1, r3, r1
 8002c6a:	4252      	negs	r2, r2
 8002c6c:	1a89      	subs	r1, r1, r2
 8002c6e:	465c      	mov	r4, fp
 8002c70:	2200      	movs	r2, #0
 8002c72:	e57b      	b.n	800276c <__aeabi_dsub+0xe0>
 8002c74:	4301      	orrs	r1, r0
 8002c76:	000e      	movs	r6, r1
 8002c78:	1e71      	subs	r1, r6, #1
 8002c7a:	418e      	sbcs	r6, r1
 8002c7c:	e79f      	b.n	8002bbe <__aeabi_dsub+0x532>
 8002c7e:	001d      	movs	r5, r3
 8002c80:	000e      	movs	r6, r1
 8002c82:	3d20      	subs	r5, #32
 8002c84:	40ee      	lsrs	r6, r5
 8002c86:	46b0      	mov	r8, r6
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_dsub+0x60a>
 8002c8c:	2540      	movs	r5, #64	; 0x40
 8002c8e:	1aeb      	subs	r3, r5, r3
 8002c90:	4099      	lsls	r1, r3
 8002c92:	4308      	orrs	r0, r1
 8002c94:	4681      	mov	r9, r0
 8002c96:	4648      	mov	r0, r9
 8002c98:	4643      	mov	r3, r8
 8002c9a:	1e41      	subs	r1, r0, #1
 8002c9c:	4188      	sbcs	r0, r1
 8002c9e:	4318      	orrs	r0, r3
 8002ca0:	e674      	b.n	800298c <__aeabi_dsub+0x300>
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2400      	movs	r4, #0
 8002ca6:	e617      	b.n	80028d8 <__aeabi_dsub+0x24c>
 8002ca8:	1a16      	subs	r6, r2, r0
 8002caa:	4663      	mov	r3, ip
 8002cac:	42b2      	cmp	r2, r6
 8002cae:	4192      	sbcs	r2, r2
 8002cb0:	1a59      	subs	r1, r3, r1
 8002cb2:	4252      	negs	r2, r2
 8002cb4:	1a89      	subs	r1, r1, r2
 8002cb6:	003d      	movs	r5, r7
 8002cb8:	e525      	b.n	8002706 <__aeabi_dsub+0x7a>
 8002cba:	4661      	mov	r1, ip
 8002cbc:	4691      	mov	r9, r2
 8002cbe:	4d15      	ldr	r5, [pc, #84]	; (8002d14 <__aeabi_dsub+0x688>)
 8002cc0:	e601      	b.n	80028c6 <__aeabi_dsub+0x23a>
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	2400      	movs	r4, #0
 8002cc6:	0312      	lsls	r2, r2, #12
 8002cc8:	e679      	b.n	80029be <__aeabi_dsub+0x332>
 8002cca:	001d      	movs	r5, r3
 8002ccc:	000e      	movs	r6, r1
 8002cce:	3d20      	subs	r5, #32
 8002cd0:	40ee      	lsrs	r6, r5
 8002cd2:	46b0      	mov	r8, r6
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d004      	beq.n	8002ce2 <__aeabi_dsub+0x656>
 8002cd8:	2540      	movs	r5, #64	; 0x40
 8002cda:	1aeb      	subs	r3, r5, r3
 8002cdc:	4099      	lsls	r1, r3
 8002cde:	4308      	orrs	r0, r1
 8002ce0:	4681      	mov	r9, r0
 8002ce2:	464e      	mov	r6, r9
 8002ce4:	4643      	mov	r3, r8
 8002ce6:	1e71      	subs	r1, r6, #1
 8002ce8:	418e      	sbcs	r6, r1
 8002cea:	431e      	orrs	r6, r3
 8002cec:	e767      	b.n	8002bbe <__aeabi_dsub+0x532>
 8002cee:	1886      	adds	r6, r0, r2
 8002cf0:	4296      	cmp	r6, r2
 8002cf2:	419b      	sbcs	r3, r3
 8002cf4:	4461      	add	r1, ip
 8002cf6:	425b      	negs	r3, r3
 8002cf8:	18c9      	adds	r1, r1, r3
 8002cfa:	003d      	movs	r5, r7
 8002cfc:	e58c      	b.n	8002818 <__aeabi_dsub+0x18c>
 8002cfe:	4647      	mov	r7, r8
 8002d00:	4337      	orrs	r7, r6
 8002d02:	d0ce      	beq.n	8002ca2 <__aeabi_dsub+0x616>
 8002d04:	2207      	movs	r2, #7
 8002d06:	4641      	mov	r1, r8
 8002d08:	4032      	ands	r2, r6
 8002d0a:	e649      	b.n	80029a0 <__aeabi_dsub+0x314>
 8002d0c:	2700      	movs	r7, #0
 8002d0e:	003a      	movs	r2, r7
 8002d10:	e5e6      	b.n	80028e0 <__aeabi_dsub+0x254>
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	000007ff 	.word	0x000007ff
 8002d18:	ff7fffff 	.word	0xff7fffff

08002d1c <__aeabi_dcmpun>:
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	4e0c      	ldr	r6, [pc, #48]	; (8002d50 <__aeabi_dcmpun+0x34>)
 8002d20:	030d      	lsls	r5, r1, #12
 8002d22:	031c      	lsls	r4, r3, #12
 8002d24:	0049      	lsls	r1, r1, #1
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	0b2d      	lsrs	r5, r5, #12
 8002d2a:	0d49      	lsrs	r1, r1, #21
 8002d2c:	0b24      	lsrs	r4, r4, #12
 8002d2e:	0d5b      	lsrs	r3, r3, #21
 8002d30:	42b1      	cmp	r1, r6
 8002d32:	d008      	beq.n	8002d46 <__aeabi_dcmpun+0x2a>
 8002d34:	4906      	ldr	r1, [pc, #24]	; (8002d50 <__aeabi_dcmpun+0x34>)
 8002d36:	2000      	movs	r0, #0
 8002d38:	428b      	cmp	r3, r1
 8002d3a:	d103      	bne.n	8002d44 <__aeabi_dcmpun+0x28>
 8002d3c:	4314      	orrs	r4, r2
 8002d3e:	0020      	movs	r0, r4
 8002d40:	1e44      	subs	r4, r0, #1
 8002d42:	41a0      	sbcs	r0, r4
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
 8002d46:	4305      	orrs	r5, r0
 8002d48:	2001      	movs	r0, #1
 8002d4a:	2d00      	cmp	r5, #0
 8002d4c:	d1fa      	bne.n	8002d44 <__aeabi_dcmpun+0x28>
 8002d4e:	e7f1      	b.n	8002d34 <__aeabi_dcmpun+0x18>
 8002d50:	000007ff 	.word	0x000007ff

08002d54 <__aeabi_d2iz>:
 8002d54:	b530      	push	{r4, r5, lr}
 8002d56:	4d14      	ldr	r5, [pc, #80]	; (8002da8 <__aeabi_d2iz+0x54>)
 8002d58:	030a      	lsls	r2, r1, #12
 8002d5a:	004b      	lsls	r3, r1, #1
 8002d5c:	0b12      	lsrs	r2, r2, #12
 8002d5e:	0d5b      	lsrs	r3, r3, #21
 8002d60:	0fc9      	lsrs	r1, r1, #31
 8002d62:	2400      	movs	r4, #0
 8002d64:	42ab      	cmp	r3, r5
 8002d66:	dd11      	ble.n	8002d8c <__aeabi_d2iz+0x38>
 8002d68:	4c10      	ldr	r4, [pc, #64]	; (8002dac <__aeabi_d2iz+0x58>)
 8002d6a:	42a3      	cmp	r3, r4
 8002d6c:	dc10      	bgt.n	8002d90 <__aeabi_d2iz+0x3c>
 8002d6e:	2480      	movs	r4, #128	; 0x80
 8002d70:	0364      	lsls	r4, r4, #13
 8002d72:	4322      	orrs	r2, r4
 8002d74:	4c0e      	ldr	r4, [pc, #56]	; (8002db0 <__aeabi_d2iz+0x5c>)
 8002d76:	1ae4      	subs	r4, r4, r3
 8002d78:	2c1f      	cmp	r4, #31
 8002d7a:	dd0c      	ble.n	8002d96 <__aeabi_d2iz+0x42>
 8002d7c:	480d      	ldr	r0, [pc, #52]	; (8002db4 <__aeabi_d2iz+0x60>)
 8002d7e:	1ac3      	subs	r3, r0, r3
 8002d80:	40da      	lsrs	r2, r3
 8002d82:	0013      	movs	r3, r2
 8002d84:	425c      	negs	r4, r3
 8002d86:	2900      	cmp	r1, #0
 8002d88:	d100      	bne.n	8002d8c <__aeabi_d2iz+0x38>
 8002d8a:	001c      	movs	r4, r3
 8002d8c:	0020      	movs	r0, r4
 8002d8e:	bd30      	pop	{r4, r5, pc}
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <__aeabi_d2iz+0x64>)
 8002d92:	18cc      	adds	r4, r1, r3
 8002d94:	e7fa      	b.n	8002d8c <__aeabi_d2iz+0x38>
 8002d96:	4d09      	ldr	r5, [pc, #36]	; (8002dbc <__aeabi_d2iz+0x68>)
 8002d98:	40e0      	lsrs	r0, r4
 8002d9a:	46ac      	mov	ip, r5
 8002d9c:	4463      	add	r3, ip
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	0013      	movs	r3, r2
 8002da2:	4303      	orrs	r3, r0
 8002da4:	e7ee      	b.n	8002d84 <__aeabi_d2iz+0x30>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	000003fe 	.word	0x000003fe
 8002dac:	0000041d 	.word	0x0000041d
 8002db0:	00000433 	.word	0x00000433
 8002db4:	00000413 	.word	0x00000413
 8002db8:	7fffffff 	.word	0x7fffffff
 8002dbc:	fffffbed 	.word	0xfffffbed

08002dc0 <__aeabi_i2d>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d02d      	beq.n	8002e22 <__aeabi_i2d+0x62>
 8002dc6:	17c3      	asrs	r3, r0, #31
 8002dc8:	18c5      	adds	r5, r0, r3
 8002dca:	405d      	eors	r5, r3
 8002dcc:	0fc4      	lsrs	r4, r0, #31
 8002dce:	0028      	movs	r0, r5
 8002dd0:	f000 f938 	bl	8003044 <__clzsi2>
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <__aeabi_i2d+0x6c>)
 8002dd6:	1a1b      	subs	r3, r3, r0
 8002dd8:	055b      	lsls	r3, r3, #21
 8002dda:	0d5b      	lsrs	r3, r3, #21
 8002ddc:	280a      	cmp	r0, #10
 8002dde:	dd15      	ble.n	8002e0c <__aeabi_i2d+0x4c>
 8002de0:	380b      	subs	r0, #11
 8002de2:	4085      	lsls	r5, r0
 8002de4:	2200      	movs	r2, #0
 8002de6:	032d      	lsls	r5, r5, #12
 8002de8:	0b2d      	lsrs	r5, r5, #12
 8002dea:	2100      	movs	r1, #0
 8002dec:	0010      	movs	r0, r2
 8002dee:	032d      	lsls	r5, r5, #12
 8002df0:	0d0a      	lsrs	r2, r1, #20
 8002df2:	0b2d      	lsrs	r5, r5, #12
 8002df4:	0512      	lsls	r2, r2, #20
 8002df6:	432a      	orrs	r2, r5
 8002df8:	4d0d      	ldr	r5, [pc, #52]	; (8002e30 <__aeabi_i2d+0x70>)
 8002dfa:	051b      	lsls	r3, r3, #20
 8002dfc:	402a      	ands	r2, r5
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	07e4      	lsls	r4, r4, #31
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	4323      	orrs	r3, r4
 8002e08:	0019      	movs	r1, r3
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3215      	adds	r2, #21
 8002e12:	4091      	lsls	r1, r2
 8002e14:	000a      	movs	r2, r1
 8002e16:	210b      	movs	r1, #11
 8002e18:	1a08      	subs	r0, r1, r0
 8002e1a:	40c5      	lsrs	r5, r0
 8002e1c:	032d      	lsls	r5, r5, #12
 8002e1e:	0b2d      	lsrs	r5, r5, #12
 8002e20:	e7e3      	b.n	8002dea <__aeabi_i2d+0x2a>
 8002e22:	2400      	movs	r4, #0
 8002e24:	2300      	movs	r3, #0
 8002e26:	2500      	movs	r5, #0
 8002e28:	2200      	movs	r2, #0
 8002e2a:	e7de      	b.n	8002dea <__aeabi_i2d+0x2a>
 8002e2c:	0000041e 	.word	0x0000041e
 8002e30:	800fffff 	.word	0x800fffff

08002e34 <__aeabi_ui2d>:
 8002e34:	b510      	push	{r4, lr}
 8002e36:	1e04      	subs	r4, r0, #0
 8002e38:	d025      	beq.n	8002e86 <__aeabi_ui2d+0x52>
 8002e3a:	f000 f903 	bl	8003044 <__clzsi2>
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <__aeabi_ui2d+0x5c>)
 8002e40:	1a1b      	subs	r3, r3, r0
 8002e42:	055b      	lsls	r3, r3, #21
 8002e44:	0d5b      	lsrs	r3, r3, #21
 8002e46:	280a      	cmp	r0, #10
 8002e48:	dd12      	ble.n	8002e70 <__aeabi_ui2d+0x3c>
 8002e4a:	380b      	subs	r0, #11
 8002e4c:	4084      	lsls	r4, r0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	0324      	lsls	r4, r4, #12
 8002e52:	0b24      	lsrs	r4, r4, #12
 8002e54:	2100      	movs	r1, #0
 8002e56:	0010      	movs	r0, r2
 8002e58:	0324      	lsls	r4, r4, #12
 8002e5a:	0d0a      	lsrs	r2, r1, #20
 8002e5c:	0b24      	lsrs	r4, r4, #12
 8002e5e:	0512      	lsls	r2, r2, #20
 8002e60:	4322      	orrs	r2, r4
 8002e62:	4c0c      	ldr	r4, [pc, #48]	; (8002e94 <__aeabi_ui2d+0x60>)
 8002e64:	051b      	lsls	r3, r3, #20
 8002e66:	4022      	ands	r2, r4
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	0859      	lsrs	r1, r3, #1
 8002e6e:	bd10      	pop	{r4, pc}
 8002e70:	0002      	movs	r2, r0
 8002e72:	0021      	movs	r1, r4
 8002e74:	3215      	adds	r2, #21
 8002e76:	4091      	lsls	r1, r2
 8002e78:	000a      	movs	r2, r1
 8002e7a:	210b      	movs	r1, #11
 8002e7c:	1a08      	subs	r0, r1, r0
 8002e7e:	40c4      	lsrs	r4, r0
 8002e80:	0324      	lsls	r4, r4, #12
 8002e82:	0b24      	lsrs	r4, r4, #12
 8002e84:	e7e6      	b.n	8002e54 <__aeabi_ui2d+0x20>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2400      	movs	r4, #0
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	e7e2      	b.n	8002e54 <__aeabi_ui2d+0x20>
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	0000041e 	.word	0x0000041e
 8002e94:	800fffff 	.word	0x800fffff

08002e98 <__aeabi_f2d>:
 8002e98:	0041      	lsls	r1, r0, #1
 8002e9a:	0e09      	lsrs	r1, r1, #24
 8002e9c:	1c4b      	adds	r3, r1, #1
 8002e9e:	b570      	push	{r4, r5, r6, lr}
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	0246      	lsls	r6, r0, #9
 8002ea4:	0a75      	lsrs	r5, r6, #9
 8002ea6:	0fc4      	lsrs	r4, r0, #31
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	dd14      	ble.n	8002ed6 <__aeabi_f2d+0x3e>
 8002eac:	23e0      	movs	r3, #224	; 0xe0
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	076d      	lsls	r5, r5, #29
 8002eb2:	0b36      	lsrs	r6, r6, #12
 8002eb4:	18cb      	adds	r3, r1, r3
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	0d0a      	lsrs	r2, r1, #20
 8002eba:	0028      	movs	r0, r5
 8002ebc:	0512      	lsls	r2, r2, #20
 8002ebe:	4d1c      	ldr	r5, [pc, #112]	; (8002f30 <__aeabi_f2d+0x98>)
 8002ec0:	4332      	orrs	r2, r6
 8002ec2:	055b      	lsls	r3, r3, #21
 8002ec4:	402a      	ands	r2, r5
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	07e4      	lsls	r4, r4, #31
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	4323      	orrs	r3, r4
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	bd70      	pop	{r4, r5, r6, pc}
 8002ed6:	2900      	cmp	r1, #0
 8002ed8:	d114      	bne.n	8002f04 <__aeabi_f2d+0x6c>
 8002eda:	2d00      	cmp	r5, #0
 8002edc:	d01e      	beq.n	8002f1c <__aeabi_f2d+0x84>
 8002ede:	0028      	movs	r0, r5
 8002ee0:	f000 f8b0 	bl	8003044 <__clzsi2>
 8002ee4:	280a      	cmp	r0, #10
 8002ee6:	dc1c      	bgt.n	8002f22 <__aeabi_f2d+0x8a>
 8002ee8:	230b      	movs	r3, #11
 8002eea:	002a      	movs	r2, r5
 8002eec:	1a1b      	subs	r3, r3, r0
 8002eee:	40da      	lsrs	r2, r3
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	3315      	adds	r3, #21
 8002ef4:	409d      	lsls	r5, r3
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <__aeabi_f2d+0x9c>)
 8002ef8:	0312      	lsls	r2, r2, #12
 8002efa:	1a1b      	subs	r3, r3, r0
 8002efc:	055b      	lsls	r3, r3, #21
 8002efe:	0b16      	lsrs	r6, r2, #12
 8002f00:	0d5b      	lsrs	r3, r3, #21
 8002f02:	e7d8      	b.n	8002eb6 <__aeabi_f2d+0x1e>
 8002f04:	2d00      	cmp	r5, #0
 8002f06:	d006      	beq.n	8002f16 <__aeabi_f2d+0x7e>
 8002f08:	0b32      	lsrs	r2, r6, #12
 8002f0a:	2680      	movs	r6, #128	; 0x80
 8002f0c:	0336      	lsls	r6, r6, #12
 8002f0e:	076d      	lsls	r5, r5, #29
 8002f10:	4316      	orrs	r6, r2
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <__aeabi_f2d+0xa0>)
 8002f14:	e7cf      	b.n	8002eb6 <__aeabi_f2d+0x1e>
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <__aeabi_f2d+0xa0>)
 8002f18:	2600      	movs	r6, #0
 8002f1a:	e7cc      	b.n	8002eb6 <__aeabi_f2d+0x1e>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2600      	movs	r6, #0
 8002f20:	e7c9      	b.n	8002eb6 <__aeabi_f2d+0x1e>
 8002f22:	0003      	movs	r3, r0
 8002f24:	002a      	movs	r2, r5
 8002f26:	3b0b      	subs	r3, #11
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	2500      	movs	r5, #0
 8002f2c:	e7e3      	b.n	8002ef6 <__aeabi_f2d+0x5e>
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	800fffff 	.word	0x800fffff
 8002f34:	00000389 	.word	0x00000389
 8002f38:	000007ff 	.word	0x000007ff

08002f3c <__aeabi_d2f>:
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	004c      	lsls	r4, r1, #1
 8002f40:	0d64      	lsrs	r4, r4, #21
 8002f42:	030b      	lsls	r3, r1, #12
 8002f44:	1c62      	adds	r2, r4, #1
 8002f46:	0a5b      	lsrs	r3, r3, #9
 8002f48:	0f46      	lsrs	r6, r0, #29
 8002f4a:	0552      	lsls	r2, r2, #21
 8002f4c:	0fc9      	lsrs	r1, r1, #31
 8002f4e:	431e      	orrs	r6, r3
 8002f50:	00c5      	lsls	r5, r0, #3
 8002f52:	0d52      	lsrs	r2, r2, #21
 8002f54:	2a01      	cmp	r2, #1
 8002f56:	dd29      	ble.n	8002fac <__aeabi_d2f+0x70>
 8002f58:	4b37      	ldr	r3, [pc, #220]	; (8003038 <__aeabi_d2f+0xfc>)
 8002f5a:	18e7      	adds	r7, r4, r3
 8002f5c:	2ffe      	cmp	r7, #254	; 0xfe
 8002f5e:	dc1c      	bgt.n	8002f9a <__aeabi_d2f+0x5e>
 8002f60:	2f00      	cmp	r7, #0
 8002f62:	dd3b      	ble.n	8002fdc <__aeabi_d2f+0xa0>
 8002f64:	0180      	lsls	r0, r0, #6
 8002f66:	1e43      	subs	r3, r0, #1
 8002f68:	4198      	sbcs	r0, r3
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	00f3      	lsls	r3, r6, #3
 8002f6e:	0f6d      	lsrs	r5, r5, #29
 8002f70:	4303      	orrs	r3, r0
 8002f72:	432b      	orrs	r3, r5
 8002f74:	401a      	ands	r2, r3
 8002f76:	2a00      	cmp	r2, #0
 8002f78:	d004      	beq.n	8002f84 <__aeabi_d2f+0x48>
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	2a04      	cmp	r2, #4
 8002f80:	d000      	beq.n	8002f84 <__aeabi_d2f+0x48>
 8002f82:	3304      	adds	r3, #4
 8002f84:	2280      	movs	r2, #128	; 0x80
 8002f86:	04d2      	lsls	r2, r2, #19
 8002f88:	401a      	ands	r2, r3
 8002f8a:	d024      	beq.n	8002fd6 <__aeabi_d2f+0x9a>
 8002f8c:	3701      	adds	r7, #1
 8002f8e:	b2fa      	uxtb	r2, r7
 8002f90:	2fff      	cmp	r7, #255	; 0xff
 8002f92:	d002      	beq.n	8002f9a <__aeabi_d2f+0x5e>
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	0a58      	lsrs	r0, r3, #9
 8002f98:	e001      	b.n	8002f9e <__aeabi_d2f+0x62>
 8002f9a:	22ff      	movs	r2, #255	; 0xff
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	0240      	lsls	r0, r0, #9
 8002fa0:	05d2      	lsls	r2, r2, #23
 8002fa2:	0a40      	lsrs	r0, r0, #9
 8002fa4:	07c9      	lsls	r1, r1, #31
 8002fa6:	4310      	orrs	r0, r2
 8002fa8:	4308      	orrs	r0, r1
 8002faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fac:	4335      	orrs	r5, r6
 8002fae:	2c00      	cmp	r4, #0
 8002fb0:	d104      	bne.n	8002fbc <__aeabi_d2f+0x80>
 8002fb2:	2d00      	cmp	r5, #0
 8002fb4:	d10a      	bne.n	8002fcc <__aeabi_d2f+0x90>
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2000      	movs	r0, #0
 8002fba:	e7f0      	b.n	8002f9e <__aeabi_d2f+0x62>
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	d0ec      	beq.n	8002f9a <__aeabi_d2f+0x5e>
 8002fc0:	2080      	movs	r0, #128	; 0x80
 8002fc2:	03c0      	lsls	r0, r0, #15
 8002fc4:	4330      	orrs	r0, r6
 8002fc6:	22ff      	movs	r2, #255	; 0xff
 8002fc8:	e7e9      	b.n	8002f9e <__aeabi_d2f+0x62>
 8002fca:	2400      	movs	r4, #0
 8002fcc:	2300      	movs	r3, #0
 8002fce:	025b      	lsls	r3, r3, #9
 8002fd0:	0a58      	lsrs	r0, r3, #9
 8002fd2:	b2e2      	uxtb	r2, r4
 8002fd4:	e7e3      	b.n	8002f9e <__aeabi_d2f+0x62>
 8002fd6:	08db      	lsrs	r3, r3, #3
 8002fd8:	003c      	movs	r4, r7
 8002fda:	e7f8      	b.n	8002fce <__aeabi_d2f+0x92>
 8002fdc:	003b      	movs	r3, r7
 8002fde:	3317      	adds	r3, #23
 8002fe0:	dbf3      	blt.n	8002fca <__aeabi_d2f+0x8e>
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	4333      	orrs	r3, r6
 8002fe8:	261e      	movs	r6, #30
 8002fea:	1bf6      	subs	r6, r6, r7
 8002fec:	2e1f      	cmp	r6, #31
 8002fee:	dd14      	ble.n	800301a <__aeabi_d2f+0xde>
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	4252      	negs	r2, r2
 8002ff4:	1bd7      	subs	r7, r2, r7
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	40fa      	lsrs	r2, r7
 8002ffa:	0017      	movs	r7, r2
 8002ffc:	2e20      	cmp	r6, #32
 8002ffe:	d004      	beq.n	800300a <__aeabi_d2f+0xce>
 8003000:	4a0e      	ldr	r2, [pc, #56]	; (800303c <__aeabi_d2f+0x100>)
 8003002:	4694      	mov	ip, r2
 8003004:	4464      	add	r4, ip
 8003006:	40a3      	lsls	r3, r4
 8003008:	431d      	orrs	r5, r3
 800300a:	002b      	movs	r3, r5
 800300c:	1e5d      	subs	r5, r3, #1
 800300e:	41ab      	sbcs	r3, r5
 8003010:	2207      	movs	r2, #7
 8003012:	433b      	orrs	r3, r7
 8003014:	401a      	ands	r2, r3
 8003016:	2700      	movs	r7, #0
 8003018:	e7ad      	b.n	8002f76 <__aeabi_d2f+0x3a>
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <__aeabi_d2f+0x104>)
 800301c:	0028      	movs	r0, r5
 800301e:	18a2      	adds	r2, r4, r2
 8003020:	4095      	lsls	r5, r2
 8003022:	4093      	lsls	r3, r2
 8003024:	1e6c      	subs	r4, r5, #1
 8003026:	41a5      	sbcs	r5, r4
 8003028:	40f0      	lsrs	r0, r6
 800302a:	2207      	movs	r2, #7
 800302c:	432b      	orrs	r3, r5
 800302e:	4303      	orrs	r3, r0
 8003030:	401a      	ands	r2, r3
 8003032:	2700      	movs	r7, #0
 8003034:	e79f      	b.n	8002f76 <__aeabi_d2f+0x3a>
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	fffffc80 	.word	0xfffffc80
 800303c:	fffffca2 	.word	0xfffffca2
 8003040:	fffffc82 	.word	0xfffffc82

08003044 <__clzsi2>:
 8003044:	211c      	movs	r1, #28
 8003046:	2301      	movs	r3, #1
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	4298      	cmp	r0, r3
 800304c:	d301      	bcc.n	8003052 <__clzsi2+0xe>
 800304e:	0c00      	lsrs	r0, r0, #16
 8003050:	3910      	subs	r1, #16
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	4298      	cmp	r0, r3
 8003056:	d301      	bcc.n	800305c <__clzsi2+0x18>
 8003058:	0a00      	lsrs	r0, r0, #8
 800305a:	3908      	subs	r1, #8
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	4298      	cmp	r0, r3
 8003060:	d301      	bcc.n	8003066 <__clzsi2+0x22>
 8003062:	0900      	lsrs	r0, r0, #4
 8003064:	3904      	subs	r1, #4
 8003066:	a202      	add	r2, pc, #8	; (adr r2, 8003070 <__clzsi2+0x2c>)
 8003068:	5c10      	ldrb	r0, [r2, r0]
 800306a:	1840      	adds	r0, r0, r1
 800306c:	4770      	bx	lr
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	02020304 	.word	0x02020304
 8003074:	01010101 	.word	0x01010101
	...

08003080 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <HAL_Init+0x24>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_Init+0x24>)
 800308a:	2110      	movs	r1, #16
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003090:	2000      	movs	r0, #0
 8003092:	f000 f809 	bl	80030a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003096:	f002 ffab 	bl	8005ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	40022000 	.word	0x40022000

080030a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80030b0:	f001 fce2 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 80030b4:	0002      	movs	r2, r0
 80030b6:	23fa      	movs	r3, #250	; 0xfa
 80030b8:	0099      	lsls	r1, r3, #2
 80030ba:	0010      	movs	r0, r2
 80030bc:	f7fd f836 	bl	800012c <__udivsi3>
 80030c0:	0003      	movs	r3, r0
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 f90d 	bl	80032e2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	2301      	movs	r3, #1
 80030cc:	425b      	negs	r3, r3
 80030ce:	2200      	movs	r2, #0
 80030d0:	0018      	movs	r0, r3
 80030d2:	f000 f8e1 	bl	8003298 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b002      	add	sp, #8
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  uwTick++;
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_IncTick+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	4b02      	ldr	r3, [pc, #8]	; (80030f4 <HAL_IncTick+0x14>)
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	2000020c 	.word	0x2000020c

080030f8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  return uwTick;
 80030fc:	4b02      	ldr	r3, [pc, #8]	; (8003108 <HAL_GetTick+0x10>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	2000020c 	.word	0x2000020c

0800310c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003114:	f7ff fff0 	bl	80030f8 <HAL_GetTick>
 8003118:	0003      	movs	r3, r0
 800311a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3301      	adds	r3, #1
 8003124:	d002      	beq.n	800312c <HAL_Delay+0x20>
  {
     wait++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3301      	adds	r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	f7ff ffe3 	bl	80030f8 <HAL_GetTick>
 8003132:	0002      	movs	r2, r0
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	429a      	cmp	r2, r3
 800313c:	d8f7      	bhi.n	800312e <HAL_Delay+0x22>
  {
  }
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b004      	add	sp, #16
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	0002      	movs	r2, r0
 8003150:	1dfb      	adds	r3, r7, #7
 8003152:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003154:	1dfb      	adds	r3, r7, #7
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	001a      	movs	r2, r3
 800315a:	231f      	movs	r3, #31
 800315c:	401a      	ands	r2, r3
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <NVIC_EnableIRQ+0x28>)
 8003160:	2101      	movs	r1, #1
 8003162:	4091      	lsls	r1, r2
 8003164:	000a      	movs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}
 8003170:	e000e100 	.word	0xe000e100

08003174 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	0002      	movs	r2, r0
 800317c:	6039      	str	r1, [r7, #0]
 800317e:	1dfb      	adds	r3, r7, #7
 8003180:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b7f      	cmp	r3, #127	; 0x7f
 8003188:	d932      	bls.n	80031f0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800318a:	4a2f      	ldr	r2, [pc, #188]	; (8003248 <NVIC_SetPriority+0xd4>)
 800318c:	1dfb      	adds	r3, r7, #7
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	0019      	movs	r1, r3
 8003192:	230f      	movs	r3, #15
 8003194:	400b      	ands	r3, r1
 8003196:	3b08      	subs	r3, #8
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	3306      	adds	r3, #6
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	18d3      	adds	r3, r2, r3
 80031a0:	3304      	adds	r3, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	1dfa      	adds	r2, r7, #7
 80031a6:	7812      	ldrb	r2, [r2, #0]
 80031a8:	0011      	movs	r1, r2
 80031aa:	2203      	movs	r2, #3
 80031ac:	400a      	ands	r2, r1
 80031ae:	00d2      	lsls	r2, r2, #3
 80031b0:	21ff      	movs	r1, #255	; 0xff
 80031b2:	4091      	lsls	r1, r2
 80031b4:	000a      	movs	r2, r1
 80031b6:	43d2      	mvns	r2, r2
 80031b8:	401a      	ands	r2, r3
 80031ba:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	019b      	lsls	r3, r3, #6
 80031c0:	22ff      	movs	r2, #255	; 0xff
 80031c2:	401a      	ands	r2, r3
 80031c4:	1dfb      	adds	r3, r7, #7
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	0018      	movs	r0, r3
 80031ca:	2303      	movs	r3, #3
 80031cc:	4003      	ands	r3, r0
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031d2:	481d      	ldr	r0, [pc, #116]	; (8003248 <NVIC_SetPriority+0xd4>)
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	001c      	movs	r4, r3
 80031da:	230f      	movs	r3, #15
 80031dc:	4023      	ands	r3, r4
 80031de:	3b08      	subs	r3, #8
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	430a      	orrs	r2, r1
 80031e4:	3306      	adds	r3, #6
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	18c3      	adds	r3, r0, r3
 80031ea:	3304      	adds	r3, #4
 80031ec:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80031ee:	e027      	b.n	8003240 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031f0:	4a16      	ldr	r2, [pc, #88]	; (800324c <NVIC_SetPriority+0xd8>)
 80031f2:	1dfb      	adds	r3, r7, #7
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	33c0      	adds	r3, #192	; 0xc0
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	589b      	ldr	r3, [r3, r2]
 8003200:	1dfa      	adds	r2, r7, #7
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	0011      	movs	r1, r2
 8003206:	2203      	movs	r2, #3
 8003208:	400a      	ands	r2, r1
 800320a:	00d2      	lsls	r2, r2, #3
 800320c:	21ff      	movs	r1, #255	; 0xff
 800320e:	4091      	lsls	r1, r2
 8003210:	000a      	movs	r2, r1
 8003212:	43d2      	mvns	r2, r2
 8003214:	401a      	ands	r2, r3
 8003216:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	019b      	lsls	r3, r3, #6
 800321c:	22ff      	movs	r2, #255	; 0xff
 800321e:	401a      	ands	r2, r3
 8003220:	1dfb      	adds	r3, r7, #7
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	0018      	movs	r0, r3
 8003226:	2303      	movs	r3, #3
 8003228:	4003      	ands	r3, r0
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800322e:	4807      	ldr	r0, [pc, #28]	; (800324c <NVIC_SetPriority+0xd8>)
 8003230:	1dfb      	adds	r3, r7, #7
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b25b      	sxtb	r3, r3
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	430a      	orrs	r2, r1
 800323a:	33c0      	adds	r3, #192	; 0xc0
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	501a      	str	r2, [r3, r0]
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b003      	add	sp, #12
 8003246:	bd90      	pop	{r4, r7, pc}
 8003248:	e000ed00 	.word	0xe000ed00
 800324c:	e000e100 	.word	0xe000e100

08003250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <SysTick_Config+0x40>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003262:	2301      	movs	r3, #1
 8003264:	e010      	b.n	8003288 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <SysTick_Config+0x44>)
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	3a01      	subs	r2, #1
 800326c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326e:	2301      	movs	r3, #1
 8003270:	425b      	negs	r3, r3
 8003272:	2103      	movs	r1, #3
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff ff7d 	bl	8003174 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <SysTick_Config+0x44>)
 800327c:	2200      	movs	r2, #0
 800327e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003280:	4b04      	ldr	r3, [pc, #16]	; (8003294 <SysTick_Config+0x44>)
 8003282:	2207      	movs	r2, #7
 8003284:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003286:	2300      	movs	r3, #0
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}
 8003290:	00ffffff 	.word	0x00ffffff
 8003294:	e000e010 	.word	0xe000e010

08003298 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	210f      	movs	r1, #15
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	1c02      	adds	r2, r0, #0
 80032a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	0011      	movs	r1, r2
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff ff5d 	bl	8003174 <NVIC_SetPriority>
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	0002      	movs	r2, r0
 80032ca:	1dfb      	adds	r3, r7, #7
 80032cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ce:	1dfb      	adds	r3, r7, #7
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b25b      	sxtb	r3, r3
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7ff ff37 	bl	8003148 <NVIC_EnableIRQ>
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff ffaf 	bl	8003250 <SysTick_Config>
 80032f2:	0003      	movs	r3, r0
}
 80032f4:	0018      	movs	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b002      	add	sp, #8
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003312:	e155      	b.n	80035c0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2101      	movs	r1, #1
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4091      	lsls	r1, r2
 800331e:	000a      	movs	r2, r1
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d100      	bne.n	800332c <HAL_GPIO_Init+0x30>
 800332a:	e146      	b.n	80035ba <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x40>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b12      	cmp	r3, #18
 800333a:	d123      	bne.n	8003384 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	08da      	lsrs	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3208      	adds	r2, #8
 8003344:	0092      	lsls	r2, r2, #2
 8003346:	58d3      	ldr	r3, [r2, r3]
 8003348:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2207      	movs	r2, #7
 800334e:	4013      	ands	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	220f      	movs	r2, #15
 8003354:	409a      	lsls	r2, r3
 8003356:	0013      	movs	r3, r2
 8003358:	43da      	mvns	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2107      	movs	r1, #7
 8003368:	400b      	ands	r3, r1
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	409a      	lsls	r2, r3
 800336e:	0013      	movs	r3, r2
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	08da      	lsrs	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3208      	adds	r2, #8
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	6939      	ldr	r1, [r7, #16]
 8003382:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	409a      	lsls	r2, r3
 8003392:	0013      	movs	r3, r2
 8003394:	43da      	mvns	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2203      	movs	r2, #3
 80033a2:	401a      	ands	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	409a      	lsls	r2, r3
 80033aa:	0013      	movs	r3, r2
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d00b      	beq.n	80033d8 <HAL_GPIO_Init+0xdc>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d007      	beq.n	80033d8 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033cc:	2b11      	cmp	r3, #17
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b12      	cmp	r3, #18
 80033d6:	d130      	bne.n	800343a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	2203      	movs	r2, #3
 80033e4:	409a      	lsls	r2, r3
 80033e6:	0013      	movs	r3, r2
 80033e8:	43da      	mvns	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	0013      	movs	r3, r2
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800340e:	2201      	movs	r2, #1
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	409a      	lsls	r2, r3
 8003414:	0013      	movs	r3, r2
 8003416:	43da      	mvns	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	2201      	movs	r2, #1
 8003426:	401a      	ands	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	409a      	lsls	r2, r3
 800342c:	0013      	movs	r3, r2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	2203      	movs	r2, #3
 8003446:	409a      	lsls	r2, r3
 8003448:	0013      	movs	r3, r2
 800344a:	43da      	mvns	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	409a      	lsls	r2, r3
 800345c:	0013      	movs	r3, r2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	055b      	lsls	r3, r3, #21
 8003472:	4013      	ands	r3, r2
 8003474:	d100      	bne.n	8003478 <HAL_GPIO_Init+0x17c>
 8003476:	e0a0      	b.n	80035ba <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003478:	4b57      	ldr	r3, [pc, #348]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 800347e:	2101      	movs	r1, #1
 8003480:	430a      	orrs	r2, r1
 8003482:	619a      	str	r2, [r3, #24]
 8003484:	4b54      	ldr	r3, [pc, #336]	; (80035d8 <HAL_GPIO_Init+0x2dc>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2201      	movs	r2, #1
 800348a:	4013      	ands	r3, r2
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8003490:	4a52      	ldr	r2, [pc, #328]	; (80035dc <HAL_GPIO_Init+0x2e0>)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	3302      	adds	r3, #2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	589b      	ldr	r3, [r3, r2]
 800349c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2203      	movs	r2, #3
 80034a2:	4013      	ands	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	220f      	movs	r2, #15
 80034a8:	409a      	lsls	r2, r3
 80034aa:	0013      	movs	r3, r2
 80034ac:	43da      	mvns	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	2390      	movs	r3, #144	; 0x90
 80034b8:	05db      	lsls	r3, r3, #23
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d019      	beq.n	80034f2 <HAL_GPIO_Init+0x1f6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a47      	ldr	r2, [pc, #284]	; (80035e0 <HAL_GPIO_Init+0x2e4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0x1f2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a46      	ldr	r2, [pc, #280]	; (80035e4 <HAL_GPIO_Init+0x2e8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_GPIO_Init+0x1ee>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a45      	ldr	r2, [pc, #276]	; (80035e8 <HAL_GPIO_Init+0x2ec>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <HAL_GPIO_Init+0x1ea>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a44      	ldr	r2, [pc, #272]	; (80035ec <HAL_GPIO_Init+0x2f0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_GPIO_Init+0x1e6>
 80034de:	2304      	movs	r3, #4
 80034e0:	e008      	b.n	80034f4 <HAL_GPIO_Init+0x1f8>
 80034e2:	2305      	movs	r3, #5
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x1f8>
 80034e6:	2303      	movs	r3, #3
 80034e8:	e004      	b.n	80034f4 <HAL_GPIO_Init+0x1f8>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_Init+0x1f8>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x1f8>
 80034f2:	2300      	movs	r3, #0
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	2103      	movs	r1, #3
 80034f8:	400a      	ands	r2, r1
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	4093      	lsls	r3, r2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003504:	4935      	ldr	r1, [pc, #212]	; (80035dc <HAL_GPIO_Init+0x2e0>)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	3302      	adds	r3, #2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_GPIO_Init+0x2f4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43da      	mvns	r2, r3
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	025b      	lsls	r3, r3, #9
 800352a:	4013      	ands	r3, r2
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003536:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <HAL_GPIO_Init+0x2f4>)
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800353c:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <HAL_GPIO_Init+0x2f4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	43da      	mvns	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	029b      	lsls	r3, r3, #10
 8003554:	4013      	ands	r3, r2
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003560:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <HAL_GPIO_Init+0x2f4>)
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_GPIO_Init+0x2f4>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	43da      	mvns	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4013      	ands	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	035b      	lsls	r3, r3, #13
 800357e:	4013      	ands	r3, r2
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800358a:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_GPIO_Init+0x2f4>)
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003590:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <HAL_GPIO_Init+0x2f4>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	43da      	mvns	r2, r3
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	039b      	lsls	r3, r3, #14
 80035a8:	4013      	ands	r3, r2
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <HAL_GPIO_Init+0x2f4>)
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3301      	adds	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	40da      	lsrs	r2, r3
 80035c8:	1e13      	subs	r3, r2, #0
 80035ca:	d000      	beq.n	80035ce <HAL_GPIO_Init+0x2d2>
 80035cc:	e6a2      	b.n	8003314 <HAL_GPIO_Init+0x18>
  } 
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b006      	add	sp, #24
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40010000 	.word	0x40010000
 80035e0:	48000400 	.word	0x48000400
 80035e4:	48000800 	.word	0x48000800
 80035e8:	48000c00 	.word	0x48000c00
 80035ec:	48001000 	.word	0x48001000
 80035f0:	40010400 	.word	0x40010400

080035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	0008      	movs	r0, r1
 80035fe:	0011      	movs	r1, r2
 8003600:	1cbb      	adds	r3, r7, #2
 8003602:	1c02      	adds	r2, r0, #0
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	1c7b      	adds	r3, r7, #1
 8003608:	1c0a      	adds	r2, r1, #0
 800360a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800360c:	1c7b      	adds	r3, r7, #1
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003614:	1cbb      	adds	r3, r7, #2
 8003616:	881a      	ldrh	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800361c:	e003      	b.n	8003626 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800361e:	1cbb      	adds	r3, r7, #2
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b002      	add	sp, #8
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	0002      	movs	r2, r0
 8003638:	1dbb      	adds	r3, r7, #6
 800363a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	1dba      	adds	r2, r7, #6
 8003642:	8812      	ldrh	r2, [r2, #0]
 8003644:	4013      	ands	r3, r2
 8003646:	d008      	beq.n	800365a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800364a:	1dba      	adds	r2, r7, #6
 800364c:	8812      	ldrh	r2, [r2, #0]
 800364e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003650:	1dbb      	adds	r3, r7, #6
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	0018      	movs	r0, r3
 8003656:	f002 fcbb 	bl	8005fd0 <HAL_GPIO_EXTI_Callback>
  }
}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	b002      	add	sp, #8
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	40010400 	.word	0x40010400

08003668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e082      	b.n	8003780 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2241      	movs	r2, #65	; 0x41
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d107      	bne.n	8003696 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2240      	movs	r2, #64	; 0x40
 800368a:	2100      	movs	r1, #0
 800368c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	0018      	movs	r0, r3
 8003692:	f002 fa85 	bl	8005ba0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2241      	movs	r2, #65	; 0x41
 800369a:	2124      	movs	r1, #36	; 0x24
 800369c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	438a      	bics	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4934      	ldr	r1, [pc, #208]	; (8003788 <HAL_I2C_Init+0x120>)
 80036b8:	400a      	ands	r2, r1
 80036ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4931      	ldr	r1, [pc, #196]	; (800378c <HAL_I2C_Init+0x124>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d108      	bne.n	80036e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2180      	movs	r1, #128	; 0x80
 80036de:	0209      	lsls	r1, r1, #8
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	e007      	b.n	80036f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2184      	movs	r1, #132	; 0x84
 80036f0:	0209      	lsls	r1, r1, #8
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d104      	bne.n	8003708 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	0112      	lsls	r2, r2, #4
 8003706:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	491f      	ldr	r1, [pc, #124]	; (8003790 <HAL_I2C_Init+0x128>)
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	491a      	ldr	r1, [pc, #104]	; (800378c <HAL_I2C_Init+0x124>)
 8003724:	400a      	ands	r2, r1
 8003726:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	431a      	orrs	r2, r3
 8003732:	0011      	movs	r1, r2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	021a      	lsls	r2, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69d9      	ldr	r1, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1a      	ldr	r2, [r3, #32]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2241      	movs	r2, #65	; 0x41
 800376c:	2120      	movs	r1, #32
 800376e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2242      	movs	r2, #66	; 0x42
 800377a:	2100      	movs	r1, #0
 800377c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}
 8003788:	f0ffffff 	.word	0xf0ffffff
 800378c:	ffff7fff 	.word	0xffff7fff
 8003790:	02008000 	.word	0x02008000

08003794 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	0008      	movs	r0, r1
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	0019      	movs	r1, r3
 80037a2:	230a      	movs	r3, #10
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	1c02      	adds	r2, r0, #0
 80037a8:	801a      	strh	r2, [r3, #0]
 80037aa:	2308      	movs	r3, #8
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	1c0a      	adds	r2, r1, #0
 80037b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2241      	movs	r2, #65	; 0x41
 80037ba:	5c9b      	ldrb	r3, [r3, r2]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d000      	beq.n	80037c4 <HAL_I2C_Master_Transmit+0x30>
 80037c2:	e0f3      	b.n	80039ac <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2240      	movs	r2, #64	; 0x40
 80037c8:	5c9b      	ldrb	r3, [r3, r2]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_I2C_Master_Transmit+0x3e>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e0ed      	b.n	80039ae <HAL_I2C_Master_Transmit+0x21a>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2240      	movs	r2, #64	; 0x40
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037da:	f7ff fc8d 	bl	80030f8 <HAL_GetTick>
 80037de:	0003      	movs	r3, r0
 80037e0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	0219      	lsls	r1, r3, #8
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2319      	movs	r3, #25
 80037ee:	2201      	movs	r2, #1
 80037f0:	f000 fa1a 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 80037f4:	1e03      	subs	r3, r0, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0d8      	b.n	80039ae <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2241      	movs	r2, #65	; 0x41
 8003800:	2121      	movs	r1, #33	; 0x21
 8003802:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2242      	movs	r2, #66	; 0x42
 8003808:	2110      	movs	r1, #16
 800380a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2208      	movs	r2, #8
 800381c:	18ba      	adds	r2, r7, r2
 800381e:	8812      	ldrh	r2, [r2, #0]
 8003820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	2bff      	cmp	r3, #255	; 0xff
 8003830:	d912      	bls.n	8003858 <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	22ff      	movs	r2, #255	; 0xff
 8003836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	b2da      	uxtb	r2, r3
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	045c      	lsls	r4, r3, #17
 8003842:	230a      	movs	r3, #10
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	8819      	ldrh	r1, [r3, #0]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	019b      	lsls	r3, r3, #6
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	0023      	movs	r3, r4
 8003852:	f000 fb59 	bl	8003f08 <I2C_TransferConfig>
 8003856:	e07a      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	b2da      	uxtb	r2, r3
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	049c      	lsls	r4, r3, #18
 800386c:	230a      	movs	r3, #10
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	8819      	ldrh	r1, [r3, #0]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	019b      	lsls	r3, r3, #6
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	0023      	movs	r3, r4
 800387c:	f000 fb44 	bl	8003f08 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003880:	e065      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 fa06 	bl	8003c9a <I2C_WaitOnTXISFlagUntilTimeout>
 800388e:	1e03      	subs	r3, r0, #0
 8003890:	d007      	beq.n	80038a2 <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	2b04      	cmp	r3, #4
 8003898:	d101      	bne.n	800389e <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e087      	b.n	80039ae <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e085      	b.n	80039ae <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	6251      	str	r1, [r2, #36]	; 0x24
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d13b      	bne.n	800394e <HAL_I2C_Master_Transmit+0x1ba>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d036      	beq.n	800394e <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	0013      	movs	r3, r2
 80038ea:	2200      	movs	r2, #0
 80038ec:	2180      	movs	r1, #128	; 0x80
 80038ee:	f000 f99b 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 80038f2:	1e03      	subs	r3, r0, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e059      	b.n	80039ae <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2bff      	cmp	r3, #255	; 0xff
 8003902:	d911      	bls.n	8003928 <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	22ff      	movs	r2, #255	; 0xff
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	b2da      	uxtb	r2, r3
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	045c      	lsls	r4, r3, #17
 8003914:	230a      	movs	r3, #10
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	8819      	ldrh	r1, [r3, #0]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	2300      	movs	r3, #0
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	0023      	movs	r3, r4
 8003922:	f000 faf1 	bl	8003f08 <I2C_TransferConfig>
 8003926:	e012      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003936:	b2da      	uxtb	r2, r3
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	049c      	lsls	r4, r3, #18
 800393c:	230a      	movs	r3, #10
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	8819      	ldrh	r1, [r3, #0]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	2300      	movs	r3, #0
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	0023      	movs	r3, r4
 800394a:	f000 fadd 	bl	8003f08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d194      	bne.n	8003882 <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f9da 	bl	8003d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d007      	beq.n	8003978 <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	2b04      	cmp	r3, #4
 800396e:	d101      	bne.n	8003974 <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e01c      	b.n	80039ae <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e01a      	b.n	80039ae <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2220      	movs	r2, #32
 800397e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	490b      	ldr	r1, [pc, #44]	; (80039b8 <HAL_I2C_Master_Transmit+0x224>)
 800398c:	400a      	ands	r2, r1
 800398e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2241      	movs	r2, #65	; 0x41
 8003994:	2120      	movs	r1, #32
 8003996:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2242      	movs	r2, #66	; 0x42
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2240      	movs	r2, #64	; 0x40
 80039a4:	2100      	movs	r1, #0
 80039a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	0018      	movs	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b007      	add	sp, #28
 80039b4:	bd90      	pop	{r4, r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	fe00e800 	.word	0xfe00e800

080039bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b089      	sub	sp, #36	; 0x24
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	0008      	movs	r0, r1
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	0019      	movs	r1, r3
 80039ca:	230a      	movs	r3, #10
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	1c02      	adds	r2, r0, #0
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	2308      	movs	r3, #8
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	1c0a      	adds	r2, r1, #0
 80039d8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2241      	movs	r2, #65	; 0x41
 80039e2:	5c9b      	ldrb	r3, [r3, r2]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d000      	beq.n	80039ec <HAL_I2C_Master_Receive+0x30>
 80039ea:	e0f4      	b.n	8003bd6 <HAL_I2C_Master_Receive+0x21a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2240      	movs	r2, #64	; 0x40
 80039f0:	5c9b      	ldrb	r3, [r3, r2]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_I2C_Master_Receive+0x3e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0ee      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x21c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2240      	movs	r2, #64	; 0x40
 80039fe:	2101      	movs	r1, #1
 8003a00:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a02:	f7ff fb79 	bl	80030f8 <HAL_GetTick>
 8003a06:	0003      	movs	r3, r0
 8003a08:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	0219      	lsls	r1, r3, #8
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2319      	movs	r3, #25
 8003a16:	2201      	movs	r2, #1
 8003a18:	f000 f906 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8003a1c:	1e03      	subs	r3, r0, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_I2C_Master_Receive+0x68>
    {
      return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0d9      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2241      	movs	r2, #65	; 0x41
 8003a28:	2122      	movs	r1, #34	; 0x22
 8003a2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2242      	movs	r2, #66	; 0x42
 8003a30:	2110      	movs	r1, #16
 8003a32:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2208      	movs	r2, #8
 8003a44:	18ba      	adds	r2, r7, r2
 8003a46:	8812      	ldrh	r2, [r2, #0]
 8003a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2bff      	cmp	r3, #255	; 0xff
 8003a58:	d912      	bls.n	8003a80 <HAL_I2C_Master_Receive+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	22ff      	movs	r2, #255	; 0xff
 8003a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	045c      	lsls	r4, r3, #17
 8003a6a:	230a      	movs	r3, #10
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	8819      	ldrh	r1, [r3, #0]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	2390      	movs	r3, #144	; 0x90
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	0023      	movs	r3, r4
 8003a7a:	f000 fa45 	bl	8003f08 <I2C_TransferConfig>
 8003a7e:	e07b      	b.n	8003b78 <HAL_I2C_Master_Receive+0x1bc>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	049c      	lsls	r4, r3, #18
 8003a94:	230a      	movs	r3, #10
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	8819      	ldrh	r1, [r3, #0]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	2390      	movs	r3, #144	; 0x90
 8003a9e:	019b      	lsls	r3, r3, #6
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	0023      	movs	r3, r4
 8003aa4:	f000 fa30 	bl	8003f08 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003aa8:	e066      	b.n	8003b78 <HAL_I2C_Master_Receive+0x1bc>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 f96d 	bl	8003d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab6:	1e03      	subs	r3, r0, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_I2C_Master_Receive+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2C_Master_Receive+0x10a>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e088      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x21c>
        }
        else
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e086      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x21c>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	1c59      	adds	r1, r3, #1
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	6251      	str	r1, [r2, #36]	; 0x24
 8003ada:	b2c2      	uxtb	r2, r0
 8003adc:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d13b      	bne.n	8003b78 <HAL_I2C_Master_Receive+0x1bc>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d036      	beq.n	8003b78 <HAL_I2C_Master_Receive+0x1bc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	0013      	movs	r3, r2
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	f000 f886 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Master_Receive+0x168>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e059      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2bff      	cmp	r3, #255	; 0xff
 8003b2c:	d911      	bls.n	8003b52 <HAL_I2C_Master_Receive+0x196>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	22ff      	movs	r2, #255	; 0xff
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	045c      	lsls	r4, r3, #17
 8003b3e:	230a      	movs	r3, #10
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	8819      	ldrh	r1, [r3, #0]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	2300      	movs	r3, #0
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	0023      	movs	r3, r4
 8003b4c:	f000 f9dc 	bl	8003f08 <I2C_TransferConfig>
 8003b50:	e012      	b.n	8003b78 <HAL_I2C_Master_Receive+0x1bc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	049c      	lsls	r4, r3, #18
 8003b66:	230a      	movs	r3, #10
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	8819      	ldrh	r1, [r3, #0]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	0023      	movs	r3, r4
 8003b74:	f000 f9c8 	bl	8003f08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d193      	bne.n	8003aaa <HAL_I2C_Master_Receive+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 f8c5 	bl	8003d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_I2C_Master_Receive+0x1e6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Master_Receive+0x1e2>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e01c      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x21c>
      }
      else
      {
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e01a      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x21c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	490a      	ldr	r1, [pc, #40]	; (8003be0 <HAL_I2C_Master_Receive+0x224>)
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2241      	movs	r2, #65	; 0x41
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2242      	movs	r2, #66	; 0x42
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2240      	movs	r2, #64	; 0x40
 8003bce:	2100      	movs	r1, #0
 8003bd0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_I2C_Master_Receive+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b007      	add	sp, #28
 8003bde:	bd90      	pop	{r4, r7, pc}
 8003be0:	fe00e800 	.word	0xfe00e800

08003be4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d103      	bne.n	8003c02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d007      	beq.n	8003c20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	619a      	str	r2, [r3, #24]
  }
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b002      	add	sp, #8
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	1dfb      	adds	r3, r7, #7
 8003c36:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c38:	e01b      	b.n	8003c72 <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	d018      	beq.n	8003c72 <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003c46:	f7ff fa57 	bl	80030f8 <HAL_GetTick>
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d20d      	bcs.n	8003c72 <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2241      	movs	r2, #65	; 0x41
 8003c5a:	2120      	movs	r1, #32
 8003c5c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2242      	movs	r2, #66	; 0x42
 8003c62:	2100      	movs	r1, #0
 8003c64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2240      	movs	r2, #64	; 0x40
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e00f      	b.n	8003c92 <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	425a      	negs	r2, r3
 8003c82:	4153      	adcs	r3, r2
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	001a      	movs	r2, r3
 8003c88:	1dfb      	adds	r3, r7, #7
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d0d4      	beq.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ca6:	e02b      	b.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 f8cc 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003cb4:	1e03      	subs	r3, r0, #0
 8003cb6:	d001      	beq.n	8003cbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e029      	b.n	8003d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	d01e      	beq.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003cc8:	f7ff fa16 	bl	80030f8 <HAL_GetTick>
 8003ccc:	0002      	movs	r2, r0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d213      	bcs.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	2220      	movs	r2, #32
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2241      	movs	r2, #65	; 0x41
 8003ce8:	2120      	movs	r1, #32
 8003cea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2242      	movs	r2, #66	; 0x42
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e007      	b.n	8003d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2202      	movs	r2, #2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d1cc      	bne.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b004      	add	sp, #16
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d24:	e028      	b.n	8003d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f000 f88d 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003d32:	1e03      	subs	r3, r0, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e026      	b.n	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d40:	f7ff f9da 	bl	80030f8 <HAL_GetTick>
 8003d44:	0002      	movs	r2, r0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d213      	bcs.n	8003d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	2220      	movs	r2, #32
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2241      	movs	r2, #65	; 0x41
 8003d60:	2120      	movs	r1, #32
 8003d62:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2242      	movs	r2, #66	; 0x42
 8003d68:	2100      	movs	r1, #0
 8003d6a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2240      	movs	r2, #64	; 0x40
 8003d70:	2100      	movs	r1, #0
 8003d72:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e007      	b.n	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d1cf      	bne.n	8003d26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b004      	add	sp, #16
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d9c:	e048      	b.n	8003e30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 f851 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003daa:	1e03      	subs	r3, r0, #0
 8003dac:	d001      	beq.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e046      	b.n	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2220      	movs	r2, #32
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d11c      	bne.n	8003dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	491d      	ldr	r1, [pc, #116]	; (8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8003dd4:	400a      	ands	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2241      	movs	r2, #65	; 0x41
 8003de2:	2120      	movs	r1, #32
 8003de4:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2242      	movs	r2, #66	; 0x42
 8003dea:	2100      	movs	r1, #0
 8003dec:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2240      	movs	r2, #64	; 0x40
 8003df2:	2100      	movs	r1, #0
 8003df4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e022      	b.n	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8003e00:	f7ff f97a 	bl	80030f8 <HAL_GetTick>
 8003e04:	0002      	movs	r2, r0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d20f      	bcs.n	8003e30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	2220      	movs	r2, #32
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2241      	movs	r2, #65	; 0x41
 8003e20:	2120      	movs	r1, #32
 8003e22:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2240      	movs	r2, #64	; 0x40
 8003e28:	2100      	movs	r1, #0
 8003e2a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e007      	b.n	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2204      	movs	r2, #4
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d1af      	bne.n	8003d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b004      	add	sp, #16
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	fe00e800 	.word	0xfe00e800

08003e4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2210      	movs	r2, #16
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d148      	bne.n	8003ef8 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e66:	e01b      	b.n	8003ea0 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	d018      	beq.n	8003ea0 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <I2C_IsAcknowledgeFailed+0x38>
 8003e74:	f7ff f940 	bl	80030f8 <HAL_GetTick>
 8003e78:	0002      	movs	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d20d      	bcs.n	8003ea0 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2241      	movs	r2, #65	; 0x41
 8003e88:	2120      	movs	r1, #32
 8003e8a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2242      	movs	r2, #66	; 0x42
 8003e90:	2100      	movs	r1, #0
 8003e92:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2240      	movs	r2, #64	; 0x40
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e02c      	b.n	8003efa <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d1dc      	bne.n	8003e68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff fe8f 	bl	8003be4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	490c      	ldr	r1, [pc, #48]	; (8003f04 <I2C_IsAcknowledgeFailed+0xb8>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2241      	movs	r2, #65	; 0x41
 8003ee0:	2120      	movs	r1, #32
 8003ee2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2242      	movs	r2, #66	; 0x42
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2240      	movs	r2, #64	; 0x40
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	0018      	movs	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b004      	add	sp, #16
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	fe00e800 	.word	0xfe00e800

08003f08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	0008      	movs	r0, r1
 8003f12:	0011      	movs	r1, r2
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	240a      	movs	r4, #10
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	1c02      	adds	r2, r0, #0
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	2009      	movs	r0, #9
 8003f20:	183b      	adds	r3, r7, r0
 8003f22:	1c0a      	adds	r2, r1, #0
 8003f24:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <I2C_TransferConfig+0x68>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8003f3a:	193b      	adds	r3, r7, r4
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	059b      	lsls	r3, r3, #22
 8003f40:	0d9a      	lsrs	r2, r3, #22
 8003f42:	183b      	adds	r3, r7, r0
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	0419      	lsls	r1, r3, #16
 8003f48:	23ff      	movs	r3, #255	; 0xff
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	400b      	ands	r3, r1
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	4313      	orrs	r3, r2
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	605a      	str	r2, [r3, #4]
}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b007      	add	sp, #28
 8003f6c:	bd90      	pop	{r4, r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	fc009800 	.word	0xfc009800

08003f74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2241      	movs	r2, #65	; 0x41
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d138      	bne.n	8003ffc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2240      	movs	r2, #64	; 0x40
 8003f8e:	5c9b      	ldrb	r3, [r3, r2]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e032      	b.n	8003ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2240      	movs	r2, #64	; 0x40
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2241      	movs	r2, #65	; 0x41
 8003fa4:	2124      	movs	r1, #36	; 0x24
 8003fa6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	438a      	bics	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4911      	ldr	r1, [pc, #68]	; (8004008 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6819      	ldr	r1, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2241      	movs	r2, #65	; 0x41
 8003fec:	2120      	movs	r1, #32
 8003fee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e000      	b.n	8003ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
  }
}
 8003ffe:	0018      	movs	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	b002      	add	sp, #8
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	ffffefff 	.word	0xffffefff

0800400c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2241      	movs	r2, #65	; 0x41
 800401e:	5c9b      	ldrb	r3, [r3, r2]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b20      	cmp	r3, #32
 8004024:	d139      	bne.n	800409a <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2240      	movs	r2, #64	; 0x40
 800402a:	5c9b      	ldrb	r3, [r3, r2]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8004030:	2302      	movs	r3, #2
 8004032:	e033      	b.n	800409c <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2240      	movs	r2, #64	; 0x40
 8004038:	2101      	movs	r1, #1
 800403a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2241      	movs	r2, #65	; 0x41
 8004040:	2124      	movs	r1, #36	; 0x24
 8004042:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2101      	movs	r1, #1
 8004050:	438a      	bics	r2, r1
 8004052:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8004060:	4013      	ands	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2101      	movs	r1, #1
 8004082:	430a      	orrs	r2, r1
 8004084:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2241      	movs	r2, #65	; 0x41
 800408a:	2120      	movs	r1, #32
 800408c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2240      	movs	r2, #64	; 0x40
 8004092:	2100      	movs	r1, #0
 8004094:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
  }
}
 800409c:	0018      	movs	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	b004      	add	sp, #16
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	fffff0ff 	.word	0xfffff0ff

080040a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2201      	movs	r2, #1
 80040ba:	4013      	ands	r3, r2
 80040bc:	d100      	bne.n	80040c0 <HAL_RCC_OscConfig+0x18>
 80040be:	e08d      	b.n	80041dc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80040c0:	4bc5      	ldr	r3, [pc, #788]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	220c      	movs	r2, #12
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d00e      	beq.n	80040ea <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040cc:	4bc2      	ldr	r3, [pc, #776]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	220c      	movs	r2, #12
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d116      	bne.n	8004106 <HAL_RCC_OscConfig+0x5e>
 80040d8:	4bbf      	ldr	r3, [pc, #764]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	23c0      	movs	r3, #192	; 0xc0
 80040de:	025b      	lsls	r3, r3, #9
 80040e0:	401a      	ands	r2, r3
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	025b      	lsls	r3, r3, #9
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d10d      	bne.n	8004106 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ea:	4bbb      	ldr	r3, [pc, #748]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	4013      	ands	r3, r2
 80040f4:	d100      	bne.n	80040f8 <HAL_RCC_OscConfig+0x50>
 80040f6:	e070      	b.n	80041da <HAL_RCC_OscConfig+0x132>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d000      	beq.n	8004102 <HAL_RCC_OscConfig+0x5a>
 8004100:	e06b      	b.n	80041da <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e329      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_RCC_OscConfig+0x76>
 800410e:	4bb2      	ldr	r3, [pc, #712]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4bb1      	ldr	r3, [pc, #708]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	0249      	lsls	r1, r1, #9
 8004118:	430a      	orrs	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e02f      	b.n	800417e <HAL_RCC_OscConfig+0xd6>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0x98>
 8004126:	4bac      	ldr	r3, [pc, #688]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4bab      	ldr	r3, [pc, #684]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800412c:	49ab      	ldr	r1, [pc, #684]	; (80043dc <HAL_RCC_OscConfig+0x334>)
 800412e:	400a      	ands	r2, r1
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	4ba9      	ldr	r3, [pc, #676]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4ba8      	ldr	r3, [pc, #672]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004138:	49a9      	ldr	r1, [pc, #676]	; (80043e0 <HAL_RCC_OscConfig+0x338>)
 800413a:	400a      	ands	r2, r1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e01e      	b.n	800417e <HAL_RCC_OscConfig+0xd6>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b05      	cmp	r3, #5
 8004146:	d10e      	bne.n	8004166 <HAL_RCC_OscConfig+0xbe>
 8004148:	4ba3      	ldr	r3, [pc, #652]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4ba2      	ldr	r3, [pc, #648]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800414e:	2180      	movs	r1, #128	; 0x80
 8004150:	02c9      	lsls	r1, r1, #11
 8004152:	430a      	orrs	r2, r1
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	4ba0      	ldr	r3, [pc, #640]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b9f      	ldr	r3, [pc, #636]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	0249      	lsls	r1, r1, #9
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e00b      	b.n	800417e <HAL_RCC_OscConfig+0xd6>
 8004166:	4b9c      	ldr	r3, [pc, #624]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4b9b      	ldr	r3, [pc, #620]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800416c:	499b      	ldr	r1, [pc, #620]	; (80043dc <HAL_RCC_OscConfig+0x334>)
 800416e:	400a      	ands	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	4b99      	ldr	r3, [pc, #612]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b98      	ldr	r3, [pc, #608]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004178:	4999      	ldr	r1, [pc, #612]	; (80043e0 <HAL_RCC_OscConfig+0x338>)
 800417a:	400a      	ands	r2, r1
 800417c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d014      	beq.n	80041b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fe ffb7 	bl	80030f8 <HAL_GetTick>
 800418a:	0003      	movs	r3, r0
 800418c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004190:	f7fe ffb2 	bl	80030f8 <HAL_GetTick>
 8004194:	0002      	movs	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e2db      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b8d      	ldr	r3, [pc, #564]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	029b      	lsls	r3, r3, #10
 80041aa:	4013      	ands	r3, r2
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xe8>
 80041ae:	e015      	b.n	80041dc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fe ffa2 	bl	80030f8 <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ba:	f7fe ff9d 	bl	80030f8 <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b64      	cmp	r3, #100	; 0x64
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e2c6      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041cc:	4b82      	ldr	r3, [pc, #520]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	029b      	lsls	r3, r3, #10
 80041d4:	4013      	ands	r3, r2
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCC_OscConfig+0x112>
 80041d8:	e000      	b.n	80041dc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2202      	movs	r2, #2
 80041e2:	4013      	ands	r3, r2
 80041e4:	d100      	bne.n	80041e8 <HAL_RCC_OscConfig+0x140>
 80041e6:	e06c      	b.n	80042c2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041e8:	4b7b      	ldr	r3, [pc, #492]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	220c      	movs	r2, #12
 80041ee:	4013      	ands	r3, r2
 80041f0:	d00e      	beq.n	8004210 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041f2:	4b79      	ldr	r3, [pc, #484]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	220c      	movs	r2, #12
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11f      	bne.n	800423e <HAL_RCC_OscConfig+0x196>
 80041fe:	4b76      	ldr	r3, [pc, #472]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	23c0      	movs	r3, #192	; 0xc0
 8004204:	025b      	lsls	r3, r3, #9
 8004206:	401a      	ands	r2, r3
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	429a      	cmp	r2, r3
 800420e:	d116      	bne.n	800423e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004210:	4b71      	ldr	r3, [pc, #452]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2202      	movs	r2, #2
 8004216:	4013      	ands	r3, r2
 8004218:	d005      	beq.n	8004226 <HAL_RCC_OscConfig+0x17e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d001      	beq.n	8004226 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e299      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004226:	4b6c      	ldr	r3, [pc, #432]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	22f8      	movs	r2, #248	; 0xf8
 800422c:	4393      	bics	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	00da      	lsls	r2, r3, #3
 8004236:	4b68      	ldr	r3, [pc, #416]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423c:	e041      	b.n	80042c2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d024      	beq.n	8004290 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004246:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800424c:	2101      	movs	r1, #1
 800424e:	430a      	orrs	r2, r1
 8004250:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004252:	f7fe ff51 	bl	80030f8 <HAL_GetTick>
 8004256:	0003      	movs	r3, r0
 8004258:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425c:	f7fe ff4c 	bl	80030f8 <HAL_GetTick>
 8004260:	0002      	movs	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e275      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426e:	4b5a      	ldr	r3, [pc, #360]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2202      	movs	r2, #2
 8004274:	4013      	ands	r3, r2
 8004276:	d0f1      	beq.n	800425c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b57      	ldr	r3, [pc, #348]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	22f8      	movs	r2, #248	; 0xf8
 800427e:	4393      	bics	r3, r2
 8004280:	0019      	movs	r1, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00da      	lsls	r2, r3, #3
 8004288:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e018      	b.n	80042c2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004290:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004296:	2101      	movs	r1, #1
 8004298:	438a      	bics	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fe ff2c 	bl	80030f8 <HAL_GetTick>
 80042a0:	0003      	movs	r3, r0
 80042a2:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042a6:	f7fe ff27 	bl	80030f8 <HAL_GetTick>
 80042aa:	0002      	movs	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e250      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b8:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2202      	movs	r2, #2
 80042be:	4013      	ands	r3, r2
 80042c0:	d1f1      	bne.n	80042a6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2208      	movs	r2, #8
 80042c8:	4013      	ands	r3, r2
 80042ca:	d036      	beq.n	800433a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d019      	beq.n	8004308 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d4:	4b40      	ldr	r3, [pc, #256]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80042d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d8:	4b3f      	ldr	r3, [pc, #252]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80042da:	2101      	movs	r1, #1
 80042dc:	430a      	orrs	r2, r1
 80042de:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e0:	f7fe ff0a 	bl	80030f8 <HAL_GetTick>
 80042e4:	0003      	movs	r3, r0
 80042e6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ea:	f7fe ff05 	bl	80030f8 <HAL_GetTick>
 80042ee:	0002      	movs	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e22e      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fc:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2202      	movs	r2, #2
 8004302:	4013      	ands	r3, r2
 8004304:	d0f1      	beq.n	80042ea <HAL_RCC_OscConfig+0x242>
 8004306:	e018      	b.n	800433a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004308:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800430a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800430c:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800430e:	2101      	movs	r1, #1
 8004310:	438a      	bics	r2, r1
 8004312:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004314:	f7fe fef0 	bl	80030f8 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431e:	f7fe feeb 	bl	80030f8 <HAL_GetTick>
 8004322:	0002      	movs	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e214      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004330:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	2202      	movs	r2, #2
 8004336:	4013      	ands	r3, r2
 8004338:	d1f1      	bne.n	800431e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2204      	movs	r2, #4
 8004340:	4013      	ands	r3, r2
 8004342:	d100      	bne.n	8004346 <HAL_RCC_OscConfig+0x29e>
 8004344:	e0b6      	b.n	80044b4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004346:	2317      	movs	r3, #23
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800434e:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	055b      	lsls	r3, r3, #21
 8004356:	4013      	ands	r3, r2
 8004358:	d111      	bne.n	800437e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435a:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 8004360:	2180      	movs	r1, #128	; 0x80
 8004362:	0549      	lsls	r1, r1, #21
 8004364:	430a      	orrs	r2, r1
 8004366:	61da      	str	r2, [r3, #28]
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	055b      	lsls	r3, r3, #21
 8004370:	4013      	ands	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004376:	2317      	movs	r3, #23
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_OscConfig+0x33c>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4013      	ands	r3, r2
 8004388:	d11a      	bne.n	80043c0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438a:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <HAL_RCC_OscConfig+0x33c>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <HAL_RCC_OscConfig+0x33c>)
 8004390:	2180      	movs	r1, #128	; 0x80
 8004392:	0049      	lsls	r1, r1, #1
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004398:	f7fe feae 	bl	80030f8 <HAL_GetTick>
 800439c:	0003      	movs	r3, r0
 800439e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7fe fea9 	bl	80030f8 <HAL_GetTick>
 80043a6:	0002      	movs	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b64      	cmp	r3, #100	; 0x64
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e1d2      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCC_OscConfig+0x33c>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4013      	ands	r3, r2
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d10f      	bne.n	80043e8 <HAL_RCC_OscConfig+0x340>
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80043ca:	6a1a      	ldr	r2, [r3, #32]
 80043cc:	4b02      	ldr	r3, [pc, #8]	; (80043d8 <HAL_RCC_OscConfig+0x330>)
 80043ce:	2101      	movs	r1, #1
 80043d0:	430a      	orrs	r2, r1
 80043d2:	621a      	str	r2, [r3, #32]
 80043d4:	e036      	b.n	8004444 <HAL_RCC_OscConfig+0x39c>
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	40021000 	.word	0x40021000
 80043dc:	fffeffff 	.word	0xfffeffff
 80043e0:	fffbffff 	.word	0xfffbffff
 80043e4:	40007000 	.word	0x40007000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10c      	bne.n	800440a <HAL_RCC_OscConfig+0x362>
 80043f0:	4bca      	ldr	r3, [pc, #808]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	4bc9      	ldr	r3, [pc, #804]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80043f6:	2101      	movs	r1, #1
 80043f8:	438a      	bics	r2, r1
 80043fa:	621a      	str	r2, [r3, #32]
 80043fc:	4bc7      	ldr	r3, [pc, #796]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80043fe:	6a1a      	ldr	r2, [r3, #32]
 8004400:	4bc6      	ldr	r3, [pc, #792]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004402:	2104      	movs	r1, #4
 8004404:	438a      	bics	r2, r1
 8004406:	621a      	str	r2, [r3, #32]
 8004408:	e01c      	b.n	8004444 <HAL_RCC_OscConfig+0x39c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b05      	cmp	r3, #5
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x384>
 8004412:	4bc2      	ldr	r3, [pc, #776]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004414:	6a1a      	ldr	r2, [r3, #32]
 8004416:	4bc1      	ldr	r3, [pc, #772]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004418:	2104      	movs	r1, #4
 800441a:	430a      	orrs	r2, r1
 800441c:	621a      	str	r2, [r3, #32]
 800441e:	4bbf      	ldr	r3, [pc, #764]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004420:	6a1a      	ldr	r2, [r3, #32]
 8004422:	4bbe      	ldr	r3, [pc, #760]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004424:	2101      	movs	r1, #1
 8004426:	430a      	orrs	r2, r1
 8004428:	621a      	str	r2, [r3, #32]
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0x39c>
 800442c:	4bbb      	ldr	r3, [pc, #748]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800442e:	6a1a      	ldr	r2, [r3, #32]
 8004430:	4bba      	ldr	r3, [pc, #744]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004432:	2101      	movs	r1, #1
 8004434:	438a      	bics	r2, r1
 8004436:	621a      	str	r2, [r3, #32]
 8004438:	4bb8      	ldr	r3, [pc, #736]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800443a:	6a1a      	ldr	r2, [r3, #32]
 800443c:	4bb7      	ldr	r3, [pc, #732]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800443e:	2104      	movs	r1, #4
 8004440:	438a      	bics	r2, r1
 8004442:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d014      	beq.n	8004476 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444c:	f7fe fe54 	bl	80030f8 <HAL_GetTick>
 8004450:	0003      	movs	r3, r0
 8004452:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004454:	e009      	b.n	800446a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fe fe4f 	bl	80030f8 <HAL_GetTick>
 800445a:	0002      	movs	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	4aaf      	ldr	r2, [pc, #700]	; (8004720 <HAL_RCC_OscConfig+0x678>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e177      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	4bac      	ldr	r3, [pc, #688]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	2202      	movs	r2, #2
 8004470:	4013      	ands	r3, r2
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x3ae>
 8004474:	e013      	b.n	800449e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004476:	f7fe fe3f 	bl	80030f8 <HAL_GetTick>
 800447a:	0003      	movs	r3, r0
 800447c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	e009      	b.n	8004494 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fe fe3a 	bl	80030f8 <HAL_GetTick>
 8004484:	0002      	movs	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	4aa5      	ldr	r2, [pc, #660]	; (8004720 <HAL_RCC_OscConfig+0x678>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e162      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004494:	4ba1      	ldr	r3, [pc, #644]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	2202      	movs	r2, #2
 800449a:	4013      	ands	r3, r2
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800449e:	2317      	movs	r3, #23
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a8:	4b9c      	ldr	r3, [pc, #624]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	4b9b      	ldr	r3, [pc, #620]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80044ae:	499d      	ldr	r1, [pc, #628]	; (8004724 <HAL_RCC_OscConfig+0x67c>)
 80044b0:	400a      	ands	r2, r1
 80044b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2210      	movs	r2, #16
 80044ba:	4013      	ands	r3, r2
 80044bc:	d063      	beq.n	8004586 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d12a      	bne.n	800451c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80044c6:	4b95      	ldr	r3, [pc, #596]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80044c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ca:	4b94      	ldr	r3, [pc, #592]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80044cc:	2104      	movs	r1, #4
 80044ce:	430a      	orrs	r2, r1
 80044d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80044d2:	4b92      	ldr	r3, [pc, #584]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80044d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d6:	4b91      	ldr	r3, [pc, #580]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80044d8:	2101      	movs	r1, #1
 80044da:	430a      	orrs	r2, r1
 80044dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044de:	f7fe fe0b 	bl	80030f8 <HAL_GetTick>
 80044e2:	0003      	movs	r3, r0
 80044e4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80044e8:	f7fe fe06 	bl	80030f8 <HAL_GetTick>
 80044ec:	0002      	movs	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e12f      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044fa:	4b88      	ldr	r3, [pc, #544]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fe:	2202      	movs	r2, #2
 8004500:	4013      	ands	r3, r2
 8004502:	d0f1      	beq.n	80044e8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004504:	4b85      	ldr	r3, [pc, #532]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	22f8      	movs	r2, #248	; 0xf8
 800450a:	4393      	bics	r3, r2
 800450c:	0019      	movs	r1, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	00da      	lsls	r2, r3, #3
 8004514:	4b81      	ldr	r3, [pc, #516]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004516:	430a      	orrs	r2, r1
 8004518:	635a      	str	r2, [r3, #52]	; 0x34
 800451a:	e034      	b.n	8004586 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	3305      	adds	r3, #5
 8004522:	d111      	bne.n	8004548 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004524:	4b7d      	ldr	r3, [pc, #500]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004528:	4b7c      	ldr	r3, [pc, #496]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800452a:	2104      	movs	r1, #4
 800452c:	438a      	bics	r2, r1
 800452e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004530:	4b7a      	ldr	r3, [pc, #488]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	22f8      	movs	r2, #248	; 0xf8
 8004536:	4393      	bics	r3, r2
 8004538:	0019      	movs	r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	00da      	lsls	r2, r3, #3
 8004540:	4b76      	ldr	r3, [pc, #472]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004542:	430a      	orrs	r2, r1
 8004544:	635a      	str	r2, [r3, #52]	; 0x34
 8004546:	e01e      	b.n	8004586 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004548:	4b74      	ldr	r3, [pc, #464]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800454a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800454c:	4b73      	ldr	r3, [pc, #460]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800454e:	2104      	movs	r1, #4
 8004550:	430a      	orrs	r2, r1
 8004552:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004554:	4b71      	ldr	r3, [pc, #452]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004558:	4b70      	ldr	r3, [pc, #448]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800455a:	2101      	movs	r1, #1
 800455c:	438a      	bics	r2, r1
 800455e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004560:	f7fe fdca 	bl	80030f8 <HAL_GetTick>
 8004564:	0003      	movs	r3, r0
 8004566:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800456a:	f7fe fdc5 	bl	80030f8 <HAL_GetTick>
 800456e:	0002      	movs	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e0ee      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800457c:	4b67      	ldr	r3, [pc, #412]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	2202      	movs	r2, #2
 8004582:	4013      	ands	r3, r2
 8004584:	d1f1      	bne.n	800456a <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2220      	movs	r2, #32
 800458c:	4013      	ands	r3, r2
 800458e:	d05c      	beq.n	800464a <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004590:	4b62      	ldr	r3, [pc, #392]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	220c      	movs	r2, #12
 8004596:	4013      	ands	r3, r2
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d00e      	beq.n	80045ba <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800459c:	4b5f      	ldr	r3, [pc, #380]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	220c      	movs	r2, #12
 80045a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d114      	bne.n	80045d2 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80045a8:	4b5c      	ldr	r3, [pc, #368]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	23c0      	movs	r3, #192	; 0xc0
 80045ae:	025b      	lsls	r3, r3, #9
 80045b0:	401a      	ands	r2, r3
 80045b2:	23c0      	movs	r3, #192	; 0xc0
 80045b4:	025b      	lsls	r3, r3, #9
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d10b      	bne.n	80045d2 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80045ba:	4b58      	ldr	r3, [pc, #352]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80045bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	025b      	lsls	r3, r3, #9
 80045c2:	4013      	ands	r3, r2
 80045c4:	d040      	beq.n	8004648 <HAL_RCC_OscConfig+0x5a0>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d03c      	beq.n	8004648 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e0c3      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01b      	beq.n	8004612 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80045da:	4b50      	ldr	r3, [pc, #320]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80045dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045de:	4b4f      	ldr	r3, [pc, #316]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80045e0:	2180      	movs	r1, #128	; 0x80
 80045e2:	0249      	lsls	r1, r1, #9
 80045e4:	430a      	orrs	r2, r1
 80045e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fe fd86 	bl	80030f8 <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045f2:	f7fe fd81 	bl	80030f8 <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0aa      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	025b      	lsls	r3, r3, #9
 800460c:	4013      	ands	r3, r2
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x54a>
 8004610:	e01b      	b.n	800464a <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004612:	4b42      	ldr	r3, [pc, #264]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004616:	4b41      	ldr	r3, [pc, #260]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004618:	4943      	ldr	r1, [pc, #268]	; (8004728 <HAL_RCC_OscConfig+0x680>)
 800461a:	400a      	ands	r2, r1
 800461c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461e:	f7fe fd6b 	bl	80030f8 <HAL_GetTick>
 8004622:	0003      	movs	r3, r0
 8004624:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004628:	f7fe fd66 	bl	80030f8 <HAL_GetTick>
 800462c:	0002      	movs	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e08f      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800463a:	4b38      	ldr	r3, [pc, #224]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800463c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	025b      	lsls	r3, r3, #9
 8004642:	4013      	ands	r3, r2
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x580>
 8004646:	e000      	b.n	800464a <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004648:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	2b00      	cmp	r3, #0
 8004650:	d100      	bne.n	8004654 <HAL_RCC_OscConfig+0x5ac>
 8004652:	e081      	b.n	8004758 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004654:	4b31      	ldr	r3, [pc, #196]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	220c      	movs	r2, #12
 800465a:	4013      	ands	r3, r2
 800465c:	2b08      	cmp	r3, #8
 800465e:	d100      	bne.n	8004662 <HAL_RCC_OscConfig+0x5ba>
 8004660:	e078      	b.n	8004754 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b02      	cmp	r3, #2
 8004668:	d14c      	bne.n	8004704 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466a:	4b2c      	ldr	r3, [pc, #176]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004670:	492e      	ldr	r1, [pc, #184]	; (800472c <HAL_RCC_OscConfig+0x684>)
 8004672:	400a      	ands	r2, r1
 8004674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fe fd3f 	bl	80030f8 <HAL_GetTick>
 800467a:	0003      	movs	r3, r0
 800467c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004680:	f7fe fd3a 	bl	80030f8 <HAL_GetTick>
 8004684:	0002      	movs	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e063      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004692:	4b22      	ldr	r3, [pc, #136]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	049b      	lsls	r3, r3, #18
 800469a:	4013      	ands	r3, r2
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800469e:	4b1f      	ldr	r3, [pc, #124]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	220f      	movs	r2, #15
 80046a4:	4393      	bics	r3, r2
 80046a6:	0019      	movs	r1, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ac:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80046ae:	430a      	orrs	r2, r1
 80046b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80046b2:	4b1a      	ldr	r3, [pc, #104]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <HAL_RCC_OscConfig+0x688>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	0019      	movs	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	431a      	orrs	r2, r3
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80046c8:	430a      	orrs	r2, r1
 80046ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046cc:	4b13      	ldr	r3, [pc, #76]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	0449      	lsls	r1, r1, #17
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fe fd0d 	bl	80030f8 <HAL_GetTick>
 80046de:	0003      	movs	r3, r0
 80046e0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fe fd08 	bl	80030f8 <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e031      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_RCC_OscConfig+0x674>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	2380      	movs	r3, #128	; 0x80
 80046fc:	049b      	lsls	r3, r3, #18
 80046fe:	4013      	ands	r3, r2
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x63c>
 8004702:	e029      	b.n	8004758 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_RCC_OscConfig+0x674>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <HAL_RCC_OscConfig+0x674>)
 800470a:	4908      	ldr	r1, [pc, #32]	; (800472c <HAL_RCC_OscConfig+0x684>)
 800470c:	400a      	ands	r2, r1
 800470e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fe fcf2 	bl	80030f8 <HAL_GetTick>
 8004714:	0003      	movs	r3, r0
 8004716:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004718:	e015      	b.n	8004746 <HAL_RCC_OscConfig+0x69e>
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	40021000 	.word	0x40021000
 8004720:	00001388 	.word	0x00001388
 8004724:	efffffff 	.word	0xefffffff
 8004728:	fffeffff 	.word	0xfffeffff
 800472c:	feffffff 	.word	0xfeffffff
 8004730:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004734:	f7fe fce0 	bl	80030f8 <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e009      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <HAL_RCC_OscConfig+0x6bc>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	049b      	lsls	r3, r3, #18
 800474e:	4013      	ands	r3, r2
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x68c>
 8004752:	e001      	b.n	8004758 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	0018      	movs	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	b006      	add	sp, #24
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	40021000 	.word	0x40021000

08004768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004776:	4b7b      	ldr	r3, [pc, #492]	; (8004964 <HAL_RCC_ClockConfig+0x1fc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2201      	movs	r2, #1
 800477c:	4013      	ands	r3, r2
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d911      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004784:	4b77      	ldr	r3, [pc, #476]	; (8004964 <HAL_RCC_ClockConfig+0x1fc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2201      	movs	r2, #1
 800478a:	4393      	bics	r3, r2
 800478c:	0019      	movs	r1, r3
 800478e:	4b75      	ldr	r3, [pc, #468]	; (8004964 <HAL_RCC_ClockConfig+0x1fc>)
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004796:	4b73      	ldr	r3, [pc, #460]	; (8004964 <HAL_RCC_ClockConfig+0x1fc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2201      	movs	r2, #1
 800479c:	4013      	ands	r3, r2
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0d8      	b.n	800495a <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2202      	movs	r2, #2
 80047ae:	4013      	ands	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b2:	4b6d      	ldr	r3, [pc, #436]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	22f0      	movs	r2, #240	; 0xf0
 80047b8:	4393      	bics	r3, r2
 80047ba:	0019      	movs	r1, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	4b69      	ldr	r3, [pc, #420]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2201      	movs	r2, #1
 80047cc:	4013      	ands	r3, r2
 80047ce:	d100      	bne.n	80047d2 <HAL_RCC_ClockConfig+0x6a>
 80047d0:	e089      	b.n	80048e6 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b63      	ldr	r3, [pc, #396]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	029b      	lsls	r3, r3, #10
 80047e2:	4013      	ands	r3, r2
 80047e4:	d120      	bne.n	8004828 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0b7      	b.n	800495a <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f2:	4b5d      	ldr	r3, [pc, #372]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	049b      	lsls	r3, r3, #18
 80047fa:	4013      	ands	r3, r2
 80047fc:	d114      	bne.n	8004828 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e0ab      	b.n	800495a <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800480a:	4b57      	ldr	r3, [pc, #348]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 800480c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	025b      	lsls	r3, r3, #9
 8004812:	4013      	ands	r3, r2
 8004814:	d108      	bne.n	8004828 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e09f      	b.n	800495a <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481a:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2202      	movs	r2, #2
 8004820:	4013      	ands	r3, r2
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e098      	b.n	800495a <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004828:	4b4f      	ldr	r3, [pc, #316]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2203      	movs	r2, #3
 800482e:	4393      	bics	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	4b4c      	ldr	r3, [pc, #304]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800483c:	f7fe fc5c 	bl	80030f8 <HAL_GetTick>
 8004840:	0003      	movs	r3, r0
 8004842:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d111      	bne.n	8004870 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800484c:	e009      	b.n	8004862 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484e:	f7fe fc53 	bl	80030f8 <HAL_GetTick>
 8004852:	0002      	movs	r2, r0
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	4a44      	ldr	r2, [pc, #272]	; (800496c <HAL_RCC_ClockConfig+0x204>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e07b      	b.n	800495a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004862:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	220c      	movs	r2, #12
 8004868:	4013      	ands	r3, r2
 800486a:	2b04      	cmp	r3, #4
 800486c:	d1ef      	bne.n	800484e <HAL_RCC_ClockConfig+0xe6>
 800486e:	e03a      	b.n	80048e6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d111      	bne.n	800489c <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004878:	e009      	b.n	800488e <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487a:	f7fe fc3d 	bl	80030f8 <HAL_GetTick>
 800487e:	0002      	movs	r2, r0
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	4a39      	ldr	r2, [pc, #228]	; (800496c <HAL_RCC_ClockConfig+0x204>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e065      	b.n	800495a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	220c      	movs	r2, #12
 8004894:	4013      	ands	r3, r2
 8004896:	2b08      	cmp	r3, #8
 8004898:	d1ef      	bne.n	800487a <HAL_RCC_ClockConfig+0x112>
 800489a:	e024      	b.n	80048e6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d11b      	bne.n	80048dc <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80048a4:	e009      	b.n	80048ba <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a6:	f7fe fc27 	bl	80030f8 <HAL_GetTick>
 80048aa:	0002      	movs	r2, r0
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	4a2e      	ldr	r2, [pc, #184]	; (800496c <HAL_RCC_ClockConfig+0x204>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04f      	b.n	800495a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80048ba:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	220c      	movs	r2, #12
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	d1ef      	bne.n	80048a6 <HAL_RCC_ClockConfig+0x13e>
 80048c6:	e00e      	b.n	80048e6 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c8:	f7fe fc16 	bl	80030f8 <HAL_GetTick>
 80048cc:	0002      	movs	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	4a26      	ldr	r2, [pc, #152]	; (800496c <HAL_RCC_ClockConfig+0x204>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e03e      	b.n	800495a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048dc:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	220c      	movs	r2, #12
 80048e2:	4013      	ands	r3, r2
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80048e6:	4b1f      	ldr	r3, [pc, #124]	; (8004964 <HAL_RCC_ClockConfig+0x1fc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	4013      	ands	r3, r2
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d211      	bcs.n	8004918 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_RCC_ClockConfig+0x1fc>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2201      	movs	r2, #1
 80048fa:	4393      	bics	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCC_ClockConfig+0x1fc>)
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004906:	4b17      	ldr	r3, [pc, #92]	; (8004964 <HAL_RCC_ClockConfig+0x1fc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2201      	movs	r2, #1
 800490c:	4013      	ands	r3, r2
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e020      	b.n	800495a <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2204      	movs	r2, #4
 800491e:	4013      	ands	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <HAL_RCC_ClockConfig+0x208>)
 8004928:	4013      	ands	r3, r2
 800492a:	0019      	movs	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004936:	f000 f821 	bl	800497c <HAL_RCC_GetSysClockFreq>
 800493a:	0001      	movs	r1, r0
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x200>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	220f      	movs	r2, #15
 8004944:	4013      	ands	r3, r2
 8004946:	4a0b      	ldr	r2, [pc, #44]	; (8004974 <HAL_RCC_ClockConfig+0x20c>)
 8004948:	5cd3      	ldrb	r3, [r2, r3]
 800494a:	000a      	movs	r2, r1
 800494c:	40da      	lsrs	r2, r3
 800494e:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <HAL_RCC_ClockConfig+0x210>)
 8004950:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004952:	2000      	movs	r0, #0
 8004954:	f7fe fba8 	bl	80030a8 <HAL_InitTick>
  
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	0018      	movs	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	b004      	add	sp, #16
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	40022000 	.word	0x40022000
 8004968:	40021000 	.word	0x40021000
 800496c:	00001388 	.word	0x00001388
 8004970:	fffff8ff 	.word	0xfffff8ff
 8004974:	080092a0 	.word	0x080092a0
 8004978:	20000000 	.word	0x20000000

0800497c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b08f      	sub	sp, #60	; 0x3c
 8004980:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004982:	2314      	movs	r3, #20
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	4a37      	ldr	r2, [pc, #220]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004988:	ca13      	ldmia	r2!, {r0, r1, r4}
 800498a:	c313      	stmia	r3!, {r0, r1, r4}
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004990:	1d3b      	adds	r3, r7, #4
 8004992:	4a35      	ldr	r2, [pc, #212]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xec>)
 8004994:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004996:	c313      	stmia	r3!, {r0, r1, r4}
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a0:	2300      	movs	r3, #0
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a4:	2300      	movs	r3, #0
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
 80049a8:	2300      	movs	r3, #0
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80049b0:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xf0>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	220c      	movs	r2, #12
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d006      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0x52>
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d043      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0xd0>
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d144      	bne.n	8004a52 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049c8:	4b29      	ldr	r3, [pc, #164]	; (8004a70 <HAL_RCC_GetSysClockFreq+0xf4>)
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049cc:	e044      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	0c9b      	lsrs	r3, r3, #18
 80049d2:	220f      	movs	r2, #15
 80049d4:	4013      	ands	r3, r2
 80049d6:	2214      	movs	r2, #20
 80049d8:	18ba      	adds	r2, r7, r2
 80049da:	5cd3      	ldrb	r3, [r2, r3]
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80049de:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xf0>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	220f      	movs	r2, #15
 80049e4:	4013      	ands	r3, r2
 80049e6:	1d3a      	adds	r2, r7, #4
 80049e8:	5cd3      	ldrb	r3, [r2, r3]
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ee:	23c0      	movs	r3, #192	; 0xc0
 80049f0:	025b      	lsls	r3, r3, #9
 80049f2:	401a      	ands	r2, r3
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	025b      	lsls	r3, r3, #9
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d109      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80049fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049fe:	481c      	ldr	r0, [pc, #112]	; (8004a70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a00:	f7fb fb94 	bl	800012c <__udivsi3>
 8004a04:	0003      	movs	r3, r0
 8004a06:	001a      	movs	r2, r3
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	4353      	muls	r3, r2
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0e:	e01a      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a12:	23c0      	movs	r3, #192	; 0xc0
 8004a14:	025b      	lsls	r3, r3, #9
 8004a16:	401a      	ands	r2, r3
 8004a18:	23c0      	movs	r3, #192	; 0xc0
 8004a1a:	025b      	lsls	r3, r3, #9
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d109      	bne.n	8004a34 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8004a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a22:	4814      	ldr	r0, [pc, #80]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a24:	f7fb fb82 	bl	800012c <__udivsi3>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	001a      	movs	r2, r3
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	4353      	muls	r3, r2
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8004a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a36:	480e      	ldr	r0, [pc, #56]	; (8004a70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a38:	f7fb fb78 	bl	800012c <__udivsi3>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	001a      	movs	r2, r3
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	4353      	muls	r3, r2
 8004a44:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a4a:	e005      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a50:	e002      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b00f      	add	sp, #60	; 0x3c
 8004a60:	bd90      	pop	{r4, r7, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	080090c0 	.word	0x080090c0
 8004a68:	080090d0 	.word	0x080090d0
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	007a1200 	.word	0x007a1200
 8004a74:	02dc6c00 	.word	0x02dc6c00

08004a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a7c:	4b02      	ldr	r3, [pc, #8]	; (8004a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	0018      	movs	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	20000000 	.word	0x20000000

08004a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004a90:	f7ff fff2 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004a94:	0001      	movs	r1, r0
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	2207      	movs	r2, #7
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aa2:	5cd3      	ldrb	r3, [r2, r3]
 8004aa4:	40d9      	lsrs	r1, r3
 8004aa6:	000b      	movs	r3, r1
}    
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	080092b0 	.word	0x080092b0

08004ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	025b      	lsls	r3, r3, #9
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004ad4:	e08f      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004ad6:	2317      	movs	r3, #23
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ade:	4b6f      	ldr	r3, [pc, #444]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	055b      	lsls	r3, r3, #21
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d111      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aea:	4b6c      	ldr	r3, [pc, #432]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	4b6b      	ldr	r3, [pc, #428]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004af0:	2180      	movs	r1, #128	; 0x80
 8004af2:	0549      	lsls	r1, r1, #21
 8004af4:	430a      	orrs	r2, r1
 8004af6:	61da      	str	r2, [r3, #28]
 8004af8:	4b68      	ldr	r3, [pc, #416]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	055b      	lsls	r3, r3, #21
 8004b00:	4013      	ands	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b06:	2317      	movs	r3, #23
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0e:	4b64      	ldr	r3, [pc, #400]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4013      	ands	r3, r2
 8004b18:	d11a      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1a:	4b61      	ldr	r3, [pc, #388]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b60      	ldr	r3, [pc, #384]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	0049      	lsls	r1, r1, #1
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b28:	f7fe fae6 	bl	80030f8 <HAL_GetTick>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	e008      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7fe fae1 	bl	80030f8 <HAL_GetTick>
 8004b36:	0002      	movs	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b64      	cmp	r3, #100	; 0x64
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0a6      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b56      	ldr	r3, [pc, #344]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b50:	4b52      	ldr	r3, [pc, #328]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b52:	6a1a      	ldr	r2, [r3, #32]
 8004b54:	23c0      	movs	r3, #192	; 0xc0
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d034      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	23c0      	movs	r3, #192	; 0xc0
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d02c      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b72:	4b4a      	ldr	r3, [pc, #296]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	4a4b      	ldr	r2, [pc, #300]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b7c:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b7e:	6a1a      	ldr	r2, [r3, #32]
 8004b80:	4b46      	ldr	r3, [pc, #280]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	0249      	lsls	r1, r1, #9
 8004b86:	430a      	orrs	r2, r1
 8004b88:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b8a:	4b44      	ldr	r3, [pc, #272]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b8c:	6a1a      	ldr	r2, [r3, #32]
 8004b8e:	4b43      	ldr	r3, [pc, #268]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b90:	4945      	ldr	r1, [pc, #276]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004b92:	400a      	ands	r2, r1
 8004b94:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b96:	4b41      	ldr	r3, [pc, #260]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fe faa8 	bl	80030f8 <HAL_GetTick>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bac:	e009      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bae:	f7fe faa3 	bl	80030f8 <HAL_GetTick>
 8004bb2:	0002      	movs	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	4a3c      	ldr	r2, [pc, #240]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e067      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc2:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bcc:	4b33      	ldr	r3, [pc, #204]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	4b30      	ldr	r3, [pc, #192]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004be0:	2317      	movs	r3, #23
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d105      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bea:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004bec:	69da      	ldr	r2, [r3, #28]
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004bf0:	492f      	ldr	r1, [pc, #188]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d009      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c00:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	2203      	movs	r2, #3
 8004c06:	4393      	bics	r3, r2
 8004c08:	0019      	movs	r1, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	4b23      	ldr	r3, [pc, #140]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c10:	430a      	orrs	r2, r1
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	4a24      	ldr	r2, [pc, #144]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	0019      	movs	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2220      	movs	r2, #32
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c3c:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	2210      	movs	r2, #16
 8004c42:	4393      	bics	r3, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	4b14      	ldr	r3, [pc, #80]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	029b      	lsls	r3, r3, #10
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	4393      	bics	r3, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	2380      	movs	r3, #128	; 0x80
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d009      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c7c:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	2240      	movs	r2, #64	; 0x40
 8004c82:	4393      	bics	r3, r2
 8004c84:	0019      	movs	r1, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	0018      	movs	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b006      	add	sp, #24
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40007000 	.word	0x40007000
 8004ca4:	fffffcff 	.word	0xfffffcff
 8004ca8:	fffeffff 	.word	0xfffeffff
 8004cac:	00001388 	.word	0x00001388
 8004cb0:	efffffff 	.word	0xefffffff
 8004cb4:	fffcffff 	.word	0xfffcffff

08004cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e047      	b.n	8004d5a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2269      	movs	r2, #105	; 0x69
 8004cce:	5c9b      	ldrb	r3, [r3, r2]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2268      	movs	r2, #104	; 0x68
 8004cda:	2100      	movs	r1, #0
 8004cdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f001 fab5 	bl	8006250 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2269      	movs	r2, #105	; 0x69
 8004cea:	2124      	movs	r1, #36	; 0x24
 8004cec:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	438a      	bics	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f000 f8d5 	bl	8004eb0 <UART_SetConfig>
 8004d06:	0003      	movs	r3, r0
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e024      	b.n	8004d5a <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f000 fa84 	bl	8005228 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	490e      	ldr	r1, [pc, #56]	; (8004d64 <HAL_UART_Init+0xac>)
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	212a      	movs	r1, #42	; 0x2a
 8004d3c:	438a      	bics	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	0018      	movs	r0, r3
 8004d54:	f000 fb1c 	bl	8005390 <UART_CheckIdleState>
 8004d58:	0003      	movs	r3, r0
}
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b002      	add	sp, #8
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	ffffb7ff 	.word	0xffffb7ff

08004d68 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	1dbb      	adds	r3, r7, #6
 8004d76:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2269      	movs	r2, #105	; 0x69
 8004d80:	5c9b      	ldrb	r3, [r3, r2]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d000      	beq.n	8004d8a <HAL_UART_Transmit+0x22>
 8004d88:	e08c      	b.n	8004ea4 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_UART_Transmit+0x30>
 8004d90:	1dbb      	adds	r3, r7, #6
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e084      	b.n	8004ea6 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	015b      	lsls	r3, r3, #5
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d109      	bne.n	8004dbc <HAL_UART_Transmit+0x54>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2201      	movs	r2, #1
 8004db4:	4013      	ands	r3, r2
 8004db6:	d001      	beq.n	8004dbc <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e074      	b.n	8004ea6 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2268      	movs	r2, #104	; 0x68
 8004dc0:	5c9b      	ldrb	r3, [r3, r2]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_UART_Transmit+0x62>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e06d      	b.n	8004ea6 <HAL_UART_Transmit+0x13e>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2268      	movs	r2, #104	; 0x68
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2269      	movs	r2, #105	; 0x69
 8004ddc:	2121      	movs	r1, #33	; 0x21
 8004dde:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004de0:	f7fe f98a 	bl	80030f8 <HAL_GetTick>
 8004de4:	0003      	movs	r3, r0
 8004de6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1dba      	adds	r2, r7, #6
 8004dec:	2150      	movs	r1, #80	; 0x50
 8004dee:	8812      	ldrh	r2, [r2, #0]
 8004df0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1dba      	adds	r2, r7, #6
 8004df6:	2152      	movs	r1, #82	; 0x52
 8004df8:	8812      	ldrh	r2, [r2, #0]
 8004dfa:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8004dfc:	e035      	b.n	8004e6a <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2252      	movs	r2, #82	; 0x52
 8004e02:	5a9b      	ldrh	r3, [r3, r2]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b299      	uxth	r1, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2252      	movs	r2, #82	; 0x52
 8004e0e:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	0013      	movs	r3, r2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2180      	movs	r1, #128	; 0x80
 8004e1e:	f000 fb0f 	bl	8005440 <UART_WaitOnFlagUntilTimeout>
 8004e22:	1e03      	subs	r3, r0, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e03d      	b.n	8004ea6 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	015b      	lsls	r3, r3, #5
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d111      	bne.n	8004e5a <HAL_UART_Transmit+0xf2>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10d      	bne.n	8004e5a <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	881a      	ldrh	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	05d2      	lsls	r2, r2, #23
 8004e4c:	0dd2      	lsrs	r2, r2, #23
 8004e4e:	b292      	uxth	r2, r2
 8004e50:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	3302      	adds	r3, #2
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	e007      	b.n	8004e6a <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	60ba      	str	r2, [r7, #8]
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	b292      	uxth	r2, r2
 8004e68:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2252      	movs	r2, #82	; 0x52
 8004e6e:	5a9b      	ldrh	r3, [r3, r2]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1c3      	bne.n	8004dfe <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	0013      	movs	r3, r2
 8004e80:	2200      	movs	r2, #0
 8004e82:	2140      	movs	r1, #64	; 0x40
 8004e84:	f000 fadc 	bl	8005440 <UART_WaitOnFlagUntilTimeout>
 8004e88:	1e03      	subs	r3, r0, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e00a      	b.n	8004ea6 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2269      	movs	r2, #105	; 0x69
 8004e94:	2120      	movs	r1, #32
 8004e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2268      	movs	r2, #104	; 0x68
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e000      	b.n	8004ea6 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
  }
}
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b006      	add	sp, #24
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004ebc:	2317      	movs	r3, #23
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8004ec4:	230a      	movs	r3, #10
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	2200      	movs	r2, #0
 8004eca:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8004ecc:	2314      	movs	r3, #20
 8004ece:	18fb      	adds	r3, r7, r3
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed4:	2313      	movs	r3, #19
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4ac1      	ldr	r2, [pc, #772]	; (8005200 <UART_SetConfig+0x350>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	0019      	movs	r1, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4abc      	ldr	r2, [pc, #752]	; (8005204 <UART_SetConfig+0x354>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4ab4      	ldr	r2, [pc, #720]	; (8005208 <UART_SetConfig+0x358>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	0019      	movs	r1, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4ab0      	ldr	r2, [pc, #704]	; (800520c <UART_SetConfig+0x35c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d125      	bne.n	8004f9a <UART_SetConfig+0xea>
 8004f4e:	4bb0      	ldr	r3, [pc, #704]	; (8005210 <UART_SetConfig+0x360>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	2203      	movs	r2, #3
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d00f      	beq.n	8004f7a <UART_SetConfig+0xca>
 8004f5a:	d304      	bcc.n	8004f66 <UART_SetConfig+0xb6>
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d011      	beq.n	8004f84 <UART_SetConfig+0xd4>
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d005      	beq.n	8004f70 <UART_SetConfig+0xc0>
 8004f64:	e013      	b.n	8004f8e <UART_SetConfig+0xde>
 8004f66:	2317      	movs	r3, #23
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e064      	b.n	800503a <UART_SetConfig+0x18a>
 8004f70:	2317      	movs	r3, #23
 8004f72:	18fb      	adds	r3, r7, r3
 8004f74:	2202      	movs	r2, #2
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e05f      	b.n	800503a <UART_SetConfig+0x18a>
 8004f7a:	2317      	movs	r3, #23
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	2204      	movs	r2, #4
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	e05a      	b.n	800503a <UART_SetConfig+0x18a>
 8004f84:	2317      	movs	r3, #23
 8004f86:	18fb      	adds	r3, r7, r3
 8004f88:	2208      	movs	r2, #8
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e055      	b.n	800503a <UART_SetConfig+0x18a>
 8004f8e:	2317      	movs	r3, #23
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	2210      	movs	r2, #16
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	e04f      	b.n	800503a <UART_SetConfig+0x18a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a9d      	ldr	r2, [pc, #628]	; (8005214 <UART_SetConfig+0x364>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d132      	bne.n	800500a <UART_SetConfig+0x15a>
 8004fa4:	4b9a      	ldr	r3, [pc, #616]	; (8005210 <UART_SetConfig+0x360>)
 8004fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa8:	23c0      	movs	r3, #192	; 0xc0
 8004faa:	029b      	lsls	r3, r3, #10
 8004fac:	4013      	ands	r3, r2
 8004fae:	2280      	movs	r2, #128	; 0x80
 8004fb0:	0252      	lsls	r2, r2, #9
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d019      	beq.n	8004fea <UART_SetConfig+0x13a>
 8004fb6:	2280      	movs	r2, #128	; 0x80
 8004fb8:	0252      	lsls	r2, r2, #9
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d802      	bhi.n	8004fc4 <UART_SetConfig+0x114>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <UART_SetConfig+0x126>
 8004fc2:	e01c      	b.n	8004ffe <UART_SetConfig+0x14e>
 8004fc4:	2280      	movs	r2, #128	; 0x80
 8004fc6:	0292      	lsls	r2, r2, #10
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <UART_SetConfig+0x144>
 8004fcc:	22c0      	movs	r2, #192	; 0xc0
 8004fce:	0292      	lsls	r2, r2, #10
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d005      	beq.n	8004fe0 <UART_SetConfig+0x130>
 8004fd4:	e013      	b.n	8004ffe <UART_SetConfig+0x14e>
 8004fd6:	2317      	movs	r3, #23
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e02c      	b.n	800503a <UART_SetConfig+0x18a>
 8004fe0:	2317      	movs	r3, #23
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	e027      	b.n	800503a <UART_SetConfig+0x18a>
 8004fea:	2317      	movs	r3, #23
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	2204      	movs	r2, #4
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e022      	b.n	800503a <UART_SetConfig+0x18a>
 8004ff4:	2317      	movs	r3, #23
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e01d      	b.n	800503a <UART_SetConfig+0x18a>
 8004ffe:	2317      	movs	r3, #23
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	2210      	movs	r2, #16
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	e017      	b.n	800503a <UART_SetConfig+0x18a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a82      	ldr	r2, [pc, #520]	; (8005218 <UART_SetConfig+0x368>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d104      	bne.n	800501e <UART_SetConfig+0x16e>
 8005014:	2317      	movs	r3, #23
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	2200      	movs	r2, #0
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e00d      	b.n	800503a <UART_SetConfig+0x18a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a7e      	ldr	r2, [pc, #504]	; (800521c <UART_SetConfig+0x36c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d104      	bne.n	8005032 <UART_SetConfig+0x182>
 8005028:	2317      	movs	r3, #23
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e003      	b.n	800503a <UART_SetConfig+0x18a>
 8005032:	2317      	movs	r3, #23
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	2210      	movs	r2, #16
 8005038:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	429a      	cmp	r2, r3
 8005044:	d000      	beq.n	8005048 <UART_SetConfig+0x198>
 8005046:	e077      	b.n	8005138 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8005048:	2317      	movs	r3, #23
 800504a:	18fb      	adds	r3, r7, r3
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d01c      	beq.n	800508c <UART_SetConfig+0x1dc>
 8005052:	dc02      	bgt.n	800505a <UART_SetConfig+0x1aa>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <UART_SetConfig+0x1b4>
 8005058:	e04f      	b.n	80050fa <UART_SetConfig+0x24a>
 800505a:	2b04      	cmp	r3, #4
 800505c:	d027      	beq.n	80050ae <UART_SetConfig+0x1fe>
 800505e:	2b08      	cmp	r3, #8
 8005060:	d039      	beq.n	80050d6 <UART_SetConfig+0x226>
 8005062:	e04a      	b.n	80050fa <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005064:	f7ff fd12 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 8005068:	0003      	movs	r3, r0
 800506a:	005a      	lsls	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	18d2      	adds	r2, r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	0019      	movs	r1, r3
 800507a:	0010      	movs	r0, r2
 800507c:	f7fb f856 	bl	800012c <__udivsi3>
 8005080:	0003      	movs	r3, r0
 8005082:	001a      	movs	r2, r3
 8005084:	2314      	movs	r3, #20
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	801a      	strh	r2, [r3, #0]
        break;
 800508a:	e03b      	b.n	8005104 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	4a63      	ldr	r2, [pc, #396]	; (8005220 <UART_SetConfig+0x370>)
 8005094:	189a      	adds	r2, r3, r2
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	0019      	movs	r1, r3
 800509c:	0010      	movs	r0, r2
 800509e:	f7fb f845 	bl	800012c <__udivsi3>
 80050a2:	0003      	movs	r3, r0
 80050a4:	001a      	movs	r2, r3
 80050a6:	2314      	movs	r3, #20
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	801a      	strh	r2, [r3, #0]
        break;
 80050ac:	e02a      	b.n	8005104 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80050ae:	f7ff fc65 	bl	800497c <HAL_RCC_GetSysClockFreq>
 80050b2:	0003      	movs	r3, r0
 80050b4:	005a      	lsls	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	18d2      	adds	r2, r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	0019      	movs	r1, r3
 80050c4:	0010      	movs	r0, r2
 80050c6:	f7fb f831 	bl	800012c <__udivsi3>
 80050ca:	0003      	movs	r3, r0
 80050cc:	001a      	movs	r2, r3
 80050ce:	2314      	movs	r3, #20
 80050d0:	18fb      	adds	r3, r7, r3
 80050d2:	801a      	strh	r2, [r3, #0]
        break;
 80050d4:	e016      	b.n	8005104 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	2280      	movs	r2, #128	; 0x80
 80050de:	0252      	lsls	r2, r2, #9
 80050e0:	189a      	adds	r2, r3, r2
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	0019      	movs	r1, r3
 80050e8:	0010      	movs	r0, r2
 80050ea:	f7fb f81f 	bl	800012c <__udivsi3>
 80050ee:	0003      	movs	r3, r0
 80050f0:	001a      	movs	r2, r3
 80050f2:	2314      	movs	r3, #20
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	801a      	strh	r2, [r3, #0]
        break;
 80050f8:	e004      	b.n	8005104 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80050fa:	2313      	movs	r3, #19
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	2201      	movs	r2, #1
 8005100:	701a      	strb	r2, [r3, #0]
        break;
 8005102:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005104:	200a      	movs	r0, #10
 8005106:	183b      	adds	r3, r7, r0
 8005108:	2414      	movs	r4, #20
 800510a:	193a      	adds	r2, r7, r4
 800510c:	8812      	ldrh	r2, [r2, #0]
 800510e:	210f      	movs	r1, #15
 8005110:	438a      	bics	r2, r1
 8005112:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005114:	193b      	adds	r3, r7, r4
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	105b      	asrs	r3, r3, #1
 800511a:	b29b      	uxth	r3, r3
 800511c:	2207      	movs	r2, #7
 800511e:	4013      	ands	r3, r2
 8005120:	b299      	uxth	r1, r3
 8005122:	183b      	adds	r3, r7, r0
 8005124:	183a      	adds	r2, r7, r0
 8005126:	8812      	ldrh	r2, [r2, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	183a      	adds	r2, r7, r0
 8005132:	8812      	ldrh	r2, [r2, #0]
 8005134:	60da      	str	r2, [r3, #12]
 8005136:	e05b      	b.n	80051f0 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8005138:	2317      	movs	r3, #23
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d01b      	beq.n	800517a <UART_SetConfig+0x2ca>
 8005142:	dc02      	bgt.n	800514a <UART_SetConfig+0x29a>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <UART_SetConfig+0x2a4>
 8005148:	e04d      	b.n	80051e6 <UART_SetConfig+0x336>
 800514a:	2b04      	cmp	r3, #4
 800514c:	d026      	beq.n	800519c <UART_SetConfig+0x2ec>
 800514e:	2b08      	cmp	r3, #8
 8005150:	d037      	beq.n	80051c2 <UART_SetConfig+0x312>
 8005152:	e048      	b.n	80051e6 <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005154:	f7ff fc9a 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 8005158:	0002      	movs	r2, r0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	18d2      	adds	r2, r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	0019      	movs	r1, r3
 8005168:	0010      	movs	r0, r2
 800516a:	f7fa ffdf 	bl	800012c <__udivsi3>
 800516e:	0003      	movs	r3, r0
 8005170:	b29a      	uxth	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60da      	str	r2, [r3, #12]
        break;
 8005178:	e03a      	b.n	80051f0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	4a28      	ldr	r2, [pc, #160]	; (8005224 <UART_SetConfig+0x374>)
 8005182:	189a      	adds	r2, r3, r2
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	0019      	movs	r1, r3
 800518a:	0010      	movs	r0, r2
 800518c:	f7fa ffce 	bl	800012c <__udivsi3>
 8005190:	0003      	movs	r3, r0
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60da      	str	r2, [r3, #12]
        break;
 800519a:	e029      	b.n	80051f0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800519c:	f7ff fbee 	bl	800497c <HAL_RCC_GetSysClockFreq>
 80051a0:	0002      	movs	r2, r0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	18d2      	adds	r2, r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	0019      	movs	r1, r3
 80051b0:	0010      	movs	r0, r2
 80051b2:	f7fa ffbb 	bl	800012c <__udivsi3>
 80051b6:	0003      	movs	r3, r0
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60da      	str	r2, [r3, #12]
        break;
 80051c0:	e016      	b.n	80051f0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	2280      	movs	r2, #128	; 0x80
 80051ca:	0212      	lsls	r2, r2, #8
 80051cc:	189a      	adds	r2, r3, r2
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	0019      	movs	r1, r3
 80051d4:	0010      	movs	r0, r2
 80051d6:	f7fa ffa9 	bl	800012c <__udivsi3>
 80051da:	0003      	movs	r3, r0
 80051dc:	b29a      	uxth	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60da      	str	r2, [r3, #12]
        break;
 80051e4:	e004      	b.n	80051f0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80051e6:	2313      	movs	r3, #19
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	2201      	movs	r2, #1
 80051ec:	701a      	strb	r2, [r3, #0]
        break;
 80051ee:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 80051f0:	2313      	movs	r3, #19
 80051f2:	18fb      	adds	r3, r7, r3
 80051f4:	781b      	ldrb	r3, [r3, #0]

}
 80051f6:	0018      	movs	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b007      	add	sp, #28
 80051fc:	bd90      	pop	{r4, r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	efff69f3 	.word	0xefff69f3
 8005204:	ffffcfff 	.word	0xffffcfff
 8005208:	fffff4ff 	.word	0xfffff4ff
 800520c:	40013800 	.word	0x40013800
 8005210:	40021000 	.word	0x40021000
 8005214:	40004400 	.word	0x40004400
 8005218:	40004800 	.word	0x40004800
 800521c:	40004c00 	.word	0x40004c00
 8005220:	00f42400 	.word	0x00f42400
 8005224:	007a1200 	.word	0x007a1200

08005228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2201      	movs	r2, #1
 8005236:	4013      	ands	r3, r2
 8005238:	d00b      	beq.n	8005252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4a4a      	ldr	r2, [pc, #296]	; (800536c <UART_AdvFeatureConfig+0x144>)
 8005242:	4013      	ands	r3, r2
 8005244:	0019      	movs	r1, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2202      	movs	r2, #2
 8005258:	4013      	ands	r3, r2
 800525a:	d00b      	beq.n	8005274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	4a43      	ldr	r2, [pc, #268]	; (8005370 <UART_AdvFeatureConfig+0x148>)
 8005264:	4013      	ands	r3, r2
 8005266:	0019      	movs	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2204      	movs	r2, #4
 800527a:	4013      	ands	r3, r2
 800527c:	d00b      	beq.n	8005296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a3b      	ldr	r2, [pc, #236]	; (8005374 <UART_AdvFeatureConfig+0x14c>)
 8005286:	4013      	ands	r3, r2
 8005288:	0019      	movs	r1, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2208      	movs	r2, #8
 800529c:	4013      	ands	r3, r2
 800529e:	d00b      	beq.n	80052b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4a34      	ldr	r2, [pc, #208]	; (8005378 <UART_AdvFeatureConfig+0x150>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	0019      	movs	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2210      	movs	r2, #16
 80052be:	4013      	ands	r3, r2
 80052c0:	d00b      	beq.n	80052da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4a2c      	ldr	r2, [pc, #176]	; (800537c <UART_AdvFeatureConfig+0x154>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	0019      	movs	r1, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2220      	movs	r2, #32
 80052e0:	4013      	ands	r3, r2
 80052e2:	d00b      	beq.n	80052fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	4a25      	ldr	r2, [pc, #148]	; (8005380 <UART_AdvFeatureConfig+0x158>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	0019      	movs	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	2240      	movs	r2, #64	; 0x40
 8005302:	4013      	ands	r3, r2
 8005304:	d01d      	beq.n	8005342 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <UART_AdvFeatureConfig+0x15c>)
 800530e:	4013      	ands	r3, r2
 8005310:	0019      	movs	r1, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	035b      	lsls	r3, r3, #13
 8005326:	429a      	cmp	r2, r3
 8005328:	d10b      	bne.n	8005342 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <UART_AdvFeatureConfig+0x160>)
 8005332:	4013      	ands	r3, r2
 8005334:	0019      	movs	r1, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2280      	movs	r2, #128	; 0x80
 8005348:	4013      	ands	r3, r2
 800534a:	d00b      	beq.n	8005364 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a0e      	ldr	r2, [pc, #56]	; (800538c <UART_AdvFeatureConfig+0x164>)
 8005354:	4013      	ands	r3, r2
 8005356:	0019      	movs	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}
 800536c:	fffdffff 	.word	0xfffdffff
 8005370:	fffeffff 	.word	0xfffeffff
 8005374:	fffbffff 	.word	0xfffbffff
 8005378:	ffff7fff 	.word	0xffff7fff
 800537c:	ffffefff 	.word	0xffffefff
 8005380:	ffffdfff 	.word	0xffffdfff
 8005384:	ffefffff 	.word	0xffefffff
 8005388:	ff9fffff 	.word	0xff9fffff
 800538c:	fff7ffff 	.word	0xfff7ffff

08005390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af02      	add	r7, sp, #8
 8005396:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80053a2:	f7fd fea9 	bl	80030f8 <HAL_GetTick>
 80053a6:	0003      	movs	r3, r0
 80053a8:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a21      	ldr	r2, [pc, #132]	; (8005434 <UART_CheckIdleState+0xa4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <UART_CheckIdleState+0x2e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1f      	ldr	r2, [pc, #124]	; (8005438 <UART_CheckIdleState+0xa8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d129      	bne.n	8005412 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2208      	movs	r2, #8
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d10d      	bne.n	80053e8 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	0399      	lsls	r1, r3, #14
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	4b19      	ldr	r3, [pc, #100]	; (800543c <UART_CheckIdleState+0xac>)
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	0013      	movs	r3, r2
 80053da:	2200      	movs	r2, #0
 80053dc:	f000 f830 	bl	8005440 <UART_WaitOnFlagUntilTimeout>
 80053e0:	1e03      	subs	r3, r0, #0
 80053e2:	d001      	beq.n	80053e8 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e021      	b.n	800542c <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2204      	movs	r2, #4
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d10d      	bne.n	8005412 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	03d9      	lsls	r1, r3, #15
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <UART_CheckIdleState+0xac>)
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	0013      	movs	r3, r2
 8005404:	2200      	movs	r2, #0
 8005406:	f000 f81b 	bl	8005440 <UART_WaitOnFlagUntilTimeout>
 800540a:	1e03      	subs	r3, r0, #0
 800540c:	d001      	beq.n	8005412 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e00c      	b.n	800542c <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2269      	movs	r2, #105	; 0x69
 8005416:	2120      	movs	r1, #32
 8005418:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	226a      	movs	r2, #106	; 0x6a
 800541e:	2120      	movs	r1, #32
 8005420:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2268      	movs	r2, #104	; 0x68
 8005426:	2100      	movs	r1, #0
 8005428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b004      	add	sp, #16
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40013800 	.word	0x40013800
 8005438:	40004400 	.word	0x40004400
 800543c:	01ffffff 	.word	0x01ffffff

08005440 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	1dfb      	adds	r3, r7, #7
 800544e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005450:	e02b      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	3301      	adds	r3, #1
 8005456:	d028      	beq.n	80054aa <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <UART_WaitOnFlagUntilTimeout+0x2e>
 800545e:	f7fd fe4b 	bl	80030f8 <HAL_GetTick>
 8005462:	0002      	movs	r2, r0
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	429a      	cmp	r2, r3
 800546c:	d21d      	bcs.n	80054aa <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4916      	ldr	r1, [pc, #88]	; (80054d4 <UART_WaitOnFlagUntilTimeout+0x94>)
 800547a:	400a      	ands	r2, r1
 800547c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2101      	movs	r1, #1
 800548a:	438a      	bics	r2, r1
 800548c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2269      	movs	r2, #105	; 0x69
 8005492:	2120      	movs	r1, #32
 8005494:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	226a      	movs	r2, #106	; 0x6a
 800549a:	2120      	movs	r1, #32
 800549c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2268      	movs	r2, #104	; 0x68
 80054a2:	2100      	movs	r1, #0
 80054a4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e00f      	b.n	80054ca <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	4013      	ands	r3, r2
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	425a      	negs	r2, r3
 80054ba:	4153      	adcs	r3, r2
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	001a      	movs	r2, r3
 80054c0:	1dfb      	adds	r3, r7, #7
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d0c4      	beq.n	8005452 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	0018      	movs	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b004      	add	sp, #16
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	fffffe5f 	.word	0xfffffe5f

080054d8 <afe_init>:
//================ Private Function Prototypes ============
static HAL_StatusTypeDef afe_balance_upper(uint8_t channel_enable);
static HAL_StatusTypeDef afe_balance_lower(uint8_t channel_enable);

// ================= PUBLIC FUNCTIONS ====================
HAL_StatusTypeDef afe_init() {
 80054d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054da:	b08d      	sub	sp, #52	; 0x34
 80054dc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	//clear the DEVICE_XREADY bit
	SysStatTypedef stat;
	stat.data = 0xFF; //clear all the status flags
 80054de:	212c      	movs	r1, #44	; 0x2c
 80054e0:	187b      	adds	r3, r7, r1
 80054e2:	22ff      	movs	r2, #255	; 0xff
 80054e4:	701a      	strb	r2, [r3, #0]
	status = i2c_write_reg(AFE_ADDR, SYS_STAT_REG, stat.data);
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	252f      	movs	r5, #47	; 0x2f
 80054ec:	197c      	adds	r4, r7, r5
 80054ee:	001a      	movs	r2, r3
 80054f0:	2100      	movs	r1, #0
 80054f2:	2030      	movs	r0, #48	; 0x30
 80054f4:	f000 fba2 	bl	8005c3c <i2c_write_reg>
 80054f8:	0003      	movs	r3, r0
 80054fa:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80054fc:	197b      	adds	r3, r7, r5
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <afe_init+0x34>
 8005504:	232f      	movs	r3, #47	; 0x2f
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	e0ba      	b.n	8005682 <afe_init+0x1aa>

	//read the ADC gain and offset registers
	uint8_t gain_offset[10]; //only care about the 0th, 1st, and 9th registers
	status = i2c_read_regs(AFE_ADDR, ADC_CAL_REG_BASE, 10, gain_offset);
 800550c:	252f      	movs	r5, #47	; 0x2f
 800550e:	197c      	adds	r4, r7, r5
 8005510:	2320      	movs	r3, #32
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	220a      	movs	r2, #10
 8005516:	2150      	movs	r1, #80	; 0x50
 8005518:	2030      	movs	r0, #48	; 0x30
 800551a:	f000 fbcd 	bl	8005cb8 <i2c_read_regs>
 800551e:	0003      	movs	r3, r0
 8005520:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 8005522:	197b      	adds	r3, r7, r5
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <afe_init+0x5a>
 800552a:	232f      	movs	r3, #47	; 0x2f
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	e0a7      	b.n	8005682 <afe_init+0x1aa>
	//stitch together the ADC gain and offset bits as appropriate
	uint8_t adc_gain_bits = ((gain_offset[0] & 0x0C) << 1) | (gain_offset[9] >> 5);
 8005532:	2120      	movs	r1, #32
 8005534:	187b      	adds	r3, r7, r1
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	b25b      	sxtb	r3, r3
 800553c:	2218      	movs	r2, #24
 800553e:	4013      	ands	r3, r2
 8005540:	b25a      	sxtb	r2, r3
 8005542:	187b      	adds	r3, r7, r1
 8005544:	7a5b      	ldrb	r3, [r3, #9]
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	b2db      	uxtb	r3, r3
 800554a:	b25b      	sxtb	r3, r3
 800554c:	4313      	orrs	r3, r2
 800554e:	b25a      	sxtb	r2, r3
 8005550:	202e      	movs	r0, #46	; 0x2e
 8005552:	183b      	adds	r3, r7, r0
 8005554:	701a      	strb	r2, [r3, #0]
	int8_t adc_offset_bits = (int8_t)(gain_offset[1]);
 8005556:	187b      	adds	r3, r7, r1
 8005558:	785a      	ldrb	r2, [r3, #1]
 800555a:	252d      	movs	r5, #45	; 0x2d
 800555c:	197b      	adds	r3, r7, r5
 800555e:	701a      	strb	r2, [r3, #0]

	adc_mv_per_lsb = ADC_GAIN_CONSTANT + (float)(adc_gain_bits)*ADC_GAIN_CAL;
 8005560:	183b      	adds	r3, r7, r0
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	0018      	movs	r0, r3
 8005566:	f7fb feb9 	bl	80012dc <__aeabi_ui2f>
 800556a:	1c03      	adds	r3, r0, #0
 800556c:	1c18      	adds	r0, r3, #0
 800556e:	f7fd fc93 	bl	8002e98 <__aeabi_f2d>
 8005572:	4a46      	ldr	r2, [pc, #280]	; (800568c <afe_init+0x1b4>)
 8005574:	4b46      	ldr	r3, [pc, #280]	; (8005690 <afe_init+0x1b8>)
 8005576:	f7fc fe17 	bl	80021a8 <__aeabi_dmul>
 800557a:	0003      	movs	r3, r0
 800557c:	000c      	movs	r4, r1
 800557e:	0018      	movs	r0, r3
 8005580:	0021      	movs	r1, r4
 8005582:	4a44      	ldr	r2, [pc, #272]	; (8005694 <afe_init+0x1bc>)
 8005584:	4b44      	ldr	r3, [pc, #272]	; (8005698 <afe_init+0x1c0>)
 8005586:	f7fb fee9 	bl	800135c <__aeabi_dadd>
 800558a:	0003      	movs	r3, r0
 800558c:	000c      	movs	r4, r1
 800558e:	0018      	movs	r0, r3
 8005590:	0021      	movs	r1, r4
 8005592:	f7fd fcd3 	bl	8002f3c <__aeabi_d2f>
 8005596:	1c02      	adds	r2, r0, #0
 8005598:	4b40      	ldr	r3, [pc, #256]	; (800569c <afe_init+0x1c4>)
 800559a:	601a      	str	r2, [r3, #0]
	adc_offset = (float)(adc_offset_bits);
 800559c:	197b      	adds	r3, r7, r5
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	b25b      	sxtb	r3, r3
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7fb fe50 	bl	8001248 <__aeabi_i2f>
 80055a8:	1c02      	adds	r2, r0, #0
 80055aa:	4b3d      	ldr	r3, [pc, #244]	; (80056a0 <afe_init+0x1c8>)
 80055ac:	601a      	str	r2, [r3, #0]

	//set the control and protect registers consecutively
	SysCtrl1Typedef ctrl1;
	ctrl1.map.ADC_en = 1; //enable the ADC and OVP
 80055ae:	201c      	movs	r0, #28
 80055b0:	183b      	adds	r3, r7, r0
 80055b2:	781a      	ldrb	r2, [r3, #0]
 80055b4:	2110      	movs	r1, #16
 80055b6:	430a      	orrs	r2, r1
 80055b8:	701a      	strb	r2, [r3, #0]
	ctrl1.map.Temp_sel = TEMP_THERM;
 80055ba:	183b      	adds	r3, r7, r0
 80055bc:	781a      	ldrb	r2, [r3, #0]
 80055be:	2108      	movs	r1, #8
 80055c0:	430a      	orrs	r2, r1
 80055c2:	701a      	strb	r2, [r3, #0]

	SysCtrl2Typedef ctrl2;
	ctrl2.data = 0;
 80055c4:	2518      	movs	r5, #24
 80055c6:	197b      	adds	r3, r7, r5
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
	//lol as of now, we don't need to assert any bits in the CTRL2 register

	Protect1Typedef pt1;
	pt1.data = 0;
 80055cc:	2614      	movs	r6, #20
 80055ce:	19bb      	adds	r3, r7, r6
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
	//where we set some delay parameters regarding short circuit detection
	//we're not sensing current through the AFE, so don't have to worry about any of the settings in here

	Protect2Typedef pt2;
	pt2.data = 0;
 80055d4:	2310      	movs	r3, #16
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
	//ditto as above (this register has to deal with over current protection though)

	Protect3Typedef pt3;
	pt3.map.OV_delay = OV_DELAY_2s;
 80055dc:	240c      	movs	r4, #12
 80055de:	193b      	adds	r3, r7, r4
 80055e0:	781a      	ldrb	r2, [r3, #0]
 80055e2:	2130      	movs	r1, #48	; 0x30
 80055e4:	438a      	bics	r2, r1
 80055e6:	1c11      	adds	r1, r2, #0
 80055e8:	2210      	movs	r2, #16
 80055ea:	430a      	orrs	r2, r1
 80055ec:	701a      	strb	r2, [r3, #0]
	pt3.map.UV_delay = UV_DELAY_4s;
 80055ee:	193b      	adds	r3, r7, r4
 80055f0:	781a      	ldrb	r2, [r3, #0]
 80055f2:	213f      	movs	r1, #63	; 0x3f
 80055f4:	400a      	ands	r2, r1
 80055f6:	1c11      	adds	r1, r2, #0
 80055f8:	2240      	movs	r2, #64	; 0x40
 80055fa:	430a      	orrs	r2, r1
 80055fc:	701a      	strb	r2, [r3, #0]

	//send the above 5 registers to the device
	uint8_t ctrl_prot_regs[6];
	ctrl_prot_regs[0] = SYS_CTRL_1_REG; //starting register that we'll be writing to
 80055fe:	1d3b      	adds	r3, r7, #4
 8005600:	2204      	movs	r2, #4
 8005602:	701a      	strb	r2, [r3, #0]
	ctrl_prot_regs[1] = ctrl1.data;
 8005604:	183b      	adds	r3, r7, r0
 8005606:	781a      	ldrb	r2, [r3, #0]
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	705a      	strb	r2, [r3, #1]
	ctrl_prot_regs[2] = ctrl2.data;
 800560c:	197b      	adds	r3, r7, r5
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	1d3b      	adds	r3, r7, #4
 8005612:	709a      	strb	r2, [r3, #2]
	ctrl_prot_regs[3] = pt1.data;
 8005614:	19bb      	adds	r3, r7, r6
 8005616:	781a      	ldrb	r2, [r3, #0]
 8005618:	1d3b      	adds	r3, r7, #4
 800561a:	70da      	strb	r2, [r3, #3]
	ctrl_prot_regs[4] = pt2.data;
 800561c:	2310      	movs	r3, #16
 800561e:	18fb      	adds	r3, r7, r3
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	1d3b      	adds	r3, r7, #4
 8005624:	711a      	strb	r2, [r3, #4]
	ctrl_prot_regs[5] = pt3.data;
 8005626:	193b      	adds	r3, r7, r4
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	715a      	strb	r2, [r3, #5]
	status = i2c_write_regs(AFE_ADDR, ctrl_prot_regs, 6);
 800562e:	252f      	movs	r5, #47	; 0x2f
 8005630:	197c      	adds	r4, r7, r5
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	2206      	movs	r2, #6
 8005636:	0019      	movs	r1, r3
 8005638:	2030      	movs	r0, #48	; 0x30
 800563a:	f000 fb89 	bl	8005d50 <i2c_write_regs>
 800563e:	0003      	movs	r3, r0
 8005640:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 8005642:	197b      	adds	r3, r7, r5
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <afe_init+0x17a>
 800564a:	232f      	movs	r3, #47	; 0x2f
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	e017      	b.n	8005682 <afe_init+0x1aa>

	//initialize the OV and UV voltages to something reasonable
	status = afe_set_vThresholds(OV_TRIP_THRESHOLD, UV_TRIP_THRESHOLD);
 8005652:	252f      	movs	r5, #47	; 0x2f
 8005654:	197c      	adds	r4, r7, r5
 8005656:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <afe_init+0x1cc>)
 8005658:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <afe_init+0x1d0>)
 800565a:	1c11      	adds	r1, r2, #0
 800565c:	1c18      	adds	r0, r3, #0
 800565e:	f000 f825 	bl	80056ac <afe_set_vThresholds>
 8005662:	0003      	movs	r3, r0
 8005664:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 8005666:	197b      	adds	r3, r7, r5
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <afe_init+0x19e>
 800566e:	232f      	movs	r3, #47	; 0x2f
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	e005      	b.n	8005682 <afe_init+0x1aa>

	//and finally, set the CC_CFG register to whatever we need to
	return i2c_write_reg(AFE_ADDR, CC_CFG_REG, CC_CONFIG_CONSTANT);
 8005676:	2219      	movs	r2, #25
 8005678:	210b      	movs	r1, #11
 800567a:	2030      	movs	r0, #48	; 0x30
 800567c:	f000 fade 	bl	8005c3c <i2c_write_reg>
 8005680:	0003      	movs	r3, r0
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b00d      	add	sp, #52	; 0x34
 8005688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	d2f1a9fc 	.word	0xd2f1a9fc
 8005690:	3f50624d 	.word	0x3f50624d
 8005694:	f5c28f5c 	.word	0xf5c28f5c
 8005698:	3fd75c28 	.word	0x3fd75c28
 800569c:	200001f4 	.word	0x200001f4
 80056a0:	200001f8 	.word	0x200001f8
 80056a4:	453b8000 	.word	0x453b8000
 80056a8:	45840800 	.word	0x45840800

080056ac <afe_set_vThresholds>:

//ov and uv parameters are in MILLIVOLTS
HAL_StatusTypeDef afe_set_vThresholds(float ov, float uv) {
 80056ac:	b5b0      	push	{r4, r5, r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
	//calculate the OV bit setting from the threshold we want
	// ov_voltage = adc*gain + offset, so reverse this equation
	uint16_t ADC_reading = (uint16_t)((ov-adc_offset)/adc_mv_per_lsb);
 80056b6:	4b34      	ldr	r3, [pc, #208]	; (8005788 <afe_set_vThresholds+0xdc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	1c19      	adds	r1, r3, #0
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fb fbdf 	bl	8000e80 <__aeabi_fsub>
 80056c2:	1c03      	adds	r3, r0, #0
 80056c4:	1c1a      	adds	r2, r3, #0
 80056c6:	4b31      	ldr	r3, [pc, #196]	; (800578c <afe_set_vThresholds+0xe0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	1c19      	adds	r1, r3, #0
 80056cc:	1c10      	adds	r0, r2, #0
 80056ce:	f7fb f8cd 	bl	800086c <__aeabi_fdiv>
 80056d2:	1c03      	adds	r3, r0, #0
 80056d4:	250e      	movs	r5, #14
 80056d6:	197c      	adds	r4, r7, r5
 80056d8:	1c18      	adds	r0, r3, #0
 80056da:	f7fa ff15 	bl	8000508 <__aeabi_f2uiz>
 80056de:	0003      	movs	r3, r0
 80056e0:	8023      	strh	r3, [r4, #0]
	if((ADC_reading & 0x3000) == 0x2000) return HAL_ERROR; //make sure the top two bits are `10`
 80056e2:	197b      	adds	r3, r7, r5
 80056e4:	881a      	ldrh	r2, [r3, #0]
 80056e6:	23c0      	movs	r3, #192	; 0xc0
 80056e8:	019b      	lsls	r3, r3, #6
 80056ea:	401a      	ands	r2, r3
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	019b      	lsls	r3, r3, #6
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d101      	bne.n	80056f8 <afe_set_vThresholds+0x4c>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e043      	b.n	8005780 <afe_set_vThresholds+0xd4>
	uint8_t ov_regval = (ADC_reading & 0xFF0) >> 4; //see BQ76930 datasheet page 37
 80056f8:	240e      	movs	r4, #14
 80056fa:	193b      	adds	r3, r7, r4
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	111a      	asrs	r2, r3, #4
 8005700:	230d      	movs	r3, #13
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	701a      	strb	r2, [r3, #0]

	//calculate the UV bit setting from the threshold we want
	ADC_reading = (uint16_t)((uv-adc_offset)/adc_mv_per_lsb);
 8005706:	4b20      	ldr	r3, [pc, #128]	; (8005788 <afe_set_vThresholds+0xdc>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	1c19      	adds	r1, r3, #0
 800570c:	6838      	ldr	r0, [r7, #0]
 800570e:	f7fb fbb7 	bl	8000e80 <__aeabi_fsub>
 8005712:	1c03      	adds	r3, r0, #0
 8005714:	1c1a      	adds	r2, r3, #0
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <afe_set_vThresholds+0xe0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	1c19      	adds	r1, r3, #0
 800571c:	1c10      	adds	r0, r2, #0
 800571e:	f7fb f8a5 	bl	800086c <__aeabi_fdiv>
 8005722:	1c03      	adds	r3, r0, #0
 8005724:	0025      	movs	r5, r4
 8005726:	193c      	adds	r4, r7, r4
 8005728:	1c18      	adds	r0, r3, #0
 800572a:	f7fa feed 	bl	8000508 <__aeabi_f2uiz>
 800572e:	0003      	movs	r3, r0
 8005730:	8023      	strh	r3, [r4, #0]
	if((ADC_reading & 0x3000) == 0x1000) return HAL_ERROR; //make sure the top two bits are `01`
 8005732:	002c      	movs	r4, r5
 8005734:	193b      	adds	r3, r7, r4
 8005736:	881a      	ldrh	r2, [r3, #0]
 8005738:	23c0      	movs	r3, #192	; 0xc0
 800573a:	019b      	lsls	r3, r3, #6
 800573c:	401a      	ands	r2, r3
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	015b      	lsls	r3, r3, #5
 8005742:	429a      	cmp	r2, r3
 8005744:	d101      	bne.n	800574a <afe_set_vThresholds+0x9e>
 8005746:	2301      	movs	r3, #1
 8005748:	e01a      	b.n	8005780 <afe_set_vThresholds+0xd4>
	uint8_t uv_regval = (ADC_reading & 0xFF0) >> 4; //see BQ76930 datasheet page 37
 800574a:	230e      	movs	r3, #14
 800574c:	18fb      	adds	r3, r7, r3
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	111a      	asrs	r2, r3, #4
 8005752:	200c      	movs	r0, #12
 8005754:	183b      	adds	r3, r7, r0
 8005756:	701a      	strb	r2, [r3, #0]

	//send itttttt (sequentially in a single write)
	uint8_t thresh_vals[3];
	thresh_vals[0] = OV_TRIP_REG;
 8005758:	2108      	movs	r1, #8
 800575a:	187b      	adds	r3, r7, r1
 800575c:	2209      	movs	r2, #9
 800575e:	701a      	strb	r2, [r3, #0]
	thresh_vals[1] = ov_regval;
 8005760:	187b      	adds	r3, r7, r1
 8005762:	220d      	movs	r2, #13
 8005764:	18ba      	adds	r2, r7, r2
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	705a      	strb	r2, [r3, #1]
	thresh_vals[2] = uv_regval;
 800576a:	187b      	adds	r3, r7, r1
 800576c:	183a      	adds	r2, r7, r0
 800576e:	7812      	ldrb	r2, [r2, #0]
 8005770:	709a      	strb	r2, [r3, #2]
	return i2c_write_regs(AFE_ADDR, thresh_vals, 3);
 8005772:	187b      	adds	r3, r7, r1
 8005774:	2203      	movs	r2, #3
 8005776:	0019      	movs	r1, r3
 8005778:	2030      	movs	r0, #48	; 0x30
 800577a:	f000 fae9 	bl	8005d50 <i2c_write_regs>
 800577e:	0003      	movs	r3, r0
}
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	b004      	add	sp, #16
 8005786:	bdb0      	pop	{r4, r5, r7, pc}
 8005788:	200001f8 	.word	0x200001f8
 800578c:	200001f4 	.word	0x200001f4

08005790 <afe_measure_temps>:

	//resend the control2 register to the chip
	return i2c_write_reg(AFE_ADDR, SYS_CTRL_2_REG, ctrl2.data);
}

HAL_StatusTypeDef afe_measure_temps(float* ts1, float* ts2) {
 8005790:	b5b0      	push	{r4, r5, r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	//read the TS1 and TS2 registers
	uint8_t therm[4];
	status = i2c_read_regs(AFE_ADDR, TS1_REG_BASE, 4, therm);
 800579a:	251f      	movs	r5, #31
 800579c:	197c      	adds	r4, r7, r5
 800579e:	2308      	movs	r3, #8
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	2204      	movs	r2, #4
 80057a4:	212c      	movs	r1, #44	; 0x2c
 80057a6:	2030      	movs	r0, #48	; 0x30
 80057a8:	f000 fa86 	bl	8005cb8 <i2c_read_regs>
 80057ac:	0003      	movs	r3, r0
 80057ae:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80057b0:	197b      	adds	r3, r7, r5
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <afe_measure_temps+0x30>
 80057b8:	231f      	movs	r3, #31
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	e0a9      	b.n	8005914 <afe_measure_temps+0x184>

	//tack together the two thermistor readings and turn it into a voltage
	float v_th1, v_th2, r_th1, r_th2;
	v_th1 = (((therm[0] && 0x3F) << 8) | therm[1]) * adc_mv_per_lsb + adc_offset;
 80057c0:	2308      	movs	r3, #8
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <afe_measure_temps+0x40>
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	e000      	b.n	80057d2 <afe_measure_temps+0x42>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2408      	movs	r4, #8
 80057d4:	193a      	adds	r2, r7, r4
 80057d6:	7852      	ldrb	r2, [r2, #1]
 80057d8:	4313      	orrs	r3, r2
 80057da:	0018      	movs	r0, r3
 80057dc:	f7fb fd34 	bl	8001248 <__aeabi_i2f>
 80057e0:	1c02      	adds	r2, r0, #0
 80057e2:	4b4e      	ldr	r3, [pc, #312]	; (800591c <afe_measure_temps+0x18c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	1c19      	adds	r1, r3, #0
 80057e8:	1c10      	adds	r0, r2, #0
 80057ea:	f7fb fa17 	bl	8000c1c <__aeabi_fmul>
 80057ee:	1c03      	adds	r3, r0, #0
 80057f0:	1c1a      	adds	r2, r3, #0
 80057f2:	4b4b      	ldr	r3, [pc, #300]	; (8005920 <afe_measure_temps+0x190>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	1c19      	adds	r1, r3, #0
 80057f8:	1c10      	adds	r0, r2, #0
 80057fa:	f7fa fe9d 	bl	8000538 <__aeabi_fadd>
 80057fe:	1c03      	adds	r3, r0, #0
 8005800:	61bb      	str	r3, [r7, #24]
	v_th2 = (((therm[2] && 0x3F) << 8) | therm[3]) * adc_mv_per_lsb + adc_offset;
 8005802:	193b      	adds	r3, r7, r4
 8005804:	789b      	ldrb	r3, [r3, #2]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <afe_measure_temps+0x80>
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	e000      	b.n	8005812 <afe_measure_temps+0x82>
 8005810:	2300      	movs	r3, #0
 8005812:	2208      	movs	r2, #8
 8005814:	18ba      	adds	r2, r7, r2
 8005816:	78d2      	ldrb	r2, [r2, #3]
 8005818:	4313      	orrs	r3, r2
 800581a:	0018      	movs	r0, r3
 800581c:	f7fb fd14 	bl	8001248 <__aeabi_i2f>
 8005820:	1c02      	adds	r2, r0, #0
 8005822:	4b3e      	ldr	r3, [pc, #248]	; (800591c <afe_measure_temps+0x18c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	1c19      	adds	r1, r3, #0
 8005828:	1c10      	adds	r0, r2, #0
 800582a:	f7fb f9f7 	bl	8000c1c <__aeabi_fmul>
 800582e:	1c03      	adds	r3, r0, #0
 8005830:	1c1a      	adds	r2, r3, #0
 8005832:	4b3b      	ldr	r3, [pc, #236]	; (8005920 <afe_measure_temps+0x190>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	1c19      	adds	r1, r3, #0
 8005838:	1c10      	adds	r0, r2, #0
 800583a:	f7fa fe7d 	bl	8000538 <__aeabi_fadd>
 800583e:	1c03      	adds	r3, r0, #0
 8005840:	617b      	str	r3, [r7, #20]
	r_th1 = (THERM_PULLUP * v_th1)/(THERM_VREF - v_th1);
 8005842:	4938      	ldr	r1, [pc, #224]	; (8005924 <afe_measure_temps+0x194>)
 8005844:	69b8      	ldr	r0, [r7, #24]
 8005846:	f7fb f9e9 	bl	8000c1c <__aeabi_fmul>
 800584a:	1c03      	adds	r3, r0, #0
 800584c:	1c1c      	adds	r4, r3, #0
 800584e:	69b9      	ldr	r1, [r7, #24]
 8005850:	4835      	ldr	r0, [pc, #212]	; (8005928 <afe_measure_temps+0x198>)
 8005852:	f7fb fb15 	bl	8000e80 <__aeabi_fsub>
 8005856:	1c03      	adds	r3, r0, #0
 8005858:	1c19      	adds	r1, r3, #0
 800585a:	1c20      	adds	r0, r4, #0
 800585c:	f7fb f806 	bl	800086c <__aeabi_fdiv>
 8005860:	1c03      	adds	r3, r0, #0
 8005862:	613b      	str	r3, [r7, #16]
	r_th2 = (THERM_PULLUP * v_th2)/(THERM_VREF - v_th2);
 8005864:	492f      	ldr	r1, [pc, #188]	; (8005924 <afe_measure_temps+0x194>)
 8005866:	6978      	ldr	r0, [r7, #20]
 8005868:	f7fb f9d8 	bl	8000c1c <__aeabi_fmul>
 800586c:	1c03      	adds	r3, r0, #0
 800586e:	1c1c      	adds	r4, r3, #0
 8005870:	6979      	ldr	r1, [r7, #20]
 8005872:	482d      	ldr	r0, [pc, #180]	; (8005928 <afe_measure_temps+0x198>)
 8005874:	f7fb fb04 	bl	8000e80 <__aeabi_fsub>
 8005878:	1c03      	adds	r3, r0, #0
 800587a:	1c19      	adds	r1, r3, #0
 800587c:	1c20      	adds	r0, r4, #0
 800587e:	f7fa fff5 	bl	800086c <__aeabi_fdiv>
 8005882:	1c03      	adds	r3, r0, #0
 8005884:	60fb      	str	r3, [r7, #12]

	//calculate the temperature values from the thermistor resistance using beta equation
	*ts1 = 1/(1/(THERM_NOM_TEMP + KELVIN_OFFSET) + (1/THERM_BETA) * (float)log((double)r_th1));
 8005886:	6938      	ldr	r0, [r7, #16]
 8005888:	f7fd fb06 	bl	8002e98 <__aeabi_f2d>
 800588c:	0003      	movs	r3, r0
 800588e:	000c      	movs	r4, r1
 8005890:	0018      	movs	r0, r3
 8005892:	0021      	movs	r1, r4
 8005894:	f003 f9ce 	bl	8008c34 <log>
 8005898:	0003      	movs	r3, r0
 800589a:	000c      	movs	r4, r1
 800589c:	0018      	movs	r0, r3
 800589e:	0021      	movs	r1, r4
 80058a0:	f7fd fb4c 	bl	8002f3c <__aeabi_d2f>
 80058a4:	1c03      	adds	r3, r0, #0
 80058a6:	2100      	movs	r1, #0
 80058a8:	1c18      	adds	r0, r3, #0
 80058aa:	f7fb f9b7 	bl	8000c1c <__aeabi_fmul>
 80058ae:	1c03      	adds	r3, r0, #0
 80058b0:	2100      	movs	r1, #0
 80058b2:	1c18      	adds	r0, r3, #0
 80058b4:	f7fa fe40 	bl	8000538 <__aeabi_fadd>
 80058b8:	1c03      	adds	r3, r0, #0
 80058ba:	1c19      	adds	r1, r3, #0
 80058bc:	20fe      	movs	r0, #254	; 0xfe
 80058be:	0580      	lsls	r0, r0, #22
 80058c0:	f7fa ffd4 	bl	800086c <__aeabi_fdiv>
 80058c4:	1c03      	adds	r3, r0, #0
 80058c6:	1c1a      	adds	r2, r3, #0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	601a      	str	r2, [r3, #0]
	*ts2 = 1/(1/(THERM_NOM_TEMP + KELVIN_OFFSET) + (1/THERM_BETA) * (float)log((double)r_th2));
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7fd fae3 	bl	8002e98 <__aeabi_f2d>
 80058d2:	0003      	movs	r3, r0
 80058d4:	000c      	movs	r4, r1
 80058d6:	0018      	movs	r0, r3
 80058d8:	0021      	movs	r1, r4
 80058da:	f003 f9ab 	bl	8008c34 <log>
 80058de:	0003      	movs	r3, r0
 80058e0:	000c      	movs	r4, r1
 80058e2:	0018      	movs	r0, r3
 80058e4:	0021      	movs	r1, r4
 80058e6:	f7fd fb29 	bl	8002f3c <__aeabi_d2f>
 80058ea:	1c03      	adds	r3, r0, #0
 80058ec:	2100      	movs	r1, #0
 80058ee:	1c18      	adds	r0, r3, #0
 80058f0:	f7fb f994 	bl	8000c1c <__aeabi_fmul>
 80058f4:	1c03      	adds	r3, r0, #0
 80058f6:	2100      	movs	r1, #0
 80058f8:	1c18      	adds	r0, r3, #0
 80058fa:	f7fa fe1d 	bl	8000538 <__aeabi_fadd>
 80058fe:	1c03      	adds	r3, r0, #0
 8005900:	1c19      	adds	r1, r3, #0
 8005902:	20fe      	movs	r0, #254	; 0xfe
 8005904:	0580      	lsls	r0, r0, #22
 8005906:	f7fa ffb1 	bl	800086c <__aeabi_fdiv>
 800590a:	1c03      	adds	r3, r0, #0
 800590c:	1c1a      	adds	r2, r3, #0
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	0018      	movs	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	b008      	add	sp, #32
 800591a:	bdb0      	pop	{r4, r5, r7, pc}
 800591c:	200001f4 	.word	0x200001f4
 8005920:	200001f8 	.word	0x200001f8
 8005924:	461c4000 	.word	0x461c4000
 8005928:	454e4000 	.word	0x454e4000

0800592c <afe_measure_voltages>:

//vbuffer should be a 10-element array and batBuffer should be a single floating-point value
//returns values in MILLIVOLTS
HAL_StatusTypeDef afe_measure_voltages(float* vBuffer, float* batBuffer) {
 800592c:	b5b0      	push	{r4, r5, r7, lr}
 800592e:	b08a      	sub	sp, #40	; 0x28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	//read ALLLL the voltage registers
	uint8_t voltages[22]; //includes 2 extras for the batt measurement
	status = i2c_read_regs(AFE_ADDR, CELL_VOLTAGE_REG_BASE, 12, voltages);
 8005936:	2523      	movs	r5, #35	; 0x23
 8005938:	197c      	adds	r4, r7, r5
 800593a:	230c      	movs	r3, #12
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	220c      	movs	r2, #12
 8005940:	210c      	movs	r1, #12
 8005942:	2030      	movs	r0, #48	; 0x30
 8005944:	f000 f9b8 	bl	8005cb8 <i2c_read_regs>
 8005948:	0003      	movs	r3, r0
 800594a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 800594c:	197b      	adds	r3, r7, r5
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <afe_measure_voltages+0x30>
 8005954:	2323      	movs	r3, #35	; 0x23
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	e051      	b.n	8005a00 <afe_measure_voltages+0xd4>

	//concatenate and trim all the voltages we read out
	for(int i = 0; i < 10; i++) {
 800595c:	2300      	movs	r3, #0
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
 8005960:	e027      	b.n	80059b2 <afe_measure_voltages+0x86>
		vBuffer[i] = (((voltages[i<<1] & 0x3F) << 8) | voltages[(i<<1)+1]) * adc_mv_per_lsb + adc_offset;
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	210c      	movs	r1, #12
 8005968:	187a      	adds	r2, r7, r1
 800596a:	5cd3      	ldrb	r3, [r2, r3]
 800596c:	021a      	lsls	r2, r3, #8
 800596e:	23fc      	movs	r3, #252	; 0xfc
 8005970:	019b      	lsls	r3, r3, #6
 8005972:	4013      	ands	r3, r2
 8005974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005976:	0052      	lsls	r2, r2, #1
 8005978:	3201      	adds	r2, #1
 800597a:	1879      	adds	r1, r7, r1
 800597c:	5c8a      	ldrb	r2, [r1, r2]
 800597e:	4313      	orrs	r3, r2
 8005980:	0018      	movs	r0, r3
 8005982:	f7fb fc61 	bl	8001248 <__aeabi_i2f>
 8005986:	1c02      	adds	r2, r0, #0
 8005988:	4b1f      	ldr	r3, [pc, #124]	; (8005a08 <afe_measure_voltages+0xdc>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	1c19      	adds	r1, r3, #0
 800598e:	1c10      	adds	r0, r2, #0
 8005990:	f7fb f944 	bl	8000c1c <__aeabi_fmul>
 8005994:	1c03      	adds	r3, r0, #0
 8005996:	1c18      	adds	r0, r3, #0
 8005998:	4b1c      	ldr	r3, [pc, #112]	; (8005a0c <afe_measure_voltages+0xe0>)
 800599a:	6819      	ldr	r1, [r3, #0]
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	18d4      	adds	r4, r2, r3
 80059a4:	f7fa fdc8 	bl	8000538 <__aeabi_fadd>
 80059a8:	1c03      	adds	r3, r0, #0
 80059aa:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < 10; i++) {
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	3301      	adds	r3, #1
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	2b09      	cmp	r3, #9
 80059b6:	ddd4      	ble.n	8005962 <afe_measure_voltages+0x36>
	}

	//do some special treatment for the batt register like we are supposed to
	//concatenate, multiply by 4, multiply by gain, add num_cells * offset
	*batBuffer = (float)((voltages[20] << 10) | (voltages[21] << 2)) * adc_mv_per_lsb + (NUM_CELLS * adc_offset);
 80059b8:	210c      	movs	r1, #12
 80059ba:	187b      	adds	r3, r7, r1
 80059bc:	7d1b      	ldrb	r3, [r3, #20]
 80059be:	029a      	lsls	r2, r3, #10
 80059c0:	187b      	adds	r3, r7, r1
 80059c2:	7d5b      	ldrb	r3, [r3, #21]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4313      	orrs	r3, r2
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7fb fc3d 	bl	8001248 <__aeabi_i2f>
 80059ce:	1c02      	adds	r2, r0, #0
 80059d0:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <afe_measure_voltages+0xdc>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	1c19      	adds	r1, r3, #0
 80059d6:	1c10      	adds	r0, r2, #0
 80059d8:	f7fb f920 	bl	8000c1c <__aeabi_fmul>
 80059dc:	1c03      	adds	r3, r0, #0
 80059de:	1c1c      	adds	r4, r3, #0
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <afe_measure_voltages+0xe0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	490a      	ldr	r1, [pc, #40]	; (8005a10 <afe_measure_voltages+0xe4>)
 80059e6:	1c18      	adds	r0, r3, #0
 80059e8:	f7fb f918 	bl	8000c1c <__aeabi_fmul>
 80059ec:	1c03      	adds	r3, r0, #0
 80059ee:	1c19      	adds	r1, r3, #0
 80059f0:	1c20      	adds	r0, r4, #0
 80059f2:	f7fa fda1 	bl	8000538 <__aeabi_fadd>
 80059f6:	1c03      	adds	r3, r0, #0
 80059f8:	1c1a      	adds	r2, r3, #0
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	0018      	movs	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	b00a      	add	sp, #40	; 0x28
 8005a06:	bdb0      	pop	{r4, r5, r7, pc}
 8005a08:	200001f4 	.word	0x200001f4
 8005a0c:	200001f8 	.word	0x200001f8
 8005a10:	41200000 	.word	0x41200000

08005a14 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8005a14:	b590      	push	{r4, r7, lr}
 8005a16:	b089      	sub	sp, #36	; 0x24
 8005a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a1a:	240c      	movs	r4, #12
 8005a1c:	193b      	adds	r3, r7, r4
 8005a1e:	0018      	movs	r0, r3
 8005a20:	2314      	movs	r3, #20
 8005a22:	001a      	movs	r2, r3
 8005a24:	2100      	movs	r1, #0
 8005a26:	f000 fcb3 	bl	8006390 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a2a:	4b39      	ldr	r3, [pc, #228]	; (8005b10 <MX_GPIO_Init+0xfc>)
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <MX_GPIO_Init+0xfc>)
 8005a30:	2180      	movs	r1, #128	; 0x80
 8005a32:	0309      	lsls	r1, r1, #12
 8005a34:	430a      	orrs	r2, r1
 8005a36:	615a      	str	r2, [r3, #20]
 8005a38:	4b35      	ldr	r3, [pc, #212]	; (8005b10 <MX_GPIO_Init+0xfc>)
 8005a3a:	695a      	ldr	r2, [r3, #20]
 8005a3c:	2380      	movs	r3, #128	; 0x80
 8005a3e:	031b      	lsls	r3, r3, #12
 8005a40:	4013      	ands	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a46:	4b32      	ldr	r3, [pc, #200]	; (8005b10 <MX_GPIO_Init+0xfc>)
 8005a48:	695a      	ldr	r2, [r3, #20]
 8005a4a:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <MX_GPIO_Init+0xfc>)
 8005a4c:	2180      	movs	r1, #128	; 0x80
 8005a4e:	0289      	lsls	r1, r1, #10
 8005a50:	430a      	orrs	r2, r1
 8005a52:	615a      	str	r2, [r3, #20]
 8005a54:	4b2e      	ldr	r3, [pc, #184]	; (8005b10 <MX_GPIO_Init+0xfc>)
 8005a56:	695a      	ldr	r2, [r3, #20]
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	607b      	str	r3, [r7, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a62:	4b2b      	ldr	r3, [pc, #172]	; (8005b10 <MX_GPIO_Init+0xfc>)
 8005a64:	695a      	ldr	r2, [r3, #20]
 8005a66:	4b2a      	ldr	r3, [pc, #168]	; (8005b10 <MX_GPIO_Init+0xfc>)
 8005a68:	2180      	movs	r1, #128	; 0x80
 8005a6a:	02c9      	lsls	r1, r1, #11
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	615a      	str	r2, [r3, #20]
 8005a70:	4b27      	ldr	r3, [pc, #156]	; (8005b10 <MX_GPIO_Init+0xfc>)
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	02db      	lsls	r3, r3, #11
 8005a78:	4013      	ands	r3, r2
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005a7e:	2390      	movs	r3, #144	; 0x90
 8005a80:	05db      	lsls	r3, r3, #23
 8005a82:	2200      	movs	r2, #0
 8005a84:	2120      	movs	r1, #32
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7fd fdb4 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8005a8c:	193b      	adds	r3, r7, r4
 8005a8e:	2280      	movs	r2, #128	; 0x80
 8005a90:	0192      	lsls	r2, r2, #6
 8005a92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a94:	193b      	adds	r3, r7, r4
 8005a96:	2200      	movs	r2, #0
 8005a98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9a:	193b      	adds	r3, r7, r4
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005aa0:	193b      	adds	r3, r7, r4
 8005aa2:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <MX_GPIO_Init+0x100>)
 8005aa4:	0019      	movs	r1, r3
 8005aa6:	0010      	movs	r0, r2
 8005aa8:	f7fd fc28 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005aac:	0021      	movs	r1, r4
 8005aae:	187b      	adds	r3, r7, r1
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	2200      	movs	r2, #0
 8005abe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005ac6:	000c      	movs	r4, r1
 8005ac8:	187a      	adds	r2, r7, r1
 8005aca:	2390      	movs	r3, #144	; 0x90
 8005acc:	05db      	lsls	r3, r3, #23
 8005ace:	0011      	movs	r1, r2
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7fd fc13 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AFE_ALT_Pin;
 8005ad6:	0021      	movs	r1, r4
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	2280      	movs	r2, #128	; 0x80
 8005adc:	0212      	lsls	r2, r2, #8
 8005ade:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005ae0:	187b      	adds	r3, r7, r1
 8005ae2:	4a0d      	ldr	r2, [pc, #52]	; (8005b18 <MX_GPIO_Init+0x104>)
 8005ae4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ae6:	187b      	adds	r3, r7, r1
 8005ae8:	2201      	movs	r2, #1
 8005aea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AFE_ALT_GPIO_Port, &GPIO_InitStruct);
 8005aec:	187b      	adds	r3, r7, r1
 8005aee:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <MX_GPIO_Init+0x108>)
 8005af0:	0019      	movs	r1, r3
 8005af2:	0010      	movs	r0, r2
 8005af4:	f7fd fc02 	bl	80032fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8005af8:	2200      	movs	r2, #0
 8005afa:	2102      	movs	r1, #2
 8005afc:	2007      	movs	r0, #7
 8005afe:	f7fd fbcb 	bl	8003298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005b02:	2007      	movs	r0, #7
 8005b04:	f7fd fbdd 	bl	80032c2 <HAL_NVIC_EnableIRQ>

}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b009      	add	sp, #36	; 0x24
 8005b0e:	bd90      	pop	{r4, r7, pc}
 8005b10:	40021000 	.word	0x40021000
 8005b14:	48000800 	.word	0x48000800
 8005b18:	10210000 	.word	0x10210000
 8005b1c:	48000400 	.word	0x48000400

08005b20 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8005b24:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b26:	4a1c      	ldr	r2, [pc, #112]	; (8005b98 <MX_I2C2_Init+0x78>)
 8005b28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00506682;
 8005b2a:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b2c:	4a1b      	ldr	r2, [pc, #108]	; (8005b9c <MX_I2C2_Init+0x7c>)
 8005b2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005b30:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b36:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b3c:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005b42:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005b48:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b4e:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005b5a:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f7fd fd83 	bl	8003668 <HAL_I2C_Init>
 8005b62:	1e03      	subs	r3, r0, #0
 8005b64:	d001      	beq.n	8005b6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005b66:	f000 fa3d 	bl	8005fe4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f7fe fa00 	bl	8003f74 <HAL_I2CEx_ConfigAnalogFilter>
 8005b74:	1e03      	subs	r3, r0, #0
 8005b76:	d001      	beq.n	8005b7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005b78:	f000 fa34 	bl	8005fe4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <MX_I2C2_Init+0x74>)
 8005b7e:	2100      	movs	r1, #0
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7fe fa43 	bl	800400c <HAL_I2CEx_ConfigDigitalFilter>
 8005b86:	1e03      	subs	r3, r0, #0
 8005b88:	d001      	beq.n	8005b8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005b8a:	f000 fa2b 	bl	8005fe4 <Error_Handler>
  }

}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000210 	.word	0x20000210
 8005b98:	40005800 	.word	0x40005800
 8005b9c:	00506682 	.word	0x00506682

08005ba0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba8:	2314      	movs	r3, #20
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	0018      	movs	r0, r3
 8005bae:	2314      	movs	r3, #20
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	f000 fbec 	bl	8006390 <memset>
  if(i2cHandle->Instance==I2C2)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <HAL_I2C_MspInit+0x90>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d132      	bne.n	8005c28 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bc2:	4b1c      	ldr	r3, [pc, #112]	; (8005c34 <HAL_I2C_MspInit+0x94>)
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <HAL_I2C_MspInit+0x94>)
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	02c9      	lsls	r1, r1, #11
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	615a      	str	r2, [r3, #20]
 8005bd0:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <HAL_I2C_MspInit+0x94>)
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	2380      	movs	r3, #128	; 0x80
 8005bd6:	02db      	lsls	r3, r3, #11
 8005bd8:	4013      	ands	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005bde:	2114      	movs	r1, #20
 8005be0:	187b      	adds	r3, r7, r1
 8005be2:	22c0      	movs	r2, #192	; 0xc0
 8005be4:	01d2      	lsls	r2, r2, #7
 8005be6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005be8:	187b      	adds	r3, r7, r1
 8005bea:	2212      	movs	r2, #18
 8005bec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bee:	187b      	adds	r3, r7, r1
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bf4:	187b      	adds	r3, r7, r1
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8005bfa:	187b      	adds	r3, r7, r1
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c00:	187b      	adds	r3, r7, r1
 8005c02:	4a0d      	ldr	r2, [pc, #52]	; (8005c38 <HAL_I2C_MspInit+0x98>)
 8005c04:	0019      	movs	r1, r3
 8005c06:	0010      	movs	r0, r2
 8005c08:	f7fd fb78 	bl	80032fc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005c0c:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <HAL_I2C_MspInit+0x94>)
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	4b08      	ldr	r3, [pc, #32]	; (8005c34 <HAL_I2C_MspInit+0x94>)
 8005c12:	2180      	movs	r1, #128	; 0x80
 8005c14:	03c9      	lsls	r1, r1, #15
 8005c16:	430a      	orrs	r2, r1
 8005c18:	61da      	str	r2, [r3, #28]
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <HAL_I2C_MspInit+0x94>)
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	03db      	lsls	r3, r3, #15
 8005c22:	4013      	ands	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005c28:	46c0      	nop			; (mov r8, r8)
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	b00a      	add	sp, #40	; 0x28
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40005800 	.word	0x40005800
 8005c34:	40021000 	.word	0x40021000
 8005c38:	48000400 	.word	0x48000400

08005c3c <i2c_write_reg>:
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, &command, 1, 1); //1ms timeout
	BUS_IN_USE = 0; //unlock the bus
	return status;
}

HAL_StatusTypeDef i2c_write_reg(uint8_t addr, uint8_t reg, uint8_t data) {
 8005c3c:	b5b0      	push	{r4, r5, r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	0004      	movs	r4, r0
 8005c44:	0008      	movs	r0, r1
 8005c46:	0011      	movs	r1, r2
 8005c48:	1dfb      	adds	r3, r7, #7
 8005c4a:	1c22      	adds	r2, r4, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	1dbb      	adds	r3, r7, #6
 8005c50:	1c02      	adds	r2, r0, #0
 8005c52:	701a      	strb	r2, [r3, #0]
 8005c54:	1d7b      	adds	r3, r7, #5
 8005c56:	1c0a      	adds	r2, r1, #0
 8005c58:	701a      	strb	r2, [r3, #0]
	uint8_t txdata[2];
	HAL_StatusTypeDef status;
	txdata[0] = reg;
 8005c5a:	210c      	movs	r1, #12
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	1dba      	adds	r2, r7, #6
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	701a      	strb	r2, [r3, #0]
	txdata[1] = data;
 8005c64:	187b      	adds	r3, r7, r1
 8005c66:	1d7a      	adds	r2, r7, #5
 8005c68:	7812      	ldrb	r2, [r2, #0]
 8005c6a:	705a      	strb	r2, [r3, #1]
	if(BUS_IN_USE) return HAL_BUSY;
 8005c6c:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <i2c_write_reg+0x74>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <i2c_write_reg+0x3c>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e016      	b.n	8005ca6 <i2c_write_reg+0x6a>
	BUS_IN_USE = 1; //lock the bus
 8005c78:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <i2c_write_reg+0x74>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, txdata, 2, 1); //1ms timeout
 8005c7e:	1dfb      	adds	r3, r7, #7
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	b299      	uxth	r1, r3
 8005c84:	250f      	movs	r5, #15
 8005c86:	197c      	adds	r4, r7, r5
 8005c88:	230c      	movs	r3, #12
 8005c8a:	18fa      	adds	r2, r7, r3
 8005c8c:	4809      	ldr	r0, [pc, #36]	; (8005cb4 <i2c_write_reg+0x78>)
 8005c8e:	2301      	movs	r3, #1
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	2302      	movs	r3, #2
 8005c94:	f7fd fd7e 	bl	8003794 <HAL_I2C_Master_Transmit>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0; //unlock the bus
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <i2c_write_reg+0x74>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
	return status;
 8005ca2:	197b      	adds	r3, r7, r5
 8005ca4:	781b      	ldrb	r3, [r3, #0]
}
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	b004      	add	sp, #16
 8005cac:	bdb0      	pop	{r4, r5, r7, pc}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	200001fc 	.word	0x200001fc
 8005cb4:	20000210 	.word	0x20000210

08005cb8 <i2c_read_regs>:
		BUS_IN_USE = 0; //unlock the bus
	}
	return status;
}

HAL_StatusTypeDef i2c_read_regs(uint8_t addr, uint8_t reg_start, uint8_t num_regs, uint8_t* read_data) {
 8005cb8:	b5b0      	push	{r4, r5, r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	0004      	movs	r4, r0
 8005cc0:	0008      	movs	r0, r1
 8005cc2:	0011      	movs	r1, r2
 8005cc4:	603b      	str	r3, [r7, #0]
 8005cc6:	1dfb      	adds	r3, r7, #7
 8005cc8:	1c22      	adds	r2, r4, #0
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	1dbb      	adds	r3, r7, #6
 8005cce:	1c02      	adds	r2, r0, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	1d7b      	adds	r3, r7, #5
 8005cd4:	1c0a      	adds	r2, r1, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	if(BUS_IN_USE) return HAL_BUSY;
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <i2c_read_regs+0x90>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <i2c_read_regs+0x2c>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e02c      	b.n	8005d3e <i2c_read_regs+0x86>
	BUS_IN_USE = 1; //lock the bus
 8005ce4:	4b18      	ldr	r3, [pc, #96]	; (8005d48 <i2c_read_regs+0x90>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, &reg_start, 1, 1); //1ms timeout
 8005cea:	1dfb      	adds	r3, r7, #7
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	b299      	uxth	r1, r3
 8005cf0:	250f      	movs	r5, #15
 8005cf2:	197c      	adds	r4, r7, r5
 8005cf4:	1dba      	adds	r2, r7, #6
 8005cf6:	4815      	ldr	r0, [pc, #84]	; (8005d4c <i2c_read_regs+0x94>)
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f7fd fd49 	bl	8003794 <HAL_I2C_Master_Transmit>
 8005d02:	0003      	movs	r3, r0
 8005d04:	7023      	strb	r3, [r4, #0]
	if(status == HAL_OK) status = HAL_I2C_Master_Receive(&hi2c2, addr, read_data, num_regs, num_regs); //1ms per byte, should be plenty even at 100khz
 8005d06:	197b      	adds	r3, r7, r5
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d111      	bne.n	8005d32 <i2c_read_regs+0x7a>
 8005d0e:	1dfb      	adds	r3, r7, #7
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b299      	uxth	r1, r3
 8005d14:	1d7b      	adds	r3, r7, #5
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	b29d      	uxth	r5, r3
 8005d1a:	1d7b      	adds	r3, r7, #5
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	220f      	movs	r2, #15
 8005d20:	18bc      	adds	r4, r7, r2
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	4809      	ldr	r0, [pc, #36]	; (8005d4c <i2c_read_regs+0x94>)
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	002b      	movs	r3, r5
 8005d2a:	f7fd fe47 	bl	80039bc <HAL_I2C_Master_Receive>
 8005d2e:	0003      	movs	r3, r0
 8005d30:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0; //unlock the bus
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <i2c_read_regs+0x90>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
	return status;
 8005d38:	230f      	movs	r3, #15
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	781b      	ldrb	r3, [r3, #0]
}
 8005d3e:	0018      	movs	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b004      	add	sp, #16
 8005d44:	bdb0      	pop	{r4, r5, r7, pc}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	200001fc 	.word	0x200001fc
 8005d4c:	20000210 	.word	0x20000210

08005d50 <i2c_write_regs>:

HAL_StatusTypeDef i2c_write_regs(uint8_t addr, uint8_t* data_to_write, uint8_t len) {
 8005d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	6039      	str	r1, [r7, #0]
 8005d58:	0011      	movs	r1, r2
 8005d5a:	1dfb      	adds	r3, r7, #7
 8005d5c:	1c02      	adds	r2, r0, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	1dbb      	adds	r3, r7, #6
 8005d62:	1c0a      	adds	r2, r1, #0
 8005d64:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	if(BUS_IN_USE) return HAL_BUSY;
 8005d66:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <i2c_write_regs+0x60>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <i2c_write_regs+0x22>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e019      	b.n	8005da6 <i2c_write_regs+0x56>
	BUS_IN_USE = 1; //lock the bus
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <i2c_write_regs+0x60>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, data_to_write, len, len); //1ms per byte, should be plenty even at 100khz
 8005d78:	1dfb      	adds	r3, r7, #7
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	b299      	uxth	r1, r3
 8005d7e:	1dbb      	adds	r3, r7, #6
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b29d      	uxth	r5, r3
 8005d84:	1dbb      	adds	r3, r7, #6
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	260f      	movs	r6, #15
 8005d8a:	19bc      	adds	r4, r7, r6
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	4809      	ldr	r0, [pc, #36]	; (8005db4 <i2c_write_regs+0x64>)
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	002b      	movs	r3, r5
 8005d94:	f7fd fcfe 	bl	8003794 <HAL_I2C_Master_Transmit>
 8005d98:	0003      	movs	r3, r0
 8005d9a:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0; //unlock the bus
 8005d9c:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <i2c_write_regs+0x60>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
	return status;
 8005da2:	19bb      	adds	r3, r7, r6
 8005da4:	781b      	ldrb	r3, [r3, #0]
}
 8005da6:	0018      	movs	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b005      	add	sp, #20
 8005dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	200001fc 	.word	0x200001fc
 8005db4:	20000210 	.word	0x20000210

08005db8 <_write>:
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len)
{
 8005db8:	b5b0      	push	{r4, r5, r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d00a      	beq.n	8005de0 <_write+0x28>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d007      	beq.n	8005de0 <_write+0x28>
   {
      errno = EBADF;
 8005dd0:	f000 fab4 	bl	800633c <__errno>
 8005dd4:	0003      	movs	r3, r0
 8005dd6:	2209      	movs	r2, #9
 8005dd8:	601a      	str	r2, [r3, #0]
      return -1;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	425b      	negs	r3, r3
 8005dde:	e011      	b.n	8005e04 <_write+0x4c>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 0xFFFF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	b29a      	uxth	r2, r3
   HAL_StatusTypeDef status =
 8005de4:	2517      	movs	r5, #23
 8005de6:	197c      	adds	r4, r7, r5
 8005de8:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <_write+0x54>)
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	4808      	ldr	r0, [pc, #32]	; (8005e10 <_write+0x58>)
 8005dee:	f7fe ffbb 	bl	8004d68 <HAL_UART_Transmit>
 8005df2:	0003      	movs	r3, r0
 8005df4:	7023      	strb	r3, [r4, #0]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8005df6:	197b      	adds	r3, r7, r5
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <_write+0x4a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	e000      	b.n	8005e04 <_write+0x4c>
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	0018      	movs	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b006      	add	sp, #24
 8005e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e0c:	0000ffff 	.word	0x0000ffff
 8005e10:	2000025c 	.word	0x2000025c

08005e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e14:	b5b0      	push	{r4, r5, r7, lr}
 8005e16:	b090      	sub	sp, #64	; 0x40
 8005e18:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e1a:	f7fd f931 	bl	8003080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e1e:	f000 f883 	bl	8005f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e22:	f7ff fdf7 	bl	8005a14 <MX_GPIO_Init>
  MX_I2C2_Init();
 8005e26:	f7ff fe7b 	bl	8005b20 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8005e2a:	f000 f9e1 	bl	80061f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nStarting...\r\n");
 8005e2e:	4b38      	ldr	r3, [pc, #224]	; (8005f10 <main+0xfc>)
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 ffa1 	bl	8006d78 <puts>
  afe_init();
 8005e36:	f7ff fb4f 	bl	80054d8 <afe_init>
  {
	  float temp1, temp2, bat;
	  float cell_voltages[10];
	  HAL_StatusTypeDef status_temp, status_volt;

	  status_temp = afe_measure_temps(&temp1, &temp2);
 8005e3a:	253b      	movs	r5, #59	; 0x3b
 8005e3c:	197c      	adds	r4, r7, r5
 8005e3e:	2330      	movs	r3, #48	; 0x30
 8005e40:	18fa      	adds	r2, r7, r3
 8005e42:	2334      	movs	r3, #52	; 0x34
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	0011      	movs	r1, r2
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f7ff fca1 	bl	8005790 <afe_measure_temps>
 8005e4e:	0003      	movs	r3, r0
 8005e50:	7023      	strb	r3, [r4, #0]
	  status_volt = afe_measure_voltages(cell_voltages, &bat);
 8005e52:	233a      	movs	r3, #58	; 0x3a
 8005e54:	18fc      	adds	r4, r7, r3
 8005e56:	232c      	movs	r3, #44	; 0x2c
 8005e58:	18fa      	adds	r2, r7, r3
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	0011      	movs	r1, r2
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f7ff fd64 	bl	800592c <afe_measure_voltages>
 8005e64:	0003      	movs	r3, r0
 8005e66:	7023      	strb	r3, [r4, #0]

	  if(status_temp == HAL_OK && status_volt == HAL_OK) {
 8005e68:	197b      	adds	r3, r7, r5
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d144      	bne.n	8005efa <main+0xe6>
 8005e70:	233a      	movs	r3, #58	; 0x3a
 8005e72:	18fb      	adds	r3, r7, r3
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d13f      	bne.n	8005efa <main+0xe6>
		  printf("Temp1: %0.2f degC\n", temp1); //remember to enable -u _printf_float in linker flags
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7c:	1c18      	adds	r0, r3, #0
 8005e7e:	f7fd f80b 	bl	8002e98 <__aeabi_f2d>
 8005e82:	0003      	movs	r3, r0
 8005e84:	000c      	movs	r4, r1
 8005e86:	4923      	ldr	r1, [pc, #140]	; (8005f14 <main+0x100>)
 8005e88:	001a      	movs	r2, r3
 8005e8a:	0023      	movs	r3, r4
 8005e8c:	0008      	movs	r0, r1
 8005e8e:	f000 fee5 	bl	8006c5c <iprintf>
		  printf("Temp2: %0.2f degC\n", temp2);
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	1c18      	adds	r0, r3, #0
 8005e96:	f7fc ffff 	bl	8002e98 <__aeabi_f2d>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	000c      	movs	r4, r1
 8005e9e:	491e      	ldr	r1, [pc, #120]	; (8005f18 <main+0x104>)
 8005ea0:	001a      	movs	r2, r3
 8005ea2:	0023      	movs	r3, r4
 8005ea4:	0008      	movs	r0, r1
 8005ea6:	f000 fed9 	bl	8006c5c <iprintf>
		  printf("Battery Voltage %0.2fmV\n", bat);
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	1c18      	adds	r0, r3, #0
 8005eae:	f7fc fff3 	bl	8002e98 <__aeabi_f2d>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	000c      	movs	r4, r1
 8005eb6:	4919      	ldr	r1, [pc, #100]	; (8005f1c <main+0x108>)
 8005eb8:	001a      	movs	r2, r3
 8005eba:	0023      	movs	r3, r4
 8005ebc:	0008      	movs	r0, r1
 8005ebe:	f000 fecd 	bl	8006c5c <iprintf>
		  for(int i = 0; i < 10; i++) {
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec6:	e011      	b.n	8005eec <main+0xd8>
			  printf("\tCell %d: %0.2fmV\n", i+1, cell_voltages[i]);
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eca:	1c5c      	adds	r4, r3, #1
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ed0:	0092      	lsls	r2, r2, #2
 8005ed2:	58d3      	ldr	r3, [r2, r3]
 8005ed4:	1c18      	adds	r0, r3, #0
 8005ed6:	f7fc ffdf 	bl	8002e98 <__aeabi_f2d>
 8005eda:	0002      	movs	r2, r0
 8005edc:	000b      	movs	r3, r1
 8005ede:	4810      	ldr	r0, [pc, #64]	; (8005f20 <main+0x10c>)
 8005ee0:	0021      	movs	r1, r4
 8005ee2:	f000 febb 	bl	8006c5c <iprintf>
		  for(int i = 0; i < 10; i++) {
 8005ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee8:	3301      	adds	r3, #1
 8005eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eee:	2b09      	cmp	r3, #9
 8005ef0:	ddea      	ble.n	8005ec8 <main+0xb4>
		  }
		  printf("\n");
 8005ef2:	200a      	movs	r0, #10
 8005ef4:	f000 fecc 	bl	8006c90 <putchar>
 8005ef8:	e003      	b.n	8005f02 <main+0xee>
	  }
	  else printf("Can't read from AFE!\n");
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <main+0x110>)
 8005efc:	0018      	movs	r0, r3
 8005efe:	f000 ff3b 	bl	8006d78 <puts>
	  HAL_Delay(1000);
 8005f02:	23fa      	movs	r3, #250	; 0xfa
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	0018      	movs	r0, r3
 8005f08:	f7fd f900 	bl	800310c <HAL_Delay>
  {
 8005f0c:	e795      	b.n	8005e3a <main+0x26>
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	080090e0 	.word	0x080090e0
 8005f14:	080090f0 	.word	0x080090f0
 8005f18:	08009104 	.word	0x08009104
 8005f1c:	08009118 	.word	0x08009118
 8005f20:	08009134 	.word	0x08009134
 8005f24:	08009148 	.word	0x08009148

08005f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f28:	b590      	push	{r4, r7, lr}
 8005f2a:	b099      	sub	sp, #100	; 0x64
 8005f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f2e:	242c      	movs	r4, #44	; 0x2c
 8005f30:	193b      	adds	r3, r7, r4
 8005f32:	0018      	movs	r0, r3
 8005f34:	2334      	movs	r3, #52	; 0x34
 8005f36:	001a      	movs	r2, r3
 8005f38:	2100      	movs	r1, #0
 8005f3a:	f000 fa29 	bl	8006390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f3e:	231c      	movs	r3, #28
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	0018      	movs	r0, r3
 8005f44:	2310      	movs	r3, #16
 8005f46:	001a      	movs	r2, r3
 8005f48:	2100      	movs	r1, #0
 8005f4a:	f000 fa21 	bl	8006390 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005f4e:	003b      	movs	r3, r7
 8005f50:	0018      	movs	r0, r3
 8005f52:	231c      	movs	r3, #28
 8005f54:	001a      	movs	r2, r3
 8005f56:	2100      	movs	r1, #0
 8005f58:	f000 fa1a 	bl	8006390 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8005f5c:	193b      	adds	r3, r7, r4
 8005f5e:	2220      	movs	r2, #32
 8005f60:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005f62:	193b      	adds	r3, r7, r4
 8005f64:	2201      	movs	r2, #1
 8005f66:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005f68:	193b      	adds	r3, r7, r4
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f6e:	193b      	adds	r3, r7, r4
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7fe f899 	bl	80040a8 <HAL_RCC_OscConfig>
 8005f76:	1e03      	subs	r3, r0, #0
 8005f78:	d001      	beq.n	8005f7e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8005f7a:	f000 f833 	bl	8005fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f7e:	211c      	movs	r1, #28
 8005f80:	187b      	adds	r3, r7, r1
 8005f82:	2207      	movs	r2, #7
 8005f84:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8005f86:	187b      	adds	r3, r7, r1
 8005f88:	2203      	movs	r2, #3
 8005f8a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f8c:	187b      	adds	r3, r7, r1
 8005f8e:	2200      	movs	r2, #0
 8005f90:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005f92:	187b      	adds	r3, r7, r1
 8005f94:	2280      	movs	r2, #128	; 0x80
 8005f96:	00d2      	lsls	r2, r2, #3
 8005f98:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005f9a:	187b      	adds	r3, r7, r1
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	f7fe fbe2 	bl	8004768 <HAL_RCC_ClockConfig>
 8005fa4:	1e03      	subs	r3, r0, #0
 8005fa6:	d001      	beq.n	8005fac <SystemClock_Config+0x84>
  {
    Error_Handler();
 8005fa8:	f000 f81c 	bl	8005fe4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005fac:	003b      	movs	r3, r7
 8005fae:	2202      	movs	r2, #2
 8005fb0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005fb2:	003b      	movs	r3, r7
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005fb8:	003b      	movs	r3, r7
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f7fe fd7c 	bl	8004ab8 <HAL_RCCEx_PeriphCLKConfig>
 8005fc0:	1e03      	subs	r3, r0, #0
 8005fc2:	d001      	beq.n	8005fc8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8005fc4:	f000 f80e 	bl	8005fe4 <Error_Handler>
  }
}
 8005fc8:	46c0      	nop			; (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b019      	add	sp, #100	; 0x64
 8005fce:	bd90      	pop	{r4, r7, pc}

08005fd0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	0002      	movs	r2, r0
 8005fd8:	1dbb      	adds	r3, r7, #6
 8005fda:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == AFE_ALT_Pin) {
    }
}
 8005fdc:	46c0      	nop			; (mov r8, r8)
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b002      	add	sp, #8
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005fe8:	46c0      	nop			; (mov r8, r8)
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <HAL_MspInit+0x44>)
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <HAL_MspInit+0x44>)
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	430a      	orrs	r2, r1
 8006000:	619a      	str	r2, [r3, #24]
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <HAL_MspInit+0x44>)
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	2201      	movs	r2, #1
 8006008:	4013      	ands	r3, r2
 800600a:	607b      	str	r3, [r7, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800600e:	4b09      	ldr	r3, [pc, #36]	; (8006034 <HAL_MspInit+0x44>)
 8006010:	69da      	ldr	r2, [r3, #28]
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <HAL_MspInit+0x44>)
 8006014:	2180      	movs	r1, #128	; 0x80
 8006016:	0549      	lsls	r1, r1, #21
 8006018:	430a      	orrs	r2, r1
 800601a:	61da      	str	r2, [r3, #28]
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <HAL_MspInit+0x44>)
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	2380      	movs	r3, #128	; 0x80
 8006022:	055b      	lsls	r3, r3, #21
 8006024:	4013      	ands	r3, r2
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	46bd      	mov	sp, r7
 800602e:	b002      	add	sp, #8
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	40021000 	.word	0x40021000

08006038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800603c:	46c0      	nop			; (mov r8, r8)
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006046:	e7fe      	b.n	8006046 <HardFault_Handler+0x4>

08006048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800604c:	46c0      	nop			; (mov r8, r8)
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006060:	f7fd f83e 	bl	80030e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006064:	46c0      	nop			; (mov r8, r8)
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	0018      	movs	r0, r3
 8006074:	f7fd fadc 	bl	8003630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8006078:	46c0      	nop			; (mov r8, r8)
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e00a      	b.n	80060a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006090:	e000      	b.n	8006094 <_read+0x16>
 8006092:	bf00      	nop
 8006094:	0001      	movs	r1, r0
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	60ba      	str	r2, [r7, #8]
 800609c:	b2ca      	uxtb	r2, r1
 800609e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	3301      	adds	r3, #1
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	dbf0      	blt.n	8006090 <_read+0x12>
	}

return len;
 80060ae:	687b      	ldr	r3, [r7, #4]
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b006      	add	sp, #24
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	return -1;
 80060c0:	2301      	movs	r3, #1
 80060c2:	425b      	negs	r3, r3
}
 80060c4:	0018      	movs	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b002      	add	sp, #8
 80060ca:	bd80      	pop	{r7, pc}

080060cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2280      	movs	r2, #128	; 0x80
 80060da:	0192      	lsls	r2, r2, #6
 80060dc:	605a      	str	r2, [r3, #4]
	return 0;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	0018      	movs	r0, r3
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b002      	add	sp, #8
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <_isatty>:

int _isatty(int file)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	return 1;
 80060f0:	2301      	movs	r3, #1
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b002      	add	sp, #8
 80060f8:	bd80      	pop	{r7, pc}

080060fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
	return 0;
 8006106:	2300      	movs	r3, #0
}
 8006108:	0018      	movs	r0, r3
 800610a:	46bd      	mov	sp, r7
 800610c:	b004      	add	sp, #16
 800610e:	bd80      	pop	{r7, pc}

08006110 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006118:	4b11      	ldr	r3, [pc, #68]	; (8006160 <_sbrk+0x50>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <_sbrk+0x16>
		heap_end = &end;
 8006120:	4b0f      	ldr	r3, [pc, #60]	; (8006160 <_sbrk+0x50>)
 8006122:	4a10      	ldr	r2, [pc, #64]	; (8006164 <_sbrk+0x54>)
 8006124:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <_sbrk+0x50>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800612c:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <_sbrk+0x50>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	18d3      	adds	r3, r2, r3
 8006134:	466a      	mov	r2, sp
 8006136:	4293      	cmp	r3, r2
 8006138:	d907      	bls.n	800614a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800613a:	f000 f8ff 	bl	800633c <__errno>
 800613e:	0003      	movs	r3, r0
 8006140:	220c      	movs	r2, #12
 8006142:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006144:	2301      	movs	r3, #1
 8006146:	425b      	negs	r3, r3
 8006148:	e006      	b.n	8006158 <_sbrk+0x48>
	}

	heap_end += incr;
 800614a:	4b05      	ldr	r3, [pc, #20]	; (8006160 <_sbrk+0x50>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	18d2      	adds	r2, r2, r3
 8006152:	4b03      	ldr	r3, [pc, #12]	; (8006160 <_sbrk+0x50>)
 8006154:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8006156:	68fb      	ldr	r3, [r7, #12]
}
 8006158:	0018      	movs	r0, r3
 800615a:	46bd      	mov	sp, r7
 800615c:	b004      	add	sp, #16
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000200 	.word	0x20000200
 8006164:	200002d0 	.word	0x200002d0

08006168 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800616c:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <SystemInit+0x70>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b19      	ldr	r3, [pc, #100]	; (80061d8 <SystemInit+0x70>)
 8006172:	2101      	movs	r1, #1
 8006174:	430a      	orrs	r2, r1
 8006176:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8006178:	4b17      	ldr	r3, [pc, #92]	; (80061d8 <SystemInit+0x70>)
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <SystemInit+0x70>)
 800617e:	4917      	ldr	r1, [pc, #92]	; (80061dc <SystemInit+0x74>)
 8006180:	400a      	ands	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8006184:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <SystemInit+0x70>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	4b13      	ldr	r3, [pc, #76]	; (80061d8 <SystemInit+0x70>)
 800618a:	4915      	ldr	r1, [pc, #84]	; (80061e0 <SystemInit+0x78>)
 800618c:	400a      	ands	r2, r1
 800618e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <SystemInit+0x70>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <SystemInit+0x70>)
 8006196:	4913      	ldr	r1, [pc, #76]	; (80061e4 <SystemInit+0x7c>)
 8006198:	400a      	ands	r2, r1
 800619a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <SystemInit+0x70>)
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <SystemInit+0x70>)
 80061a2:	4911      	ldr	r1, [pc, #68]	; (80061e8 <SystemInit+0x80>)
 80061a4:	400a      	ands	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <SystemInit+0x70>)
 80061aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <SystemInit+0x70>)
 80061ae:	210f      	movs	r1, #15
 80061b0:	438a      	bics	r2, r1
 80061b2:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80061b4:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <SystemInit+0x70>)
 80061b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b8:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <SystemInit+0x70>)
 80061ba:	490c      	ldr	r1, [pc, #48]	; (80061ec <SystemInit+0x84>)
 80061bc:	400a      	ands	r2, r1
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <SystemInit+0x70>)
 80061c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c4:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <SystemInit+0x70>)
 80061c6:	2101      	movs	r1, #1
 80061c8:	438a      	bics	r2, r1
 80061ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80061cc:	4b02      	ldr	r3, [pc, #8]	; (80061d8 <SystemInit+0x70>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	609a      	str	r2, [r3, #8]

}
 80061d2:	46c0      	nop			; (mov r8, r8)
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40021000 	.word	0x40021000
 80061dc:	08ffb80c 	.word	0x08ffb80c
 80061e0:	fef6ffff 	.word	0xfef6ffff
 80061e4:	fffbffff 	.word	0xfffbffff
 80061e8:	ffc0ffff 	.word	0xffc0ffff
 80061ec:	fffcfe2c 	.word	0xfffcfe2c

080061f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <MX_USART2_UART_Init+0x58>)
 80061f6:	4a15      	ldr	r2, [pc, #84]	; (800624c <MX_USART2_UART_Init+0x5c>)
 80061f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80061fa:	4b13      	ldr	r3, [pc, #76]	; (8006248 <MX_USART2_UART_Init+0x58>)
 80061fc:	22e1      	movs	r2, #225	; 0xe1
 80061fe:	0252      	lsls	r2, r2, #9
 8006200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006202:	4b11      	ldr	r3, [pc, #68]	; (8006248 <MX_USART2_UART_Init+0x58>)
 8006204:	2200      	movs	r2, #0
 8006206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006208:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <MX_USART2_UART_Init+0x58>)
 800620a:	2200      	movs	r2, #0
 800620c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800620e:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <MX_USART2_UART_Init+0x58>)
 8006210:	2200      	movs	r2, #0
 8006212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <MX_USART2_UART_Init+0x58>)
 8006216:	220c      	movs	r2, #12
 8006218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <MX_USART2_UART_Init+0x58>)
 800621c:	2200      	movs	r2, #0
 800621e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006220:	4b09      	ldr	r3, [pc, #36]	; (8006248 <MX_USART2_UART_Init+0x58>)
 8006222:	2200      	movs	r2, #0
 8006224:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006226:	4b08      	ldr	r3, [pc, #32]	; (8006248 <MX_USART2_UART_Init+0x58>)
 8006228:	2200      	movs	r2, #0
 800622a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800622c:	4b06      	ldr	r3, [pc, #24]	; (8006248 <MX_USART2_UART_Init+0x58>)
 800622e:	2200      	movs	r2, #0
 8006230:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006232:	4b05      	ldr	r3, [pc, #20]	; (8006248 <MX_USART2_UART_Init+0x58>)
 8006234:	0018      	movs	r0, r3
 8006236:	f7fe fd3f 	bl	8004cb8 <HAL_UART_Init>
 800623a:	1e03      	subs	r3, r0, #0
 800623c:	d001      	beq.n	8006242 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800623e:	f7ff fed1 	bl	8005fe4 <Error_Handler>
  }

}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	2000025c 	.word	0x2000025c
 800624c:	40004400 	.word	0x40004400

08006250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	; 0x28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006258:	2314      	movs	r3, #20
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	0018      	movs	r0, r3
 800625e:	2314      	movs	r3, #20
 8006260:	001a      	movs	r2, r3
 8006262:	2100      	movs	r1, #0
 8006264:	f000 f894 	bl	8006390 <memset>
  if(uartHandle->Instance==USART2)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <HAL_UART_MspInit+0x90>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d132      	bne.n	80062d8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006272:	4b1c      	ldr	r3, [pc, #112]	; (80062e4 <HAL_UART_MspInit+0x94>)
 8006274:	69da      	ldr	r2, [r3, #28]
 8006276:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <HAL_UART_MspInit+0x94>)
 8006278:	2180      	movs	r1, #128	; 0x80
 800627a:	0289      	lsls	r1, r1, #10
 800627c:	430a      	orrs	r2, r1
 800627e:	61da      	str	r2, [r3, #28]
 8006280:	4b18      	ldr	r3, [pc, #96]	; (80062e4 <HAL_UART_MspInit+0x94>)
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	029b      	lsls	r3, r3, #10
 8006288:	4013      	ands	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <HAL_UART_MspInit+0x94>)
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <HAL_UART_MspInit+0x94>)
 8006294:	2180      	movs	r1, #128	; 0x80
 8006296:	0289      	lsls	r1, r1, #10
 8006298:	430a      	orrs	r2, r1
 800629a:	615a      	str	r2, [r3, #20]
 800629c:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <HAL_UART_MspInit+0x94>)
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	029b      	lsls	r3, r3, #10
 80062a4:	4013      	ands	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80062aa:	2114      	movs	r1, #20
 80062ac:	187b      	adds	r3, r7, r1
 80062ae:	220c      	movs	r2, #12
 80062b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	2202      	movs	r2, #2
 80062b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b8:	187b      	adds	r3, r7, r1
 80062ba:	2200      	movs	r2, #0
 80062bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062be:	187b      	adds	r3, r7, r1
 80062c0:	2203      	movs	r2, #3
 80062c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80062c4:	187b      	adds	r3, r7, r1
 80062c6:	2201      	movs	r2, #1
 80062c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062ca:	187a      	adds	r2, r7, r1
 80062cc:	2390      	movs	r3, #144	; 0x90
 80062ce:	05db      	lsls	r3, r3, #23
 80062d0:	0011      	movs	r1, r2
 80062d2:	0018      	movs	r0, r3
 80062d4:	f7fd f812 	bl	80032fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80062d8:	46c0      	nop			; (mov r8, r8)
 80062da:	46bd      	mov	sp, r7
 80062dc:	b00a      	add	sp, #40	; 0x28
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40004400 	.word	0x40004400
 80062e4:	40021000 	.word	0x40021000

080062e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80062e8:	480d      	ldr	r0, [pc, #52]	; (8006320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80062ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062ec:	480d      	ldr	r0, [pc, #52]	; (8006324 <LoopForever+0x6>)
  ldr r1, =_edata
 80062ee:	490e      	ldr	r1, [pc, #56]	; (8006328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062f0:	4a0e      	ldr	r2, [pc, #56]	; (800632c <LoopForever+0xe>)
  movs r3, #0
 80062f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062f4:	e002      	b.n	80062fc <LoopCopyDataInit>

080062f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062fa:	3304      	adds	r3, #4

080062fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006300:	d3f9      	bcc.n	80062f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006302:	4a0b      	ldr	r2, [pc, #44]	; (8006330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006304:	4c0b      	ldr	r4, [pc, #44]	; (8006334 <LoopForever+0x16>)
  movs r3, #0
 8006306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006308:	e001      	b.n	800630e <LoopFillZerobss>

0800630a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800630a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800630c:	3204      	adds	r2, #4

0800630e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800630e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006310:	d3fb      	bcc.n	800630a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006312:	f7ff ff29 	bl	8006168 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006316:	f000 f817 	bl	8006348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800631a:	f7ff fd7b 	bl	8005e14 <main>

0800631e <LoopForever>:

LoopForever:
    b LoopForever
 800631e:	e7fe      	b.n	800631e <LoopForever>
  ldr   r0, =_estack
 8006320:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006328:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800632c:	08009584 	.word	0x08009584
  ldr r2, =_sbss
 8006330:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006334:	200002d0 	.word	0x200002d0

08006338 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006338:	e7fe      	b.n	8006338 <ADC1_COMP_IRQHandler>
	...

0800633c <__errno>:
 800633c:	4b01      	ldr	r3, [pc, #4]	; (8006344 <__errno+0x8>)
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	4770      	bx	lr
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	20000004 	.word	0x20000004

08006348 <__libc_init_array>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	2600      	movs	r6, #0
 800634c:	4d0c      	ldr	r5, [pc, #48]	; (8006380 <__libc_init_array+0x38>)
 800634e:	4c0d      	ldr	r4, [pc, #52]	; (8006384 <__libc_init_array+0x3c>)
 8006350:	1b64      	subs	r4, r4, r5
 8006352:	10a4      	asrs	r4, r4, #2
 8006354:	42a6      	cmp	r6, r4
 8006356:	d109      	bne.n	800636c <__libc_init_array+0x24>
 8006358:	2600      	movs	r6, #0
 800635a:	f002 fea5 	bl	80090a8 <_init>
 800635e:	4d0a      	ldr	r5, [pc, #40]	; (8006388 <__libc_init_array+0x40>)
 8006360:	4c0a      	ldr	r4, [pc, #40]	; (800638c <__libc_init_array+0x44>)
 8006362:	1b64      	subs	r4, r4, r5
 8006364:	10a4      	asrs	r4, r4, #2
 8006366:	42a6      	cmp	r6, r4
 8006368:	d105      	bne.n	8006376 <__libc_init_array+0x2e>
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	00b3      	lsls	r3, r6, #2
 800636e:	58eb      	ldr	r3, [r5, r3]
 8006370:	4798      	blx	r3
 8006372:	3601      	adds	r6, #1
 8006374:	e7ee      	b.n	8006354 <__libc_init_array+0xc>
 8006376:	00b3      	lsls	r3, r6, #2
 8006378:	58eb      	ldr	r3, [r5, r3]
 800637a:	4798      	blx	r3
 800637c:	3601      	adds	r6, #1
 800637e:	e7f2      	b.n	8006366 <__libc_init_array+0x1e>
 8006380:	0800957c 	.word	0x0800957c
 8006384:	0800957c 	.word	0x0800957c
 8006388:	0800957c 	.word	0x0800957c
 800638c:	08009580 	.word	0x08009580

08006390 <memset>:
 8006390:	0003      	movs	r3, r0
 8006392:	1812      	adds	r2, r2, r0
 8006394:	4293      	cmp	r3, r2
 8006396:	d100      	bne.n	800639a <memset+0xa>
 8006398:	4770      	bx	lr
 800639a:	7019      	strb	r1, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	e7f9      	b.n	8006394 <memset+0x4>

080063a0 <__cvt>:
 80063a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063a2:	b08b      	sub	sp, #44	; 0x2c
 80063a4:	0014      	movs	r4, r2
 80063a6:	1e1d      	subs	r5, r3, #0
 80063a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80063aa:	da53      	bge.n	8006454 <__cvt+0xb4>
 80063ac:	2480      	movs	r4, #128	; 0x80
 80063ae:	0624      	lsls	r4, r4, #24
 80063b0:	191b      	adds	r3, r3, r4
 80063b2:	001d      	movs	r5, r3
 80063b4:	0014      	movs	r4, r2
 80063b6:	232d      	movs	r3, #45	; 0x2d
 80063b8:	700b      	strb	r3, [r1, #0]
 80063ba:	2320      	movs	r3, #32
 80063bc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80063be:	2203      	movs	r2, #3
 80063c0:	439e      	bics	r6, r3
 80063c2:	2e46      	cmp	r6, #70	; 0x46
 80063c4:	d007      	beq.n	80063d6 <__cvt+0x36>
 80063c6:	0033      	movs	r3, r6
 80063c8:	3b45      	subs	r3, #69	; 0x45
 80063ca:	4259      	negs	r1, r3
 80063cc:	414b      	adcs	r3, r1
 80063ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 80063d0:	3a01      	subs	r2, #1
 80063d2:	18cb      	adds	r3, r1, r3
 80063d4:	9310      	str	r3, [sp, #64]	; 0x40
 80063d6:	ab09      	add	r3, sp, #36	; 0x24
 80063d8:	9304      	str	r3, [sp, #16]
 80063da:	ab08      	add	r3, sp, #32
 80063dc:	9303      	str	r3, [sp, #12]
 80063de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063e0:	9200      	str	r2, [sp, #0]
 80063e2:	9302      	str	r3, [sp, #8]
 80063e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063e6:	0022      	movs	r2, r4
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	002b      	movs	r3, r5
 80063ec:	f000 fe20 	bl	8007030 <_dtoa_r>
 80063f0:	0007      	movs	r7, r0
 80063f2:	2e47      	cmp	r6, #71	; 0x47
 80063f4:	d102      	bne.n	80063fc <__cvt+0x5c>
 80063f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063f8:	07db      	lsls	r3, r3, #31
 80063fa:	d524      	bpl.n	8006446 <__cvt+0xa6>
 80063fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	9307      	str	r3, [sp, #28]
 8006402:	2e46      	cmp	r6, #70	; 0x46
 8006404:	d114      	bne.n	8006430 <__cvt+0x90>
 8006406:	783b      	ldrb	r3, [r7, #0]
 8006408:	2b30      	cmp	r3, #48	; 0x30
 800640a:	d10c      	bne.n	8006426 <__cvt+0x86>
 800640c:	2200      	movs	r2, #0
 800640e:	2300      	movs	r3, #0
 8006410:	0020      	movs	r0, r4
 8006412:	0029      	movs	r1, r5
 8006414:	f7fa f810 	bl	8000438 <__aeabi_dcmpeq>
 8006418:	2800      	cmp	r0, #0
 800641a:	d104      	bne.n	8006426 <__cvt+0x86>
 800641c:	2301      	movs	r3, #1
 800641e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006428:	9a07      	ldr	r2, [sp, #28]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	18d3      	adds	r3, r2, r3
 800642e:	9307      	str	r3, [sp, #28]
 8006430:	2200      	movs	r2, #0
 8006432:	2300      	movs	r3, #0
 8006434:	0020      	movs	r0, r4
 8006436:	0029      	movs	r1, r5
 8006438:	f7f9 fffe 	bl	8000438 <__aeabi_dcmpeq>
 800643c:	2230      	movs	r2, #48	; 0x30
 800643e:	2800      	cmp	r0, #0
 8006440:	d00d      	beq.n	800645e <__cvt+0xbe>
 8006442:	9b07      	ldr	r3, [sp, #28]
 8006444:	9309      	str	r3, [sp, #36]	; 0x24
 8006446:	0038      	movs	r0, r7
 8006448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800644c:	1bdb      	subs	r3, r3, r7
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	b00b      	add	sp, #44	; 0x2c
 8006452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006454:	2300      	movs	r3, #0
 8006456:	e7af      	b.n	80063b8 <__cvt+0x18>
 8006458:	1c59      	adds	r1, r3, #1
 800645a:	9109      	str	r1, [sp, #36]	; 0x24
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006460:	9907      	ldr	r1, [sp, #28]
 8006462:	428b      	cmp	r3, r1
 8006464:	d3f8      	bcc.n	8006458 <__cvt+0xb8>
 8006466:	e7ee      	b.n	8006446 <__cvt+0xa6>

08006468 <__exponent>:
 8006468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800646a:	1c83      	adds	r3, r0, #2
 800646c:	b085      	sub	sp, #20
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	0006      	movs	r6, r0
 8006472:	000c      	movs	r4, r1
 8006474:	7002      	strb	r2, [r0, #0]
 8006476:	232b      	movs	r3, #43	; 0x2b
 8006478:	2900      	cmp	r1, #0
 800647a:	da01      	bge.n	8006480 <__exponent+0x18>
 800647c:	232d      	movs	r3, #45	; 0x2d
 800647e:	424c      	negs	r4, r1
 8006480:	7073      	strb	r3, [r6, #1]
 8006482:	2c09      	cmp	r4, #9
 8006484:	dd22      	ble.n	80064cc <__exponent+0x64>
 8006486:	ab02      	add	r3, sp, #8
 8006488:	1ddd      	adds	r5, r3, #7
 800648a:	0020      	movs	r0, r4
 800648c:	210a      	movs	r1, #10
 800648e:	f7f9 ffbd 	bl	800040c <__aeabi_idivmod>
 8006492:	1e6f      	subs	r7, r5, #1
 8006494:	3130      	adds	r1, #48	; 0x30
 8006496:	7039      	strb	r1, [r7, #0]
 8006498:	0020      	movs	r0, r4
 800649a:	210a      	movs	r1, #10
 800649c:	f7f9 fed0 	bl	8000240 <__divsi3>
 80064a0:	0004      	movs	r4, r0
 80064a2:	2809      	cmp	r0, #9
 80064a4:	dc0b      	bgt.n	80064be <__exponent+0x56>
 80064a6:	3d02      	subs	r5, #2
 80064a8:	3430      	adds	r4, #48	; 0x30
 80064aa:	9b01      	ldr	r3, [sp, #4]
 80064ac:	702c      	strb	r4, [r5, #0]
 80064ae:	aa02      	add	r2, sp, #8
 80064b0:	3207      	adds	r2, #7
 80064b2:	0018      	movs	r0, r3
 80064b4:	42aa      	cmp	r2, r5
 80064b6:	d804      	bhi.n	80064c2 <__exponent+0x5a>
 80064b8:	1b80      	subs	r0, r0, r6
 80064ba:	b005      	add	sp, #20
 80064bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064be:	003d      	movs	r5, r7
 80064c0:	e7e3      	b.n	800648a <__exponent+0x22>
 80064c2:	782a      	ldrb	r2, [r5, #0]
 80064c4:	3501      	adds	r5, #1
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	e7f0      	b.n	80064ae <__exponent+0x46>
 80064cc:	2330      	movs	r3, #48	; 0x30
 80064ce:	18e4      	adds	r4, r4, r3
 80064d0:	70b3      	strb	r3, [r6, #2]
 80064d2:	1d30      	adds	r0, r6, #4
 80064d4:	70f4      	strb	r4, [r6, #3]
 80064d6:	e7ef      	b.n	80064b8 <__exponent+0x50>

080064d8 <_printf_float>:
 80064d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064da:	b095      	sub	sp, #84	; 0x54
 80064dc:	000c      	movs	r4, r1
 80064de:	920a      	str	r2, [sp, #40]	; 0x28
 80064e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80064e2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80064e4:	9009      	str	r0, [sp, #36]	; 0x24
 80064e6:	f001 fd0f 	bl	8007f08 <_localeconv_r>
 80064ea:	6803      	ldr	r3, [r0, #0]
 80064ec:	0018      	movs	r0, r3
 80064ee:	930c      	str	r3, [sp, #48]	; 0x30
 80064f0:	f7f9 fe0a 	bl	8000108 <strlen>
 80064f4:	2300      	movs	r3, #0
 80064f6:	9312      	str	r3, [sp, #72]	; 0x48
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	900e      	str	r0, [sp, #56]	; 0x38
 80064fc:	930d      	str	r3, [sp, #52]	; 0x34
 80064fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006500:	7e27      	ldrb	r7, [r4, #24]
 8006502:	682b      	ldr	r3, [r5, #0]
 8006504:	2207      	movs	r2, #7
 8006506:	05c9      	lsls	r1, r1, #23
 8006508:	d545      	bpl.n	8006596 <_printf_float+0xbe>
 800650a:	189b      	adds	r3, r3, r2
 800650c:	4393      	bics	r3, r2
 800650e:	001a      	movs	r2, r3
 8006510:	3208      	adds	r2, #8
 8006512:	602a      	str	r2, [r5, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	64a2      	str	r2, [r4, #72]	; 0x48
 800651a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800651c:	2201      	movs	r2, #1
 800651e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006520:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8006522:	006b      	lsls	r3, r5, #1
 8006524:	085b      	lsrs	r3, r3, #1
 8006526:	930f      	str	r3, [sp, #60]	; 0x3c
 8006528:	4252      	negs	r2, r2
 800652a:	4bac      	ldr	r3, [pc, #688]	; (80067dc <_printf_float+0x304>)
 800652c:	0030      	movs	r0, r6
 800652e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006530:	f7fc fbf4 	bl	8002d1c <__aeabi_dcmpun>
 8006534:	2800      	cmp	r0, #0
 8006536:	d130      	bne.n	800659a <_printf_float+0xc2>
 8006538:	2201      	movs	r2, #1
 800653a:	4ba8      	ldr	r3, [pc, #672]	; (80067dc <_printf_float+0x304>)
 800653c:	4252      	negs	r2, r2
 800653e:	0030      	movs	r0, r6
 8006540:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006542:	f7f9 ff89 	bl	8000458 <__aeabi_dcmple>
 8006546:	2800      	cmp	r0, #0
 8006548:	d127      	bne.n	800659a <_printf_float+0xc2>
 800654a:	2200      	movs	r2, #0
 800654c:	2300      	movs	r3, #0
 800654e:	0030      	movs	r0, r6
 8006550:	0029      	movs	r1, r5
 8006552:	f7f9 ff77 	bl	8000444 <__aeabi_dcmplt>
 8006556:	2800      	cmp	r0, #0
 8006558:	d003      	beq.n	8006562 <_printf_float+0x8a>
 800655a:	0023      	movs	r3, r4
 800655c:	222d      	movs	r2, #45	; 0x2d
 800655e:	3343      	adds	r3, #67	; 0x43
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	4d9f      	ldr	r5, [pc, #636]	; (80067e0 <_printf_float+0x308>)
 8006564:	2f47      	cmp	r7, #71	; 0x47
 8006566:	d800      	bhi.n	800656a <_printf_float+0x92>
 8006568:	4d9e      	ldr	r5, [pc, #632]	; (80067e4 <_printf_float+0x30c>)
 800656a:	2303      	movs	r3, #3
 800656c:	2600      	movs	r6, #0
 800656e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006570:	6123      	str	r3, [r4, #16]
 8006572:	3301      	adds	r3, #1
 8006574:	439a      	bics	r2, r3
 8006576:	6022      	str	r2, [r4, #0]
 8006578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800657a:	aa13      	add	r2, sp, #76	; 0x4c
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	0021      	movs	r1, r4
 8006580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006582:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006584:	f000 f9f4 	bl	8006970 <_printf_common>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d000      	beq.n	800658e <_printf_float+0xb6>
 800658c:	e093      	b.n	80066b6 <_printf_float+0x1de>
 800658e:	2001      	movs	r0, #1
 8006590:	4240      	negs	r0, r0
 8006592:	b015      	add	sp, #84	; 0x54
 8006594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006596:	3307      	adds	r3, #7
 8006598:	e7b8      	b.n	800650c <_printf_float+0x34>
 800659a:	0032      	movs	r2, r6
 800659c:	002b      	movs	r3, r5
 800659e:	0030      	movs	r0, r6
 80065a0:	0029      	movs	r1, r5
 80065a2:	f7fc fbbb 	bl	8002d1c <__aeabi_dcmpun>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d004      	beq.n	80065b4 <_printf_float+0xdc>
 80065aa:	4d8f      	ldr	r5, [pc, #572]	; (80067e8 <_printf_float+0x310>)
 80065ac:	2f47      	cmp	r7, #71	; 0x47
 80065ae:	d8dc      	bhi.n	800656a <_printf_float+0x92>
 80065b0:	4d8e      	ldr	r5, [pc, #568]	; (80067ec <_printf_float+0x314>)
 80065b2:	e7da      	b.n	800656a <_printf_float+0x92>
 80065b4:	2380      	movs	r3, #128	; 0x80
 80065b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065b8:	6862      	ldr	r2, [r4, #4]
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	430b      	orrs	r3, r1
 80065be:	1c51      	adds	r1, r2, #1
 80065c0:	d143      	bne.n	800664a <_printf_float+0x172>
 80065c2:	3207      	adds	r2, #7
 80065c4:	6062      	str	r2, [r4, #4]
 80065c6:	aa12      	add	r2, sp, #72	; 0x48
 80065c8:	2100      	movs	r1, #0
 80065ca:	9205      	str	r2, [sp, #20]
 80065cc:	aa11      	add	r2, sp, #68	; 0x44
 80065ce:	9203      	str	r2, [sp, #12]
 80065d0:	2223      	movs	r2, #35	; 0x23
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	9106      	str	r1, [sp, #24]
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	a908      	add	r1, sp, #32
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	1852      	adds	r2, r2, r1
 80065de:	9202      	str	r2, [sp, #8]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	0032      	movs	r2, r6
 80065e4:	002b      	movs	r3, r5
 80065e6:	9704      	str	r7, [sp, #16]
 80065e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ea:	f7ff fed9 	bl	80063a0 <__cvt>
 80065ee:	2320      	movs	r3, #32
 80065f0:	003a      	movs	r2, r7
 80065f2:	0005      	movs	r5, r0
 80065f4:	439a      	bics	r2, r3
 80065f6:	2a47      	cmp	r2, #71	; 0x47
 80065f8:	d107      	bne.n	800660a <_printf_float+0x132>
 80065fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065fc:	1cda      	adds	r2, r3, #3
 80065fe:	db02      	blt.n	8006606 <_printf_float+0x12e>
 8006600:	6862      	ldr	r2, [r4, #4]
 8006602:	4293      	cmp	r3, r2
 8006604:	dd45      	ble.n	8006692 <_printf_float+0x1ba>
 8006606:	3f02      	subs	r7, #2
 8006608:	b2ff      	uxtb	r7, r7
 800660a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800660c:	2f65      	cmp	r7, #101	; 0x65
 800660e:	d825      	bhi.n	800665c <_printf_float+0x184>
 8006610:	0020      	movs	r0, r4
 8006612:	3901      	subs	r1, #1
 8006614:	003a      	movs	r2, r7
 8006616:	3050      	adds	r0, #80	; 0x50
 8006618:	9111      	str	r1, [sp, #68]	; 0x44
 800661a:	f7ff ff25 	bl	8006468 <__exponent>
 800661e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006620:	0006      	movs	r6, r0
 8006622:	1813      	adds	r3, r2, r0
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	2a01      	cmp	r2, #1
 8006628:	dc02      	bgt.n	8006630 <_printf_float+0x158>
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	07d2      	lsls	r2, r2, #31
 800662e:	d501      	bpl.n	8006634 <_printf_float+0x15c>
 8006630:	3301      	adds	r3, #1
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	2323      	movs	r3, #35	; 0x23
 8006636:	aa08      	add	r2, sp, #32
 8006638:	189b      	adds	r3, r3, r2
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d09b      	beq.n	8006578 <_printf_float+0xa0>
 8006640:	0023      	movs	r3, r4
 8006642:	222d      	movs	r2, #45	; 0x2d
 8006644:	3343      	adds	r3, #67	; 0x43
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e796      	b.n	8006578 <_printf_float+0xa0>
 800664a:	2f67      	cmp	r7, #103	; 0x67
 800664c:	d100      	bne.n	8006650 <_printf_float+0x178>
 800664e:	e176      	b.n	800693e <_printf_float+0x466>
 8006650:	2f47      	cmp	r7, #71	; 0x47
 8006652:	d1b8      	bne.n	80065c6 <_printf_float+0xee>
 8006654:	2a00      	cmp	r2, #0
 8006656:	d1b6      	bne.n	80065c6 <_printf_float+0xee>
 8006658:	2201      	movs	r2, #1
 800665a:	e7b3      	b.n	80065c4 <_printf_float+0xec>
 800665c:	2f66      	cmp	r7, #102	; 0x66
 800665e:	d119      	bne.n	8006694 <_printf_float+0x1bc>
 8006660:	6863      	ldr	r3, [r4, #4]
 8006662:	2900      	cmp	r1, #0
 8006664:	dd0c      	ble.n	8006680 <_printf_float+0x1a8>
 8006666:	6121      	str	r1, [r4, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <_printf_float+0x19a>
 800666c:	6822      	ldr	r2, [r4, #0]
 800666e:	07d2      	lsls	r2, r2, #31
 8006670:	d502      	bpl.n	8006678 <_printf_float+0x1a0>
 8006672:	3301      	adds	r3, #1
 8006674:	185b      	adds	r3, r3, r1
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800667a:	2600      	movs	r6, #0
 800667c:	65a3      	str	r3, [r4, #88]	; 0x58
 800667e:	e7d9      	b.n	8006634 <_printf_float+0x15c>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d103      	bne.n	800668c <_printf_float+0x1b4>
 8006684:	2201      	movs	r2, #1
 8006686:	6821      	ldr	r1, [r4, #0]
 8006688:	4211      	tst	r1, r2
 800668a:	d000      	beq.n	800668e <_printf_float+0x1b6>
 800668c:	1c9a      	adds	r2, r3, #2
 800668e:	6122      	str	r2, [r4, #16]
 8006690:	e7f2      	b.n	8006678 <_printf_float+0x1a0>
 8006692:	2767      	movs	r7, #103	; 0x67
 8006694:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006696:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006698:	4293      	cmp	r3, r2
 800669a:	db05      	blt.n	80066a8 <_printf_float+0x1d0>
 800669c:	6822      	ldr	r2, [r4, #0]
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	07d2      	lsls	r2, r2, #31
 80066a2:	d5e9      	bpl.n	8006678 <_printf_float+0x1a0>
 80066a4:	3301      	adds	r3, #1
 80066a6:	e7e6      	b.n	8006676 <_printf_float+0x19e>
 80066a8:	2101      	movs	r1, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	dc01      	bgt.n	80066b2 <_printf_float+0x1da>
 80066ae:	1849      	adds	r1, r1, r1
 80066b0:	1ac9      	subs	r1, r1, r3
 80066b2:	1852      	adds	r2, r2, r1
 80066b4:	e7eb      	b.n	800668e <_printf_float+0x1b6>
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	0553      	lsls	r3, r2, #21
 80066ba:	d408      	bmi.n	80066ce <_printf_float+0x1f6>
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	002a      	movs	r2, r5
 80066c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80066c6:	47a8      	blx	r5
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d129      	bne.n	8006720 <_printf_float+0x248>
 80066cc:	e75f      	b.n	800658e <_printf_float+0xb6>
 80066ce:	2f65      	cmp	r7, #101	; 0x65
 80066d0:	d800      	bhi.n	80066d4 <_printf_float+0x1fc>
 80066d2:	e0e0      	b.n	8006896 <_printf_float+0x3be>
 80066d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80066d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80066d8:	2200      	movs	r2, #0
 80066da:	2300      	movs	r3, #0
 80066dc:	f7f9 feac 	bl	8000438 <__aeabi_dcmpeq>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d034      	beq.n	800674e <_printf_float+0x276>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4a42      	ldr	r2, [pc, #264]	; (80067f0 <_printf_float+0x318>)
 80066e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80066ee:	47a8      	blx	r5
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d100      	bne.n	80066f6 <_printf_float+0x21e>
 80066f4:	e74b      	b.n	800658e <_printf_float+0xb6>
 80066f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066fa:	4293      	cmp	r3, r2
 80066fc:	db02      	blt.n	8006704 <_printf_float+0x22c>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	07db      	lsls	r3, r3, #31
 8006702:	d50d      	bpl.n	8006720 <_printf_float+0x248>
 8006704:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800670a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800670c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800670e:	47a8      	blx	r5
 8006710:	2500      	movs	r5, #0
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	d100      	bne.n	8006718 <_printf_float+0x240>
 8006716:	e73a      	b.n	800658e <_printf_float+0xb6>
 8006718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800671a:	3b01      	subs	r3, #1
 800671c:	42ab      	cmp	r3, r5
 800671e:	dc0a      	bgt.n	8006736 <_printf_float+0x25e>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	079b      	lsls	r3, r3, #30
 8006724:	d500      	bpl.n	8006728 <_printf_float+0x250>
 8006726:	e108      	b.n	800693a <_printf_float+0x462>
 8006728:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800672a:	68e0      	ldr	r0, [r4, #12]
 800672c:	4298      	cmp	r0, r3
 800672e:	db00      	blt.n	8006732 <_printf_float+0x25a>
 8006730:	e72f      	b.n	8006592 <_printf_float+0xba>
 8006732:	0018      	movs	r0, r3
 8006734:	e72d      	b.n	8006592 <_printf_float+0xba>
 8006736:	0022      	movs	r2, r4
 8006738:	2301      	movs	r3, #1
 800673a:	321a      	adds	r2, #26
 800673c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800673e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006740:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006742:	47b0      	blx	r6
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d100      	bne.n	800674a <_printf_float+0x272>
 8006748:	e721      	b.n	800658e <_printf_float+0xb6>
 800674a:	3501      	adds	r5, #1
 800674c:	e7e4      	b.n	8006718 <_printf_float+0x240>
 800674e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006750:	2b00      	cmp	r3, #0
 8006752:	dc2d      	bgt.n	80067b0 <_printf_float+0x2d8>
 8006754:	2301      	movs	r3, #1
 8006756:	4a26      	ldr	r2, [pc, #152]	; (80067f0 <_printf_float+0x318>)
 8006758:	990a      	ldr	r1, [sp, #40]	; 0x28
 800675a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800675c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800675e:	47b0      	blx	r6
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d100      	bne.n	8006766 <_printf_float+0x28e>
 8006764:	e713      	b.n	800658e <_printf_float+0xb6>
 8006766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <_printf_float+0x2a0>
 800676c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800676e:	2b00      	cmp	r3, #0
 8006770:	d102      	bne.n	8006778 <_printf_float+0x2a0>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	07db      	lsls	r3, r3, #31
 8006776:	d5d3      	bpl.n	8006720 <_printf_float+0x248>
 8006778:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800677a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800677c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800677e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006782:	47b0      	blx	r6
 8006784:	2600      	movs	r6, #0
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	d100      	bne.n	800678c <_printf_float+0x2b4>
 800678a:	e700      	b.n	800658e <_printf_float+0xb6>
 800678c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800678e:	425b      	negs	r3, r3
 8006790:	42b3      	cmp	r3, r6
 8006792:	dc01      	bgt.n	8006798 <_printf_float+0x2c0>
 8006794:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006796:	e792      	b.n	80066be <_printf_float+0x1e6>
 8006798:	0022      	movs	r2, r4
 800679a:	2301      	movs	r3, #1
 800679c:	321a      	adds	r2, #26
 800679e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067a2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80067a4:	47b8      	blx	r7
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d100      	bne.n	80067ac <_printf_float+0x2d4>
 80067aa:	e6f0      	b.n	800658e <_printf_float+0xb6>
 80067ac:	3601      	adds	r6, #1
 80067ae:	e7ed      	b.n	800678c <_printf_float+0x2b4>
 80067b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067b2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80067b4:	429f      	cmp	r7, r3
 80067b6:	dd00      	ble.n	80067ba <_printf_float+0x2e2>
 80067b8:	001f      	movs	r7, r3
 80067ba:	2f00      	cmp	r7, #0
 80067bc:	dd08      	ble.n	80067d0 <_printf_float+0x2f8>
 80067be:	003b      	movs	r3, r7
 80067c0:	002a      	movs	r2, r5
 80067c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80067c8:	47b0      	blx	r6
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	d100      	bne.n	80067d0 <_printf_float+0x2f8>
 80067ce:	e6de      	b.n	800658e <_printf_float+0xb6>
 80067d0:	2300      	movs	r3, #0
 80067d2:	930d      	str	r3, [sp, #52]	; 0x34
 80067d4:	43fb      	mvns	r3, r7
 80067d6:	17db      	asrs	r3, r3, #31
 80067d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80067da:	e018      	b.n	800680e <_printf_float+0x336>
 80067dc:	7fefffff 	.word	0x7fefffff
 80067e0:	080092c0 	.word	0x080092c0
 80067e4:	080092bc 	.word	0x080092bc
 80067e8:	080092c8 	.word	0x080092c8
 80067ec:	080092c4 	.word	0x080092c4
 80067f0:	080092cc 	.word	0x080092cc
 80067f4:	0022      	movs	r2, r4
 80067f6:	2301      	movs	r3, #1
 80067f8:	321a      	adds	r2, #26
 80067fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006800:	47b0      	blx	r6
 8006802:	1c43      	adds	r3, r0, #1
 8006804:	d100      	bne.n	8006808 <_printf_float+0x330>
 8006806:	e6c2      	b.n	800658e <_printf_float+0xb6>
 8006808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800680a:	3301      	adds	r3, #1
 800680c:	930d      	str	r3, [sp, #52]	; 0x34
 800680e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006810:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8006812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006814:	403b      	ands	r3, r7
 8006816:	1af3      	subs	r3, r6, r3
 8006818:	4293      	cmp	r3, r2
 800681a:	dceb      	bgt.n	80067f4 <_printf_float+0x31c>
 800681c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800681e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006820:	19ad      	adds	r5, r5, r6
 8006822:	4293      	cmp	r3, r2
 8006824:	db10      	blt.n	8006848 <_printf_float+0x370>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	07db      	lsls	r3, r3, #31
 800682a:	d40d      	bmi.n	8006848 <_printf_float+0x370>
 800682c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800682e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006830:	1bbe      	subs	r6, r7, r6
 8006832:	1aff      	subs	r7, r7, r3
 8006834:	42b7      	cmp	r7, r6
 8006836:	dd00      	ble.n	800683a <_printf_float+0x362>
 8006838:	0037      	movs	r7, r6
 800683a:	2f00      	cmp	r7, #0
 800683c:	dc0d      	bgt.n	800685a <_printf_float+0x382>
 800683e:	43fe      	mvns	r6, r7
 8006840:	17f3      	asrs	r3, r6, #31
 8006842:	2500      	movs	r5, #0
 8006844:	930c      	str	r3, [sp, #48]	; 0x30
 8006846:	e01c      	b.n	8006882 <_printf_float+0x3aa>
 8006848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800684a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800684c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800684e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006850:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006852:	47b8      	blx	r7
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d1e9      	bne.n	800682c <_printf_float+0x354>
 8006858:	e699      	b.n	800658e <_printf_float+0xb6>
 800685a:	003b      	movs	r3, r7
 800685c:	002a      	movs	r2, r5
 800685e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006862:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006864:	47a8      	blx	r5
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d1e9      	bne.n	800683e <_printf_float+0x366>
 800686a:	e690      	b.n	800658e <_printf_float+0xb6>
 800686c:	0022      	movs	r2, r4
 800686e:	2301      	movs	r3, #1
 8006870:	321a      	adds	r2, #26
 8006872:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006876:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006878:	47b0      	blx	r6
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	d100      	bne.n	8006880 <_printf_float+0x3a8>
 800687e:	e686      	b.n	800658e <_printf_float+0xb6>
 8006880:	3501      	adds	r5, #1
 8006882:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006884:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006886:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006888:	1a9b      	subs	r3, r3, r2
 800688a:	003a      	movs	r2, r7
 800688c:	400a      	ands	r2, r1
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	42ab      	cmp	r3, r5
 8006892:	dceb      	bgt.n	800686c <_printf_float+0x394>
 8006894:	e744      	b.n	8006720 <_printf_float+0x248>
 8006896:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006898:	2b01      	cmp	r3, #1
 800689a:	dc02      	bgt.n	80068a2 <_printf_float+0x3ca>
 800689c:	2301      	movs	r3, #1
 800689e:	421a      	tst	r2, r3
 80068a0:	d032      	beq.n	8006908 <_printf_float+0x430>
 80068a2:	2301      	movs	r3, #1
 80068a4:	002a      	movs	r2, r5
 80068a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068aa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80068ac:	47b8      	blx	r7
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	d100      	bne.n	80068b4 <_printf_float+0x3dc>
 80068b2:	e66c      	b.n	800658e <_printf_float+0xb6>
 80068b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068bc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80068be:	3501      	adds	r5, #1
 80068c0:	47b8      	blx	r7
 80068c2:	1c43      	adds	r3, r0, #1
 80068c4:	d100      	bne.n	80068c8 <_printf_float+0x3f0>
 80068c6:	e662      	b.n	800658e <_printf_float+0xb6>
 80068c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80068ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80068cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068ce:	2200      	movs	r2, #0
 80068d0:	1e5f      	subs	r7, r3, #1
 80068d2:	2300      	movs	r3, #0
 80068d4:	f7f9 fdb0 	bl	8000438 <__aeabi_dcmpeq>
 80068d8:	003b      	movs	r3, r7
 80068da:	2800      	cmp	r0, #0
 80068dc:	d014      	beq.n	8006908 <_printf_float+0x430>
 80068de:	2500      	movs	r5, #0
 80068e0:	e00a      	b.n	80068f8 <_printf_float+0x420>
 80068e2:	0022      	movs	r2, r4
 80068e4:	2301      	movs	r3, #1
 80068e6:	321a      	adds	r2, #26
 80068e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80068ee:	47b8      	blx	r7
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d100      	bne.n	80068f6 <_printf_float+0x41e>
 80068f4:	e64b      	b.n	800658e <_printf_float+0xb6>
 80068f6:	3501      	adds	r5, #1
 80068f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068fa:	3b01      	subs	r3, #1
 80068fc:	42ab      	cmp	r3, r5
 80068fe:	dcf0      	bgt.n	80068e2 <_printf_float+0x40a>
 8006900:	0022      	movs	r2, r4
 8006902:	0033      	movs	r3, r6
 8006904:	3250      	adds	r2, #80	; 0x50
 8006906:	e6db      	b.n	80066c0 <_printf_float+0x1e8>
 8006908:	002a      	movs	r2, r5
 800690a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800690c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800690e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006910:	47a8      	blx	r5
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	d1f4      	bne.n	8006900 <_printf_float+0x428>
 8006916:	e63a      	b.n	800658e <_printf_float+0xb6>
 8006918:	0022      	movs	r2, r4
 800691a:	2301      	movs	r3, #1
 800691c:	3219      	adds	r2, #25
 800691e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006922:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006924:	47b0      	blx	r6
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	d100      	bne.n	800692c <_printf_float+0x454>
 800692a:	e630      	b.n	800658e <_printf_float+0xb6>
 800692c:	3501      	adds	r5, #1
 800692e:	68e3      	ldr	r3, [r4, #12]
 8006930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	42ab      	cmp	r3, r5
 8006936:	dcef      	bgt.n	8006918 <_printf_float+0x440>
 8006938:	e6f6      	b.n	8006728 <_printf_float+0x250>
 800693a:	2500      	movs	r5, #0
 800693c:	e7f7      	b.n	800692e <_printf_float+0x456>
 800693e:	2a00      	cmp	r2, #0
 8006940:	d100      	bne.n	8006944 <_printf_float+0x46c>
 8006942:	e689      	b.n	8006658 <_printf_float+0x180>
 8006944:	2100      	movs	r1, #0
 8006946:	9106      	str	r1, [sp, #24]
 8006948:	a912      	add	r1, sp, #72	; 0x48
 800694a:	9105      	str	r1, [sp, #20]
 800694c:	a911      	add	r1, sp, #68	; 0x44
 800694e:	9103      	str	r1, [sp, #12]
 8006950:	2123      	movs	r1, #35	; 0x23
 8006952:	a808      	add	r0, sp, #32
 8006954:	1809      	adds	r1, r1, r0
 8006956:	6023      	str	r3, [r4, #0]
 8006958:	9301      	str	r3, [sp, #4]
 800695a:	9200      	str	r2, [sp, #0]
 800695c:	002b      	movs	r3, r5
 800695e:	9704      	str	r7, [sp, #16]
 8006960:	9102      	str	r1, [sp, #8]
 8006962:	0032      	movs	r2, r6
 8006964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006966:	f7ff fd1b 	bl	80063a0 <__cvt>
 800696a:	0005      	movs	r5, r0
 800696c:	e645      	b.n	80065fa <_printf_float+0x122>
 800696e:	46c0      	nop			; (mov r8, r8)

08006970 <_printf_common>:
 8006970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006972:	0015      	movs	r5, r2
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	688a      	ldr	r2, [r1, #8]
 8006978:	690b      	ldr	r3, [r1, #16]
 800697a:	9000      	str	r0, [sp, #0]
 800697c:	000c      	movs	r4, r1
 800697e:	4293      	cmp	r3, r2
 8006980:	da00      	bge.n	8006984 <_printf_common+0x14>
 8006982:	0013      	movs	r3, r2
 8006984:	0022      	movs	r2, r4
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	3243      	adds	r2, #67	; 0x43
 800698a:	7812      	ldrb	r2, [r2, #0]
 800698c:	2a00      	cmp	r2, #0
 800698e:	d001      	beq.n	8006994 <_printf_common+0x24>
 8006990:	3301      	adds	r3, #1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	069b      	lsls	r3, r3, #26
 8006998:	d502      	bpl.n	80069a0 <_printf_common+0x30>
 800699a:	682b      	ldr	r3, [r5, #0]
 800699c:	3302      	adds	r3, #2
 800699e:	602b      	str	r3, [r5, #0]
 80069a0:	2706      	movs	r7, #6
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	401f      	ands	r7, r3
 80069a6:	d027      	beq.n	80069f8 <_printf_common+0x88>
 80069a8:	0023      	movs	r3, r4
 80069aa:	3343      	adds	r3, #67	; 0x43
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	1e5a      	subs	r2, r3, #1
 80069b0:	4193      	sbcs	r3, r2
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	0692      	lsls	r2, r2, #26
 80069b6:	d430      	bmi.n	8006a1a <_printf_common+0xaa>
 80069b8:	0022      	movs	r2, r4
 80069ba:	9901      	ldr	r1, [sp, #4]
 80069bc:	3243      	adds	r2, #67	; 0x43
 80069be:	9800      	ldr	r0, [sp, #0]
 80069c0:	9e08      	ldr	r6, [sp, #32]
 80069c2:	47b0      	blx	r6
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d025      	beq.n	8006a14 <_printf_common+0xa4>
 80069c8:	2306      	movs	r3, #6
 80069ca:	6820      	ldr	r0, [r4, #0]
 80069cc:	682a      	ldr	r2, [r5, #0]
 80069ce:	68e1      	ldr	r1, [r4, #12]
 80069d0:	4003      	ands	r3, r0
 80069d2:	2500      	movs	r5, #0
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d103      	bne.n	80069e0 <_printf_common+0x70>
 80069d8:	1a8d      	subs	r5, r1, r2
 80069da:	43eb      	mvns	r3, r5
 80069dc:	17db      	asrs	r3, r3, #31
 80069de:	401d      	ands	r5, r3
 80069e0:	68a3      	ldr	r3, [r4, #8]
 80069e2:	6922      	ldr	r2, [r4, #16]
 80069e4:	4293      	cmp	r3, r2
 80069e6:	dd01      	ble.n	80069ec <_printf_common+0x7c>
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	18ed      	adds	r5, r5, r3
 80069ec:	2700      	movs	r7, #0
 80069ee:	42bd      	cmp	r5, r7
 80069f0:	d120      	bne.n	8006a34 <_printf_common+0xc4>
 80069f2:	2000      	movs	r0, #0
 80069f4:	e010      	b.n	8006a18 <_printf_common+0xa8>
 80069f6:	3701      	adds	r7, #1
 80069f8:	68e3      	ldr	r3, [r4, #12]
 80069fa:	682a      	ldr	r2, [r5, #0]
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	42bb      	cmp	r3, r7
 8006a00:	ddd2      	ble.n	80069a8 <_printf_common+0x38>
 8006a02:	0022      	movs	r2, r4
 8006a04:	2301      	movs	r3, #1
 8006a06:	3219      	adds	r2, #25
 8006a08:	9901      	ldr	r1, [sp, #4]
 8006a0a:	9800      	ldr	r0, [sp, #0]
 8006a0c:	9e08      	ldr	r6, [sp, #32]
 8006a0e:	47b0      	blx	r6
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d1f0      	bne.n	80069f6 <_printf_common+0x86>
 8006a14:	2001      	movs	r0, #1
 8006a16:	4240      	negs	r0, r0
 8006a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a1a:	2030      	movs	r0, #48	; 0x30
 8006a1c:	18e1      	adds	r1, r4, r3
 8006a1e:	3143      	adds	r1, #67	; 0x43
 8006a20:	7008      	strb	r0, [r1, #0]
 8006a22:	0021      	movs	r1, r4
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	3145      	adds	r1, #69	; 0x45
 8006a28:	7809      	ldrb	r1, [r1, #0]
 8006a2a:	18a2      	adds	r2, r4, r2
 8006a2c:	3243      	adds	r2, #67	; 0x43
 8006a2e:	3302      	adds	r3, #2
 8006a30:	7011      	strb	r1, [r2, #0]
 8006a32:	e7c1      	b.n	80069b8 <_printf_common+0x48>
 8006a34:	0022      	movs	r2, r4
 8006a36:	2301      	movs	r3, #1
 8006a38:	321a      	adds	r2, #26
 8006a3a:	9901      	ldr	r1, [sp, #4]
 8006a3c:	9800      	ldr	r0, [sp, #0]
 8006a3e:	9e08      	ldr	r6, [sp, #32]
 8006a40:	47b0      	blx	r6
 8006a42:	1c43      	adds	r3, r0, #1
 8006a44:	d0e6      	beq.n	8006a14 <_printf_common+0xa4>
 8006a46:	3701      	adds	r7, #1
 8006a48:	e7d1      	b.n	80069ee <_printf_common+0x7e>
	...

08006a4c <_printf_i>:
 8006a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4e:	b089      	sub	sp, #36	; 0x24
 8006a50:	9204      	str	r2, [sp, #16]
 8006a52:	000a      	movs	r2, r1
 8006a54:	3243      	adds	r2, #67	; 0x43
 8006a56:	9305      	str	r3, [sp, #20]
 8006a58:	9003      	str	r0, [sp, #12]
 8006a5a:	9202      	str	r2, [sp, #8]
 8006a5c:	7e0a      	ldrb	r2, [r1, #24]
 8006a5e:	000c      	movs	r4, r1
 8006a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a62:	2a6e      	cmp	r2, #110	; 0x6e
 8006a64:	d100      	bne.n	8006a68 <_printf_i+0x1c>
 8006a66:	e086      	b.n	8006b76 <_printf_i+0x12a>
 8006a68:	d81f      	bhi.n	8006aaa <_printf_i+0x5e>
 8006a6a:	2a63      	cmp	r2, #99	; 0x63
 8006a6c:	d033      	beq.n	8006ad6 <_printf_i+0x8a>
 8006a6e:	d808      	bhi.n	8006a82 <_printf_i+0x36>
 8006a70:	2a00      	cmp	r2, #0
 8006a72:	d100      	bne.n	8006a76 <_printf_i+0x2a>
 8006a74:	e08c      	b.n	8006b90 <_printf_i+0x144>
 8006a76:	2a58      	cmp	r2, #88	; 0x58
 8006a78:	d04d      	beq.n	8006b16 <_printf_i+0xca>
 8006a7a:	0025      	movs	r5, r4
 8006a7c:	3542      	adds	r5, #66	; 0x42
 8006a7e:	702a      	strb	r2, [r5, #0]
 8006a80:	e030      	b.n	8006ae4 <_printf_i+0x98>
 8006a82:	2a64      	cmp	r2, #100	; 0x64
 8006a84:	d001      	beq.n	8006a8a <_printf_i+0x3e>
 8006a86:	2a69      	cmp	r2, #105	; 0x69
 8006a88:	d1f7      	bne.n	8006a7a <_printf_i+0x2e>
 8006a8a:	6819      	ldr	r1, [r3, #0]
 8006a8c:	6825      	ldr	r5, [r4, #0]
 8006a8e:	1d0a      	adds	r2, r1, #4
 8006a90:	0628      	lsls	r0, r5, #24
 8006a92:	d529      	bpl.n	8006ae8 <_printf_i+0x9c>
 8006a94:	6808      	ldr	r0, [r1, #0]
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	da03      	bge.n	8006aa4 <_printf_i+0x58>
 8006a9c:	232d      	movs	r3, #45	; 0x2d
 8006a9e:	9a02      	ldr	r2, [sp, #8]
 8006aa0:	4240      	negs	r0, r0
 8006aa2:	7013      	strb	r3, [r2, #0]
 8006aa4:	4e6b      	ldr	r6, [pc, #428]	; (8006c54 <_printf_i+0x208>)
 8006aa6:	270a      	movs	r7, #10
 8006aa8:	e04f      	b.n	8006b4a <_printf_i+0xfe>
 8006aaa:	2a73      	cmp	r2, #115	; 0x73
 8006aac:	d074      	beq.n	8006b98 <_printf_i+0x14c>
 8006aae:	d808      	bhi.n	8006ac2 <_printf_i+0x76>
 8006ab0:	2a6f      	cmp	r2, #111	; 0x6f
 8006ab2:	d01f      	beq.n	8006af4 <_printf_i+0xa8>
 8006ab4:	2a70      	cmp	r2, #112	; 0x70
 8006ab6:	d1e0      	bne.n	8006a7a <_printf_i+0x2e>
 8006ab8:	2220      	movs	r2, #32
 8006aba:	6809      	ldr	r1, [r1, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	6022      	str	r2, [r4, #0]
 8006ac0:	e003      	b.n	8006aca <_printf_i+0x7e>
 8006ac2:	2a75      	cmp	r2, #117	; 0x75
 8006ac4:	d016      	beq.n	8006af4 <_printf_i+0xa8>
 8006ac6:	2a78      	cmp	r2, #120	; 0x78
 8006ac8:	d1d7      	bne.n	8006a7a <_printf_i+0x2e>
 8006aca:	0022      	movs	r2, r4
 8006acc:	2178      	movs	r1, #120	; 0x78
 8006ace:	3245      	adds	r2, #69	; 0x45
 8006ad0:	7011      	strb	r1, [r2, #0]
 8006ad2:	4e61      	ldr	r6, [pc, #388]	; (8006c58 <_printf_i+0x20c>)
 8006ad4:	e022      	b.n	8006b1c <_printf_i+0xd0>
 8006ad6:	0025      	movs	r5, r4
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	3542      	adds	r5, #66	; 0x42
 8006adc:	1d11      	adds	r1, r2, #4
 8006ade:	6019      	str	r1, [r3, #0]
 8006ae0:	6813      	ldr	r3, [r2, #0]
 8006ae2:	702b      	strb	r3, [r5, #0]
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e065      	b.n	8006bb4 <_printf_i+0x168>
 8006ae8:	6808      	ldr	r0, [r1, #0]
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	0669      	lsls	r1, r5, #25
 8006aee:	d5d3      	bpl.n	8006a98 <_printf_i+0x4c>
 8006af0:	b200      	sxth	r0, r0
 8006af2:	e7d1      	b.n	8006a98 <_printf_i+0x4c>
 8006af4:	6819      	ldr	r1, [r3, #0]
 8006af6:	6825      	ldr	r5, [r4, #0]
 8006af8:	1d08      	adds	r0, r1, #4
 8006afa:	6018      	str	r0, [r3, #0]
 8006afc:	6808      	ldr	r0, [r1, #0]
 8006afe:	062e      	lsls	r6, r5, #24
 8006b00:	d505      	bpl.n	8006b0e <_printf_i+0xc2>
 8006b02:	4e54      	ldr	r6, [pc, #336]	; (8006c54 <_printf_i+0x208>)
 8006b04:	2708      	movs	r7, #8
 8006b06:	2a6f      	cmp	r2, #111	; 0x6f
 8006b08:	d01b      	beq.n	8006b42 <_printf_i+0xf6>
 8006b0a:	270a      	movs	r7, #10
 8006b0c:	e019      	b.n	8006b42 <_printf_i+0xf6>
 8006b0e:	066d      	lsls	r5, r5, #25
 8006b10:	d5f7      	bpl.n	8006b02 <_printf_i+0xb6>
 8006b12:	b280      	uxth	r0, r0
 8006b14:	e7f5      	b.n	8006b02 <_printf_i+0xb6>
 8006b16:	3145      	adds	r1, #69	; 0x45
 8006b18:	4e4e      	ldr	r6, [pc, #312]	; (8006c54 <_printf_i+0x208>)
 8006b1a:	700a      	strb	r2, [r1, #0]
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	1d01      	adds	r1, r0, #4
 8006b22:	6800      	ldr	r0, [r0, #0]
 8006b24:	6019      	str	r1, [r3, #0]
 8006b26:	0615      	lsls	r5, r2, #24
 8006b28:	d521      	bpl.n	8006b6e <_printf_i+0x122>
 8006b2a:	07d3      	lsls	r3, r2, #31
 8006b2c:	d502      	bpl.n	8006b34 <_printf_i+0xe8>
 8006b2e:	2320      	movs	r3, #32
 8006b30:	431a      	orrs	r2, r3
 8006b32:	6022      	str	r2, [r4, #0]
 8006b34:	2710      	movs	r7, #16
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d103      	bne.n	8006b42 <_printf_i+0xf6>
 8006b3a:	2320      	movs	r3, #32
 8006b3c:	6822      	ldr	r2, [r4, #0]
 8006b3e:	439a      	bics	r2, r3
 8006b40:	6022      	str	r2, [r4, #0]
 8006b42:	0023      	movs	r3, r4
 8006b44:	2200      	movs	r2, #0
 8006b46:	3343      	adds	r3, #67	; 0x43
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	6863      	ldr	r3, [r4, #4]
 8006b4c:	60a3      	str	r3, [r4, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	db58      	blt.n	8006c04 <_printf_i+0x1b8>
 8006b52:	2204      	movs	r2, #4
 8006b54:	6821      	ldr	r1, [r4, #0]
 8006b56:	4391      	bics	r1, r2
 8006b58:	6021      	str	r1, [r4, #0]
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d154      	bne.n	8006c08 <_printf_i+0x1bc>
 8006b5e:	9d02      	ldr	r5, [sp, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d05a      	beq.n	8006c1a <_printf_i+0x1ce>
 8006b64:	0025      	movs	r5, r4
 8006b66:	7833      	ldrb	r3, [r6, #0]
 8006b68:	3542      	adds	r5, #66	; 0x42
 8006b6a:	702b      	strb	r3, [r5, #0]
 8006b6c:	e055      	b.n	8006c1a <_printf_i+0x1ce>
 8006b6e:	0655      	lsls	r5, r2, #25
 8006b70:	d5db      	bpl.n	8006b2a <_printf_i+0xde>
 8006b72:	b280      	uxth	r0, r0
 8006b74:	e7d9      	b.n	8006b2a <_printf_i+0xde>
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	680d      	ldr	r5, [r1, #0]
 8006b7a:	1d10      	adds	r0, r2, #4
 8006b7c:	6949      	ldr	r1, [r1, #20]
 8006b7e:	6018      	str	r0, [r3, #0]
 8006b80:	6813      	ldr	r3, [r2, #0]
 8006b82:	062e      	lsls	r6, r5, #24
 8006b84:	d501      	bpl.n	8006b8a <_printf_i+0x13e>
 8006b86:	6019      	str	r1, [r3, #0]
 8006b88:	e002      	b.n	8006b90 <_printf_i+0x144>
 8006b8a:	066d      	lsls	r5, r5, #25
 8006b8c:	d5fb      	bpl.n	8006b86 <_printf_i+0x13a>
 8006b8e:	8019      	strh	r1, [r3, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	9d02      	ldr	r5, [sp, #8]
 8006b94:	6123      	str	r3, [r4, #16]
 8006b96:	e04f      	b.n	8006c38 <_printf_i+0x1ec>
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	1d11      	adds	r1, r2, #4
 8006b9c:	6019      	str	r1, [r3, #0]
 8006b9e:	6815      	ldr	r5, [r2, #0]
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	0028      	movs	r0, r5
 8006ba6:	f001 fa31 	bl	800800c <memchr>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d001      	beq.n	8006bb2 <_printf_i+0x166>
 8006bae:	1b40      	subs	r0, r0, r5
 8006bb0:	6060      	str	r0, [r4, #4]
 8006bb2:	6863      	ldr	r3, [r4, #4]
 8006bb4:	6123      	str	r3, [r4, #16]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9a02      	ldr	r2, [sp, #8]
 8006bba:	7013      	strb	r3, [r2, #0]
 8006bbc:	e03c      	b.n	8006c38 <_printf_i+0x1ec>
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	002a      	movs	r2, r5
 8006bc2:	9904      	ldr	r1, [sp, #16]
 8006bc4:	9803      	ldr	r0, [sp, #12]
 8006bc6:	9d05      	ldr	r5, [sp, #20]
 8006bc8:	47a8      	blx	r5
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	d03e      	beq.n	8006c4c <_printf_i+0x200>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	079b      	lsls	r3, r3, #30
 8006bd2:	d415      	bmi.n	8006c00 <_printf_i+0x1b4>
 8006bd4:	9b07      	ldr	r3, [sp, #28]
 8006bd6:	68e0      	ldr	r0, [r4, #12]
 8006bd8:	4298      	cmp	r0, r3
 8006bda:	da39      	bge.n	8006c50 <_printf_i+0x204>
 8006bdc:	0018      	movs	r0, r3
 8006bde:	e037      	b.n	8006c50 <_printf_i+0x204>
 8006be0:	0022      	movs	r2, r4
 8006be2:	2301      	movs	r3, #1
 8006be4:	3219      	adds	r2, #25
 8006be6:	9904      	ldr	r1, [sp, #16]
 8006be8:	9803      	ldr	r0, [sp, #12]
 8006bea:	9e05      	ldr	r6, [sp, #20]
 8006bec:	47b0      	blx	r6
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	d02c      	beq.n	8006c4c <_printf_i+0x200>
 8006bf2:	3501      	adds	r5, #1
 8006bf4:	68e3      	ldr	r3, [r4, #12]
 8006bf6:	9a07      	ldr	r2, [sp, #28]
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	42ab      	cmp	r3, r5
 8006bfc:	dcf0      	bgt.n	8006be0 <_printf_i+0x194>
 8006bfe:	e7e9      	b.n	8006bd4 <_printf_i+0x188>
 8006c00:	2500      	movs	r5, #0
 8006c02:	e7f7      	b.n	8006bf4 <_printf_i+0x1a8>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d0ad      	beq.n	8006b64 <_printf_i+0x118>
 8006c08:	9d02      	ldr	r5, [sp, #8]
 8006c0a:	0039      	movs	r1, r7
 8006c0c:	f7f9 fb14 	bl	8000238 <__aeabi_uidivmod>
 8006c10:	5c73      	ldrb	r3, [r6, r1]
 8006c12:	3d01      	subs	r5, #1
 8006c14:	702b      	strb	r3, [r5, #0]
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d1f7      	bne.n	8006c0a <_printf_i+0x1be>
 8006c1a:	2f08      	cmp	r7, #8
 8006c1c:	d109      	bne.n	8006c32 <_printf_i+0x1e6>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	07db      	lsls	r3, r3, #31
 8006c22:	d506      	bpl.n	8006c32 <_printf_i+0x1e6>
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	6922      	ldr	r2, [r4, #16]
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	dc02      	bgt.n	8006c32 <_printf_i+0x1e6>
 8006c2c:	2330      	movs	r3, #48	; 0x30
 8006c2e:	3d01      	subs	r5, #1
 8006c30:	702b      	strb	r3, [r5, #0]
 8006c32:	9b02      	ldr	r3, [sp, #8]
 8006c34:	1b5b      	subs	r3, r3, r5
 8006c36:	6123      	str	r3, [r4, #16]
 8006c38:	9b05      	ldr	r3, [sp, #20]
 8006c3a:	aa07      	add	r2, sp, #28
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	0021      	movs	r1, r4
 8006c40:	9b04      	ldr	r3, [sp, #16]
 8006c42:	9803      	ldr	r0, [sp, #12]
 8006c44:	f7ff fe94 	bl	8006970 <_printf_common>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d1b8      	bne.n	8006bbe <_printf_i+0x172>
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	4240      	negs	r0, r0
 8006c50:	b009      	add	sp, #36	; 0x24
 8006c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c54:	080092ce 	.word	0x080092ce
 8006c58:	080092df 	.word	0x080092df

08006c5c <iprintf>:
 8006c5c:	b40f      	push	{r0, r1, r2, r3}
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <iprintf+0x30>)
 8006c60:	b513      	push	{r0, r1, r4, lr}
 8006c62:	681c      	ldr	r4, [r3, #0]
 8006c64:	2c00      	cmp	r4, #0
 8006c66:	d005      	beq.n	8006c74 <iprintf+0x18>
 8006c68:	69a3      	ldr	r3, [r4, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <iprintf+0x18>
 8006c6e:	0020      	movs	r0, r4
 8006c70:	f001 f8b6 	bl	8007de0 <__sinit>
 8006c74:	ab05      	add	r3, sp, #20
 8006c76:	9a04      	ldr	r2, [sp, #16]
 8006c78:	68a1      	ldr	r1, [r4, #8]
 8006c7a:	0020      	movs	r0, r4
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	f001 fd9d 	bl	80087bc <_vfiprintf_r>
 8006c82:	bc16      	pop	{r1, r2, r4}
 8006c84:	bc08      	pop	{r3}
 8006c86:	b004      	add	sp, #16
 8006c88:	4718      	bx	r3
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	20000004 	.word	0x20000004

08006c90 <putchar>:
 8006c90:	4b08      	ldr	r3, [pc, #32]	; (8006cb4 <putchar+0x24>)
 8006c92:	b570      	push	{r4, r5, r6, lr}
 8006c94:	681c      	ldr	r4, [r3, #0]
 8006c96:	0005      	movs	r5, r0
 8006c98:	2c00      	cmp	r4, #0
 8006c9a:	d005      	beq.n	8006ca8 <putchar+0x18>
 8006c9c:	69a3      	ldr	r3, [r4, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d102      	bne.n	8006ca8 <putchar+0x18>
 8006ca2:	0020      	movs	r0, r4
 8006ca4:	f001 f89c 	bl	8007de0 <__sinit>
 8006ca8:	0029      	movs	r1, r5
 8006caa:	68a2      	ldr	r2, [r4, #8]
 8006cac:	0020      	movs	r0, r4
 8006cae:	f001 fe9b 	bl	80089e8 <_putc_r>
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}
 8006cb4:	20000004 	.word	0x20000004

08006cb8 <_puts_r>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	0005      	movs	r5, r0
 8006cbc:	000e      	movs	r6, r1
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d004      	beq.n	8006ccc <_puts_r+0x14>
 8006cc2:	6983      	ldr	r3, [r0, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <_puts_r+0x14>
 8006cc8:	f001 f88a 	bl	8007de0 <__sinit>
 8006ccc:	69ab      	ldr	r3, [r5, #24]
 8006cce:	68ac      	ldr	r4, [r5, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d102      	bne.n	8006cda <_puts_r+0x22>
 8006cd4:	0028      	movs	r0, r5
 8006cd6:	f001 f883 	bl	8007de0 <__sinit>
 8006cda:	4b24      	ldr	r3, [pc, #144]	; (8006d6c <_puts_r+0xb4>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	d10f      	bne.n	8006d00 <_puts_r+0x48>
 8006ce0:	686c      	ldr	r4, [r5, #4]
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	071b      	lsls	r3, r3, #28
 8006ce6:	d502      	bpl.n	8006cee <_puts_r+0x36>
 8006ce8:	6923      	ldr	r3, [r4, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d11f      	bne.n	8006d2e <_puts_r+0x76>
 8006cee:	0021      	movs	r1, r4
 8006cf0:	0028      	movs	r0, r5
 8006cf2:	f000 f8a1 	bl	8006e38 <__swsetup_r>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d019      	beq.n	8006d2e <_puts_r+0x76>
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	4240      	negs	r0, r0
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}
 8006d00:	4b1b      	ldr	r3, [pc, #108]	; (8006d70 <_puts_r+0xb8>)
 8006d02:	429c      	cmp	r4, r3
 8006d04:	d101      	bne.n	8006d0a <_puts_r+0x52>
 8006d06:	68ac      	ldr	r4, [r5, #8]
 8006d08:	e7eb      	b.n	8006ce2 <_puts_r+0x2a>
 8006d0a:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <_puts_r+0xbc>)
 8006d0c:	429c      	cmp	r4, r3
 8006d0e:	d1e8      	bne.n	8006ce2 <_puts_r+0x2a>
 8006d10:	68ec      	ldr	r4, [r5, #12]
 8006d12:	e7e6      	b.n	8006ce2 <_puts_r+0x2a>
 8006d14:	3601      	adds	r6, #1
 8006d16:	60a3      	str	r3, [r4, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da04      	bge.n	8006d26 <_puts_r+0x6e>
 8006d1c:	69a2      	ldr	r2, [r4, #24]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	dc16      	bgt.n	8006d50 <_puts_r+0x98>
 8006d22:	290a      	cmp	r1, #10
 8006d24:	d014      	beq.n	8006d50 <_puts_r+0x98>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	6022      	str	r2, [r4, #0]
 8006d2c:	7019      	strb	r1, [r3, #0]
 8006d2e:	68a3      	ldr	r3, [r4, #8]
 8006d30:	7831      	ldrb	r1, [r6, #0]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	2900      	cmp	r1, #0
 8006d36:	d1ed      	bne.n	8006d14 <_puts_r+0x5c>
 8006d38:	60a3      	str	r3, [r4, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da0f      	bge.n	8006d5e <_puts_r+0xa6>
 8006d3e:	0022      	movs	r2, r4
 8006d40:	310a      	adds	r1, #10
 8006d42:	0028      	movs	r0, r5
 8006d44:	f000 f822 	bl	8006d8c <__swbuf_r>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d0d6      	beq.n	8006cfa <_puts_r+0x42>
 8006d4c:	200a      	movs	r0, #10
 8006d4e:	e7d6      	b.n	8006cfe <_puts_r+0x46>
 8006d50:	0022      	movs	r2, r4
 8006d52:	0028      	movs	r0, r5
 8006d54:	f000 f81a 	bl	8006d8c <__swbuf_r>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d1e8      	bne.n	8006d2e <_puts_r+0x76>
 8006d5c:	e7cd      	b.n	8006cfa <_puts_r+0x42>
 8006d5e:	200a      	movs	r0, #10
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	6022      	str	r2, [r4, #0]
 8006d66:	7018      	strb	r0, [r3, #0]
 8006d68:	e7c9      	b.n	8006cfe <_puts_r+0x46>
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	08009320 	.word	0x08009320
 8006d70:	08009340 	.word	0x08009340
 8006d74:	08009300 	.word	0x08009300

08006d78 <puts>:
 8006d78:	b510      	push	{r4, lr}
 8006d7a:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <puts+0x10>)
 8006d7c:	0001      	movs	r1, r0
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	f7ff ff9a 	bl	8006cb8 <_puts_r>
 8006d84:	bd10      	pop	{r4, pc}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	20000004 	.word	0x20000004

08006d8c <__swbuf_r>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	0005      	movs	r5, r0
 8006d90:	000e      	movs	r6, r1
 8006d92:	0014      	movs	r4, r2
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d004      	beq.n	8006da2 <__swbuf_r+0x16>
 8006d98:	6983      	ldr	r3, [r0, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <__swbuf_r+0x16>
 8006d9e:	f001 f81f 	bl	8007de0 <__sinit>
 8006da2:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <__swbuf_r+0xa0>)
 8006da4:	429c      	cmp	r4, r3
 8006da6:	d12d      	bne.n	8006e04 <__swbuf_r+0x78>
 8006da8:	686c      	ldr	r4, [r5, #4]
 8006daa:	69a3      	ldr	r3, [r4, #24]
 8006dac:	60a3      	str	r3, [r4, #8]
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	071b      	lsls	r3, r3, #28
 8006db2:	d531      	bpl.n	8006e18 <__swbuf_r+0x8c>
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d02e      	beq.n	8006e18 <__swbuf_r+0x8c>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	6922      	ldr	r2, [r4, #16]
 8006dbe:	b2f7      	uxtb	r7, r6
 8006dc0:	1a98      	subs	r0, r3, r2
 8006dc2:	6963      	ldr	r3, [r4, #20]
 8006dc4:	b2f6      	uxtb	r6, r6
 8006dc6:	4283      	cmp	r3, r0
 8006dc8:	dc05      	bgt.n	8006dd6 <__swbuf_r+0x4a>
 8006dca:	0021      	movs	r1, r4
 8006dcc:	0028      	movs	r0, r5
 8006dce:	f000 ff99 	bl	8007d04 <_fflush_r>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d126      	bne.n	8006e24 <__swbuf_r+0x98>
 8006dd6:	68a3      	ldr	r3, [r4, #8]
 8006dd8:	3001      	adds	r0, #1
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	60a3      	str	r3, [r4, #8]
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	6022      	str	r2, [r4, #0]
 8006de4:	701f      	strb	r7, [r3, #0]
 8006de6:	6963      	ldr	r3, [r4, #20]
 8006de8:	4283      	cmp	r3, r0
 8006dea:	d004      	beq.n	8006df6 <__swbuf_r+0x6a>
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	07db      	lsls	r3, r3, #31
 8006df0:	d51a      	bpl.n	8006e28 <__swbuf_r+0x9c>
 8006df2:	2e0a      	cmp	r6, #10
 8006df4:	d118      	bne.n	8006e28 <__swbuf_r+0x9c>
 8006df6:	0021      	movs	r1, r4
 8006df8:	0028      	movs	r0, r5
 8006dfa:	f000 ff83 	bl	8007d04 <_fflush_r>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d012      	beq.n	8006e28 <__swbuf_r+0x9c>
 8006e02:	e00f      	b.n	8006e24 <__swbuf_r+0x98>
 8006e04:	4b0a      	ldr	r3, [pc, #40]	; (8006e30 <__swbuf_r+0xa4>)
 8006e06:	429c      	cmp	r4, r3
 8006e08:	d101      	bne.n	8006e0e <__swbuf_r+0x82>
 8006e0a:	68ac      	ldr	r4, [r5, #8]
 8006e0c:	e7cd      	b.n	8006daa <__swbuf_r+0x1e>
 8006e0e:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <__swbuf_r+0xa8>)
 8006e10:	429c      	cmp	r4, r3
 8006e12:	d1ca      	bne.n	8006daa <__swbuf_r+0x1e>
 8006e14:	68ec      	ldr	r4, [r5, #12]
 8006e16:	e7c8      	b.n	8006daa <__swbuf_r+0x1e>
 8006e18:	0021      	movs	r1, r4
 8006e1a:	0028      	movs	r0, r5
 8006e1c:	f000 f80c 	bl	8006e38 <__swsetup_r>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d0ca      	beq.n	8006dba <__swbuf_r+0x2e>
 8006e24:	2601      	movs	r6, #1
 8006e26:	4276      	negs	r6, r6
 8006e28:	0030      	movs	r0, r6
 8006e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e2c:	08009320 	.word	0x08009320
 8006e30:	08009340 	.word	0x08009340
 8006e34:	08009300 	.word	0x08009300

08006e38 <__swsetup_r>:
 8006e38:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <__swsetup_r+0xdc>)
 8006e3a:	b570      	push	{r4, r5, r6, lr}
 8006e3c:	681d      	ldr	r5, [r3, #0]
 8006e3e:	0006      	movs	r6, r0
 8006e40:	000c      	movs	r4, r1
 8006e42:	2d00      	cmp	r5, #0
 8006e44:	d005      	beq.n	8006e52 <__swsetup_r+0x1a>
 8006e46:	69ab      	ldr	r3, [r5, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d102      	bne.n	8006e52 <__swsetup_r+0x1a>
 8006e4c:	0028      	movs	r0, r5
 8006e4e:	f000 ffc7 	bl	8007de0 <__sinit>
 8006e52:	4b31      	ldr	r3, [pc, #196]	; (8006f18 <__swsetup_r+0xe0>)
 8006e54:	429c      	cmp	r4, r3
 8006e56:	d10f      	bne.n	8006e78 <__swsetup_r+0x40>
 8006e58:	686c      	ldr	r4, [r5, #4]
 8006e5a:	230c      	movs	r3, #12
 8006e5c:	5ee2      	ldrsh	r2, [r4, r3]
 8006e5e:	b293      	uxth	r3, r2
 8006e60:	0719      	lsls	r1, r3, #28
 8006e62:	d42d      	bmi.n	8006ec0 <__swsetup_r+0x88>
 8006e64:	06d9      	lsls	r1, r3, #27
 8006e66:	d411      	bmi.n	8006e8c <__swsetup_r+0x54>
 8006e68:	2309      	movs	r3, #9
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	6033      	str	r3, [r6, #0]
 8006e6e:	3337      	adds	r3, #55	; 0x37
 8006e70:	4313      	orrs	r3, r2
 8006e72:	81a3      	strh	r3, [r4, #12]
 8006e74:	4240      	negs	r0, r0
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
 8006e78:	4b28      	ldr	r3, [pc, #160]	; (8006f1c <__swsetup_r+0xe4>)
 8006e7a:	429c      	cmp	r4, r3
 8006e7c:	d101      	bne.n	8006e82 <__swsetup_r+0x4a>
 8006e7e:	68ac      	ldr	r4, [r5, #8]
 8006e80:	e7eb      	b.n	8006e5a <__swsetup_r+0x22>
 8006e82:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <__swsetup_r+0xe8>)
 8006e84:	429c      	cmp	r4, r3
 8006e86:	d1e8      	bne.n	8006e5a <__swsetup_r+0x22>
 8006e88:	68ec      	ldr	r4, [r5, #12]
 8006e8a:	e7e6      	b.n	8006e5a <__swsetup_r+0x22>
 8006e8c:	075b      	lsls	r3, r3, #29
 8006e8e:	d513      	bpl.n	8006eb8 <__swsetup_r+0x80>
 8006e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e92:	2900      	cmp	r1, #0
 8006e94:	d008      	beq.n	8006ea8 <__swsetup_r+0x70>
 8006e96:	0023      	movs	r3, r4
 8006e98:	3344      	adds	r3, #68	; 0x44
 8006e9a:	4299      	cmp	r1, r3
 8006e9c:	d002      	beq.n	8006ea4 <__swsetup_r+0x6c>
 8006e9e:	0030      	movs	r0, r6
 8006ea0:	f001 fbbc 	bl	800861c <_free_r>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	6363      	str	r3, [r4, #52]	; 0x34
 8006ea8:	2224      	movs	r2, #36	; 0x24
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	4393      	bics	r3, r2
 8006eae:	81a3      	strh	r3, [r4, #12]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	6063      	str	r3, [r4, #4]
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	2308      	movs	r3, #8
 8006eba:	89a2      	ldrh	r2, [r4, #12]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	6923      	ldr	r3, [r4, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10b      	bne.n	8006ede <__swsetup_r+0xa6>
 8006ec6:	21a0      	movs	r1, #160	; 0xa0
 8006ec8:	2280      	movs	r2, #128	; 0x80
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	0089      	lsls	r1, r1, #2
 8006ece:	0092      	lsls	r2, r2, #2
 8006ed0:	400b      	ands	r3, r1
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <__swsetup_r+0xa6>
 8006ed6:	0021      	movs	r1, r4
 8006ed8:	0030      	movs	r0, r6
 8006eda:	f001 f849 	bl	8007f70 <__smakebuf_r>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	89a2      	ldrh	r2, [r4, #12]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d011      	beq.n	8006f0a <__swsetup_r+0xd2>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60a3      	str	r3, [r4, #8]
 8006eea:	6963      	ldr	r3, [r4, #20]
 8006eec:	425b      	negs	r3, r3
 8006eee:	61a3      	str	r3, [r4, #24]
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	6923      	ldr	r3, [r4, #16]
 8006ef4:	4283      	cmp	r3, r0
 8006ef6:	d1be      	bne.n	8006e76 <__swsetup_r+0x3e>
 8006ef8:	230c      	movs	r3, #12
 8006efa:	5ee2      	ldrsh	r2, [r4, r3]
 8006efc:	0613      	lsls	r3, r2, #24
 8006efe:	d5ba      	bpl.n	8006e76 <__swsetup_r+0x3e>
 8006f00:	2340      	movs	r3, #64	; 0x40
 8006f02:	4313      	orrs	r3, r2
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	3801      	subs	r0, #1
 8006f08:	e7b5      	b.n	8006e76 <__swsetup_r+0x3e>
 8006f0a:	0792      	lsls	r2, r2, #30
 8006f0c:	d400      	bmi.n	8006f10 <__swsetup_r+0xd8>
 8006f0e:	6963      	ldr	r3, [r4, #20]
 8006f10:	60a3      	str	r3, [r4, #8]
 8006f12:	e7ed      	b.n	8006ef0 <__swsetup_r+0xb8>
 8006f14:	20000004 	.word	0x20000004
 8006f18:	08009320 	.word	0x08009320
 8006f1c:	08009340 	.word	0x08009340
 8006f20:	08009300 	.word	0x08009300

08006f24 <quorem>:
 8006f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f26:	6903      	ldr	r3, [r0, #16]
 8006f28:	690c      	ldr	r4, [r1, #16]
 8006f2a:	b089      	sub	sp, #36	; 0x24
 8006f2c:	0007      	movs	r7, r0
 8006f2e:	9105      	str	r1, [sp, #20]
 8006f30:	2600      	movs	r6, #0
 8006f32:	42a3      	cmp	r3, r4
 8006f34:	db65      	blt.n	8007002 <quorem+0xde>
 8006f36:	000b      	movs	r3, r1
 8006f38:	3c01      	subs	r4, #1
 8006f3a:	3314      	adds	r3, #20
 8006f3c:	00a5      	lsls	r5, r4, #2
 8006f3e:	9303      	str	r3, [sp, #12]
 8006f40:	195b      	adds	r3, r3, r5
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	0003      	movs	r3, r0
 8006f46:	3314      	adds	r3, #20
 8006f48:	9302      	str	r3, [sp, #8]
 8006f4a:	195d      	adds	r5, r3, r5
 8006f4c:	9b04      	ldr	r3, [sp, #16]
 8006f4e:	6828      	ldr	r0, [r5, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	1c59      	adds	r1, r3, #1
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	f7f9 f8e9 	bl	800012c <__udivsi3>
 8006f5a:	9001      	str	r0, [sp, #4]
 8006f5c:	42b0      	cmp	r0, r6
 8006f5e:	d029      	beq.n	8006fb4 <quorem+0x90>
 8006f60:	9b03      	ldr	r3, [sp, #12]
 8006f62:	9802      	ldr	r0, [sp, #8]
 8006f64:	469c      	mov	ip, r3
 8006f66:	9606      	str	r6, [sp, #24]
 8006f68:	4662      	mov	r2, ip
 8006f6a:	ca08      	ldmia	r2!, {r3}
 8006f6c:	4694      	mov	ip, r2
 8006f6e:	9a01      	ldr	r2, [sp, #4]
 8006f70:	b299      	uxth	r1, r3
 8006f72:	4351      	muls	r1, r2
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	4353      	muls	r3, r2
 8006f78:	1989      	adds	r1, r1, r6
 8006f7a:	0c0a      	lsrs	r2, r1, #16
 8006f7c:	189b      	adds	r3, r3, r2
 8006f7e:	9307      	str	r3, [sp, #28]
 8006f80:	0c1e      	lsrs	r6, r3, #16
 8006f82:	6803      	ldr	r3, [r0, #0]
 8006f84:	b289      	uxth	r1, r1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	9b06      	ldr	r3, [sp, #24]
 8006f8a:	18d2      	adds	r2, r2, r3
 8006f8c:	6803      	ldr	r3, [r0, #0]
 8006f8e:	1a52      	subs	r2, r2, r1
 8006f90:	0c19      	lsrs	r1, r3, #16
 8006f92:	466b      	mov	r3, sp
 8006f94:	8b9b      	ldrh	r3, [r3, #28]
 8006f96:	1acb      	subs	r3, r1, r3
 8006f98:	1411      	asrs	r1, r2, #16
 8006f9a:	185b      	adds	r3, r3, r1
 8006f9c:	1419      	asrs	r1, r3, #16
 8006f9e:	b292      	uxth	r2, r2
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	9b04      	ldr	r3, [sp, #16]
 8006fa6:	9106      	str	r1, [sp, #24]
 8006fa8:	c004      	stmia	r0!, {r2}
 8006faa:	4563      	cmp	r3, ip
 8006fac:	d2dc      	bcs.n	8006f68 <quorem+0x44>
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d02d      	beq.n	8007010 <quorem+0xec>
 8006fb4:	9905      	ldr	r1, [sp, #20]
 8006fb6:	0038      	movs	r0, r7
 8006fb8:	f001 fa50 	bl	800845c <__mcmp>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	db1f      	blt.n	8007000 <quorem+0xdc>
 8006fc0:	2500      	movs	r5, #0
 8006fc2:	9b01      	ldr	r3, [sp, #4]
 8006fc4:	9802      	ldr	r0, [sp, #8]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	9903      	ldr	r1, [sp, #12]
 8006fca:	9301      	str	r3, [sp, #4]
 8006fcc:	6802      	ldr	r2, [r0, #0]
 8006fce:	c908      	ldmia	r1!, {r3}
 8006fd0:	b292      	uxth	r2, r2
 8006fd2:	1955      	adds	r5, r2, r5
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	1aaa      	subs	r2, r5, r2
 8006fd8:	6805      	ldr	r5, [r0, #0]
 8006fda:	0c1b      	lsrs	r3, r3, #16
 8006fdc:	0c2d      	lsrs	r5, r5, #16
 8006fde:	1aeb      	subs	r3, r5, r3
 8006fe0:	1415      	asrs	r5, r2, #16
 8006fe2:	195b      	adds	r3, r3, r5
 8006fe4:	141d      	asrs	r5, r3, #16
 8006fe6:	b292      	uxth	r2, r2
 8006fe8:	041b      	lsls	r3, r3, #16
 8006fea:	4313      	orrs	r3, r2
 8006fec:	c008      	stmia	r0!, {r3}
 8006fee:	9b04      	ldr	r3, [sp, #16]
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	d2eb      	bcs.n	8006fcc <quorem+0xa8>
 8006ff4:	9a02      	ldr	r2, [sp, #8]
 8006ff6:	00a3      	lsls	r3, r4, #2
 8006ff8:	18d3      	adds	r3, r2, r3
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	2a00      	cmp	r2, #0
 8006ffe:	d011      	beq.n	8007024 <quorem+0x100>
 8007000:	9e01      	ldr	r6, [sp, #4]
 8007002:	0030      	movs	r0, r6
 8007004:	b009      	add	sp, #36	; 0x24
 8007006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <quorem+0xf4>
 800700e:	3c01      	subs	r4, #1
 8007010:	9b02      	ldr	r3, [sp, #8]
 8007012:	3d04      	subs	r5, #4
 8007014:	42ab      	cmp	r3, r5
 8007016:	d3f7      	bcc.n	8007008 <quorem+0xe4>
 8007018:	613c      	str	r4, [r7, #16]
 800701a:	e7cb      	b.n	8006fb4 <quorem+0x90>
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	2a00      	cmp	r2, #0
 8007020:	d104      	bne.n	800702c <quorem+0x108>
 8007022:	3c01      	subs	r4, #1
 8007024:	9a02      	ldr	r2, [sp, #8]
 8007026:	3b04      	subs	r3, #4
 8007028:	429a      	cmp	r2, r3
 800702a:	d3f7      	bcc.n	800701c <quorem+0xf8>
 800702c:	613c      	str	r4, [r7, #16]
 800702e:	e7e7      	b.n	8007000 <quorem+0xdc>

08007030 <_dtoa_r>:
 8007030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007032:	0016      	movs	r6, r2
 8007034:	001f      	movs	r7, r3
 8007036:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007038:	b09b      	sub	sp, #108	; 0x6c
 800703a:	9002      	str	r0, [sp, #8]
 800703c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800703e:	9606      	str	r6, [sp, #24]
 8007040:	9707      	str	r7, [sp, #28]
 8007042:	2c00      	cmp	r4, #0
 8007044:	d108      	bne.n	8007058 <_dtoa_r+0x28>
 8007046:	2010      	movs	r0, #16
 8007048:	f000 ffd6 	bl	8007ff8 <malloc>
 800704c:	9b02      	ldr	r3, [sp, #8]
 800704e:	6258      	str	r0, [r3, #36]	; 0x24
 8007050:	6044      	str	r4, [r0, #4]
 8007052:	6084      	str	r4, [r0, #8]
 8007054:	6004      	str	r4, [r0, #0]
 8007056:	60c4      	str	r4, [r0, #12]
 8007058:	9b02      	ldr	r3, [sp, #8]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	6819      	ldr	r1, [r3, #0]
 800705e:	2900      	cmp	r1, #0
 8007060:	d00b      	beq.n	800707a <_dtoa_r+0x4a>
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	2301      	movs	r3, #1
 8007066:	4093      	lsls	r3, r2
 8007068:	604a      	str	r2, [r1, #4]
 800706a:	608b      	str	r3, [r1, #8]
 800706c:	9802      	ldr	r0, [sp, #8]
 800706e:	f001 f819 	bl	80080a4 <_Bfree>
 8007072:	2200      	movs	r2, #0
 8007074:	9b02      	ldr	r3, [sp, #8]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	2f00      	cmp	r7, #0
 800707c:	da20      	bge.n	80070c0 <_dtoa_r+0x90>
 800707e:	2301      	movs	r3, #1
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	007b      	lsls	r3, r7, #1
 8007084:	085b      	lsrs	r3, r3, #1
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	9c07      	ldr	r4, [sp, #28]
 800708a:	4bb2      	ldr	r3, [pc, #712]	; (8007354 <_dtoa_r+0x324>)
 800708c:	0022      	movs	r2, r4
 800708e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007090:	401a      	ands	r2, r3
 8007092:	429a      	cmp	r2, r3
 8007094:	d117      	bne.n	80070c6 <_dtoa_r+0x96>
 8007096:	4bb0      	ldr	r3, [pc, #704]	; (8007358 <_dtoa_r+0x328>)
 8007098:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	9b06      	ldr	r3, [sp, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d103      	bne.n	80070aa <_dtoa_r+0x7a>
 80070a2:	0324      	lsls	r4, r4, #12
 80070a4:	d101      	bne.n	80070aa <_dtoa_r+0x7a>
 80070a6:	f000 fd87 	bl	8007bb8 <_dtoa_r+0xb88>
 80070aa:	4bac      	ldr	r3, [pc, #688]	; (800735c <_dtoa_r+0x32c>)
 80070ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070ae:	9308      	str	r3, [sp, #32]
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	d002      	beq.n	80070ba <_dtoa_r+0x8a>
 80070b4:	4baa      	ldr	r3, [pc, #680]	; (8007360 <_dtoa_r+0x330>)
 80070b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	9808      	ldr	r0, [sp, #32]
 80070bc:	b01b      	add	sp, #108	; 0x6c
 80070be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c0:	2300      	movs	r3, #0
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	e7e0      	b.n	8007088 <_dtoa_r+0x58>
 80070c6:	9e06      	ldr	r6, [sp, #24]
 80070c8:	9f07      	ldr	r7, [sp, #28]
 80070ca:	2200      	movs	r2, #0
 80070cc:	2300      	movs	r3, #0
 80070ce:	0030      	movs	r0, r6
 80070d0:	0039      	movs	r1, r7
 80070d2:	f7f9 f9b1 	bl	8000438 <__aeabi_dcmpeq>
 80070d6:	1e05      	subs	r5, r0, #0
 80070d8:	d00b      	beq.n	80070f2 <_dtoa_r+0xc2>
 80070da:	2301      	movs	r3, #1
 80070dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	4ba0      	ldr	r3, [pc, #640]	; (8007364 <_dtoa_r+0x334>)
 80070e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070e4:	9308      	str	r3, [sp, #32]
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	d0e7      	beq.n	80070ba <_dtoa_r+0x8a>
 80070ea:	4a9f      	ldr	r2, [pc, #636]	; (8007368 <_dtoa_r+0x338>)
 80070ec:	9924      	ldr	r1, [sp, #144]	; 0x90
 80070ee:	600a      	str	r2, [r1, #0]
 80070f0:	e7e3      	b.n	80070ba <_dtoa_r+0x8a>
 80070f2:	ab18      	add	r3, sp, #96	; 0x60
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	ab19      	add	r3, sp, #100	; 0x64
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	0032      	movs	r2, r6
 80070fc:	003b      	movs	r3, r7
 80070fe:	9802      	ldr	r0, [sp, #8]
 8007100:	f001 fa2a 	bl	8008558 <__d2b>
 8007104:	0063      	lsls	r3, r4, #1
 8007106:	9003      	str	r0, [sp, #12]
 8007108:	0d5b      	lsrs	r3, r3, #21
 800710a:	d074      	beq.n	80071f6 <_dtoa_r+0x1c6>
 800710c:	033a      	lsls	r2, r7, #12
 800710e:	4c97      	ldr	r4, [pc, #604]	; (800736c <_dtoa_r+0x33c>)
 8007110:	0b12      	lsrs	r2, r2, #12
 8007112:	4314      	orrs	r4, r2
 8007114:	0021      	movs	r1, r4
 8007116:	4a96      	ldr	r2, [pc, #600]	; (8007370 <_dtoa_r+0x340>)
 8007118:	0030      	movs	r0, r6
 800711a:	9516      	str	r5, [sp, #88]	; 0x58
 800711c:	189e      	adds	r6, r3, r2
 800711e:	2200      	movs	r2, #0
 8007120:	4b94      	ldr	r3, [pc, #592]	; (8007374 <_dtoa_r+0x344>)
 8007122:	f7fb fab3 	bl	800268c <__aeabi_dsub>
 8007126:	4a94      	ldr	r2, [pc, #592]	; (8007378 <_dtoa_r+0x348>)
 8007128:	4b94      	ldr	r3, [pc, #592]	; (800737c <_dtoa_r+0x34c>)
 800712a:	f7fb f83d 	bl	80021a8 <__aeabi_dmul>
 800712e:	4a94      	ldr	r2, [pc, #592]	; (8007380 <_dtoa_r+0x350>)
 8007130:	4b94      	ldr	r3, [pc, #592]	; (8007384 <_dtoa_r+0x354>)
 8007132:	f7fa f913 	bl	800135c <__aeabi_dadd>
 8007136:	0004      	movs	r4, r0
 8007138:	0030      	movs	r0, r6
 800713a:	000d      	movs	r5, r1
 800713c:	f7fb fe40 	bl	8002dc0 <__aeabi_i2d>
 8007140:	4a91      	ldr	r2, [pc, #580]	; (8007388 <_dtoa_r+0x358>)
 8007142:	4b92      	ldr	r3, [pc, #584]	; (800738c <_dtoa_r+0x35c>)
 8007144:	f7fb f830 	bl	80021a8 <__aeabi_dmul>
 8007148:	0002      	movs	r2, r0
 800714a:	000b      	movs	r3, r1
 800714c:	0020      	movs	r0, r4
 800714e:	0029      	movs	r1, r5
 8007150:	f7fa f904 	bl	800135c <__aeabi_dadd>
 8007154:	0004      	movs	r4, r0
 8007156:	000d      	movs	r5, r1
 8007158:	f7fb fdfc 	bl	8002d54 <__aeabi_d2iz>
 800715c:	2200      	movs	r2, #0
 800715e:	0007      	movs	r7, r0
 8007160:	2300      	movs	r3, #0
 8007162:	0020      	movs	r0, r4
 8007164:	0029      	movs	r1, r5
 8007166:	f7f9 f96d 	bl	8000444 <__aeabi_dcmplt>
 800716a:	2800      	cmp	r0, #0
 800716c:	d009      	beq.n	8007182 <_dtoa_r+0x152>
 800716e:	0038      	movs	r0, r7
 8007170:	f7fb fe26 	bl	8002dc0 <__aeabi_i2d>
 8007174:	002b      	movs	r3, r5
 8007176:	0022      	movs	r2, r4
 8007178:	f7f9 f95e 	bl	8000438 <__aeabi_dcmpeq>
 800717c:	4243      	negs	r3, r0
 800717e:	4158      	adcs	r0, r3
 8007180:	1a3f      	subs	r7, r7, r0
 8007182:	2301      	movs	r3, #1
 8007184:	9314      	str	r3, [sp, #80]	; 0x50
 8007186:	2f16      	cmp	r7, #22
 8007188:	d80d      	bhi.n	80071a6 <_dtoa_r+0x176>
 800718a:	4981      	ldr	r1, [pc, #516]	; (8007390 <_dtoa_r+0x360>)
 800718c:	00fb      	lsls	r3, r7, #3
 800718e:	18c9      	adds	r1, r1, r3
 8007190:	6808      	ldr	r0, [r1, #0]
 8007192:	6849      	ldr	r1, [r1, #4]
 8007194:	9a06      	ldr	r2, [sp, #24]
 8007196:	9b07      	ldr	r3, [sp, #28]
 8007198:	f7f9 f968 	bl	800046c <__aeabi_dcmpgt>
 800719c:	2800      	cmp	r0, #0
 800719e:	d046      	beq.n	800722e <_dtoa_r+0x1fe>
 80071a0:	2300      	movs	r3, #0
 80071a2:	3f01      	subs	r7, #1
 80071a4:	9314      	str	r3, [sp, #80]	; 0x50
 80071a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80071a8:	1b9e      	subs	r6, r3, r6
 80071aa:	2300      	movs	r3, #0
 80071ac:	930a      	str	r3, [sp, #40]	; 0x28
 80071ae:	0033      	movs	r3, r6
 80071b0:	3b01      	subs	r3, #1
 80071b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071b4:	d504      	bpl.n	80071c0 <_dtoa_r+0x190>
 80071b6:	2301      	movs	r3, #1
 80071b8:	1b9b      	subs	r3, r3, r6
 80071ba:	930a      	str	r3, [sp, #40]	; 0x28
 80071bc:	2300      	movs	r3, #0
 80071be:	930b      	str	r3, [sp, #44]	; 0x2c
 80071c0:	2f00      	cmp	r7, #0
 80071c2:	db36      	blt.n	8007232 <_dtoa_r+0x202>
 80071c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071c6:	9711      	str	r7, [sp, #68]	; 0x44
 80071c8:	19db      	adds	r3, r3, r7
 80071ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80071cc:	2300      	movs	r3, #0
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071d2:	2401      	movs	r4, #1
 80071d4:	2b09      	cmp	r3, #9
 80071d6:	d900      	bls.n	80071da <_dtoa_r+0x1aa>
 80071d8:	e084      	b.n	80072e4 <_dtoa_r+0x2b4>
 80071da:	2b05      	cmp	r3, #5
 80071dc:	dd02      	ble.n	80071e4 <_dtoa_r+0x1b4>
 80071de:	2400      	movs	r4, #0
 80071e0:	3b04      	subs	r3, #4
 80071e2:	9320      	str	r3, [sp, #128]	; 0x80
 80071e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071e6:	1e98      	subs	r0, r3, #2
 80071e8:	2803      	cmp	r0, #3
 80071ea:	d900      	bls.n	80071ee <_dtoa_r+0x1be>
 80071ec:	e084      	b.n	80072f8 <_dtoa_r+0x2c8>
 80071ee:	f7f8 ff93 	bl	8000118 <__gnu_thumb1_case_uqi>
 80071f2:	7775      	.short	0x7775
 80071f4:	6a28      	.short	0x6a28
 80071f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80071f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071fa:	189e      	adds	r6, r3, r2
 80071fc:	4b65      	ldr	r3, [pc, #404]	; (8007394 <_dtoa_r+0x364>)
 80071fe:	18f2      	adds	r2, r6, r3
 8007200:	2a20      	cmp	r2, #32
 8007202:	dd0f      	ble.n	8007224 <_dtoa_r+0x1f4>
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	1a9b      	subs	r3, r3, r2
 8007208:	409c      	lsls	r4, r3
 800720a:	4b63      	ldr	r3, [pc, #396]	; (8007398 <_dtoa_r+0x368>)
 800720c:	9806      	ldr	r0, [sp, #24]
 800720e:	18f3      	adds	r3, r6, r3
 8007210:	40d8      	lsrs	r0, r3
 8007212:	4320      	orrs	r0, r4
 8007214:	f7fb fe0e 	bl	8002e34 <__aeabi_ui2d>
 8007218:	2301      	movs	r3, #1
 800721a:	4c60      	ldr	r4, [pc, #384]	; (800739c <_dtoa_r+0x36c>)
 800721c:	3e01      	subs	r6, #1
 800721e:	1909      	adds	r1, r1, r4
 8007220:	9316      	str	r3, [sp, #88]	; 0x58
 8007222:	e77c      	b.n	800711e <_dtoa_r+0xee>
 8007224:	2320      	movs	r3, #32
 8007226:	9806      	ldr	r0, [sp, #24]
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	4098      	lsls	r0, r3
 800722c:	e7f2      	b.n	8007214 <_dtoa_r+0x1e4>
 800722e:	9014      	str	r0, [sp, #80]	; 0x50
 8007230:	e7b9      	b.n	80071a6 <_dtoa_r+0x176>
 8007232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007234:	1bdb      	subs	r3, r3, r7
 8007236:	930a      	str	r3, [sp, #40]	; 0x28
 8007238:	427b      	negs	r3, r7
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	2300      	movs	r3, #0
 800723e:	9311      	str	r3, [sp, #68]	; 0x44
 8007240:	e7c6      	b.n	80071d0 <_dtoa_r+0x1a0>
 8007242:	2301      	movs	r3, #1
 8007244:	930d      	str	r3, [sp, #52]	; 0x34
 8007246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007248:	2b00      	cmp	r3, #0
 800724a:	dd59      	ble.n	8007300 <_dtoa_r+0x2d0>
 800724c:	930c      	str	r3, [sp, #48]	; 0x30
 800724e:	9309      	str	r3, [sp, #36]	; 0x24
 8007250:	9a02      	ldr	r2, [sp, #8]
 8007252:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007254:	2200      	movs	r2, #0
 8007256:	606a      	str	r2, [r5, #4]
 8007258:	3204      	adds	r2, #4
 800725a:	0010      	movs	r0, r2
 800725c:	3014      	adds	r0, #20
 800725e:	6869      	ldr	r1, [r5, #4]
 8007260:	4298      	cmp	r0, r3
 8007262:	d952      	bls.n	800730a <_dtoa_r+0x2da>
 8007264:	9802      	ldr	r0, [sp, #8]
 8007266:	f000 fee5 	bl	8008034 <_Balloc>
 800726a:	9b02      	ldr	r3, [sp, #8]
 800726c:	6028      	str	r0, [r5, #0]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	9308      	str	r3, [sp, #32]
 8007274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007276:	2b0e      	cmp	r3, #14
 8007278:	d900      	bls.n	800727c <_dtoa_r+0x24c>
 800727a:	e10a      	b.n	8007492 <_dtoa_r+0x462>
 800727c:	2c00      	cmp	r4, #0
 800727e:	d100      	bne.n	8007282 <_dtoa_r+0x252>
 8007280:	e107      	b.n	8007492 <_dtoa_r+0x462>
 8007282:	9b06      	ldr	r3, [sp, #24]
 8007284:	9c07      	ldr	r4, [sp, #28]
 8007286:	9312      	str	r3, [sp, #72]	; 0x48
 8007288:	9413      	str	r4, [sp, #76]	; 0x4c
 800728a:	2f00      	cmp	r7, #0
 800728c:	dc00      	bgt.n	8007290 <_dtoa_r+0x260>
 800728e:	e089      	b.n	80073a4 <_dtoa_r+0x374>
 8007290:	210f      	movs	r1, #15
 8007292:	003a      	movs	r2, r7
 8007294:	4b3e      	ldr	r3, [pc, #248]	; (8007390 <_dtoa_r+0x360>)
 8007296:	400a      	ands	r2, r1
 8007298:	00d2      	lsls	r2, r2, #3
 800729a:	189b      	adds	r3, r3, r2
 800729c:	681d      	ldr	r5, [r3, #0]
 800729e:	685e      	ldr	r6, [r3, #4]
 80072a0:	2302      	movs	r3, #2
 80072a2:	113c      	asrs	r4, r7, #4
 80072a4:	930e      	str	r3, [sp, #56]	; 0x38
 80072a6:	06e3      	lsls	r3, r4, #27
 80072a8:	d50b      	bpl.n	80072c2 <_dtoa_r+0x292>
 80072aa:	4b3d      	ldr	r3, [pc, #244]	; (80073a0 <_dtoa_r+0x370>)
 80072ac:	400c      	ands	r4, r1
 80072ae:	6a1a      	ldr	r2, [r3, #32]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80072b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80072b6:	f7fa fb6d 	bl	8001994 <__aeabi_ddiv>
 80072ba:	2303      	movs	r3, #3
 80072bc:	9006      	str	r0, [sp, #24]
 80072be:	9107      	str	r1, [sp, #28]
 80072c0:	930e      	str	r3, [sp, #56]	; 0x38
 80072c2:	2300      	movs	r3, #0
 80072c4:	e03a      	b.n	800733c <_dtoa_r+0x30c>
 80072c6:	2301      	movs	r3, #1
 80072c8:	930d      	str	r3, [sp, #52]	; 0x34
 80072ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	930c      	str	r3, [sp, #48]	; 0x30
 80072d0:	3301      	adds	r3, #1
 80072d2:	9309      	str	r3, [sp, #36]	; 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dcbb      	bgt.n	8007250 <_dtoa_r+0x220>
 80072d8:	2301      	movs	r3, #1
 80072da:	e7b9      	b.n	8007250 <_dtoa_r+0x220>
 80072dc:	2300      	movs	r3, #0
 80072de:	e7b1      	b.n	8007244 <_dtoa_r+0x214>
 80072e0:	2300      	movs	r3, #0
 80072e2:	e7f1      	b.n	80072c8 <_dtoa_r+0x298>
 80072e4:	2300      	movs	r3, #0
 80072e6:	940d      	str	r4, [sp, #52]	; 0x34
 80072e8:	9320      	str	r3, [sp, #128]	; 0x80
 80072ea:	3b01      	subs	r3, #1
 80072ec:	2200      	movs	r2, #0
 80072ee:	930c      	str	r3, [sp, #48]	; 0x30
 80072f0:	9309      	str	r3, [sp, #36]	; 0x24
 80072f2:	3313      	adds	r3, #19
 80072f4:	9221      	str	r2, [sp, #132]	; 0x84
 80072f6:	e7ab      	b.n	8007250 <_dtoa_r+0x220>
 80072f8:	2301      	movs	r3, #1
 80072fa:	930d      	str	r3, [sp, #52]	; 0x34
 80072fc:	3b02      	subs	r3, #2
 80072fe:	e7f5      	b.n	80072ec <_dtoa_r+0x2bc>
 8007300:	2301      	movs	r3, #1
 8007302:	930c      	str	r3, [sp, #48]	; 0x30
 8007304:	9309      	str	r3, [sp, #36]	; 0x24
 8007306:	001a      	movs	r2, r3
 8007308:	e7f4      	b.n	80072f4 <_dtoa_r+0x2c4>
 800730a:	3101      	adds	r1, #1
 800730c:	6069      	str	r1, [r5, #4]
 800730e:	0052      	lsls	r2, r2, #1
 8007310:	e7a3      	b.n	800725a <_dtoa_r+0x22a>
 8007312:	2301      	movs	r3, #1
 8007314:	421c      	tst	r4, r3
 8007316:	d00e      	beq.n	8007336 <_dtoa_r+0x306>
 8007318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800731a:	4a21      	ldr	r2, [pc, #132]	; (80073a0 <_dtoa_r+0x370>)
 800731c:	3301      	adds	r3, #1
 800731e:	930e      	str	r3, [sp, #56]	; 0x38
 8007320:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007322:	0028      	movs	r0, r5
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	189b      	adds	r3, r3, r2
 8007328:	0031      	movs	r1, r6
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f7fa ff3b 	bl	80021a8 <__aeabi_dmul>
 8007332:	0005      	movs	r5, r0
 8007334:	000e      	movs	r6, r1
 8007336:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007338:	1064      	asrs	r4, r4, #1
 800733a:	3301      	adds	r3, #1
 800733c:	9310      	str	r3, [sp, #64]	; 0x40
 800733e:	2c00      	cmp	r4, #0
 8007340:	d1e7      	bne.n	8007312 <_dtoa_r+0x2e2>
 8007342:	9806      	ldr	r0, [sp, #24]
 8007344:	9907      	ldr	r1, [sp, #28]
 8007346:	002a      	movs	r2, r5
 8007348:	0033      	movs	r3, r6
 800734a:	f7fa fb23 	bl	8001994 <__aeabi_ddiv>
 800734e:	9006      	str	r0, [sp, #24]
 8007350:	9107      	str	r1, [sp, #28]
 8007352:	e042      	b.n	80073da <_dtoa_r+0x3aa>
 8007354:	7ff00000 	.word	0x7ff00000
 8007358:	0000270f 	.word	0x0000270f
 800735c:	080092f9 	.word	0x080092f9
 8007360:	080092fc 	.word	0x080092fc
 8007364:	080092cc 	.word	0x080092cc
 8007368:	080092cd 	.word	0x080092cd
 800736c:	3ff00000 	.word	0x3ff00000
 8007370:	fffffc01 	.word	0xfffffc01
 8007374:	3ff80000 	.word	0x3ff80000
 8007378:	636f4361 	.word	0x636f4361
 800737c:	3fd287a7 	.word	0x3fd287a7
 8007380:	8b60c8b3 	.word	0x8b60c8b3
 8007384:	3fc68a28 	.word	0x3fc68a28
 8007388:	509f79fb 	.word	0x509f79fb
 800738c:	3fd34413 	.word	0x3fd34413
 8007390:	08009388 	.word	0x08009388
 8007394:	00000432 	.word	0x00000432
 8007398:	00000412 	.word	0x00000412
 800739c:	fe100000 	.word	0xfe100000
 80073a0:	08009360 	.word	0x08009360
 80073a4:	2302      	movs	r3, #2
 80073a6:	930e      	str	r3, [sp, #56]	; 0x38
 80073a8:	2f00      	cmp	r7, #0
 80073aa:	d016      	beq.n	80073da <_dtoa_r+0x3aa>
 80073ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80073ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80073b0:	427c      	negs	r4, r7
 80073b2:	330d      	adds	r3, #13
 80073b4:	4023      	ands	r3, r4
 80073b6:	4ace      	ldr	r2, [pc, #824]	; (80076f0 <_dtoa_r+0x6c0>)
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	18d3      	adds	r3, r2, r3
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f7fa fef2 	bl	80021a8 <__aeabi_dmul>
 80073c4:	2300      	movs	r3, #0
 80073c6:	2601      	movs	r6, #1
 80073c8:	001d      	movs	r5, r3
 80073ca:	9006      	str	r0, [sp, #24]
 80073cc:	9107      	str	r1, [sp, #28]
 80073ce:	1124      	asrs	r4, r4, #4
 80073d0:	2c00      	cmp	r4, #0
 80073d2:	d000      	beq.n	80073d6 <_dtoa_r+0x3a6>
 80073d4:	e08c      	b.n	80074f0 <_dtoa_r+0x4c0>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1b9      	bne.n	800734e <_dtoa_r+0x31e>
 80073da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d100      	bne.n	80073e2 <_dtoa_r+0x3b2>
 80073e0:	e096      	b.n	8007510 <_dtoa_r+0x4e0>
 80073e2:	9c06      	ldr	r4, [sp, #24]
 80073e4:	9d07      	ldr	r5, [sp, #28]
 80073e6:	2200      	movs	r2, #0
 80073e8:	4bc2      	ldr	r3, [pc, #776]	; (80076f4 <_dtoa_r+0x6c4>)
 80073ea:	0020      	movs	r0, r4
 80073ec:	0029      	movs	r1, r5
 80073ee:	f7f9 f829 	bl	8000444 <__aeabi_dcmplt>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d100      	bne.n	80073f8 <_dtoa_r+0x3c8>
 80073f6:	e08b      	b.n	8007510 <_dtoa_r+0x4e0>
 80073f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d100      	bne.n	8007400 <_dtoa_r+0x3d0>
 80073fe:	e087      	b.n	8007510 <_dtoa_r+0x4e0>
 8007400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007402:	2b00      	cmp	r3, #0
 8007404:	dd41      	ble.n	800748a <_dtoa_r+0x45a>
 8007406:	4bbc      	ldr	r3, [pc, #752]	; (80076f8 <_dtoa_r+0x6c8>)
 8007408:	2200      	movs	r2, #0
 800740a:	0020      	movs	r0, r4
 800740c:	0029      	movs	r1, r5
 800740e:	f7fa fecb 	bl	80021a8 <__aeabi_dmul>
 8007412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007414:	9006      	str	r0, [sp, #24]
 8007416:	9107      	str	r1, [sp, #28]
 8007418:	3301      	adds	r3, #1
 800741a:	930e      	str	r3, [sp, #56]	; 0x38
 800741c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800741e:	1e7e      	subs	r6, r7, #1
 8007420:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007422:	9310      	str	r3, [sp, #64]	; 0x40
 8007424:	f7fb fccc 	bl	8002dc0 <__aeabi_i2d>
 8007428:	9a06      	ldr	r2, [sp, #24]
 800742a:	9b07      	ldr	r3, [sp, #28]
 800742c:	f7fa febc 	bl	80021a8 <__aeabi_dmul>
 8007430:	2200      	movs	r2, #0
 8007432:	4bb2      	ldr	r3, [pc, #712]	; (80076fc <_dtoa_r+0x6cc>)
 8007434:	f7f9 ff92 	bl	800135c <__aeabi_dadd>
 8007438:	4ab1      	ldr	r2, [pc, #708]	; (8007700 <_dtoa_r+0x6d0>)
 800743a:	900e      	str	r0, [sp, #56]	; 0x38
 800743c:	910f      	str	r1, [sp, #60]	; 0x3c
 800743e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007440:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007442:	4694      	mov	ip, r2
 8007444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007446:	4463      	add	r3, ip
 8007448:	9315      	str	r3, [sp, #84]	; 0x54
 800744a:	001d      	movs	r5, r3
 800744c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d161      	bne.n	8007516 <_dtoa_r+0x4e6>
 8007452:	9806      	ldr	r0, [sp, #24]
 8007454:	9907      	ldr	r1, [sp, #28]
 8007456:	2200      	movs	r2, #0
 8007458:	4baa      	ldr	r3, [pc, #680]	; (8007704 <_dtoa_r+0x6d4>)
 800745a:	f7fb f917 	bl	800268c <__aeabi_dsub>
 800745e:	0022      	movs	r2, r4
 8007460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007462:	9006      	str	r0, [sp, #24]
 8007464:	9107      	str	r1, [sp, #28]
 8007466:	f7f9 f801 	bl	800046c <__aeabi_dcmpgt>
 800746a:	2800      	cmp	r0, #0
 800746c:	d000      	beq.n	8007470 <_dtoa_r+0x440>
 800746e:	e2a8      	b.n	80079c2 <_dtoa_r+0x992>
 8007470:	48a5      	ldr	r0, [pc, #660]	; (8007708 <_dtoa_r+0x6d8>)
 8007472:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007474:	4684      	mov	ip, r0
 8007476:	4461      	add	r1, ip
 8007478:	000b      	movs	r3, r1
 800747a:	9806      	ldr	r0, [sp, #24]
 800747c:	9907      	ldr	r1, [sp, #28]
 800747e:	0022      	movs	r2, r4
 8007480:	f7f8 ffe0 	bl	8000444 <__aeabi_dcmplt>
 8007484:	2800      	cmp	r0, #0
 8007486:	d000      	beq.n	800748a <_dtoa_r+0x45a>
 8007488:	e295      	b.n	80079b6 <_dtoa_r+0x986>
 800748a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800748c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800748e:	9306      	str	r3, [sp, #24]
 8007490:	9407      	str	r4, [sp, #28]
 8007492:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007494:	2b00      	cmp	r3, #0
 8007496:	da00      	bge.n	800749a <_dtoa_r+0x46a>
 8007498:	e15c      	b.n	8007754 <_dtoa_r+0x724>
 800749a:	2f0e      	cmp	r7, #14
 800749c:	dd00      	ble.n	80074a0 <_dtoa_r+0x470>
 800749e:	e159      	b.n	8007754 <_dtoa_r+0x724>
 80074a0:	4b93      	ldr	r3, [pc, #588]	; (80076f0 <_dtoa_r+0x6c0>)
 80074a2:	00fa      	lsls	r2, r7, #3
 80074a4:	189b      	adds	r3, r3, r2
 80074a6:	685c      	ldr	r4, [r3, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	9304      	str	r3, [sp, #16]
 80074ac:	9405      	str	r4, [sp, #20]
 80074ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	db00      	blt.n	80074b6 <_dtoa_r+0x486>
 80074b4:	e0d8      	b.n	8007668 <_dtoa_r+0x638>
 80074b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dd00      	ble.n	80074be <_dtoa_r+0x48e>
 80074bc:	e0d4      	b.n	8007668 <_dtoa_r+0x638>
 80074be:	d000      	beq.n	80074c2 <_dtoa_r+0x492>
 80074c0:	e27d      	b.n	80079be <_dtoa_r+0x98e>
 80074c2:	9804      	ldr	r0, [sp, #16]
 80074c4:	9905      	ldr	r1, [sp, #20]
 80074c6:	2200      	movs	r2, #0
 80074c8:	4b8e      	ldr	r3, [pc, #568]	; (8007704 <_dtoa_r+0x6d4>)
 80074ca:	f7fa fe6d 	bl	80021a8 <__aeabi_dmul>
 80074ce:	9a06      	ldr	r2, [sp, #24]
 80074d0:	9b07      	ldr	r3, [sp, #28]
 80074d2:	f7f8 ffd5 	bl	8000480 <__aeabi_dcmpge>
 80074d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d8:	9304      	str	r3, [sp, #16]
 80074da:	001e      	movs	r6, r3
 80074dc:	2800      	cmp	r0, #0
 80074de:	d000      	beq.n	80074e2 <_dtoa_r+0x4b2>
 80074e0:	e24f      	b.n	8007982 <_dtoa_r+0x952>
 80074e2:	9b08      	ldr	r3, [sp, #32]
 80074e4:	9a08      	ldr	r2, [sp, #32]
 80074e6:	1c5d      	adds	r5, r3, #1
 80074e8:	2331      	movs	r3, #49	; 0x31
 80074ea:	3701      	adds	r7, #1
 80074ec:	7013      	strb	r3, [r2, #0]
 80074ee:	e24b      	b.n	8007988 <_dtoa_r+0x958>
 80074f0:	4234      	tst	r4, r6
 80074f2:	d00a      	beq.n	800750a <_dtoa_r+0x4da>
 80074f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074f6:	4a85      	ldr	r2, [pc, #532]	; (800770c <_dtoa_r+0x6dc>)
 80074f8:	3301      	adds	r3, #1
 80074fa:	930e      	str	r3, [sp, #56]	; 0x38
 80074fc:	00eb      	lsls	r3, r5, #3
 80074fe:	189b      	adds	r3, r3, r2
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f7fa fe50 	bl	80021a8 <__aeabi_dmul>
 8007508:	0033      	movs	r3, r6
 800750a:	1064      	asrs	r4, r4, #1
 800750c:	3501      	adds	r5, #1
 800750e:	e75f      	b.n	80073d0 <_dtoa_r+0x3a0>
 8007510:	003e      	movs	r6, r7
 8007512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007514:	e784      	b.n	8007420 <_dtoa_r+0x3f0>
 8007516:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007518:	990d      	ldr	r1, [sp, #52]	; 0x34
 800751a:	1e5a      	subs	r2, r3, #1
 800751c:	4b74      	ldr	r3, [pc, #464]	; (80076f0 <_dtoa_r+0x6c0>)
 800751e:	00d2      	lsls	r2, r2, #3
 8007520:	189b      	adds	r3, r3, r2
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2900      	cmp	r1, #0
 8007528:	d049      	beq.n	80075be <_dtoa_r+0x58e>
 800752a:	2000      	movs	r0, #0
 800752c:	4978      	ldr	r1, [pc, #480]	; (8007710 <_dtoa_r+0x6e0>)
 800752e:	f7fa fa31 	bl	8001994 <__aeabi_ddiv>
 8007532:	002b      	movs	r3, r5
 8007534:	0022      	movs	r2, r4
 8007536:	f7fb f8a9 	bl	800268c <__aeabi_dsub>
 800753a:	9b08      	ldr	r3, [sp, #32]
 800753c:	900e      	str	r0, [sp, #56]	; 0x38
 800753e:	910f      	str	r1, [sp, #60]	; 0x3c
 8007540:	9315      	str	r3, [sp, #84]	; 0x54
 8007542:	9806      	ldr	r0, [sp, #24]
 8007544:	9907      	ldr	r1, [sp, #28]
 8007546:	f7fb fc05 	bl	8002d54 <__aeabi_d2iz>
 800754a:	0004      	movs	r4, r0
 800754c:	f7fb fc38 	bl	8002dc0 <__aeabi_i2d>
 8007550:	0002      	movs	r2, r0
 8007552:	000b      	movs	r3, r1
 8007554:	9806      	ldr	r0, [sp, #24]
 8007556:	9907      	ldr	r1, [sp, #28]
 8007558:	f7fb f898 	bl	800268c <__aeabi_dsub>
 800755c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800755e:	3430      	adds	r4, #48	; 0x30
 8007560:	1c5d      	adds	r5, r3, #1
 8007562:	701c      	strb	r4, [r3, #0]
 8007564:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007568:	9006      	str	r0, [sp, #24]
 800756a:	9107      	str	r1, [sp, #28]
 800756c:	f7f8 ff6a 	bl	8000444 <__aeabi_dcmplt>
 8007570:	2800      	cmp	r0, #0
 8007572:	d16c      	bne.n	800764e <_dtoa_r+0x61e>
 8007574:	9a06      	ldr	r2, [sp, #24]
 8007576:	9b07      	ldr	r3, [sp, #28]
 8007578:	2000      	movs	r0, #0
 800757a:	495e      	ldr	r1, [pc, #376]	; (80076f4 <_dtoa_r+0x6c4>)
 800757c:	f7fb f886 	bl	800268c <__aeabi_dsub>
 8007580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007584:	f7f8 ff5e 	bl	8000444 <__aeabi_dcmplt>
 8007588:	2800      	cmp	r0, #0
 800758a:	d000      	beq.n	800758e <_dtoa_r+0x55e>
 800758c:	e0c3      	b.n	8007716 <_dtoa_r+0x6e6>
 800758e:	9b08      	ldr	r3, [sp, #32]
 8007590:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007592:	1aeb      	subs	r3, r5, r3
 8007594:	429a      	cmp	r2, r3
 8007596:	dc00      	bgt.n	800759a <_dtoa_r+0x56a>
 8007598:	e777      	b.n	800748a <_dtoa_r+0x45a>
 800759a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800759c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800759e:	2200      	movs	r2, #0
 80075a0:	4b55      	ldr	r3, [pc, #340]	; (80076f8 <_dtoa_r+0x6c8>)
 80075a2:	f7fa fe01 	bl	80021a8 <__aeabi_dmul>
 80075a6:	2200      	movs	r2, #0
 80075a8:	900e      	str	r0, [sp, #56]	; 0x38
 80075aa:	910f      	str	r1, [sp, #60]	; 0x3c
 80075ac:	9806      	ldr	r0, [sp, #24]
 80075ae:	9907      	ldr	r1, [sp, #28]
 80075b0:	4b51      	ldr	r3, [pc, #324]	; (80076f8 <_dtoa_r+0x6c8>)
 80075b2:	f7fa fdf9 	bl	80021a8 <__aeabi_dmul>
 80075b6:	9515      	str	r5, [sp, #84]	; 0x54
 80075b8:	9006      	str	r0, [sp, #24]
 80075ba:	9107      	str	r1, [sp, #28]
 80075bc:	e7c1      	b.n	8007542 <_dtoa_r+0x512>
 80075be:	0020      	movs	r0, r4
 80075c0:	0029      	movs	r1, r5
 80075c2:	f7fa fdf1 	bl	80021a8 <__aeabi_dmul>
 80075c6:	9c08      	ldr	r4, [sp, #32]
 80075c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075ca:	0023      	movs	r3, r4
 80075cc:	4694      	mov	ip, r2
 80075ce:	900e      	str	r0, [sp, #56]	; 0x38
 80075d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80075d2:	4463      	add	r3, ip
 80075d4:	9315      	str	r3, [sp, #84]	; 0x54
 80075d6:	9806      	ldr	r0, [sp, #24]
 80075d8:	9907      	ldr	r1, [sp, #28]
 80075da:	f7fb fbbb 	bl	8002d54 <__aeabi_d2iz>
 80075de:	0005      	movs	r5, r0
 80075e0:	f7fb fbee 	bl	8002dc0 <__aeabi_i2d>
 80075e4:	000b      	movs	r3, r1
 80075e6:	0002      	movs	r2, r0
 80075e8:	9806      	ldr	r0, [sp, #24]
 80075ea:	9907      	ldr	r1, [sp, #28]
 80075ec:	f7fb f84e 	bl	800268c <__aeabi_dsub>
 80075f0:	3530      	adds	r5, #48	; 0x30
 80075f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075f4:	7025      	strb	r5, [r4, #0]
 80075f6:	3401      	adds	r4, #1
 80075f8:	9006      	str	r0, [sp, #24]
 80075fa:	9107      	str	r1, [sp, #28]
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	d12a      	bne.n	8007656 <_dtoa_r+0x626>
 8007600:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007602:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007604:	9a08      	ldr	r2, [sp, #32]
 8007606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007608:	4694      	mov	ip, r2
 800760a:	4463      	add	r3, ip
 800760c:	2200      	movs	r2, #0
 800760e:	001d      	movs	r5, r3
 8007610:	4b3f      	ldr	r3, [pc, #252]	; (8007710 <_dtoa_r+0x6e0>)
 8007612:	f7f9 fea3 	bl	800135c <__aeabi_dadd>
 8007616:	0002      	movs	r2, r0
 8007618:	000b      	movs	r3, r1
 800761a:	9806      	ldr	r0, [sp, #24]
 800761c:	9907      	ldr	r1, [sp, #28]
 800761e:	f7f8 ff25 	bl	800046c <__aeabi_dcmpgt>
 8007622:	2800      	cmp	r0, #0
 8007624:	d000      	beq.n	8007628 <_dtoa_r+0x5f8>
 8007626:	e076      	b.n	8007716 <_dtoa_r+0x6e6>
 8007628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800762a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800762c:	2000      	movs	r0, #0
 800762e:	4938      	ldr	r1, [pc, #224]	; (8007710 <_dtoa_r+0x6e0>)
 8007630:	f7fb f82c 	bl	800268c <__aeabi_dsub>
 8007634:	0002      	movs	r2, r0
 8007636:	000b      	movs	r3, r1
 8007638:	9806      	ldr	r0, [sp, #24]
 800763a:	9907      	ldr	r1, [sp, #28]
 800763c:	f7f8 ff02 	bl	8000444 <__aeabi_dcmplt>
 8007640:	2800      	cmp	r0, #0
 8007642:	d100      	bne.n	8007646 <_dtoa_r+0x616>
 8007644:	e721      	b.n	800748a <_dtoa_r+0x45a>
 8007646:	1e6b      	subs	r3, r5, #1
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	2a30      	cmp	r2, #48	; 0x30
 800764c:	d001      	beq.n	8007652 <_dtoa_r+0x622>
 800764e:	0037      	movs	r7, r6
 8007650:	e03f      	b.n	80076d2 <_dtoa_r+0x6a2>
 8007652:	001d      	movs	r5, r3
 8007654:	e7f7      	b.n	8007646 <_dtoa_r+0x616>
 8007656:	9806      	ldr	r0, [sp, #24]
 8007658:	9907      	ldr	r1, [sp, #28]
 800765a:	2200      	movs	r2, #0
 800765c:	4b26      	ldr	r3, [pc, #152]	; (80076f8 <_dtoa_r+0x6c8>)
 800765e:	f7fa fda3 	bl	80021a8 <__aeabi_dmul>
 8007662:	9006      	str	r0, [sp, #24]
 8007664:	9107      	str	r1, [sp, #28]
 8007666:	e7b6      	b.n	80075d6 <_dtoa_r+0x5a6>
 8007668:	9e08      	ldr	r6, [sp, #32]
 800766a:	9a04      	ldr	r2, [sp, #16]
 800766c:	9b05      	ldr	r3, [sp, #20]
 800766e:	9806      	ldr	r0, [sp, #24]
 8007670:	9907      	ldr	r1, [sp, #28]
 8007672:	f7fa f98f 	bl	8001994 <__aeabi_ddiv>
 8007676:	f7fb fb6d 	bl	8002d54 <__aeabi_d2iz>
 800767a:	0004      	movs	r4, r0
 800767c:	f7fb fba0 	bl	8002dc0 <__aeabi_i2d>
 8007680:	9a04      	ldr	r2, [sp, #16]
 8007682:	9b05      	ldr	r3, [sp, #20]
 8007684:	f7fa fd90 	bl	80021a8 <__aeabi_dmul>
 8007688:	0002      	movs	r2, r0
 800768a:	000b      	movs	r3, r1
 800768c:	9806      	ldr	r0, [sp, #24]
 800768e:	9907      	ldr	r1, [sp, #28]
 8007690:	f7fa fffc 	bl	800268c <__aeabi_dsub>
 8007694:	0023      	movs	r3, r4
 8007696:	3330      	adds	r3, #48	; 0x30
 8007698:	7033      	strb	r3, [r6, #0]
 800769a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800769c:	9b08      	ldr	r3, [sp, #32]
 800769e:	1c75      	adds	r5, r6, #1
 80076a0:	1aeb      	subs	r3, r5, r3
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d148      	bne.n	8007738 <_dtoa_r+0x708>
 80076a6:	0002      	movs	r2, r0
 80076a8:	000b      	movs	r3, r1
 80076aa:	f7f9 fe57 	bl	800135c <__aeabi_dadd>
 80076ae:	9a04      	ldr	r2, [sp, #16]
 80076b0:	9b05      	ldr	r3, [sp, #20]
 80076b2:	9006      	str	r0, [sp, #24]
 80076b4:	9107      	str	r1, [sp, #28]
 80076b6:	f7f8 fed9 	bl	800046c <__aeabi_dcmpgt>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	d12a      	bne.n	8007714 <_dtoa_r+0x6e4>
 80076be:	9a04      	ldr	r2, [sp, #16]
 80076c0:	9b05      	ldr	r3, [sp, #20]
 80076c2:	9806      	ldr	r0, [sp, #24]
 80076c4:	9907      	ldr	r1, [sp, #28]
 80076c6:	f7f8 feb7 	bl	8000438 <__aeabi_dcmpeq>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d001      	beq.n	80076d2 <_dtoa_r+0x6a2>
 80076ce:	07e3      	lsls	r3, r4, #31
 80076d0:	d420      	bmi.n	8007714 <_dtoa_r+0x6e4>
 80076d2:	9903      	ldr	r1, [sp, #12]
 80076d4:	9802      	ldr	r0, [sp, #8]
 80076d6:	f000 fce5 	bl	80080a4 <_Bfree>
 80076da:	2300      	movs	r3, #0
 80076dc:	702b      	strb	r3, [r5, #0]
 80076de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076e0:	3701      	adds	r7, #1
 80076e2:	601f      	str	r7, [r3, #0]
 80076e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d100      	bne.n	80076ec <_dtoa_r+0x6bc>
 80076ea:	e4e6      	b.n	80070ba <_dtoa_r+0x8a>
 80076ec:	601d      	str	r5, [r3, #0]
 80076ee:	e4e4      	b.n	80070ba <_dtoa_r+0x8a>
 80076f0:	08009388 	.word	0x08009388
 80076f4:	3ff00000 	.word	0x3ff00000
 80076f8:	40240000 	.word	0x40240000
 80076fc:	401c0000 	.word	0x401c0000
 8007700:	fcc00000 	.word	0xfcc00000
 8007704:	40140000 	.word	0x40140000
 8007708:	7cc00000 	.word	0x7cc00000
 800770c:	08009360 	.word	0x08009360
 8007710:	3fe00000 	.word	0x3fe00000
 8007714:	003e      	movs	r6, r7
 8007716:	1e6b      	subs	r3, r5, #1
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	2a39      	cmp	r2, #57	; 0x39
 800771c:	d106      	bne.n	800772c <_dtoa_r+0x6fc>
 800771e:	9a08      	ldr	r2, [sp, #32]
 8007720:	429a      	cmp	r2, r3
 8007722:	d107      	bne.n	8007734 <_dtoa_r+0x704>
 8007724:	2330      	movs	r3, #48	; 0x30
 8007726:	7013      	strb	r3, [r2, #0]
 8007728:	0013      	movs	r3, r2
 800772a:	3601      	adds	r6, #1
 800772c:	781a      	ldrb	r2, [r3, #0]
 800772e:	3201      	adds	r2, #1
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	e78c      	b.n	800764e <_dtoa_r+0x61e>
 8007734:	001d      	movs	r5, r3
 8007736:	e7ee      	b.n	8007716 <_dtoa_r+0x6e6>
 8007738:	2200      	movs	r2, #0
 800773a:	4ba4      	ldr	r3, [pc, #656]	; (80079cc <_dtoa_r+0x99c>)
 800773c:	f7fa fd34 	bl	80021a8 <__aeabi_dmul>
 8007740:	2200      	movs	r2, #0
 8007742:	2300      	movs	r3, #0
 8007744:	9006      	str	r0, [sp, #24]
 8007746:	9107      	str	r1, [sp, #28]
 8007748:	002e      	movs	r6, r5
 800774a:	f7f8 fe75 	bl	8000438 <__aeabi_dcmpeq>
 800774e:	2800      	cmp	r0, #0
 8007750:	d08b      	beq.n	800766a <_dtoa_r+0x63a>
 8007752:	e7be      	b.n	80076d2 <_dtoa_r+0x6a2>
 8007754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007756:	2a00      	cmp	r2, #0
 8007758:	d100      	bne.n	800775c <_dtoa_r+0x72c>
 800775a:	e0da      	b.n	8007912 <_dtoa_r+0x8e2>
 800775c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800775e:	2a01      	cmp	r2, #1
 8007760:	dd00      	ble.n	8007764 <_dtoa_r+0x734>
 8007762:	e0bd      	b.n	80078e0 <_dtoa_r+0x8b0>
 8007764:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007766:	2a00      	cmp	r2, #0
 8007768:	d100      	bne.n	800776c <_dtoa_r+0x73c>
 800776a:	e0b5      	b.n	80078d8 <_dtoa_r+0x8a8>
 800776c:	4a98      	ldr	r2, [pc, #608]	; (80079d0 <_dtoa_r+0x9a0>)
 800776e:	189b      	adds	r3, r3, r2
 8007770:	9d04      	ldr	r5, [sp, #16]
 8007772:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007776:	2101      	movs	r1, #1
 8007778:	18d2      	adds	r2, r2, r3
 800777a:	920a      	str	r2, [sp, #40]	; 0x28
 800777c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800777e:	9802      	ldr	r0, [sp, #8]
 8007780:	18d3      	adds	r3, r2, r3
 8007782:	930b      	str	r3, [sp, #44]	; 0x2c
 8007784:	f000 fd2e 	bl	80081e4 <__i2b>
 8007788:	0006      	movs	r6, r0
 800778a:	2c00      	cmp	r4, #0
 800778c:	dd0e      	ble.n	80077ac <_dtoa_r+0x77c>
 800778e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007790:	2b00      	cmp	r3, #0
 8007792:	dd0b      	ble.n	80077ac <_dtoa_r+0x77c>
 8007794:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007796:	0023      	movs	r3, r4
 8007798:	4294      	cmp	r4, r2
 800779a:	dd00      	ble.n	800779e <_dtoa_r+0x76e>
 800779c:	0013      	movs	r3, r2
 800779e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077a0:	1ae4      	subs	r4, r4, r3
 80077a2:	1ad2      	subs	r2, r2, r3
 80077a4:	920a      	str	r2, [sp, #40]	; 0x28
 80077a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ac:	9b04      	ldr	r3, [sp, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01f      	beq.n	80077f2 <_dtoa_r+0x7c2>
 80077b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d100      	bne.n	80077ba <_dtoa_r+0x78a>
 80077b8:	e0af      	b.n	800791a <_dtoa_r+0x8ea>
 80077ba:	2d00      	cmp	r5, #0
 80077bc:	d011      	beq.n	80077e2 <_dtoa_r+0x7b2>
 80077be:	0031      	movs	r1, r6
 80077c0:	002a      	movs	r2, r5
 80077c2:	9802      	ldr	r0, [sp, #8]
 80077c4:	f000 fda6 	bl	8008314 <__pow5mult>
 80077c8:	9a03      	ldr	r2, [sp, #12]
 80077ca:	0001      	movs	r1, r0
 80077cc:	0006      	movs	r6, r0
 80077ce:	9802      	ldr	r0, [sp, #8]
 80077d0:	f000 fd11 	bl	80081f6 <__multiply>
 80077d4:	9903      	ldr	r1, [sp, #12]
 80077d6:	9010      	str	r0, [sp, #64]	; 0x40
 80077d8:	9802      	ldr	r0, [sp, #8]
 80077da:	f000 fc63 	bl	80080a4 <_Bfree>
 80077de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	9b04      	ldr	r3, [sp, #16]
 80077e4:	1b5a      	subs	r2, r3, r5
 80077e6:	d004      	beq.n	80077f2 <_dtoa_r+0x7c2>
 80077e8:	9903      	ldr	r1, [sp, #12]
 80077ea:	9802      	ldr	r0, [sp, #8]
 80077ec:	f000 fd92 	bl	8008314 <__pow5mult>
 80077f0:	9003      	str	r0, [sp, #12]
 80077f2:	2101      	movs	r1, #1
 80077f4:	9802      	ldr	r0, [sp, #8]
 80077f6:	f000 fcf5 	bl	80081e4 <__i2b>
 80077fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077fc:	9004      	str	r0, [sp, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d100      	bne.n	8007804 <_dtoa_r+0x7d4>
 8007802:	e1e3      	b.n	8007bcc <_dtoa_r+0xb9c>
 8007804:	001a      	movs	r2, r3
 8007806:	0001      	movs	r1, r0
 8007808:	9802      	ldr	r0, [sp, #8]
 800780a:	f000 fd83 	bl	8008314 <__pow5mult>
 800780e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007810:	9004      	str	r0, [sp, #16]
 8007812:	2b01      	cmp	r3, #1
 8007814:	dd00      	ble.n	8007818 <_dtoa_r+0x7e8>
 8007816:	e082      	b.n	800791e <_dtoa_r+0x8ee>
 8007818:	2500      	movs	r5, #0
 800781a:	9b06      	ldr	r3, [sp, #24]
 800781c:	42ab      	cmp	r3, r5
 800781e:	d10e      	bne.n	800783e <_dtoa_r+0x80e>
 8007820:	9b07      	ldr	r3, [sp, #28]
 8007822:	031b      	lsls	r3, r3, #12
 8007824:	42ab      	cmp	r3, r5
 8007826:	d10a      	bne.n	800783e <_dtoa_r+0x80e>
 8007828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800782a:	9a07      	ldr	r2, [sp, #28]
 800782c:	4213      	tst	r3, r2
 800782e:	d006      	beq.n	800783e <_dtoa_r+0x80e>
 8007830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007832:	3501      	adds	r5, #1
 8007834:	3301      	adds	r3, #1
 8007836:	930a      	str	r3, [sp, #40]	; 0x28
 8007838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800783a:	3301      	adds	r3, #1
 800783c:	930b      	str	r3, [sp, #44]	; 0x2c
 800783e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007840:	2001      	movs	r0, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d16c      	bne.n	8007920 <_dtoa_r+0x8f0>
 8007846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007848:	1818      	adds	r0, r3, r0
 800784a:	231f      	movs	r3, #31
 800784c:	4018      	ands	r0, r3
 800784e:	d07e      	beq.n	800794e <_dtoa_r+0x91e>
 8007850:	3301      	adds	r3, #1
 8007852:	1a1b      	subs	r3, r3, r0
 8007854:	2b04      	cmp	r3, #4
 8007856:	dd70      	ble.n	800793a <_dtoa_r+0x90a>
 8007858:	231c      	movs	r3, #28
 800785a:	1a18      	subs	r0, r3, r0
 800785c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785e:	1824      	adds	r4, r4, r0
 8007860:	181b      	adds	r3, r3, r0
 8007862:	930a      	str	r3, [sp, #40]	; 0x28
 8007864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007866:	181b      	adds	r3, r3, r0
 8007868:	930b      	str	r3, [sp, #44]	; 0x2c
 800786a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800786c:	2b00      	cmp	r3, #0
 800786e:	dd05      	ble.n	800787c <_dtoa_r+0x84c>
 8007870:	001a      	movs	r2, r3
 8007872:	9903      	ldr	r1, [sp, #12]
 8007874:	9802      	ldr	r0, [sp, #8]
 8007876:	f000 fd9f 	bl	80083b8 <__lshift>
 800787a:	9003      	str	r0, [sp, #12]
 800787c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800787e:	2b00      	cmp	r3, #0
 8007880:	dd05      	ble.n	800788e <_dtoa_r+0x85e>
 8007882:	001a      	movs	r2, r3
 8007884:	9904      	ldr	r1, [sp, #16]
 8007886:	9802      	ldr	r0, [sp, #8]
 8007888:	f000 fd96 	bl	80083b8 <__lshift>
 800788c:	9004      	str	r0, [sp, #16]
 800788e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007890:	2b00      	cmp	r3, #0
 8007892:	d05e      	beq.n	8007952 <_dtoa_r+0x922>
 8007894:	9904      	ldr	r1, [sp, #16]
 8007896:	9803      	ldr	r0, [sp, #12]
 8007898:	f000 fde0 	bl	800845c <__mcmp>
 800789c:	2800      	cmp	r0, #0
 800789e:	da58      	bge.n	8007952 <_dtoa_r+0x922>
 80078a0:	2300      	movs	r3, #0
 80078a2:	220a      	movs	r2, #10
 80078a4:	9903      	ldr	r1, [sp, #12]
 80078a6:	9802      	ldr	r0, [sp, #8]
 80078a8:	f000 fc15 	bl	80080d6 <__multadd>
 80078ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ae:	3f01      	subs	r7, #1
 80078b0:	9003      	str	r0, [sp, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d100      	bne.n	80078b8 <_dtoa_r+0x888>
 80078b6:	e190      	b.n	8007bda <_dtoa_r+0xbaa>
 80078b8:	2300      	movs	r3, #0
 80078ba:	0031      	movs	r1, r6
 80078bc:	220a      	movs	r2, #10
 80078be:	9802      	ldr	r0, [sp, #8]
 80078c0:	f000 fc09 	bl	80080d6 <__multadd>
 80078c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078c6:	0006      	movs	r6, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	dd00      	ble.n	80078ce <_dtoa_r+0x89e>
 80078cc:	e088      	b.n	80079e0 <_dtoa_r+0x9b0>
 80078ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	dc00      	bgt.n	80078d6 <_dtoa_r+0x8a6>
 80078d4:	e084      	b.n	80079e0 <_dtoa_r+0x9b0>
 80078d6:	e044      	b.n	8007962 <_dtoa_r+0x932>
 80078d8:	2336      	movs	r3, #54	; 0x36
 80078da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	e747      	b.n	8007770 <_dtoa_r+0x740>
 80078e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e2:	1e5d      	subs	r5, r3, #1
 80078e4:	9b04      	ldr	r3, [sp, #16]
 80078e6:	42ab      	cmp	r3, r5
 80078e8:	db08      	blt.n	80078fc <_dtoa_r+0x8cc>
 80078ea:	1b5d      	subs	r5, r3, r5
 80078ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	da0c      	bge.n	800790c <_dtoa_r+0x8dc>
 80078f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078f6:	1a9c      	subs	r4, r3, r2
 80078f8:	2300      	movs	r3, #0
 80078fa:	e73b      	b.n	8007774 <_dtoa_r+0x744>
 80078fc:	9b04      	ldr	r3, [sp, #16]
 80078fe:	9504      	str	r5, [sp, #16]
 8007900:	1aea      	subs	r2, r5, r3
 8007902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007904:	2500      	movs	r5, #0
 8007906:	189b      	adds	r3, r3, r2
 8007908:	9311      	str	r3, [sp, #68]	; 0x44
 800790a:	e7ef      	b.n	80078ec <_dtoa_r+0x8bc>
 800790c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800790e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007910:	e730      	b.n	8007774 <_dtoa_r+0x744>
 8007912:	9d04      	ldr	r5, [sp, #16]
 8007914:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007916:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007918:	e737      	b.n	800778a <_dtoa_r+0x75a>
 800791a:	9a04      	ldr	r2, [sp, #16]
 800791c:	e764      	b.n	80077e8 <_dtoa_r+0x7b8>
 800791e:	2500      	movs	r5, #0
 8007920:	9b04      	ldr	r3, [sp, #16]
 8007922:	9a04      	ldr	r2, [sp, #16]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	9310      	str	r3, [sp, #64]	; 0x40
 8007928:	3303      	adds	r3, #3
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	18d3      	adds	r3, r2, r3
 800792e:	6858      	ldr	r0, [r3, #4]
 8007930:	f000 fc0f 	bl	8008152 <__hi0bits>
 8007934:	2320      	movs	r3, #32
 8007936:	1a18      	subs	r0, r3, r0
 8007938:	e785      	b.n	8007846 <_dtoa_r+0x816>
 800793a:	2b04      	cmp	r3, #4
 800793c:	d095      	beq.n	800786a <_dtoa_r+0x83a>
 800793e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007940:	331c      	adds	r3, #28
 8007942:	18d2      	adds	r2, r2, r3
 8007944:	920a      	str	r2, [sp, #40]	; 0x28
 8007946:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007948:	18e4      	adds	r4, r4, r3
 800794a:	18d3      	adds	r3, r2, r3
 800794c:	e78c      	b.n	8007868 <_dtoa_r+0x838>
 800794e:	0003      	movs	r3, r0
 8007950:	e7f5      	b.n	800793e <_dtoa_r+0x90e>
 8007952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007954:	2b00      	cmp	r3, #0
 8007956:	dc3d      	bgt.n	80079d4 <_dtoa_r+0x9a4>
 8007958:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800795a:	2b02      	cmp	r3, #2
 800795c:	dd3a      	ble.n	80079d4 <_dtoa_r+0x9a4>
 800795e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007960:	930c      	str	r3, [sp, #48]	; 0x30
 8007962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10c      	bne.n	8007982 <_dtoa_r+0x952>
 8007968:	9904      	ldr	r1, [sp, #16]
 800796a:	2205      	movs	r2, #5
 800796c:	9802      	ldr	r0, [sp, #8]
 800796e:	f000 fbb2 	bl	80080d6 <__multadd>
 8007972:	9004      	str	r0, [sp, #16]
 8007974:	0001      	movs	r1, r0
 8007976:	9803      	ldr	r0, [sp, #12]
 8007978:	f000 fd70 	bl	800845c <__mcmp>
 800797c:	2800      	cmp	r0, #0
 800797e:	dd00      	ble.n	8007982 <_dtoa_r+0x952>
 8007980:	e5af      	b.n	80074e2 <_dtoa_r+0x4b2>
 8007982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007984:	9d08      	ldr	r5, [sp, #32]
 8007986:	43df      	mvns	r7, r3
 8007988:	2300      	movs	r3, #0
 800798a:	9309      	str	r3, [sp, #36]	; 0x24
 800798c:	9904      	ldr	r1, [sp, #16]
 800798e:	9802      	ldr	r0, [sp, #8]
 8007990:	f000 fb88 	bl	80080a4 <_Bfree>
 8007994:	2e00      	cmp	r6, #0
 8007996:	d100      	bne.n	800799a <_dtoa_r+0x96a>
 8007998:	e69b      	b.n	80076d2 <_dtoa_r+0x6a2>
 800799a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <_dtoa_r+0x97c>
 80079a0:	42b3      	cmp	r3, r6
 80079a2:	d003      	beq.n	80079ac <_dtoa_r+0x97c>
 80079a4:	0019      	movs	r1, r3
 80079a6:	9802      	ldr	r0, [sp, #8]
 80079a8:	f000 fb7c 	bl	80080a4 <_Bfree>
 80079ac:	0031      	movs	r1, r6
 80079ae:	9802      	ldr	r0, [sp, #8]
 80079b0:	f000 fb78 	bl	80080a4 <_Bfree>
 80079b4:	e68d      	b.n	80076d2 <_dtoa_r+0x6a2>
 80079b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079b8:	9304      	str	r3, [sp, #16]
 80079ba:	001e      	movs	r6, r3
 80079bc:	e7e1      	b.n	8007982 <_dtoa_r+0x952>
 80079be:	2300      	movs	r3, #0
 80079c0:	e7fa      	b.n	80079b8 <_dtoa_r+0x988>
 80079c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079c4:	0037      	movs	r7, r6
 80079c6:	9304      	str	r3, [sp, #16]
 80079c8:	001e      	movs	r6, r3
 80079ca:	e58a      	b.n	80074e2 <_dtoa_r+0x4b2>
 80079cc:	40240000 	.word	0x40240000
 80079d0:	00000433 	.word	0x00000433
 80079d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d100      	bne.n	80079dc <_dtoa_r+0x9ac>
 80079da:	e0b2      	b.n	8007b42 <_dtoa_r+0xb12>
 80079dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079de:	930c      	str	r3, [sp, #48]	; 0x30
 80079e0:	2c00      	cmp	r4, #0
 80079e2:	dd05      	ble.n	80079f0 <_dtoa_r+0x9c0>
 80079e4:	0031      	movs	r1, r6
 80079e6:	0022      	movs	r2, r4
 80079e8:	9802      	ldr	r0, [sp, #8]
 80079ea:	f000 fce5 	bl	80083b8 <__lshift>
 80079ee:	0006      	movs	r6, r0
 80079f0:	0030      	movs	r0, r6
 80079f2:	2d00      	cmp	r5, #0
 80079f4:	d011      	beq.n	8007a1a <_dtoa_r+0x9ea>
 80079f6:	6871      	ldr	r1, [r6, #4]
 80079f8:	9802      	ldr	r0, [sp, #8]
 80079fa:	f000 fb1b 	bl	8008034 <_Balloc>
 80079fe:	0031      	movs	r1, r6
 8007a00:	0004      	movs	r4, r0
 8007a02:	6933      	ldr	r3, [r6, #16]
 8007a04:	310c      	adds	r1, #12
 8007a06:	1c9a      	adds	r2, r3, #2
 8007a08:	0092      	lsls	r2, r2, #2
 8007a0a:	300c      	adds	r0, #12
 8007a0c:	f000 fb09 	bl	8008022 <memcpy>
 8007a10:	2201      	movs	r2, #1
 8007a12:	0021      	movs	r1, r4
 8007a14:	9802      	ldr	r0, [sp, #8]
 8007a16:	f000 fccf 	bl	80083b8 <__lshift>
 8007a1a:	9609      	str	r6, [sp, #36]	; 0x24
 8007a1c:	0006      	movs	r6, r0
 8007a1e:	9b08      	ldr	r3, [sp, #32]
 8007a20:	930a      	str	r3, [sp, #40]	; 0x28
 8007a22:	9904      	ldr	r1, [sp, #16]
 8007a24:	9803      	ldr	r0, [sp, #12]
 8007a26:	f7ff fa7d 	bl	8006f24 <quorem>
 8007a2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a2c:	900d      	str	r0, [sp, #52]	; 0x34
 8007a2e:	0004      	movs	r4, r0
 8007a30:	9803      	ldr	r0, [sp, #12]
 8007a32:	f000 fd13 	bl	800845c <__mcmp>
 8007a36:	0032      	movs	r2, r6
 8007a38:	9010      	str	r0, [sp, #64]	; 0x40
 8007a3a:	9904      	ldr	r1, [sp, #16]
 8007a3c:	9802      	ldr	r0, [sp, #8]
 8007a3e:	f000 fd27 	bl	8008490 <__mdiff>
 8007a42:	2301      	movs	r3, #1
 8007a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a46:	68c3      	ldr	r3, [r0, #12]
 8007a48:	3430      	adds	r4, #48	; 0x30
 8007a4a:	0005      	movs	r5, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <_dtoa_r+0xa2a>
 8007a50:	0001      	movs	r1, r0
 8007a52:	9803      	ldr	r0, [sp, #12]
 8007a54:	f000 fd02 	bl	800845c <__mcmp>
 8007a58:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a5a:	0029      	movs	r1, r5
 8007a5c:	9802      	ldr	r0, [sp, #8]
 8007a5e:	f000 fb21 	bl	80080a4 <_Bfree>
 8007a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a66:	4313      	orrs	r3, r2
 8007a68:	d10e      	bne.n	8007a88 <_dtoa_r+0xa58>
 8007a6a:	9a06      	ldr	r2, [sp, #24]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	4213      	tst	r3, r2
 8007a70:	d10a      	bne.n	8007a88 <_dtoa_r+0xa58>
 8007a72:	2c39      	cmp	r4, #57	; 0x39
 8007a74:	d026      	beq.n	8007ac4 <_dtoa_r+0xa94>
 8007a76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dd01      	ble.n	8007a80 <_dtoa_r+0xa50>
 8007a7c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007a7e:	3431      	adds	r4, #49	; 0x31
 8007a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a82:	1c5d      	adds	r5, r3, #1
 8007a84:	701c      	strb	r4, [r3, #0]
 8007a86:	e781      	b.n	800798c <_dtoa_r+0x95c>
 8007a88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	db07      	blt.n	8007a9e <_dtoa_r+0xa6e>
 8007a8e:	001d      	movs	r5, r3
 8007a90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a92:	431d      	orrs	r5, r3
 8007a94:	d122      	bne.n	8007adc <_dtoa_r+0xaac>
 8007a96:	2301      	movs	r3, #1
 8007a98:	9a06      	ldr	r2, [sp, #24]
 8007a9a:	4213      	tst	r3, r2
 8007a9c:	d11e      	bne.n	8007adc <_dtoa_r+0xaac>
 8007a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dded      	ble.n	8007a80 <_dtoa_r+0xa50>
 8007aa4:	9903      	ldr	r1, [sp, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	9802      	ldr	r0, [sp, #8]
 8007aaa:	f000 fc85 	bl	80083b8 <__lshift>
 8007aae:	9904      	ldr	r1, [sp, #16]
 8007ab0:	9003      	str	r0, [sp, #12]
 8007ab2:	f000 fcd3 	bl	800845c <__mcmp>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	dc02      	bgt.n	8007ac0 <_dtoa_r+0xa90>
 8007aba:	d1e1      	bne.n	8007a80 <_dtoa_r+0xa50>
 8007abc:	07e3      	lsls	r3, r4, #31
 8007abe:	d5df      	bpl.n	8007a80 <_dtoa_r+0xa50>
 8007ac0:	2c39      	cmp	r4, #57	; 0x39
 8007ac2:	d1db      	bne.n	8007a7c <_dtoa_r+0xa4c>
 8007ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ac8:	1c5d      	adds	r5, r3, #1
 8007aca:	2339      	movs	r3, #57	; 0x39
 8007acc:	7013      	strb	r3, [r2, #0]
 8007ace:	1e6b      	subs	r3, r5, #1
 8007ad0:	781a      	ldrb	r2, [r3, #0]
 8007ad2:	2a39      	cmp	r2, #57	; 0x39
 8007ad4:	d067      	beq.n	8007ba6 <_dtoa_r+0xb76>
 8007ad6:	3201      	adds	r2, #1
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e757      	b.n	800798c <_dtoa_r+0x95c>
 8007adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ade:	1c5d      	adds	r5, r3, #1
 8007ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dd04      	ble.n	8007af0 <_dtoa_r+0xac0>
 8007ae6:	2c39      	cmp	r4, #57	; 0x39
 8007ae8:	d0ec      	beq.n	8007ac4 <_dtoa_r+0xa94>
 8007aea:	3401      	adds	r4, #1
 8007aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aee:	e7c9      	b.n	8007a84 <_dtoa_r+0xa54>
 8007af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007af4:	701c      	strb	r4, [r3, #0]
 8007af6:	9b08      	ldr	r3, [sp, #32]
 8007af8:	1aeb      	subs	r3, r5, r3
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d03e      	beq.n	8007b7c <_dtoa_r+0xb4c>
 8007afe:	2300      	movs	r3, #0
 8007b00:	220a      	movs	r2, #10
 8007b02:	9903      	ldr	r1, [sp, #12]
 8007b04:	9802      	ldr	r0, [sp, #8]
 8007b06:	f000 fae6 	bl	80080d6 <__multadd>
 8007b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0c:	9003      	str	r0, [sp, #12]
 8007b0e:	42b3      	cmp	r3, r6
 8007b10:	d109      	bne.n	8007b26 <_dtoa_r+0xaf6>
 8007b12:	2300      	movs	r3, #0
 8007b14:	220a      	movs	r2, #10
 8007b16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b18:	9802      	ldr	r0, [sp, #8]
 8007b1a:	f000 fadc 	bl	80080d6 <__multadd>
 8007b1e:	9009      	str	r0, [sp, #36]	; 0x24
 8007b20:	0006      	movs	r6, r0
 8007b22:	950a      	str	r5, [sp, #40]	; 0x28
 8007b24:	e77d      	b.n	8007a22 <_dtoa_r+0x9f2>
 8007b26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b28:	2300      	movs	r3, #0
 8007b2a:	220a      	movs	r2, #10
 8007b2c:	9802      	ldr	r0, [sp, #8]
 8007b2e:	f000 fad2 	bl	80080d6 <__multadd>
 8007b32:	2300      	movs	r3, #0
 8007b34:	9009      	str	r0, [sp, #36]	; 0x24
 8007b36:	220a      	movs	r2, #10
 8007b38:	0031      	movs	r1, r6
 8007b3a:	9802      	ldr	r0, [sp, #8]
 8007b3c:	f000 facb 	bl	80080d6 <__multadd>
 8007b40:	e7ee      	b.n	8007b20 <_dtoa_r+0xaf0>
 8007b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b44:	930c      	str	r3, [sp, #48]	; 0x30
 8007b46:	9b08      	ldr	r3, [sp, #32]
 8007b48:	9306      	str	r3, [sp, #24]
 8007b4a:	9904      	ldr	r1, [sp, #16]
 8007b4c:	9803      	ldr	r0, [sp, #12]
 8007b4e:	f7ff f9e9 	bl	8006f24 <quorem>
 8007b52:	9b06      	ldr	r3, [sp, #24]
 8007b54:	3030      	adds	r0, #48	; 0x30
 8007b56:	1c5d      	adds	r5, r3, #1
 8007b58:	7018      	strb	r0, [r3, #0]
 8007b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b5c:	9b08      	ldr	r3, [sp, #32]
 8007b5e:	0004      	movs	r4, r0
 8007b60:	1aeb      	subs	r3, r5, r3
 8007b62:	429a      	cmp	r2, r3
 8007b64:	dd08      	ble.n	8007b78 <_dtoa_r+0xb48>
 8007b66:	2300      	movs	r3, #0
 8007b68:	220a      	movs	r2, #10
 8007b6a:	9903      	ldr	r1, [sp, #12]
 8007b6c:	9802      	ldr	r0, [sp, #8]
 8007b6e:	f000 fab2 	bl	80080d6 <__multadd>
 8007b72:	9506      	str	r5, [sp, #24]
 8007b74:	9003      	str	r0, [sp, #12]
 8007b76:	e7e8      	b.n	8007b4a <_dtoa_r+0xb1a>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7c:	9903      	ldr	r1, [sp, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	9802      	ldr	r0, [sp, #8]
 8007b82:	f000 fc19 	bl	80083b8 <__lshift>
 8007b86:	9904      	ldr	r1, [sp, #16]
 8007b88:	9003      	str	r0, [sp, #12]
 8007b8a:	f000 fc67 	bl	800845c <__mcmp>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	dc9d      	bgt.n	8007ace <_dtoa_r+0xa9e>
 8007b92:	d101      	bne.n	8007b98 <_dtoa_r+0xb68>
 8007b94:	07e3      	lsls	r3, r4, #31
 8007b96:	d49a      	bmi.n	8007ace <_dtoa_r+0xa9e>
 8007b98:	1e6b      	subs	r3, r5, #1
 8007b9a:	781a      	ldrb	r2, [r3, #0]
 8007b9c:	2a30      	cmp	r2, #48	; 0x30
 8007b9e:	d000      	beq.n	8007ba2 <_dtoa_r+0xb72>
 8007ba0:	e6f4      	b.n	800798c <_dtoa_r+0x95c>
 8007ba2:	001d      	movs	r5, r3
 8007ba4:	e7f8      	b.n	8007b98 <_dtoa_r+0xb68>
 8007ba6:	9a08      	ldr	r2, [sp, #32]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d103      	bne.n	8007bb4 <_dtoa_r+0xb84>
 8007bac:	2331      	movs	r3, #49	; 0x31
 8007bae:	3701      	adds	r7, #1
 8007bb0:	7013      	strb	r3, [r2, #0]
 8007bb2:	e6eb      	b.n	800798c <_dtoa_r+0x95c>
 8007bb4:	001d      	movs	r5, r3
 8007bb6:	e78a      	b.n	8007ace <_dtoa_r+0xa9e>
 8007bb8:	4b0b      	ldr	r3, [pc, #44]	; (8007be8 <_dtoa_r+0xbb8>)
 8007bba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007bbc:	9308      	str	r3, [sp, #32]
 8007bbe:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <_dtoa_r+0xbbc>)
 8007bc0:	2a00      	cmp	r2, #0
 8007bc2:	d001      	beq.n	8007bc8 <_dtoa_r+0xb98>
 8007bc4:	f7ff fa77 	bl	80070b6 <_dtoa_r+0x86>
 8007bc8:	f7ff fa77 	bl	80070ba <_dtoa_r+0x8a>
 8007bcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	dc00      	bgt.n	8007bd4 <_dtoa_r+0xba4>
 8007bd2:	e621      	b.n	8007818 <_dtoa_r+0x7e8>
 8007bd4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	e635      	b.n	8007846 <_dtoa_r+0x816>
 8007bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dcb2      	bgt.n	8007b46 <_dtoa_r+0xb16>
 8007be0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	ddaf      	ble.n	8007b46 <_dtoa_r+0xb16>
 8007be6:	e6bc      	b.n	8007962 <_dtoa_r+0x932>
 8007be8:	080092f0 	.word	0x080092f0
 8007bec:	080092f8 	.word	0x080092f8

08007bf0 <__sflush_r>:
 8007bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bf2:	898a      	ldrh	r2, [r1, #12]
 8007bf4:	0005      	movs	r5, r0
 8007bf6:	000c      	movs	r4, r1
 8007bf8:	0713      	lsls	r3, r2, #28
 8007bfa:	d460      	bmi.n	8007cbe <__sflush_r+0xce>
 8007bfc:	684b      	ldr	r3, [r1, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	dc04      	bgt.n	8007c0c <__sflush_r+0x1c>
 8007c02:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dc01      	bgt.n	8007c0c <__sflush_r+0x1c>
 8007c08:	2000      	movs	r0, #0
 8007c0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c0c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007c0e:	2f00      	cmp	r7, #0
 8007c10:	d0fa      	beq.n	8007c08 <__sflush_r+0x18>
 8007c12:	2300      	movs	r3, #0
 8007c14:	682e      	ldr	r6, [r5, #0]
 8007c16:	602b      	str	r3, [r5, #0]
 8007c18:	2380      	movs	r3, #128	; 0x80
 8007c1a:	015b      	lsls	r3, r3, #5
 8007c1c:	6a21      	ldr	r1, [r4, #32]
 8007c1e:	401a      	ands	r2, r3
 8007c20:	d034      	beq.n	8007c8c <__sflush_r+0x9c>
 8007c22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	075b      	lsls	r3, r3, #29
 8007c28:	d506      	bpl.n	8007c38 <__sflush_r+0x48>
 8007c2a:	6863      	ldr	r3, [r4, #4]
 8007c2c:	1ac0      	subs	r0, r0, r3
 8007c2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <__sflush_r+0x48>
 8007c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c36:	1ac0      	subs	r0, r0, r3
 8007c38:	0002      	movs	r2, r0
 8007c3a:	6a21      	ldr	r1, [r4, #32]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	0028      	movs	r0, r5
 8007c40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007c42:	47b8      	blx	r7
 8007c44:	89a1      	ldrh	r1, [r4, #12]
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	d106      	bne.n	8007c58 <__sflush_r+0x68>
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	2b1d      	cmp	r3, #29
 8007c4e:	d830      	bhi.n	8007cb2 <__sflush_r+0xc2>
 8007c50:	4a2b      	ldr	r2, [pc, #172]	; (8007d00 <__sflush_r+0x110>)
 8007c52:	40da      	lsrs	r2, r3
 8007c54:	07d3      	lsls	r3, r2, #31
 8007c56:	d52c      	bpl.n	8007cb2 <__sflush_r+0xc2>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	6063      	str	r3, [r4, #4]
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	6023      	str	r3, [r4, #0]
 8007c60:	04cb      	lsls	r3, r1, #19
 8007c62:	d505      	bpl.n	8007c70 <__sflush_r+0x80>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <__sflush_r+0x7e>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d100      	bne.n	8007c70 <__sflush_r+0x80>
 8007c6e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c72:	602e      	str	r6, [r5, #0]
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d0c7      	beq.n	8007c08 <__sflush_r+0x18>
 8007c78:	0023      	movs	r3, r4
 8007c7a:	3344      	adds	r3, #68	; 0x44
 8007c7c:	4299      	cmp	r1, r3
 8007c7e:	d002      	beq.n	8007c86 <__sflush_r+0x96>
 8007c80:	0028      	movs	r0, r5
 8007c82:	f000 fccb 	bl	800861c <_free_r>
 8007c86:	2000      	movs	r0, #0
 8007c88:	6360      	str	r0, [r4, #52]	; 0x34
 8007c8a:	e7be      	b.n	8007c0a <__sflush_r+0x1a>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	0028      	movs	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d1c6      	bne.n	8007c24 <__sflush_r+0x34>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0c3      	beq.n	8007c24 <__sflush_r+0x34>
 8007c9c:	2b1d      	cmp	r3, #29
 8007c9e:	d001      	beq.n	8007ca4 <__sflush_r+0xb4>
 8007ca0:	2b16      	cmp	r3, #22
 8007ca2:	d101      	bne.n	8007ca8 <__sflush_r+0xb8>
 8007ca4:	602e      	str	r6, [r5, #0]
 8007ca6:	e7af      	b.n	8007c08 <__sflush_r+0x18>
 8007ca8:	2340      	movs	r3, #64	; 0x40
 8007caa:	89a2      	ldrh	r2, [r4, #12]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	e7ab      	b.n	8007c0a <__sflush_r+0x1a>
 8007cb2:	2340      	movs	r3, #64	; 0x40
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	81a3      	strh	r3, [r4, #12]
 8007cba:	4240      	negs	r0, r0
 8007cbc:	e7a5      	b.n	8007c0a <__sflush_r+0x1a>
 8007cbe:	690f      	ldr	r7, [r1, #16]
 8007cc0:	2f00      	cmp	r7, #0
 8007cc2:	d0a1      	beq.n	8007c08 <__sflush_r+0x18>
 8007cc4:	680b      	ldr	r3, [r1, #0]
 8007cc6:	600f      	str	r7, [r1, #0]
 8007cc8:	1bdb      	subs	r3, r3, r7
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	2300      	movs	r3, #0
 8007cce:	0792      	lsls	r2, r2, #30
 8007cd0:	d100      	bne.n	8007cd4 <__sflush_r+0xe4>
 8007cd2:	694b      	ldr	r3, [r1, #20]
 8007cd4:	60a3      	str	r3, [r4, #8]
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	dc00      	bgt.n	8007cde <__sflush_r+0xee>
 8007cdc:	e794      	b.n	8007c08 <__sflush_r+0x18>
 8007cde:	9b01      	ldr	r3, [sp, #4]
 8007ce0:	003a      	movs	r2, r7
 8007ce2:	6a21      	ldr	r1, [r4, #32]
 8007ce4:	0028      	movs	r0, r5
 8007ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ce8:	47b0      	blx	r6
 8007cea:	2800      	cmp	r0, #0
 8007cec:	dc03      	bgt.n	8007cf6 <__sflush_r+0x106>
 8007cee:	2340      	movs	r3, #64	; 0x40
 8007cf0:	89a2      	ldrh	r2, [r4, #12]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	e7df      	b.n	8007cb6 <__sflush_r+0xc6>
 8007cf6:	9b01      	ldr	r3, [sp, #4]
 8007cf8:	183f      	adds	r7, r7, r0
 8007cfa:	1a1b      	subs	r3, r3, r0
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	e7ea      	b.n	8007cd6 <__sflush_r+0xe6>
 8007d00:	20400001 	.word	0x20400001

08007d04 <_fflush_r>:
 8007d04:	690b      	ldr	r3, [r1, #16]
 8007d06:	b570      	push	{r4, r5, r6, lr}
 8007d08:	0005      	movs	r5, r0
 8007d0a:	000c      	movs	r4, r1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <_fflush_r+0x10>
 8007d10:	2000      	movs	r0, #0
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d004      	beq.n	8007d22 <_fflush_r+0x1e>
 8007d18:	6983      	ldr	r3, [r0, #24]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <_fflush_r+0x1e>
 8007d1e:	f000 f85f 	bl	8007de0 <__sinit>
 8007d22:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <_fflush_r+0x4c>)
 8007d24:	429c      	cmp	r4, r3
 8007d26:	d109      	bne.n	8007d3c <_fflush_r+0x38>
 8007d28:	686c      	ldr	r4, [r5, #4]
 8007d2a:	220c      	movs	r2, #12
 8007d2c:	5ea3      	ldrsh	r3, [r4, r2]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0ee      	beq.n	8007d10 <_fflush_r+0xc>
 8007d32:	0021      	movs	r1, r4
 8007d34:	0028      	movs	r0, r5
 8007d36:	f7ff ff5b 	bl	8007bf0 <__sflush_r>
 8007d3a:	e7ea      	b.n	8007d12 <_fflush_r+0xe>
 8007d3c:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <_fflush_r+0x50>)
 8007d3e:	429c      	cmp	r4, r3
 8007d40:	d101      	bne.n	8007d46 <_fflush_r+0x42>
 8007d42:	68ac      	ldr	r4, [r5, #8]
 8007d44:	e7f1      	b.n	8007d2a <_fflush_r+0x26>
 8007d46:	4b04      	ldr	r3, [pc, #16]	; (8007d58 <_fflush_r+0x54>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	d1ee      	bne.n	8007d2a <_fflush_r+0x26>
 8007d4c:	68ec      	ldr	r4, [r5, #12]
 8007d4e:	e7ec      	b.n	8007d2a <_fflush_r+0x26>
 8007d50:	08009320 	.word	0x08009320
 8007d54:	08009340 	.word	0x08009340
 8007d58:	08009300 	.word	0x08009300

08007d5c <std>:
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	b510      	push	{r4, lr}
 8007d60:	0004      	movs	r4, r0
 8007d62:	6003      	str	r3, [r0, #0]
 8007d64:	6043      	str	r3, [r0, #4]
 8007d66:	6083      	str	r3, [r0, #8]
 8007d68:	8181      	strh	r1, [r0, #12]
 8007d6a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d6c:	81c2      	strh	r2, [r0, #14]
 8007d6e:	6103      	str	r3, [r0, #16]
 8007d70:	6143      	str	r3, [r0, #20]
 8007d72:	6183      	str	r3, [r0, #24]
 8007d74:	0019      	movs	r1, r3
 8007d76:	2208      	movs	r2, #8
 8007d78:	305c      	adds	r0, #92	; 0x5c
 8007d7a:	f7fe fb09 	bl	8006390 <memset>
 8007d7e:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <std+0x38>)
 8007d80:	6224      	str	r4, [r4, #32]
 8007d82:	6263      	str	r3, [r4, #36]	; 0x24
 8007d84:	4b04      	ldr	r3, [pc, #16]	; (8007d98 <std+0x3c>)
 8007d86:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d88:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <std+0x40>)
 8007d8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d8c:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <std+0x44>)
 8007d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8007d90:	bd10      	pop	{r4, pc}
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	08008a79 	.word	0x08008a79
 8007d98:	08008aa1 	.word	0x08008aa1
 8007d9c:	08008ad9 	.word	0x08008ad9
 8007da0:	08008b05 	.word	0x08008b05

08007da4 <_cleanup_r>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	4902      	ldr	r1, [pc, #8]	; (8007db0 <_cleanup_r+0xc>)
 8007da8:	f000 f88c 	bl	8007ec4 <_fwalk_reent>
 8007dac:	bd10      	pop	{r4, pc}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	08007d05 	.word	0x08007d05

08007db4 <__sfmoreglue>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	2568      	movs	r5, #104	; 0x68
 8007db8:	1e4a      	subs	r2, r1, #1
 8007dba:	4355      	muls	r5, r2
 8007dbc:	000e      	movs	r6, r1
 8007dbe:	0029      	movs	r1, r5
 8007dc0:	3174      	adds	r1, #116	; 0x74
 8007dc2:	f000 fc75 	bl	80086b0 <_malloc_r>
 8007dc6:	1e04      	subs	r4, r0, #0
 8007dc8:	d008      	beq.n	8007ddc <__sfmoreglue+0x28>
 8007dca:	2100      	movs	r1, #0
 8007dcc:	002a      	movs	r2, r5
 8007dce:	6001      	str	r1, [r0, #0]
 8007dd0:	6046      	str	r6, [r0, #4]
 8007dd2:	300c      	adds	r0, #12
 8007dd4:	60a0      	str	r0, [r4, #8]
 8007dd6:	3268      	adds	r2, #104	; 0x68
 8007dd8:	f7fe fada 	bl	8006390 <memset>
 8007ddc:	0020      	movs	r0, r4
 8007dde:	bd70      	pop	{r4, r5, r6, pc}

08007de0 <__sinit>:
 8007de0:	6983      	ldr	r3, [r0, #24]
 8007de2:	b513      	push	{r0, r1, r4, lr}
 8007de4:	0004      	movs	r4, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d128      	bne.n	8007e3c <__sinit+0x5c>
 8007dea:	6483      	str	r3, [r0, #72]	; 0x48
 8007dec:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007dee:	6503      	str	r3, [r0, #80]	; 0x50
 8007df0:	4b13      	ldr	r3, [pc, #76]	; (8007e40 <__sinit+0x60>)
 8007df2:	4a14      	ldr	r2, [pc, #80]	; (8007e44 <__sinit+0x64>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6282      	str	r2, [r0, #40]	; 0x28
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	4298      	cmp	r0, r3
 8007dfc:	d101      	bne.n	8007e02 <__sinit+0x22>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	6183      	str	r3, [r0, #24]
 8007e02:	0020      	movs	r0, r4
 8007e04:	f000 f820 	bl	8007e48 <__sfp>
 8007e08:	6060      	str	r0, [r4, #4]
 8007e0a:	0020      	movs	r0, r4
 8007e0c:	f000 f81c 	bl	8007e48 <__sfp>
 8007e10:	60a0      	str	r0, [r4, #8]
 8007e12:	0020      	movs	r0, r4
 8007e14:	f000 f818 	bl	8007e48 <__sfp>
 8007e18:	2200      	movs	r2, #0
 8007e1a:	60e0      	str	r0, [r4, #12]
 8007e1c:	2104      	movs	r1, #4
 8007e1e:	6860      	ldr	r0, [r4, #4]
 8007e20:	f7ff ff9c 	bl	8007d5c <std>
 8007e24:	2201      	movs	r2, #1
 8007e26:	2109      	movs	r1, #9
 8007e28:	68a0      	ldr	r0, [r4, #8]
 8007e2a:	f7ff ff97 	bl	8007d5c <std>
 8007e2e:	2202      	movs	r2, #2
 8007e30:	2112      	movs	r1, #18
 8007e32:	68e0      	ldr	r0, [r4, #12]
 8007e34:	f7ff ff92 	bl	8007d5c <std>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	61a3      	str	r3, [r4, #24]
 8007e3c:	bd13      	pop	{r0, r1, r4, pc}
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	080092b8 	.word	0x080092b8
 8007e44:	08007da5 	.word	0x08007da5

08007e48 <__sfp>:
 8007e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4a:	4b1c      	ldr	r3, [pc, #112]	; (8007ebc <__sfp+0x74>)
 8007e4c:	0007      	movs	r7, r0
 8007e4e:	681e      	ldr	r6, [r3, #0]
 8007e50:	69b3      	ldr	r3, [r6, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d102      	bne.n	8007e5c <__sfp+0x14>
 8007e56:	0030      	movs	r0, r6
 8007e58:	f7ff ffc2 	bl	8007de0 <__sinit>
 8007e5c:	3648      	adds	r6, #72	; 0x48
 8007e5e:	68b4      	ldr	r4, [r6, #8]
 8007e60:	6873      	ldr	r3, [r6, #4]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	d504      	bpl.n	8007e70 <__sfp+0x28>
 8007e66:	6833      	ldr	r3, [r6, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d007      	beq.n	8007e7c <__sfp+0x34>
 8007e6c:	6836      	ldr	r6, [r6, #0]
 8007e6e:	e7f6      	b.n	8007e5e <__sfp+0x16>
 8007e70:	220c      	movs	r2, #12
 8007e72:	5ea5      	ldrsh	r5, [r4, r2]
 8007e74:	2d00      	cmp	r5, #0
 8007e76:	d00d      	beq.n	8007e94 <__sfp+0x4c>
 8007e78:	3468      	adds	r4, #104	; 0x68
 8007e7a:	e7f2      	b.n	8007e62 <__sfp+0x1a>
 8007e7c:	2104      	movs	r1, #4
 8007e7e:	0038      	movs	r0, r7
 8007e80:	f7ff ff98 	bl	8007db4 <__sfmoreglue>
 8007e84:	6030      	str	r0, [r6, #0]
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d1f0      	bne.n	8007e6c <__sfp+0x24>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	0004      	movs	r4, r0
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	0020      	movs	r0, r4
 8007e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e94:	0020      	movs	r0, r4
 8007e96:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <__sfp+0x78>)
 8007e98:	6665      	str	r5, [r4, #100]	; 0x64
 8007e9a:	6025      	str	r5, [r4, #0]
 8007e9c:	6065      	str	r5, [r4, #4]
 8007e9e:	60a5      	str	r5, [r4, #8]
 8007ea0:	60e3      	str	r3, [r4, #12]
 8007ea2:	6125      	str	r5, [r4, #16]
 8007ea4:	6165      	str	r5, [r4, #20]
 8007ea6:	61a5      	str	r5, [r4, #24]
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	0029      	movs	r1, r5
 8007eac:	305c      	adds	r0, #92	; 0x5c
 8007eae:	f7fe fa6f 	bl	8006390 <memset>
 8007eb2:	6365      	str	r5, [r4, #52]	; 0x34
 8007eb4:	63a5      	str	r5, [r4, #56]	; 0x38
 8007eb6:	64a5      	str	r5, [r4, #72]	; 0x48
 8007eb8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007eba:	e7e9      	b.n	8007e90 <__sfp+0x48>
 8007ebc:	080092b8 	.word	0x080092b8
 8007ec0:	ffff0001 	.word	0xffff0001

08007ec4 <_fwalk_reent>:
 8007ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ec6:	0004      	movs	r4, r0
 8007ec8:	0007      	movs	r7, r0
 8007eca:	2600      	movs	r6, #0
 8007ecc:	9101      	str	r1, [sp, #4]
 8007ece:	3448      	adds	r4, #72	; 0x48
 8007ed0:	2c00      	cmp	r4, #0
 8007ed2:	d101      	bne.n	8007ed8 <_fwalk_reent+0x14>
 8007ed4:	0030      	movs	r0, r6
 8007ed6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ed8:	6863      	ldr	r3, [r4, #4]
 8007eda:	68a5      	ldr	r5, [r4, #8]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	9b00      	ldr	r3, [sp, #0]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	d501      	bpl.n	8007eea <_fwalk_reent+0x26>
 8007ee6:	6824      	ldr	r4, [r4, #0]
 8007ee8:	e7f2      	b.n	8007ed0 <_fwalk_reent+0xc>
 8007eea:	89ab      	ldrh	r3, [r5, #12]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d908      	bls.n	8007f02 <_fwalk_reent+0x3e>
 8007ef0:	220e      	movs	r2, #14
 8007ef2:	5eab      	ldrsh	r3, [r5, r2]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	d004      	beq.n	8007f02 <_fwalk_reent+0x3e>
 8007ef8:	0029      	movs	r1, r5
 8007efa:	0038      	movs	r0, r7
 8007efc:	9b01      	ldr	r3, [sp, #4]
 8007efe:	4798      	blx	r3
 8007f00:	4306      	orrs	r6, r0
 8007f02:	3568      	adds	r5, #104	; 0x68
 8007f04:	e7eb      	b.n	8007ede <_fwalk_reent+0x1a>
	...

08007f08 <_localeconv_r>:
 8007f08:	4b03      	ldr	r3, [pc, #12]	; (8007f18 <_localeconv_r+0x10>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6a18      	ldr	r0, [r3, #32]
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d100      	bne.n	8007f14 <_localeconv_r+0xc>
 8007f12:	4802      	ldr	r0, [pc, #8]	; (8007f1c <_localeconv_r+0x14>)
 8007f14:	30f0      	adds	r0, #240	; 0xf0
 8007f16:	4770      	bx	lr
 8007f18:	20000004 	.word	0x20000004
 8007f1c:	20000068 	.word	0x20000068

08007f20 <__swhatbuf_r>:
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	000e      	movs	r6, r1
 8007f24:	001d      	movs	r5, r3
 8007f26:	230e      	movs	r3, #14
 8007f28:	5ec9      	ldrsh	r1, [r1, r3]
 8007f2a:	b096      	sub	sp, #88	; 0x58
 8007f2c:	0014      	movs	r4, r2
 8007f2e:	2900      	cmp	r1, #0
 8007f30:	da07      	bge.n	8007f42 <__swhatbuf_r+0x22>
 8007f32:	2300      	movs	r3, #0
 8007f34:	602b      	str	r3, [r5, #0]
 8007f36:	89b3      	ldrh	r3, [r6, #12]
 8007f38:	061b      	lsls	r3, r3, #24
 8007f3a:	d411      	bmi.n	8007f60 <__swhatbuf_r+0x40>
 8007f3c:	2380      	movs	r3, #128	; 0x80
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	e00f      	b.n	8007f62 <__swhatbuf_r+0x42>
 8007f42:	466a      	mov	r2, sp
 8007f44:	f000 fe0a 	bl	8008b5c <_fstat_r>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	dbf2      	blt.n	8007f32 <__swhatbuf_r+0x12>
 8007f4c:	22f0      	movs	r2, #240	; 0xf0
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	0212      	lsls	r2, r2, #8
 8007f52:	4013      	ands	r3, r2
 8007f54:	4a05      	ldr	r2, [pc, #20]	; (8007f6c <__swhatbuf_r+0x4c>)
 8007f56:	189b      	adds	r3, r3, r2
 8007f58:	425a      	negs	r2, r3
 8007f5a:	4153      	adcs	r3, r2
 8007f5c:	602b      	str	r3, [r5, #0]
 8007f5e:	e7ed      	b.n	8007f3c <__swhatbuf_r+0x1c>
 8007f60:	2340      	movs	r3, #64	; 0x40
 8007f62:	2000      	movs	r0, #0
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	b016      	add	sp, #88	; 0x58
 8007f68:	bd70      	pop	{r4, r5, r6, pc}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	ffffe000 	.word	0xffffe000

08007f70 <__smakebuf_r>:
 8007f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f72:	2602      	movs	r6, #2
 8007f74:	898b      	ldrh	r3, [r1, #12]
 8007f76:	0005      	movs	r5, r0
 8007f78:	000c      	movs	r4, r1
 8007f7a:	4233      	tst	r3, r6
 8007f7c:	d006      	beq.n	8007f8c <__smakebuf_r+0x1c>
 8007f7e:	0023      	movs	r3, r4
 8007f80:	3347      	adds	r3, #71	; 0x47
 8007f82:	6023      	str	r3, [r4, #0]
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	2301      	movs	r3, #1
 8007f88:	6163      	str	r3, [r4, #20]
 8007f8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007f8c:	ab01      	add	r3, sp, #4
 8007f8e:	466a      	mov	r2, sp
 8007f90:	f7ff ffc6 	bl	8007f20 <__swhatbuf_r>
 8007f94:	9900      	ldr	r1, [sp, #0]
 8007f96:	0007      	movs	r7, r0
 8007f98:	0028      	movs	r0, r5
 8007f9a:	f000 fb89 	bl	80086b0 <_malloc_r>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d108      	bne.n	8007fb4 <__smakebuf_r+0x44>
 8007fa2:	220c      	movs	r2, #12
 8007fa4:	5ea3      	ldrsh	r3, [r4, r2]
 8007fa6:	059a      	lsls	r2, r3, #22
 8007fa8:	d4ef      	bmi.n	8007f8a <__smakebuf_r+0x1a>
 8007faa:	2203      	movs	r2, #3
 8007fac:	4393      	bics	r3, r2
 8007fae:	431e      	orrs	r6, r3
 8007fb0:	81a6      	strh	r6, [r4, #12]
 8007fb2:	e7e4      	b.n	8007f7e <__smakebuf_r+0xe>
 8007fb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ff4 <__smakebuf_r+0x84>)
 8007fb6:	62ab      	str	r3, [r5, #40]	; 0x28
 8007fb8:	2380      	movs	r3, #128	; 0x80
 8007fba:	89a2      	ldrh	r2, [r4, #12]
 8007fbc:	6020      	str	r0, [r4, #0]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	9b00      	ldr	r3, [sp, #0]
 8007fc4:	6120      	str	r0, [r4, #16]
 8007fc6:	6163      	str	r3, [r4, #20]
 8007fc8:	9b01      	ldr	r3, [sp, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00d      	beq.n	8007fea <__smakebuf_r+0x7a>
 8007fce:	230e      	movs	r3, #14
 8007fd0:	5ee1      	ldrsh	r1, [r4, r3]
 8007fd2:	0028      	movs	r0, r5
 8007fd4:	f000 fdd4 	bl	8008b80 <_isatty_r>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d006      	beq.n	8007fea <__smakebuf_r+0x7a>
 8007fdc:	2203      	movs	r2, #3
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	4393      	bics	r3, r2
 8007fe2:	001a      	movs	r2, r3
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	89a0      	ldrh	r0, [r4, #12]
 8007fec:	4338      	orrs	r0, r7
 8007fee:	81a0      	strh	r0, [r4, #12]
 8007ff0:	e7cb      	b.n	8007f8a <__smakebuf_r+0x1a>
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	08007da5 	.word	0x08007da5

08007ff8 <malloc>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	4b03      	ldr	r3, [pc, #12]	; (8008008 <malloc+0x10>)
 8007ffc:	0001      	movs	r1, r0
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	f000 fb56 	bl	80086b0 <_malloc_r>
 8008004:	bd10      	pop	{r4, pc}
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	20000004 	.word	0x20000004

0800800c <memchr>:
 800800c:	b2c9      	uxtb	r1, r1
 800800e:	1882      	adds	r2, r0, r2
 8008010:	4290      	cmp	r0, r2
 8008012:	d101      	bne.n	8008018 <memchr+0xc>
 8008014:	2000      	movs	r0, #0
 8008016:	4770      	bx	lr
 8008018:	7803      	ldrb	r3, [r0, #0]
 800801a:	428b      	cmp	r3, r1
 800801c:	d0fb      	beq.n	8008016 <memchr+0xa>
 800801e:	3001      	adds	r0, #1
 8008020:	e7f6      	b.n	8008010 <memchr+0x4>

08008022 <memcpy>:
 8008022:	2300      	movs	r3, #0
 8008024:	b510      	push	{r4, lr}
 8008026:	429a      	cmp	r2, r3
 8008028:	d100      	bne.n	800802c <memcpy+0xa>
 800802a:	bd10      	pop	{r4, pc}
 800802c:	5ccc      	ldrb	r4, [r1, r3]
 800802e:	54c4      	strb	r4, [r0, r3]
 8008030:	3301      	adds	r3, #1
 8008032:	e7f8      	b.n	8008026 <memcpy+0x4>

08008034 <_Balloc>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008038:	0004      	movs	r4, r0
 800803a:	000d      	movs	r5, r1
 800803c:	2e00      	cmp	r6, #0
 800803e:	d107      	bne.n	8008050 <_Balloc+0x1c>
 8008040:	2010      	movs	r0, #16
 8008042:	f7ff ffd9 	bl	8007ff8 <malloc>
 8008046:	6260      	str	r0, [r4, #36]	; 0x24
 8008048:	6046      	str	r6, [r0, #4]
 800804a:	6086      	str	r6, [r0, #8]
 800804c:	6006      	str	r6, [r0, #0]
 800804e:	60c6      	str	r6, [r0, #12]
 8008050:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008052:	68f3      	ldr	r3, [r6, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d013      	beq.n	8008080 <_Balloc+0x4c>
 8008058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800805a:	00aa      	lsls	r2, r5, #2
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	189b      	adds	r3, r3, r2
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	2800      	cmp	r0, #0
 8008064:	d118      	bne.n	8008098 <_Balloc+0x64>
 8008066:	2101      	movs	r1, #1
 8008068:	000e      	movs	r6, r1
 800806a:	40ae      	lsls	r6, r5
 800806c:	1d72      	adds	r2, r6, #5
 800806e:	0092      	lsls	r2, r2, #2
 8008070:	0020      	movs	r0, r4
 8008072:	f000 fac5 	bl	8008600 <_calloc_r>
 8008076:	2800      	cmp	r0, #0
 8008078:	d00c      	beq.n	8008094 <_Balloc+0x60>
 800807a:	6045      	str	r5, [r0, #4]
 800807c:	6086      	str	r6, [r0, #8]
 800807e:	e00d      	b.n	800809c <_Balloc+0x68>
 8008080:	2221      	movs	r2, #33	; 0x21
 8008082:	2104      	movs	r1, #4
 8008084:	0020      	movs	r0, r4
 8008086:	f000 fabb 	bl	8008600 <_calloc_r>
 800808a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800808c:	60f0      	str	r0, [r6, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e1      	bne.n	8008058 <_Balloc+0x24>
 8008094:	2000      	movs	r0, #0
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	6802      	ldr	r2, [r0, #0]
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	2300      	movs	r3, #0
 800809e:	6103      	str	r3, [r0, #16]
 80080a0:	60c3      	str	r3, [r0, #12]
 80080a2:	e7f8      	b.n	8008096 <_Balloc+0x62>

080080a4 <_Bfree>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80080a8:	0006      	movs	r6, r0
 80080aa:	000d      	movs	r5, r1
 80080ac:	2c00      	cmp	r4, #0
 80080ae:	d107      	bne.n	80080c0 <_Bfree+0x1c>
 80080b0:	2010      	movs	r0, #16
 80080b2:	f7ff ffa1 	bl	8007ff8 <malloc>
 80080b6:	6270      	str	r0, [r6, #36]	; 0x24
 80080b8:	6044      	str	r4, [r0, #4]
 80080ba:	6084      	str	r4, [r0, #8]
 80080bc:	6004      	str	r4, [r0, #0]
 80080be:	60c4      	str	r4, [r0, #12]
 80080c0:	2d00      	cmp	r5, #0
 80080c2:	d007      	beq.n	80080d4 <_Bfree+0x30>
 80080c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80080c6:	686a      	ldr	r2, [r5, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	0092      	lsls	r2, r2, #2
 80080cc:	189b      	adds	r3, r3, r2
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	601d      	str	r5, [r3, #0]
 80080d4:	bd70      	pop	{r4, r5, r6, pc}

080080d6 <__multadd>:
 80080d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d8:	001e      	movs	r6, r3
 80080da:	2314      	movs	r3, #20
 80080dc:	469c      	mov	ip, r3
 80080de:	0007      	movs	r7, r0
 80080e0:	000c      	movs	r4, r1
 80080e2:	2000      	movs	r0, #0
 80080e4:	690d      	ldr	r5, [r1, #16]
 80080e6:	448c      	add	ip, r1
 80080e8:	4663      	mov	r3, ip
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3001      	adds	r0, #1
 80080ee:	b299      	uxth	r1, r3
 80080f0:	4663      	mov	r3, ip
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4351      	muls	r1, r2
 80080f6:	0c1b      	lsrs	r3, r3, #16
 80080f8:	4353      	muls	r3, r2
 80080fa:	1989      	adds	r1, r1, r6
 80080fc:	0c0e      	lsrs	r6, r1, #16
 80080fe:	199b      	adds	r3, r3, r6
 8008100:	b289      	uxth	r1, r1
 8008102:	0c1e      	lsrs	r6, r3, #16
 8008104:	041b      	lsls	r3, r3, #16
 8008106:	185b      	adds	r3, r3, r1
 8008108:	4661      	mov	r1, ip
 800810a:	c108      	stmia	r1!, {r3}
 800810c:	468c      	mov	ip, r1
 800810e:	4285      	cmp	r5, r0
 8008110:	dcea      	bgt.n	80080e8 <__multadd+0x12>
 8008112:	2e00      	cmp	r6, #0
 8008114:	d01b      	beq.n	800814e <__multadd+0x78>
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	42ab      	cmp	r3, r5
 800811a:	dc12      	bgt.n	8008142 <__multadd+0x6c>
 800811c:	6863      	ldr	r3, [r4, #4]
 800811e:	0038      	movs	r0, r7
 8008120:	1c59      	adds	r1, r3, #1
 8008122:	f7ff ff87 	bl	8008034 <_Balloc>
 8008126:	0021      	movs	r1, r4
 8008128:	6923      	ldr	r3, [r4, #16]
 800812a:	9001      	str	r0, [sp, #4]
 800812c:	1c9a      	adds	r2, r3, #2
 800812e:	0092      	lsls	r2, r2, #2
 8008130:	310c      	adds	r1, #12
 8008132:	300c      	adds	r0, #12
 8008134:	f7ff ff75 	bl	8008022 <memcpy>
 8008138:	0021      	movs	r1, r4
 800813a:	0038      	movs	r0, r7
 800813c:	f7ff ffb2 	bl	80080a4 <_Bfree>
 8008140:	9c01      	ldr	r4, [sp, #4]
 8008142:	1d2b      	adds	r3, r5, #4
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	18e3      	adds	r3, r4, r3
 8008148:	3501      	adds	r5, #1
 800814a:	605e      	str	r6, [r3, #4]
 800814c:	6125      	str	r5, [r4, #16]
 800814e:	0020      	movs	r0, r4
 8008150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08008152 <__hi0bits>:
 8008152:	0003      	movs	r3, r0
 8008154:	0c02      	lsrs	r2, r0, #16
 8008156:	2000      	movs	r0, #0
 8008158:	4282      	cmp	r2, r0
 800815a:	d101      	bne.n	8008160 <__hi0bits+0xe>
 800815c:	041b      	lsls	r3, r3, #16
 800815e:	3010      	adds	r0, #16
 8008160:	0e1a      	lsrs	r2, r3, #24
 8008162:	d101      	bne.n	8008168 <__hi0bits+0x16>
 8008164:	3008      	adds	r0, #8
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	0f1a      	lsrs	r2, r3, #28
 800816a:	d101      	bne.n	8008170 <__hi0bits+0x1e>
 800816c:	3004      	adds	r0, #4
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	0f9a      	lsrs	r2, r3, #30
 8008172:	d101      	bne.n	8008178 <__hi0bits+0x26>
 8008174:	3002      	adds	r0, #2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	2b00      	cmp	r3, #0
 800817a:	db03      	blt.n	8008184 <__hi0bits+0x32>
 800817c:	3001      	adds	r0, #1
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	d400      	bmi.n	8008184 <__hi0bits+0x32>
 8008182:	2020      	movs	r0, #32
 8008184:	4770      	bx	lr

08008186 <__lo0bits>:
 8008186:	2207      	movs	r2, #7
 8008188:	6803      	ldr	r3, [r0, #0]
 800818a:	b510      	push	{r4, lr}
 800818c:	0001      	movs	r1, r0
 800818e:	401a      	ands	r2, r3
 8008190:	d00d      	beq.n	80081ae <__lo0bits+0x28>
 8008192:	2401      	movs	r4, #1
 8008194:	2000      	movs	r0, #0
 8008196:	4223      	tst	r3, r4
 8008198:	d105      	bne.n	80081a6 <__lo0bits+0x20>
 800819a:	3002      	adds	r0, #2
 800819c:	4203      	tst	r3, r0
 800819e:	d003      	beq.n	80081a8 <__lo0bits+0x22>
 80081a0:	40e3      	lsrs	r3, r4
 80081a2:	0020      	movs	r0, r4
 80081a4:	600b      	str	r3, [r1, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	089b      	lsrs	r3, r3, #2
 80081aa:	600b      	str	r3, [r1, #0]
 80081ac:	e7fb      	b.n	80081a6 <__lo0bits+0x20>
 80081ae:	b29c      	uxth	r4, r3
 80081b0:	0010      	movs	r0, r2
 80081b2:	2c00      	cmp	r4, #0
 80081b4:	d101      	bne.n	80081ba <__lo0bits+0x34>
 80081b6:	2010      	movs	r0, #16
 80081b8:	0c1b      	lsrs	r3, r3, #16
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	2a00      	cmp	r2, #0
 80081be:	d101      	bne.n	80081c4 <__lo0bits+0x3e>
 80081c0:	3008      	adds	r0, #8
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	071a      	lsls	r2, r3, #28
 80081c6:	d101      	bne.n	80081cc <__lo0bits+0x46>
 80081c8:	3004      	adds	r0, #4
 80081ca:	091b      	lsrs	r3, r3, #4
 80081cc:	079a      	lsls	r2, r3, #30
 80081ce:	d101      	bne.n	80081d4 <__lo0bits+0x4e>
 80081d0:	3002      	adds	r0, #2
 80081d2:	089b      	lsrs	r3, r3, #2
 80081d4:	07da      	lsls	r2, r3, #31
 80081d6:	d4e8      	bmi.n	80081aa <__lo0bits+0x24>
 80081d8:	085b      	lsrs	r3, r3, #1
 80081da:	d001      	beq.n	80081e0 <__lo0bits+0x5a>
 80081dc:	3001      	adds	r0, #1
 80081de:	e7e4      	b.n	80081aa <__lo0bits+0x24>
 80081e0:	2020      	movs	r0, #32
 80081e2:	e7e0      	b.n	80081a6 <__lo0bits+0x20>

080081e4 <__i2b>:
 80081e4:	b510      	push	{r4, lr}
 80081e6:	000c      	movs	r4, r1
 80081e8:	2101      	movs	r1, #1
 80081ea:	f7ff ff23 	bl	8008034 <_Balloc>
 80081ee:	2301      	movs	r3, #1
 80081f0:	6144      	str	r4, [r0, #20]
 80081f2:	6103      	str	r3, [r0, #16]
 80081f4:	bd10      	pop	{r4, pc}

080081f6 <__multiply>:
 80081f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f8:	690b      	ldr	r3, [r1, #16]
 80081fa:	0014      	movs	r4, r2
 80081fc:	6912      	ldr	r2, [r2, #16]
 80081fe:	b089      	sub	sp, #36	; 0x24
 8008200:	000d      	movs	r5, r1
 8008202:	4293      	cmp	r3, r2
 8008204:	da01      	bge.n	800820a <__multiply+0x14>
 8008206:	0025      	movs	r5, r4
 8008208:	000c      	movs	r4, r1
 800820a:	692f      	ldr	r7, [r5, #16]
 800820c:	6926      	ldr	r6, [r4, #16]
 800820e:	6869      	ldr	r1, [r5, #4]
 8008210:	19bb      	adds	r3, r7, r6
 8008212:	9302      	str	r3, [sp, #8]
 8008214:	68ab      	ldr	r3, [r5, #8]
 8008216:	19ba      	adds	r2, r7, r6
 8008218:	4293      	cmp	r3, r2
 800821a:	da00      	bge.n	800821e <__multiply+0x28>
 800821c:	3101      	adds	r1, #1
 800821e:	f7ff ff09 	bl	8008034 <_Balloc>
 8008222:	0002      	movs	r2, r0
 8008224:	19bb      	adds	r3, r7, r6
 8008226:	3214      	adds	r2, #20
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	18d3      	adds	r3, r2, r3
 800822c:	469c      	mov	ip, r3
 800822e:	2100      	movs	r1, #0
 8008230:	0013      	movs	r3, r2
 8008232:	9004      	str	r0, [sp, #16]
 8008234:	4563      	cmp	r3, ip
 8008236:	d31d      	bcc.n	8008274 <__multiply+0x7e>
 8008238:	3514      	adds	r5, #20
 800823a:	00bf      	lsls	r7, r7, #2
 800823c:	19eb      	adds	r3, r5, r7
 800823e:	3414      	adds	r4, #20
 8008240:	00b6      	lsls	r6, r6, #2
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	19a3      	adds	r3, r4, r6
 8008246:	9503      	str	r5, [sp, #12]
 8008248:	9401      	str	r4, [sp, #4]
 800824a:	9307      	str	r3, [sp, #28]
 800824c:	9b07      	ldr	r3, [sp, #28]
 800824e:	9901      	ldr	r1, [sp, #4]
 8008250:	4299      	cmp	r1, r3
 8008252:	d311      	bcc.n	8008278 <__multiply+0x82>
 8008254:	9b02      	ldr	r3, [sp, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	dd06      	ble.n	8008268 <__multiply+0x72>
 800825a:	2304      	movs	r3, #4
 800825c:	425b      	negs	r3, r3
 800825e:	449c      	add	ip, r3
 8008260:	4663      	mov	r3, ip
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d051      	beq.n	800830c <__multiply+0x116>
 8008268:	9b04      	ldr	r3, [sp, #16]
 800826a:	9a02      	ldr	r2, [sp, #8]
 800826c:	0018      	movs	r0, r3
 800826e:	611a      	str	r2, [r3, #16]
 8008270:	b009      	add	sp, #36	; 0x24
 8008272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008274:	c302      	stmia	r3!, {r1}
 8008276:	e7dd      	b.n	8008234 <__multiply+0x3e>
 8008278:	9b01      	ldr	r3, [sp, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	b298      	uxth	r0, r3
 800827e:	2800      	cmp	r0, #0
 8008280:	d01c      	beq.n	80082bc <__multiply+0xc6>
 8008282:	0015      	movs	r5, r2
 8008284:	2600      	movs	r6, #0
 8008286:	9f03      	ldr	r7, [sp, #12]
 8008288:	cf02      	ldmia	r7!, {r1}
 800828a:	682c      	ldr	r4, [r5, #0]
 800828c:	b28b      	uxth	r3, r1
 800828e:	4343      	muls	r3, r0
 8008290:	0c09      	lsrs	r1, r1, #16
 8008292:	4341      	muls	r1, r0
 8008294:	b2a4      	uxth	r4, r4
 8008296:	191b      	adds	r3, r3, r4
 8008298:	199b      	adds	r3, r3, r6
 800829a:	000e      	movs	r6, r1
 800829c:	6829      	ldr	r1, [r5, #0]
 800829e:	9506      	str	r5, [sp, #24]
 80082a0:	0c09      	lsrs	r1, r1, #16
 80082a2:	1871      	adds	r1, r6, r1
 80082a4:	0c1e      	lsrs	r6, r3, #16
 80082a6:	1989      	adds	r1, r1, r6
 80082a8:	0c0e      	lsrs	r6, r1, #16
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	0409      	lsls	r1, r1, #16
 80082ae:	430b      	orrs	r3, r1
 80082b0:	c508      	stmia	r5!, {r3}
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	42bb      	cmp	r3, r7
 80082b6:	d8e7      	bhi.n	8008288 <__multiply+0x92>
 80082b8:	9b06      	ldr	r3, [sp, #24]
 80082ba:	605e      	str	r6, [r3, #4]
 80082bc:	9b01      	ldr	r3, [sp, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	0c1d      	lsrs	r5, r3, #16
 80082c2:	d01e      	beq.n	8008302 <__multiply+0x10c>
 80082c4:	0010      	movs	r0, r2
 80082c6:	2700      	movs	r7, #0
 80082c8:	6813      	ldr	r3, [r2, #0]
 80082ca:	9e03      	ldr	r6, [sp, #12]
 80082cc:	6831      	ldr	r1, [r6, #0]
 80082ce:	6804      	ldr	r4, [r0, #0]
 80082d0:	b289      	uxth	r1, r1
 80082d2:	4369      	muls	r1, r5
 80082d4:	0c24      	lsrs	r4, r4, #16
 80082d6:	1909      	adds	r1, r1, r4
 80082d8:	19c9      	adds	r1, r1, r7
 80082da:	040f      	lsls	r7, r1, #16
 80082dc:	b29b      	uxth	r3, r3
 80082de:	433b      	orrs	r3, r7
 80082e0:	6003      	str	r3, [r0, #0]
 80082e2:	ce80      	ldmia	r6!, {r7}
 80082e4:	6843      	ldr	r3, [r0, #4]
 80082e6:	0c3f      	lsrs	r7, r7, #16
 80082e8:	436f      	muls	r7, r5
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	18fb      	adds	r3, r7, r3
 80082ee:	0c09      	lsrs	r1, r1, #16
 80082f0:	185b      	adds	r3, r3, r1
 80082f2:	9905      	ldr	r1, [sp, #20]
 80082f4:	9006      	str	r0, [sp, #24]
 80082f6:	0c1f      	lsrs	r7, r3, #16
 80082f8:	3004      	adds	r0, #4
 80082fa:	42b1      	cmp	r1, r6
 80082fc:	d8e6      	bhi.n	80082cc <__multiply+0xd6>
 80082fe:	9906      	ldr	r1, [sp, #24]
 8008300:	604b      	str	r3, [r1, #4]
 8008302:	9b01      	ldr	r3, [sp, #4]
 8008304:	3204      	adds	r2, #4
 8008306:	3304      	adds	r3, #4
 8008308:	9301      	str	r3, [sp, #4]
 800830a:	e79f      	b.n	800824c <__multiply+0x56>
 800830c:	9b02      	ldr	r3, [sp, #8]
 800830e:	3b01      	subs	r3, #1
 8008310:	9302      	str	r3, [sp, #8]
 8008312:	e79f      	b.n	8008254 <__multiply+0x5e>

08008314 <__pow5mult>:
 8008314:	2303      	movs	r3, #3
 8008316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008318:	4013      	ands	r3, r2
 800831a:	0005      	movs	r5, r0
 800831c:	000e      	movs	r6, r1
 800831e:	0014      	movs	r4, r2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d008      	beq.n	8008336 <__pow5mult+0x22>
 8008324:	4922      	ldr	r1, [pc, #136]	; (80083b0 <__pow5mult+0x9c>)
 8008326:	3b01      	subs	r3, #1
 8008328:	009a      	lsls	r2, r3, #2
 800832a:	5852      	ldr	r2, [r2, r1]
 800832c:	2300      	movs	r3, #0
 800832e:	0031      	movs	r1, r6
 8008330:	f7ff fed1 	bl	80080d6 <__multadd>
 8008334:	0006      	movs	r6, r0
 8008336:	10a3      	asrs	r3, r4, #2
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	d036      	beq.n	80083aa <__pow5mult+0x96>
 800833c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800833e:	2c00      	cmp	r4, #0
 8008340:	d107      	bne.n	8008352 <__pow5mult+0x3e>
 8008342:	2010      	movs	r0, #16
 8008344:	f7ff fe58 	bl	8007ff8 <malloc>
 8008348:	6268      	str	r0, [r5, #36]	; 0x24
 800834a:	6044      	str	r4, [r0, #4]
 800834c:	6084      	str	r4, [r0, #8]
 800834e:	6004      	str	r4, [r0, #0]
 8008350:	60c4      	str	r4, [r0, #12]
 8008352:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008354:	68bc      	ldr	r4, [r7, #8]
 8008356:	2c00      	cmp	r4, #0
 8008358:	d107      	bne.n	800836a <__pow5mult+0x56>
 800835a:	4916      	ldr	r1, [pc, #88]	; (80083b4 <__pow5mult+0xa0>)
 800835c:	0028      	movs	r0, r5
 800835e:	f7ff ff41 	bl	80081e4 <__i2b>
 8008362:	2300      	movs	r3, #0
 8008364:	0004      	movs	r4, r0
 8008366:	60b8      	str	r0, [r7, #8]
 8008368:	6003      	str	r3, [r0, #0]
 800836a:	2201      	movs	r2, #1
 800836c:	9b01      	ldr	r3, [sp, #4]
 800836e:	4213      	tst	r3, r2
 8008370:	d00a      	beq.n	8008388 <__pow5mult+0x74>
 8008372:	0031      	movs	r1, r6
 8008374:	0022      	movs	r2, r4
 8008376:	0028      	movs	r0, r5
 8008378:	f7ff ff3d 	bl	80081f6 <__multiply>
 800837c:	0007      	movs	r7, r0
 800837e:	0031      	movs	r1, r6
 8008380:	0028      	movs	r0, r5
 8008382:	f7ff fe8f 	bl	80080a4 <_Bfree>
 8008386:	003e      	movs	r6, r7
 8008388:	9b01      	ldr	r3, [sp, #4]
 800838a:	105b      	asrs	r3, r3, #1
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	d00c      	beq.n	80083aa <__pow5mult+0x96>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	2800      	cmp	r0, #0
 8008394:	d107      	bne.n	80083a6 <__pow5mult+0x92>
 8008396:	0022      	movs	r2, r4
 8008398:	0021      	movs	r1, r4
 800839a:	0028      	movs	r0, r5
 800839c:	f7ff ff2b 	bl	80081f6 <__multiply>
 80083a0:	2300      	movs	r3, #0
 80083a2:	6020      	str	r0, [r4, #0]
 80083a4:	6003      	str	r3, [r0, #0]
 80083a6:	0004      	movs	r4, r0
 80083a8:	e7df      	b.n	800836a <__pow5mult+0x56>
 80083aa:	0030      	movs	r0, r6
 80083ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083ae:	46c0      	nop			; (mov r8, r8)
 80083b0:	08009450 	.word	0x08009450
 80083b4:	00000271 	.word	0x00000271

080083b8 <__lshift>:
 80083b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ba:	000d      	movs	r5, r1
 80083bc:	0017      	movs	r7, r2
 80083be:	692b      	ldr	r3, [r5, #16]
 80083c0:	1154      	asrs	r4, r2, #5
 80083c2:	b085      	sub	sp, #20
 80083c4:	18e3      	adds	r3, r4, r3
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	3301      	adds	r3, #1
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	6849      	ldr	r1, [r1, #4]
 80083ce:	68ab      	ldr	r3, [r5, #8]
 80083d0:	9002      	str	r0, [sp, #8]
 80083d2:	9a00      	ldr	r2, [sp, #0]
 80083d4:	4293      	cmp	r3, r2
 80083d6:	db35      	blt.n	8008444 <__lshift+0x8c>
 80083d8:	9802      	ldr	r0, [sp, #8]
 80083da:	f7ff fe2b 	bl	8008034 <_Balloc>
 80083de:	2300      	movs	r3, #0
 80083e0:	0002      	movs	r2, r0
 80083e2:	0006      	movs	r6, r0
 80083e4:	0019      	movs	r1, r3
 80083e6:	3214      	adds	r2, #20
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	db2e      	blt.n	800844a <__lshift+0x92>
 80083ec:	43e3      	mvns	r3, r4
 80083ee:	17db      	asrs	r3, r3, #31
 80083f0:	401c      	ands	r4, r3
 80083f2:	002b      	movs	r3, r5
 80083f4:	00a4      	lsls	r4, r4, #2
 80083f6:	1914      	adds	r4, r2, r4
 80083f8:	692a      	ldr	r2, [r5, #16]
 80083fa:	3314      	adds	r3, #20
 80083fc:	0092      	lsls	r2, r2, #2
 80083fe:	189a      	adds	r2, r3, r2
 8008400:	4694      	mov	ip, r2
 8008402:	221f      	movs	r2, #31
 8008404:	4017      	ands	r7, r2
 8008406:	d024      	beq.n	8008452 <__lshift+0x9a>
 8008408:	3201      	adds	r2, #1
 800840a:	1bd2      	subs	r2, r2, r7
 800840c:	9203      	str	r2, [sp, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	6819      	ldr	r1, [r3, #0]
 8008412:	0020      	movs	r0, r4
 8008414:	40b9      	lsls	r1, r7
 8008416:	430a      	orrs	r2, r1
 8008418:	c404      	stmia	r4!, {r2}
 800841a:	cb04      	ldmia	r3!, {r2}
 800841c:	9903      	ldr	r1, [sp, #12]
 800841e:	40ca      	lsrs	r2, r1
 8008420:	459c      	cmp	ip, r3
 8008422:	d8f5      	bhi.n	8008410 <__lshift+0x58>
 8008424:	6042      	str	r2, [r0, #4]
 8008426:	2a00      	cmp	r2, #0
 8008428:	d002      	beq.n	8008430 <__lshift+0x78>
 800842a:	9b01      	ldr	r3, [sp, #4]
 800842c:	3302      	adds	r3, #2
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	9b00      	ldr	r3, [sp, #0]
 8008432:	9802      	ldr	r0, [sp, #8]
 8008434:	3b01      	subs	r3, #1
 8008436:	6133      	str	r3, [r6, #16]
 8008438:	0029      	movs	r1, r5
 800843a:	f7ff fe33 	bl	80080a4 <_Bfree>
 800843e:	0030      	movs	r0, r6
 8008440:	b005      	add	sp, #20
 8008442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008444:	3101      	adds	r1, #1
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	e7c3      	b.n	80083d2 <__lshift+0x1a>
 800844a:	0098      	lsls	r0, r3, #2
 800844c:	5011      	str	r1, [r2, r0]
 800844e:	3301      	adds	r3, #1
 8008450:	e7ca      	b.n	80083e8 <__lshift+0x30>
 8008452:	cb04      	ldmia	r3!, {r2}
 8008454:	c404      	stmia	r4!, {r2}
 8008456:	459c      	cmp	ip, r3
 8008458:	d8fb      	bhi.n	8008452 <__lshift+0x9a>
 800845a:	e7e9      	b.n	8008430 <__lshift+0x78>

0800845c <__mcmp>:
 800845c:	690a      	ldr	r2, [r1, #16]
 800845e:	6903      	ldr	r3, [r0, #16]
 8008460:	b530      	push	{r4, r5, lr}
 8008462:	1a9b      	subs	r3, r3, r2
 8008464:	d10d      	bne.n	8008482 <__mcmp+0x26>
 8008466:	0092      	lsls	r2, r2, #2
 8008468:	3014      	adds	r0, #20
 800846a:	3114      	adds	r1, #20
 800846c:	1884      	adds	r4, r0, r2
 800846e:	1889      	adds	r1, r1, r2
 8008470:	3c04      	subs	r4, #4
 8008472:	3904      	subs	r1, #4
 8008474:	6825      	ldr	r5, [r4, #0]
 8008476:	680a      	ldr	r2, [r1, #0]
 8008478:	4295      	cmp	r5, r2
 800847a:	d004      	beq.n	8008486 <__mcmp+0x2a>
 800847c:	2301      	movs	r3, #1
 800847e:	4295      	cmp	r5, r2
 8008480:	d304      	bcc.n	800848c <__mcmp+0x30>
 8008482:	0018      	movs	r0, r3
 8008484:	bd30      	pop	{r4, r5, pc}
 8008486:	42a0      	cmp	r0, r4
 8008488:	d3f2      	bcc.n	8008470 <__mcmp+0x14>
 800848a:	e7fa      	b.n	8008482 <__mcmp+0x26>
 800848c:	425b      	negs	r3, r3
 800848e:	e7f8      	b.n	8008482 <__mcmp+0x26>

08008490 <__mdiff>:
 8008490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008492:	000d      	movs	r5, r1
 8008494:	b085      	sub	sp, #20
 8008496:	0007      	movs	r7, r0
 8008498:	0011      	movs	r1, r2
 800849a:	0028      	movs	r0, r5
 800849c:	0014      	movs	r4, r2
 800849e:	f7ff ffdd 	bl	800845c <__mcmp>
 80084a2:	1e06      	subs	r6, r0, #0
 80084a4:	d108      	bne.n	80084b8 <__mdiff+0x28>
 80084a6:	0001      	movs	r1, r0
 80084a8:	0038      	movs	r0, r7
 80084aa:	f7ff fdc3 	bl	8008034 <_Balloc>
 80084ae:	2301      	movs	r3, #1
 80084b0:	6146      	str	r6, [r0, #20]
 80084b2:	6103      	str	r3, [r0, #16]
 80084b4:	b005      	add	sp, #20
 80084b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b8:	2301      	movs	r3, #1
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	2800      	cmp	r0, #0
 80084be:	db04      	blt.n	80084ca <__mdiff+0x3a>
 80084c0:	0023      	movs	r3, r4
 80084c2:	002c      	movs	r4, r5
 80084c4:	001d      	movs	r5, r3
 80084c6:	2300      	movs	r3, #0
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	6861      	ldr	r1, [r4, #4]
 80084cc:	0038      	movs	r0, r7
 80084ce:	f7ff fdb1 	bl	8008034 <_Balloc>
 80084d2:	002f      	movs	r7, r5
 80084d4:	2200      	movs	r2, #0
 80084d6:	9b01      	ldr	r3, [sp, #4]
 80084d8:	6926      	ldr	r6, [r4, #16]
 80084da:	60c3      	str	r3, [r0, #12]
 80084dc:	3414      	adds	r4, #20
 80084de:	00b3      	lsls	r3, r6, #2
 80084e0:	18e3      	adds	r3, r4, r3
 80084e2:	9302      	str	r3, [sp, #8]
 80084e4:	692b      	ldr	r3, [r5, #16]
 80084e6:	3714      	adds	r7, #20
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	18fb      	adds	r3, r7, r3
 80084ec:	9303      	str	r3, [sp, #12]
 80084ee:	0003      	movs	r3, r0
 80084f0:	4694      	mov	ip, r2
 80084f2:	3314      	adds	r3, #20
 80084f4:	cc20      	ldmia	r4!, {r5}
 80084f6:	cf04      	ldmia	r7!, {r2}
 80084f8:	9201      	str	r2, [sp, #4]
 80084fa:	b2aa      	uxth	r2, r5
 80084fc:	4494      	add	ip, r2
 80084fe:	466a      	mov	r2, sp
 8008500:	4661      	mov	r1, ip
 8008502:	8892      	ldrh	r2, [r2, #4]
 8008504:	0c2d      	lsrs	r5, r5, #16
 8008506:	1a8a      	subs	r2, r1, r2
 8008508:	9901      	ldr	r1, [sp, #4]
 800850a:	0c09      	lsrs	r1, r1, #16
 800850c:	1a69      	subs	r1, r5, r1
 800850e:	1415      	asrs	r5, r2, #16
 8008510:	1949      	adds	r1, r1, r5
 8008512:	140d      	asrs	r5, r1, #16
 8008514:	b292      	uxth	r2, r2
 8008516:	0409      	lsls	r1, r1, #16
 8008518:	430a      	orrs	r2, r1
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	9a03      	ldr	r2, [sp, #12]
 800851e:	46ac      	mov	ip, r5
 8008520:	3304      	adds	r3, #4
 8008522:	42ba      	cmp	r2, r7
 8008524:	d8e6      	bhi.n	80084f4 <__mdiff+0x64>
 8008526:	9902      	ldr	r1, [sp, #8]
 8008528:	001a      	movs	r2, r3
 800852a:	428c      	cmp	r4, r1
 800852c:	d305      	bcc.n	800853a <__mdiff+0xaa>
 800852e:	3a04      	subs	r2, #4
 8008530:	6813      	ldr	r3, [r2, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00e      	beq.n	8008554 <__mdiff+0xc4>
 8008536:	6106      	str	r6, [r0, #16]
 8008538:	e7bc      	b.n	80084b4 <__mdiff+0x24>
 800853a:	cc04      	ldmia	r4!, {r2}
 800853c:	b291      	uxth	r1, r2
 800853e:	4461      	add	r1, ip
 8008540:	140d      	asrs	r5, r1, #16
 8008542:	0c12      	lsrs	r2, r2, #16
 8008544:	1952      	adds	r2, r2, r5
 8008546:	1415      	asrs	r5, r2, #16
 8008548:	b289      	uxth	r1, r1
 800854a:	0412      	lsls	r2, r2, #16
 800854c:	430a      	orrs	r2, r1
 800854e:	46ac      	mov	ip, r5
 8008550:	c304      	stmia	r3!, {r2}
 8008552:	e7e8      	b.n	8008526 <__mdiff+0x96>
 8008554:	3e01      	subs	r6, #1
 8008556:	e7ea      	b.n	800852e <__mdiff+0x9e>

08008558 <__d2b>:
 8008558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800855a:	001d      	movs	r5, r3
 800855c:	2101      	movs	r1, #1
 800855e:	0014      	movs	r4, r2
 8008560:	9f08      	ldr	r7, [sp, #32]
 8008562:	f7ff fd67 	bl	8008034 <_Balloc>
 8008566:	032b      	lsls	r3, r5, #12
 8008568:	006d      	lsls	r5, r5, #1
 800856a:	0006      	movs	r6, r0
 800856c:	0b1b      	lsrs	r3, r3, #12
 800856e:	0d6d      	lsrs	r5, r5, #21
 8008570:	d124      	bne.n	80085bc <__d2b+0x64>
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	2c00      	cmp	r4, #0
 8008576:	d027      	beq.n	80085c8 <__d2b+0x70>
 8008578:	4668      	mov	r0, sp
 800857a:	9400      	str	r4, [sp, #0]
 800857c:	f7ff fe03 	bl	8008186 <__lo0bits>
 8008580:	9c00      	ldr	r4, [sp, #0]
 8008582:	2800      	cmp	r0, #0
 8008584:	d01e      	beq.n	80085c4 <__d2b+0x6c>
 8008586:	9b01      	ldr	r3, [sp, #4]
 8008588:	2120      	movs	r1, #32
 800858a:	001a      	movs	r2, r3
 800858c:	1a09      	subs	r1, r1, r0
 800858e:	408a      	lsls	r2, r1
 8008590:	40c3      	lsrs	r3, r0
 8008592:	4322      	orrs	r2, r4
 8008594:	6172      	str	r2, [r6, #20]
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	9c01      	ldr	r4, [sp, #4]
 800859a:	61b4      	str	r4, [r6, #24]
 800859c:	1e63      	subs	r3, r4, #1
 800859e:	419c      	sbcs	r4, r3
 80085a0:	3401      	adds	r4, #1
 80085a2:	6134      	str	r4, [r6, #16]
 80085a4:	2d00      	cmp	r5, #0
 80085a6:	d018      	beq.n	80085da <__d2b+0x82>
 80085a8:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <__d2b+0x9c>)
 80085aa:	18ed      	adds	r5, r5, r3
 80085ac:	2335      	movs	r3, #53	; 0x35
 80085ae:	182d      	adds	r5, r5, r0
 80085b0:	603d      	str	r5, [r7, #0]
 80085b2:	1a18      	subs	r0, r3, r0
 80085b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b6:	6018      	str	r0, [r3, #0]
 80085b8:	0030      	movs	r0, r6
 80085ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085bc:	2280      	movs	r2, #128	; 0x80
 80085be:	0352      	lsls	r2, r2, #13
 80085c0:	4313      	orrs	r3, r2
 80085c2:	e7d6      	b.n	8008572 <__d2b+0x1a>
 80085c4:	6174      	str	r4, [r6, #20]
 80085c6:	e7e7      	b.n	8008598 <__d2b+0x40>
 80085c8:	a801      	add	r0, sp, #4
 80085ca:	f7ff fddc 	bl	8008186 <__lo0bits>
 80085ce:	2401      	movs	r4, #1
 80085d0:	9b01      	ldr	r3, [sp, #4]
 80085d2:	6134      	str	r4, [r6, #16]
 80085d4:	6173      	str	r3, [r6, #20]
 80085d6:	3020      	adds	r0, #32
 80085d8:	e7e4      	b.n	80085a4 <__d2b+0x4c>
 80085da:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <__d2b+0xa0>)
 80085dc:	18c0      	adds	r0, r0, r3
 80085de:	4b07      	ldr	r3, [pc, #28]	; (80085fc <__d2b+0xa4>)
 80085e0:	6038      	str	r0, [r7, #0]
 80085e2:	18e3      	adds	r3, r4, r3
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	18f3      	adds	r3, r6, r3
 80085e8:	6958      	ldr	r0, [r3, #20]
 80085ea:	f7ff fdb2 	bl	8008152 <__hi0bits>
 80085ee:	0164      	lsls	r4, r4, #5
 80085f0:	1a20      	subs	r0, r4, r0
 80085f2:	e7df      	b.n	80085b4 <__d2b+0x5c>
 80085f4:	fffffbcd 	.word	0xfffffbcd
 80085f8:	fffffbce 	.word	0xfffffbce
 80085fc:	3fffffff 	.word	0x3fffffff

08008600 <_calloc_r>:
 8008600:	434a      	muls	r2, r1
 8008602:	b570      	push	{r4, r5, r6, lr}
 8008604:	0011      	movs	r1, r2
 8008606:	0014      	movs	r4, r2
 8008608:	f000 f852 	bl	80086b0 <_malloc_r>
 800860c:	1e05      	subs	r5, r0, #0
 800860e:	d003      	beq.n	8008618 <_calloc_r+0x18>
 8008610:	0022      	movs	r2, r4
 8008612:	2100      	movs	r1, #0
 8008614:	f7fd febc 	bl	8006390 <memset>
 8008618:	0028      	movs	r0, r5
 800861a:	bd70      	pop	{r4, r5, r6, pc}

0800861c <_free_r>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	0005      	movs	r5, r0
 8008620:	2900      	cmp	r1, #0
 8008622:	d010      	beq.n	8008646 <_free_r+0x2a>
 8008624:	1f0c      	subs	r4, r1, #4
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	da00      	bge.n	800862e <_free_r+0x12>
 800862c:	18e4      	adds	r4, r4, r3
 800862e:	0028      	movs	r0, r5
 8008630:	f000 fade 	bl	8008bf0 <__malloc_lock>
 8008634:	4a1d      	ldr	r2, [pc, #116]	; (80086ac <_free_r+0x90>)
 8008636:	6813      	ldr	r3, [r2, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d105      	bne.n	8008648 <_free_r+0x2c>
 800863c:	6063      	str	r3, [r4, #4]
 800863e:	6014      	str	r4, [r2, #0]
 8008640:	0028      	movs	r0, r5
 8008642:	f000 fad6 	bl	8008bf2 <__malloc_unlock>
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	42a3      	cmp	r3, r4
 800864a:	d909      	bls.n	8008660 <_free_r+0x44>
 800864c:	6821      	ldr	r1, [r4, #0]
 800864e:	1860      	adds	r0, r4, r1
 8008650:	4283      	cmp	r3, r0
 8008652:	d1f3      	bne.n	800863c <_free_r+0x20>
 8008654:	6818      	ldr	r0, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	1841      	adds	r1, r0, r1
 800865a:	6021      	str	r1, [r4, #0]
 800865c:	e7ee      	b.n	800863c <_free_r+0x20>
 800865e:	0013      	movs	r3, r2
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	2a00      	cmp	r2, #0
 8008664:	d001      	beq.n	800866a <_free_r+0x4e>
 8008666:	42a2      	cmp	r2, r4
 8008668:	d9f9      	bls.n	800865e <_free_r+0x42>
 800866a:	6819      	ldr	r1, [r3, #0]
 800866c:	1858      	adds	r0, r3, r1
 800866e:	42a0      	cmp	r0, r4
 8008670:	d10b      	bne.n	800868a <_free_r+0x6e>
 8008672:	6820      	ldr	r0, [r4, #0]
 8008674:	1809      	adds	r1, r1, r0
 8008676:	1858      	adds	r0, r3, r1
 8008678:	6019      	str	r1, [r3, #0]
 800867a:	4282      	cmp	r2, r0
 800867c:	d1e0      	bne.n	8008640 <_free_r+0x24>
 800867e:	6810      	ldr	r0, [r2, #0]
 8008680:	6852      	ldr	r2, [r2, #4]
 8008682:	1841      	adds	r1, r0, r1
 8008684:	6019      	str	r1, [r3, #0]
 8008686:	605a      	str	r2, [r3, #4]
 8008688:	e7da      	b.n	8008640 <_free_r+0x24>
 800868a:	42a0      	cmp	r0, r4
 800868c:	d902      	bls.n	8008694 <_free_r+0x78>
 800868e:	230c      	movs	r3, #12
 8008690:	602b      	str	r3, [r5, #0]
 8008692:	e7d5      	b.n	8008640 <_free_r+0x24>
 8008694:	6821      	ldr	r1, [r4, #0]
 8008696:	1860      	adds	r0, r4, r1
 8008698:	4282      	cmp	r2, r0
 800869a:	d103      	bne.n	80086a4 <_free_r+0x88>
 800869c:	6810      	ldr	r0, [r2, #0]
 800869e:	6852      	ldr	r2, [r2, #4]
 80086a0:	1841      	adds	r1, r0, r1
 80086a2:	6021      	str	r1, [r4, #0]
 80086a4:	6062      	str	r2, [r4, #4]
 80086a6:	605c      	str	r4, [r3, #4]
 80086a8:	e7ca      	b.n	8008640 <_free_r+0x24>
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	20000204 	.word	0x20000204

080086b0 <_malloc_r>:
 80086b0:	2303      	movs	r3, #3
 80086b2:	b570      	push	{r4, r5, r6, lr}
 80086b4:	1ccd      	adds	r5, r1, #3
 80086b6:	439d      	bics	r5, r3
 80086b8:	3508      	adds	r5, #8
 80086ba:	0006      	movs	r6, r0
 80086bc:	2d0c      	cmp	r5, #12
 80086be:	d21e      	bcs.n	80086fe <_malloc_r+0x4e>
 80086c0:	250c      	movs	r5, #12
 80086c2:	42a9      	cmp	r1, r5
 80086c4:	d81d      	bhi.n	8008702 <_malloc_r+0x52>
 80086c6:	0030      	movs	r0, r6
 80086c8:	f000 fa92 	bl	8008bf0 <__malloc_lock>
 80086cc:	4a25      	ldr	r2, [pc, #148]	; (8008764 <_malloc_r+0xb4>)
 80086ce:	6814      	ldr	r4, [r2, #0]
 80086d0:	0021      	movs	r1, r4
 80086d2:	2900      	cmp	r1, #0
 80086d4:	d119      	bne.n	800870a <_malloc_r+0x5a>
 80086d6:	4c24      	ldr	r4, [pc, #144]	; (8008768 <_malloc_r+0xb8>)
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d103      	bne.n	80086e6 <_malloc_r+0x36>
 80086de:	0030      	movs	r0, r6
 80086e0:	f000 f9b8 	bl	8008a54 <_sbrk_r>
 80086e4:	6020      	str	r0, [r4, #0]
 80086e6:	0029      	movs	r1, r5
 80086e8:	0030      	movs	r0, r6
 80086ea:	f000 f9b3 	bl	8008a54 <_sbrk_r>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d12b      	bne.n	800874a <_malloc_r+0x9a>
 80086f2:	230c      	movs	r3, #12
 80086f4:	0030      	movs	r0, r6
 80086f6:	6033      	str	r3, [r6, #0]
 80086f8:	f000 fa7b 	bl	8008bf2 <__malloc_unlock>
 80086fc:	e003      	b.n	8008706 <_malloc_r+0x56>
 80086fe:	2d00      	cmp	r5, #0
 8008700:	dadf      	bge.n	80086c2 <_malloc_r+0x12>
 8008702:	230c      	movs	r3, #12
 8008704:	6033      	str	r3, [r6, #0]
 8008706:	2000      	movs	r0, #0
 8008708:	bd70      	pop	{r4, r5, r6, pc}
 800870a:	680b      	ldr	r3, [r1, #0]
 800870c:	1b5b      	subs	r3, r3, r5
 800870e:	d419      	bmi.n	8008744 <_malloc_r+0x94>
 8008710:	2b0b      	cmp	r3, #11
 8008712:	d903      	bls.n	800871c <_malloc_r+0x6c>
 8008714:	600b      	str	r3, [r1, #0]
 8008716:	18cc      	adds	r4, r1, r3
 8008718:	6025      	str	r5, [r4, #0]
 800871a:	e003      	b.n	8008724 <_malloc_r+0x74>
 800871c:	684b      	ldr	r3, [r1, #4]
 800871e:	428c      	cmp	r4, r1
 8008720:	d10d      	bne.n	800873e <_malloc_r+0x8e>
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	0030      	movs	r0, r6
 8008726:	f000 fa64 	bl	8008bf2 <__malloc_unlock>
 800872a:	0020      	movs	r0, r4
 800872c:	2207      	movs	r2, #7
 800872e:	300b      	adds	r0, #11
 8008730:	1d23      	adds	r3, r4, #4
 8008732:	4390      	bics	r0, r2
 8008734:	1ac3      	subs	r3, r0, r3
 8008736:	d0e7      	beq.n	8008708 <_malloc_r+0x58>
 8008738:	425a      	negs	r2, r3
 800873a:	50e2      	str	r2, [r4, r3]
 800873c:	e7e4      	b.n	8008708 <_malloc_r+0x58>
 800873e:	6063      	str	r3, [r4, #4]
 8008740:	000c      	movs	r4, r1
 8008742:	e7ef      	b.n	8008724 <_malloc_r+0x74>
 8008744:	000c      	movs	r4, r1
 8008746:	6849      	ldr	r1, [r1, #4]
 8008748:	e7c3      	b.n	80086d2 <_malloc_r+0x22>
 800874a:	2303      	movs	r3, #3
 800874c:	1cc4      	adds	r4, r0, #3
 800874e:	439c      	bics	r4, r3
 8008750:	42a0      	cmp	r0, r4
 8008752:	d0e1      	beq.n	8008718 <_malloc_r+0x68>
 8008754:	1a21      	subs	r1, r4, r0
 8008756:	0030      	movs	r0, r6
 8008758:	f000 f97c 	bl	8008a54 <_sbrk_r>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d1db      	bne.n	8008718 <_malloc_r+0x68>
 8008760:	e7c7      	b.n	80086f2 <_malloc_r+0x42>
 8008762:	46c0      	nop			; (mov r8, r8)
 8008764:	20000204 	.word	0x20000204
 8008768:	20000208 	.word	0x20000208

0800876c <__sfputc_r>:
 800876c:	6893      	ldr	r3, [r2, #8]
 800876e:	b510      	push	{r4, lr}
 8008770:	3b01      	subs	r3, #1
 8008772:	6093      	str	r3, [r2, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	da04      	bge.n	8008782 <__sfputc_r+0x16>
 8008778:	6994      	ldr	r4, [r2, #24]
 800877a:	42a3      	cmp	r3, r4
 800877c:	db07      	blt.n	800878e <__sfputc_r+0x22>
 800877e:	290a      	cmp	r1, #10
 8008780:	d005      	beq.n	800878e <__sfputc_r+0x22>
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	1c58      	adds	r0, r3, #1
 8008786:	6010      	str	r0, [r2, #0]
 8008788:	7019      	strb	r1, [r3, #0]
 800878a:	0008      	movs	r0, r1
 800878c:	bd10      	pop	{r4, pc}
 800878e:	f7fe fafd 	bl	8006d8c <__swbuf_r>
 8008792:	0001      	movs	r1, r0
 8008794:	e7f9      	b.n	800878a <__sfputc_r+0x1e>

08008796 <__sfputs_r>:
 8008796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008798:	0006      	movs	r6, r0
 800879a:	000f      	movs	r7, r1
 800879c:	0014      	movs	r4, r2
 800879e:	18d5      	adds	r5, r2, r3
 80087a0:	42ac      	cmp	r4, r5
 80087a2:	d101      	bne.n	80087a8 <__sfputs_r+0x12>
 80087a4:	2000      	movs	r0, #0
 80087a6:	e007      	b.n	80087b8 <__sfputs_r+0x22>
 80087a8:	7821      	ldrb	r1, [r4, #0]
 80087aa:	003a      	movs	r2, r7
 80087ac:	0030      	movs	r0, r6
 80087ae:	f7ff ffdd 	bl	800876c <__sfputc_r>
 80087b2:	3401      	adds	r4, #1
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d1f3      	bne.n	80087a0 <__sfputs_r+0xa>
 80087b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087bc <_vfiprintf_r>:
 80087bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087be:	b0a1      	sub	sp, #132	; 0x84
 80087c0:	9003      	str	r0, [sp, #12]
 80087c2:	000f      	movs	r7, r1
 80087c4:	0016      	movs	r6, r2
 80087c6:	001d      	movs	r5, r3
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d005      	beq.n	80087d8 <_vfiprintf_r+0x1c>
 80087cc:	6983      	ldr	r3, [r0, #24]
 80087ce:	9305      	str	r3, [sp, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <_vfiprintf_r+0x1c>
 80087d4:	f7ff fb04 	bl	8007de0 <__sinit>
 80087d8:	4b7b      	ldr	r3, [pc, #492]	; (80089c8 <_vfiprintf_r+0x20c>)
 80087da:	429f      	cmp	r7, r3
 80087dc:	d15c      	bne.n	8008898 <_vfiprintf_r+0xdc>
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	685f      	ldr	r7, [r3, #4]
 80087e2:	89bb      	ldrh	r3, [r7, #12]
 80087e4:	071b      	lsls	r3, r3, #28
 80087e6:	d563      	bpl.n	80088b0 <_vfiprintf_r+0xf4>
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d060      	beq.n	80088b0 <_vfiprintf_r+0xf4>
 80087ee:	2300      	movs	r3, #0
 80087f0:	ac08      	add	r4, sp, #32
 80087f2:	6163      	str	r3, [r4, #20]
 80087f4:	3320      	adds	r3, #32
 80087f6:	7663      	strb	r3, [r4, #25]
 80087f8:	3310      	adds	r3, #16
 80087fa:	76a3      	strb	r3, [r4, #26]
 80087fc:	9507      	str	r5, [sp, #28]
 80087fe:	0035      	movs	r5, r6
 8008800:	782b      	ldrb	r3, [r5, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <_vfiprintf_r+0x4e>
 8008806:	2b25      	cmp	r3, #37	; 0x25
 8008808:	d15c      	bne.n	80088c4 <_vfiprintf_r+0x108>
 800880a:	1bab      	subs	r3, r5, r6
 800880c:	9305      	str	r3, [sp, #20]
 800880e:	d00c      	beq.n	800882a <_vfiprintf_r+0x6e>
 8008810:	0032      	movs	r2, r6
 8008812:	0039      	movs	r1, r7
 8008814:	9803      	ldr	r0, [sp, #12]
 8008816:	f7ff ffbe 	bl	8008796 <__sfputs_r>
 800881a:	1c43      	adds	r3, r0, #1
 800881c:	d100      	bne.n	8008820 <_vfiprintf_r+0x64>
 800881e:	e0c4      	b.n	80089aa <_vfiprintf_r+0x1ee>
 8008820:	6962      	ldr	r2, [r4, #20]
 8008822:	9b05      	ldr	r3, [sp, #20]
 8008824:	4694      	mov	ip, r2
 8008826:	4463      	add	r3, ip
 8008828:	6163      	str	r3, [r4, #20]
 800882a:	782b      	ldrb	r3, [r5, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d100      	bne.n	8008832 <_vfiprintf_r+0x76>
 8008830:	e0bb      	b.n	80089aa <_vfiprintf_r+0x1ee>
 8008832:	2201      	movs	r2, #1
 8008834:	2300      	movs	r3, #0
 8008836:	4252      	negs	r2, r2
 8008838:	6062      	str	r2, [r4, #4]
 800883a:	a904      	add	r1, sp, #16
 800883c:	3254      	adds	r2, #84	; 0x54
 800883e:	1852      	adds	r2, r2, r1
 8008840:	1c6e      	adds	r6, r5, #1
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	60e3      	str	r3, [r4, #12]
 8008846:	60a3      	str	r3, [r4, #8]
 8008848:	7013      	strb	r3, [r2, #0]
 800884a:	65a3      	str	r3, [r4, #88]	; 0x58
 800884c:	7831      	ldrb	r1, [r6, #0]
 800884e:	2205      	movs	r2, #5
 8008850:	485e      	ldr	r0, [pc, #376]	; (80089cc <_vfiprintf_r+0x210>)
 8008852:	f7ff fbdb 	bl	800800c <memchr>
 8008856:	1c75      	adds	r5, r6, #1
 8008858:	2800      	cmp	r0, #0
 800885a:	d135      	bne.n	80088c8 <_vfiprintf_r+0x10c>
 800885c:	6822      	ldr	r2, [r4, #0]
 800885e:	06d3      	lsls	r3, r2, #27
 8008860:	d504      	bpl.n	800886c <_vfiprintf_r+0xb0>
 8008862:	2353      	movs	r3, #83	; 0x53
 8008864:	a904      	add	r1, sp, #16
 8008866:	185b      	adds	r3, r3, r1
 8008868:	2120      	movs	r1, #32
 800886a:	7019      	strb	r1, [r3, #0]
 800886c:	0713      	lsls	r3, r2, #28
 800886e:	d504      	bpl.n	800887a <_vfiprintf_r+0xbe>
 8008870:	2353      	movs	r3, #83	; 0x53
 8008872:	a904      	add	r1, sp, #16
 8008874:	185b      	adds	r3, r3, r1
 8008876:	212b      	movs	r1, #43	; 0x2b
 8008878:	7019      	strb	r1, [r3, #0]
 800887a:	7833      	ldrb	r3, [r6, #0]
 800887c:	2b2a      	cmp	r3, #42	; 0x2a
 800887e:	d02c      	beq.n	80088da <_vfiprintf_r+0x11e>
 8008880:	0035      	movs	r5, r6
 8008882:	2100      	movs	r1, #0
 8008884:	200a      	movs	r0, #10
 8008886:	68e3      	ldr	r3, [r4, #12]
 8008888:	782a      	ldrb	r2, [r5, #0]
 800888a:	1c6e      	adds	r6, r5, #1
 800888c:	3a30      	subs	r2, #48	; 0x30
 800888e:	2a09      	cmp	r2, #9
 8008890:	d964      	bls.n	800895c <_vfiprintf_r+0x1a0>
 8008892:	2900      	cmp	r1, #0
 8008894:	d02e      	beq.n	80088f4 <_vfiprintf_r+0x138>
 8008896:	e026      	b.n	80088e6 <_vfiprintf_r+0x12a>
 8008898:	4b4d      	ldr	r3, [pc, #308]	; (80089d0 <_vfiprintf_r+0x214>)
 800889a:	429f      	cmp	r7, r3
 800889c:	d102      	bne.n	80088a4 <_vfiprintf_r+0xe8>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	689f      	ldr	r7, [r3, #8]
 80088a2:	e79e      	b.n	80087e2 <_vfiprintf_r+0x26>
 80088a4:	4b4b      	ldr	r3, [pc, #300]	; (80089d4 <_vfiprintf_r+0x218>)
 80088a6:	429f      	cmp	r7, r3
 80088a8:	d19b      	bne.n	80087e2 <_vfiprintf_r+0x26>
 80088aa:	9b03      	ldr	r3, [sp, #12]
 80088ac:	68df      	ldr	r7, [r3, #12]
 80088ae:	e798      	b.n	80087e2 <_vfiprintf_r+0x26>
 80088b0:	0039      	movs	r1, r7
 80088b2:	9803      	ldr	r0, [sp, #12]
 80088b4:	f7fe fac0 	bl	8006e38 <__swsetup_r>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d098      	beq.n	80087ee <_vfiprintf_r+0x32>
 80088bc:	2001      	movs	r0, #1
 80088be:	4240      	negs	r0, r0
 80088c0:	b021      	add	sp, #132	; 0x84
 80088c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c4:	3501      	adds	r5, #1
 80088c6:	e79b      	b.n	8008800 <_vfiprintf_r+0x44>
 80088c8:	4b40      	ldr	r3, [pc, #256]	; (80089cc <_vfiprintf_r+0x210>)
 80088ca:	6822      	ldr	r2, [r4, #0]
 80088cc:	1ac0      	subs	r0, r0, r3
 80088ce:	2301      	movs	r3, #1
 80088d0:	4083      	lsls	r3, r0
 80088d2:	4313      	orrs	r3, r2
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	002e      	movs	r6, r5
 80088d8:	e7b8      	b.n	800884c <_vfiprintf_r+0x90>
 80088da:	9b07      	ldr	r3, [sp, #28]
 80088dc:	1d19      	adds	r1, r3, #4
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	9107      	str	r1, [sp, #28]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	db01      	blt.n	80088ea <_vfiprintf_r+0x12e>
 80088e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80088e8:	e004      	b.n	80088f4 <_vfiprintf_r+0x138>
 80088ea:	425b      	negs	r3, r3
 80088ec:	60e3      	str	r3, [r4, #12]
 80088ee:	2302      	movs	r3, #2
 80088f0:	4313      	orrs	r3, r2
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	782b      	ldrb	r3, [r5, #0]
 80088f6:	2b2e      	cmp	r3, #46	; 0x2e
 80088f8:	d10a      	bne.n	8008910 <_vfiprintf_r+0x154>
 80088fa:	786b      	ldrb	r3, [r5, #1]
 80088fc:	2b2a      	cmp	r3, #42	; 0x2a
 80088fe:	d135      	bne.n	800896c <_vfiprintf_r+0x1b0>
 8008900:	9b07      	ldr	r3, [sp, #28]
 8008902:	3502      	adds	r5, #2
 8008904:	1d1a      	adds	r2, r3, #4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	9207      	str	r2, [sp, #28]
 800890a:	2b00      	cmp	r3, #0
 800890c:	db2b      	blt.n	8008966 <_vfiprintf_r+0x1aa>
 800890e:	9309      	str	r3, [sp, #36]	; 0x24
 8008910:	4e31      	ldr	r6, [pc, #196]	; (80089d8 <_vfiprintf_r+0x21c>)
 8008912:	7829      	ldrb	r1, [r5, #0]
 8008914:	2203      	movs	r2, #3
 8008916:	0030      	movs	r0, r6
 8008918:	f7ff fb78 	bl	800800c <memchr>
 800891c:	2800      	cmp	r0, #0
 800891e:	d006      	beq.n	800892e <_vfiprintf_r+0x172>
 8008920:	2340      	movs	r3, #64	; 0x40
 8008922:	1b80      	subs	r0, r0, r6
 8008924:	4083      	lsls	r3, r0
 8008926:	6822      	ldr	r2, [r4, #0]
 8008928:	3501      	adds	r5, #1
 800892a:	4313      	orrs	r3, r2
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	7829      	ldrb	r1, [r5, #0]
 8008930:	2206      	movs	r2, #6
 8008932:	482a      	ldr	r0, [pc, #168]	; (80089dc <_vfiprintf_r+0x220>)
 8008934:	1c6e      	adds	r6, r5, #1
 8008936:	7621      	strb	r1, [r4, #24]
 8008938:	f7ff fb68 	bl	800800c <memchr>
 800893c:	2800      	cmp	r0, #0
 800893e:	d03a      	beq.n	80089b6 <_vfiprintf_r+0x1fa>
 8008940:	4b27      	ldr	r3, [pc, #156]	; (80089e0 <_vfiprintf_r+0x224>)
 8008942:	2b00      	cmp	r3, #0
 8008944:	d125      	bne.n	8008992 <_vfiprintf_r+0x1d6>
 8008946:	2207      	movs	r2, #7
 8008948:	9b07      	ldr	r3, [sp, #28]
 800894a:	3307      	adds	r3, #7
 800894c:	4393      	bics	r3, r2
 800894e:	3308      	adds	r3, #8
 8008950:	9307      	str	r3, [sp, #28]
 8008952:	6963      	ldr	r3, [r4, #20]
 8008954:	9a04      	ldr	r2, [sp, #16]
 8008956:	189b      	adds	r3, r3, r2
 8008958:	6163      	str	r3, [r4, #20]
 800895a:	e750      	b.n	80087fe <_vfiprintf_r+0x42>
 800895c:	4343      	muls	r3, r0
 800895e:	2101      	movs	r1, #1
 8008960:	189b      	adds	r3, r3, r2
 8008962:	0035      	movs	r5, r6
 8008964:	e790      	b.n	8008888 <_vfiprintf_r+0xcc>
 8008966:	2301      	movs	r3, #1
 8008968:	425b      	negs	r3, r3
 800896a:	e7d0      	b.n	800890e <_vfiprintf_r+0x152>
 800896c:	2300      	movs	r3, #0
 800896e:	200a      	movs	r0, #10
 8008970:	001a      	movs	r2, r3
 8008972:	3501      	adds	r5, #1
 8008974:	6063      	str	r3, [r4, #4]
 8008976:	7829      	ldrb	r1, [r5, #0]
 8008978:	1c6e      	adds	r6, r5, #1
 800897a:	3930      	subs	r1, #48	; 0x30
 800897c:	2909      	cmp	r1, #9
 800897e:	d903      	bls.n	8008988 <_vfiprintf_r+0x1cc>
 8008980:	2b00      	cmp	r3, #0
 8008982:	d0c5      	beq.n	8008910 <_vfiprintf_r+0x154>
 8008984:	9209      	str	r2, [sp, #36]	; 0x24
 8008986:	e7c3      	b.n	8008910 <_vfiprintf_r+0x154>
 8008988:	4342      	muls	r2, r0
 800898a:	2301      	movs	r3, #1
 800898c:	1852      	adds	r2, r2, r1
 800898e:	0035      	movs	r5, r6
 8008990:	e7f1      	b.n	8008976 <_vfiprintf_r+0x1ba>
 8008992:	ab07      	add	r3, sp, #28
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	003a      	movs	r2, r7
 8008998:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <_vfiprintf_r+0x228>)
 800899a:	0021      	movs	r1, r4
 800899c:	9803      	ldr	r0, [sp, #12]
 800899e:	f7fd fd9b 	bl	80064d8 <_printf_float>
 80089a2:	9004      	str	r0, [sp, #16]
 80089a4:	9b04      	ldr	r3, [sp, #16]
 80089a6:	3301      	adds	r3, #1
 80089a8:	d1d3      	bne.n	8008952 <_vfiprintf_r+0x196>
 80089aa:	89bb      	ldrh	r3, [r7, #12]
 80089ac:	065b      	lsls	r3, r3, #25
 80089ae:	d500      	bpl.n	80089b2 <_vfiprintf_r+0x1f6>
 80089b0:	e784      	b.n	80088bc <_vfiprintf_r+0x100>
 80089b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80089b4:	e784      	b.n	80088c0 <_vfiprintf_r+0x104>
 80089b6:	ab07      	add	r3, sp, #28
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	003a      	movs	r2, r7
 80089bc:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <_vfiprintf_r+0x228>)
 80089be:	0021      	movs	r1, r4
 80089c0:	9803      	ldr	r0, [sp, #12]
 80089c2:	f7fe f843 	bl	8006a4c <_printf_i>
 80089c6:	e7ec      	b.n	80089a2 <_vfiprintf_r+0x1e6>
 80089c8:	08009320 	.word	0x08009320
 80089cc:	0800945c 	.word	0x0800945c
 80089d0:	08009340 	.word	0x08009340
 80089d4:	08009300 	.word	0x08009300
 80089d8:	08009462 	.word	0x08009462
 80089dc:	08009466 	.word	0x08009466
 80089e0:	080064d9 	.word	0x080064d9
 80089e4:	08008797 	.word	0x08008797

080089e8 <_putc_r>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	0006      	movs	r6, r0
 80089ec:	000d      	movs	r5, r1
 80089ee:	0014      	movs	r4, r2
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d004      	beq.n	80089fe <_putc_r+0x16>
 80089f4:	6983      	ldr	r3, [r0, #24]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <_putc_r+0x16>
 80089fa:	f7ff f9f1 	bl	8007de0 <__sinit>
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <_putc_r+0x60>)
 8008a00:	429c      	cmp	r4, r3
 8008a02:	d111      	bne.n	8008a28 <_putc_r+0x40>
 8008a04:	6874      	ldr	r4, [r6, #4]
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	60a3      	str	r3, [r4, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	da05      	bge.n	8008a1c <_putc_r+0x34>
 8008a10:	69a2      	ldr	r2, [r4, #24]
 8008a12:	4293      	cmp	r3, r2
 8008a14:	db12      	blt.n	8008a3c <_putc_r+0x54>
 8008a16:	b2eb      	uxtb	r3, r5
 8008a18:	2b0a      	cmp	r3, #10
 8008a1a:	d00f      	beq.n	8008a3c <_putc_r+0x54>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	b2e8      	uxtb	r0, r5
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	6022      	str	r2, [r4, #0]
 8008a24:	701d      	strb	r5, [r3, #0]
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	4b08      	ldr	r3, [pc, #32]	; (8008a4c <_putc_r+0x64>)
 8008a2a:	429c      	cmp	r4, r3
 8008a2c:	d101      	bne.n	8008a32 <_putc_r+0x4a>
 8008a2e:	68b4      	ldr	r4, [r6, #8]
 8008a30:	e7e9      	b.n	8008a06 <_putc_r+0x1e>
 8008a32:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <_putc_r+0x68>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	d1e6      	bne.n	8008a06 <_putc_r+0x1e>
 8008a38:	68f4      	ldr	r4, [r6, #12]
 8008a3a:	e7e4      	b.n	8008a06 <_putc_r+0x1e>
 8008a3c:	0022      	movs	r2, r4
 8008a3e:	0029      	movs	r1, r5
 8008a40:	0030      	movs	r0, r6
 8008a42:	f7fe f9a3 	bl	8006d8c <__swbuf_r>
 8008a46:	e7ee      	b.n	8008a26 <_putc_r+0x3e>
 8008a48:	08009320 	.word	0x08009320
 8008a4c:	08009340 	.word	0x08009340
 8008a50:	08009300 	.word	0x08009300

08008a54 <_sbrk_r>:
 8008a54:	2300      	movs	r3, #0
 8008a56:	b570      	push	{r4, r5, r6, lr}
 8008a58:	4c06      	ldr	r4, [pc, #24]	; (8008a74 <_sbrk_r+0x20>)
 8008a5a:	0005      	movs	r5, r0
 8008a5c:	0008      	movs	r0, r1
 8008a5e:	6023      	str	r3, [r4, #0]
 8008a60:	f7fd fb56 	bl	8006110 <_sbrk>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d103      	bne.n	8008a70 <_sbrk_r+0x1c>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d000      	beq.n	8008a70 <_sbrk_r+0x1c>
 8008a6e:	602b      	str	r3, [r5, #0]
 8008a70:	bd70      	pop	{r4, r5, r6, pc}
 8008a72:	46c0      	nop			; (mov r8, r8)
 8008a74:	200002cc 	.word	0x200002cc

08008a78 <__sread>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	000c      	movs	r4, r1
 8008a7c:	250e      	movs	r5, #14
 8008a7e:	5f49      	ldrsh	r1, [r1, r5]
 8008a80:	f000 f8b8 	bl	8008bf4 <_read_r>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	db03      	blt.n	8008a90 <__sread+0x18>
 8008a88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a8a:	181b      	adds	r3, r3, r0
 8008a8c:	6563      	str	r3, [r4, #84]	; 0x54
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	4a02      	ldr	r2, [pc, #8]	; (8008a9c <__sread+0x24>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	e7f9      	b.n	8008a8e <__sread+0x16>
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	ffffefff 	.word	0xffffefff

08008aa0 <__swrite>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	001f      	movs	r7, r3
 8008aa4:	898b      	ldrh	r3, [r1, #12]
 8008aa6:	0005      	movs	r5, r0
 8008aa8:	000c      	movs	r4, r1
 8008aaa:	0016      	movs	r6, r2
 8008aac:	05db      	lsls	r3, r3, #23
 8008aae:	d505      	bpl.n	8008abc <__swrite+0x1c>
 8008ab0:	230e      	movs	r3, #14
 8008ab2:	5ec9      	ldrsh	r1, [r1, r3]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	f000 f874 	bl	8008ba4 <_lseek_r>
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	4a05      	ldr	r2, [pc, #20]	; (8008ad4 <__swrite+0x34>)
 8008ac0:	0028      	movs	r0, r5
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	0032      	movs	r2, r6
 8008ac8:	230e      	movs	r3, #14
 8008aca:	5ee1      	ldrsh	r1, [r4, r3]
 8008acc:	003b      	movs	r3, r7
 8008ace:	f000 f81f 	bl	8008b10 <_write_r>
 8008ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ad4:	ffffefff 	.word	0xffffefff

08008ad8 <__sseek>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	000c      	movs	r4, r1
 8008adc:	250e      	movs	r5, #14
 8008ade:	5f49      	ldrsh	r1, [r1, r5]
 8008ae0:	f000 f860 	bl	8008ba4 <_lseek_r>
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	1c42      	adds	r2, r0, #1
 8008ae8:	d103      	bne.n	8008af2 <__sseek+0x1a>
 8008aea:	4a05      	ldr	r2, [pc, #20]	; (8008b00 <__sseek+0x28>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	bd70      	pop	{r4, r5, r6, pc}
 8008af2:	2280      	movs	r2, #128	; 0x80
 8008af4:	0152      	lsls	r2, r2, #5
 8008af6:	4313      	orrs	r3, r2
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	6560      	str	r0, [r4, #84]	; 0x54
 8008afc:	e7f8      	b.n	8008af0 <__sseek+0x18>
 8008afe:	46c0      	nop			; (mov r8, r8)
 8008b00:	ffffefff 	.word	0xffffefff

08008b04 <__sclose>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	230e      	movs	r3, #14
 8008b08:	5ec9      	ldrsh	r1, [r1, r3]
 8008b0a:	f000 f815 	bl	8008b38 <_close_r>
 8008b0e:	bd10      	pop	{r4, pc}

08008b10 <_write_r>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	0005      	movs	r5, r0
 8008b14:	0008      	movs	r0, r1
 8008b16:	0011      	movs	r1, r2
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4c06      	ldr	r4, [pc, #24]	; (8008b34 <_write_r+0x24>)
 8008b1c:	6022      	str	r2, [r4, #0]
 8008b1e:	001a      	movs	r2, r3
 8008b20:	f7fd f94a 	bl	8005db8 <_write>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d103      	bne.n	8008b30 <_write_r+0x20>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d000      	beq.n	8008b30 <_write_r+0x20>
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	bd70      	pop	{r4, r5, r6, pc}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	200002cc 	.word	0x200002cc

08008b38 <_close_r>:
 8008b38:	2300      	movs	r3, #0
 8008b3a:	b570      	push	{r4, r5, r6, lr}
 8008b3c:	4c06      	ldr	r4, [pc, #24]	; (8008b58 <_close_r+0x20>)
 8008b3e:	0005      	movs	r5, r0
 8008b40:	0008      	movs	r0, r1
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	f7fd fab8 	bl	80060b8 <_close>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d103      	bne.n	8008b54 <_close_r+0x1c>
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d000      	beq.n	8008b54 <_close_r+0x1c>
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	bd70      	pop	{r4, r5, r6, pc}
 8008b56:	46c0      	nop			; (mov r8, r8)
 8008b58:	200002cc 	.word	0x200002cc

08008b5c <_fstat_r>:
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	b570      	push	{r4, r5, r6, lr}
 8008b60:	4c06      	ldr	r4, [pc, #24]	; (8008b7c <_fstat_r+0x20>)
 8008b62:	0005      	movs	r5, r0
 8008b64:	0008      	movs	r0, r1
 8008b66:	0011      	movs	r1, r2
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	f7fd faaf 	bl	80060cc <_fstat>
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	d103      	bne.n	8008b7a <_fstat_r+0x1e>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d000      	beq.n	8008b7a <_fstat_r+0x1e>
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
 8008b7c:	200002cc 	.word	0x200002cc

08008b80 <_isatty_r>:
 8008b80:	2300      	movs	r3, #0
 8008b82:	b570      	push	{r4, r5, r6, lr}
 8008b84:	4c06      	ldr	r4, [pc, #24]	; (8008ba0 <_isatty_r+0x20>)
 8008b86:	0005      	movs	r5, r0
 8008b88:	0008      	movs	r0, r1
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	f7fd faac 	bl	80060e8 <_isatty>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d103      	bne.n	8008b9c <_isatty_r+0x1c>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d000      	beq.n	8008b9c <_isatty_r+0x1c>
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	bd70      	pop	{r4, r5, r6, pc}
 8008b9e:	46c0      	nop			; (mov r8, r8)
 8008ba0:	200002cc 	.word	0x200002cc

08008ba4 <_lseek_r>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	0005      	movs	r5, r0
 8008ba8:	0008      	movs	r0, r1
 8008baa:	0011      	movs	r1, r2
 8008bac:	2200      	movs	r2, #0
 8008bae:	4c06      	ldr	r4, [pc, #24]	; (8008bc8 <_lseek_r+0x24>)
 8008bb0:	6022      	str	r2, [r4, #0]
 8008bb2:	001a      	movs	r2, r3
 8008bb4:	f7fd faa1 	bl	80060fa <_lseek>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d103      	bne.n	8008bc4 <_lseek_r+0x20>
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d000      	beq.n	8008bc4 <_lseek_r+0x20>
 8008bc2:	602b      	str	r3, [r5, #0]
 8008bc4:	bd70      	pop	{r4, r5, r6, pc}
 8008bc6:	46c0      	nop			; (mov r8, r8)
 8008bc8:	200002cc 	.word	0x200002cc

08008bcc <__ascii_mbtowc>:
 8008bcc:	b082      	sub	sp, #8
 8008bce:	2900      	cmp	r1, #0
 8008bd0:	d100      	bne.n	8008bd4 <__ascii_mbtowc+0x8>
 8008bd2:	a901      	add	r1, sp, #4
 8008bd4:	1e10      	subs	r0, r2, #0
 8008bd6:	d006      	beq.n	8008be6 <__ascii_mbtowc+0x1a>
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d006      	beq.n	8008bea <__ascii_mbtowc+0x1e>
 8008bdc:	7813      	ldrb	r3, [r2, #0]
 8008bde:	600b      	str	r3, [r1, #0]
 8008be0:	7810      	ldrb	r0, [r2, #0]
 8008be2:	1e43      	subs	r3, r0, #1
 8008be4:	4198      	sbcs	r0, r3
 8008be6:	b002      	add	sp, #8
 8008be8:	4770      	bx	lr
 8008bea:	2002      	movs	r0, #2
 8008bec:	4240      	negs	r0, r0
 8008bee:	e7fa      	b.n	8008be6 <__ascii_mbtowc+0x1a>

08008bf0 <__malloc_lock>:
 8008bf0:	4770      	bx	lr

08008bf2 <__malloc_unlock>:
 8008bf2:	4770      	bx	lr

08008bf4 <_read_r>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	0005      	movs	r5, r0
 8008bf8:	0008      	movs	r0, r1
 8008bfa:	0011      	movs	r1, r2
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4c06      	ldr	r4, [pc, #24]	; (8008c18 <_read_r+0x24>)
 8008c00:	6022      	str	r2, [r4, #0]
 8008c02:	001a      	movs	r2, r3
 8008c04:	f7fd fa3b 	bl	800607e <_read>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d103      	bne.n	8008c14 <_read_r+0x20>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d000      	beq.n	8008c14 <_read_r+0x20>
 8008c12:	602b      	str	r3, [r5, #0]
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
 8008c16:	46c0      	nop			; (mov r8, r8)
 8008c18:	200002cc 	.word	0x200002cc

08008c1c <__ascii_wctomb>:
 8008c1c:	1e0b      	subs	r3, r1, #0
 8008c1e:	d004      	beq.n	8008c2a <__ascii_wctomb+0xe>
 8008c20:	2aff      	cmp	r2, #255	; 0xff
 8008c22:	d904      	bls.n	8008c2e <__ascii_wctomb+0x12>
 8008c24:	238a      	movs	r3, #138	; 0x8a
 8008c26:	6003      	str	r3, [r0, #0]
 8008c28:	3b8b      	subs	r3, #139	; 0x8b
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	4770      	bx	lr
 8008c2e:	700a      	strb	r2, [r1, #0]
 8008c30:	2301      	movs	r3, #1
 8008c32:	e7fa      	b.n	8008c2a <__ascii_wctomb+0xe>

08008c34 <log>:
 8008c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c36:	b08d      	sub	sp, #52	; 0x34
 8008c38:	0004      	movs	r4, r0
 8008c3a:	000d      	movs	r5, r1
 8008c3c:	f000 f87a 	bl	8008d34 <__ieee754_log>
 8008c40:	4b37      	ldr	r3, [pc, #220]	; (8008d20 <log+0xec>)
 8008c42:	0006      	movs	r6, r0
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	000f      	movs	r7, r1
 8008c48:	b25b      	sxtb	r3, r3
 8008c4a:	9301      	str	r3, [sp, #4]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	d063      	beq.n	8008d18 <log+0xe4>
 8008c50:	0022      	movs	r2, r4
 8008c52:	002b      	movs	r3, r5
 8008c54:	0020      	movs	r0, r4
 8008c56:	0029      	movs	r1, r5
 8008c58:	f7fa f860 	bl	8002d1c <__aeabi_dcmpun>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d15b      	bne.n	8008d18 <log+0xe4>
 8008c60:	2200      	movs	r2, #0
 8008c62:	2300      	movs	r3, #0
 8008c64:	0020      	movs	r0, r4
 8008c66:	0029      	movs	r1, r5
 8008c68:	f7f7 fc00 	bl	800046c <__aeabi_dcmpgt>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d153      	bne.n	8008d18 <log+0xe4>
 8008c70:	4b2c      	ldr	r3, [pc, #176]	; (8008d24 <log+0xf0>)
 8008c72:	900a      	str	r0, [sp, #40]	; 0x28
 8008c74:	9303      	str	r3, [sp, #12]
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	9404      	str	r4, [sp, #16]
 8008c7a:	9505      	str	r5, [sp, #20]
 8008c7c:	9406      	str	r4, [sp, #24]
 8008c7e:	9507      	str	r5, [sp, #28]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d116      	bne.n	8008cb2 <log+0x7e>
 8008c84:	22e0      	movs	r2, #224	; 0xe0
 8008c86:	4b28      	ldr	r3, [pc, #160]	; (8008d28 <log+0xf4>)
 8008c88:	0612      	lsls	r2, r2, #24
 8008c8a:	9208      	str	r2, [sp, #32]
 8008c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8e:	0020      	movs	r0, r4
 8008c90:	2200      	movs	r2, #0
 8008c92:	2300      	movs	r3, #0
 8008c94:	0029      	movs	r1, r5
 8008c96:	f7f7 fbcf 	bl	8000438 <__aeabi_dcmpeq>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d12a      	bne.n	8008cf4 <log+0xc0>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	9302      	str	r3, [sp, #8]
 8008ca2:	9b01      	ldr	r3, [sp, #4]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d11a      	bne.n	8008cde <log+0xaa>
 8008ca8:	f7fd fb48 	bl	800633c <__errno>
 8008cac:	2321      	movs	r3, #33	; 0x21
 8008cae:	6003      	str	r3, [r0, #0]
 8008cb0:	e01a      	b.n	8008ce8 <log+0xb4>
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4b1d      	ldr	r3, [pc, #116]	; (8008d2c <log+0xf8>)
 8008cb6:	0020      	movs	r0, r4
 8008cb8:	9208      	str	r2, [sp, #32]
 8008cba:	9309      	str	r3, [sp, #36]	; 0x24
 8008cbc:	0029      	movs	r1, r5
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f7f7 fbb9 	bl	8000438 <__aeabi_dcmpeq>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d0e9      	beq.n	8008c9e <log+0x6a>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	9302      	str	r3, [sp, #8]
 8008cce:	9b01      	ldr	r3, [sp, #4]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d111      	bne.n	8008cf8 <log+0xc4>
 8008cd4:	f7fd fb32 	bl	800633c <__errno>
 8008cd8:	2322      	movs	r3, #34	; 0x22
 8008cda:	6003      	str	r3, [r0, #0]
 8008cdc:	e011      	b.n	8008d02 <log+0xce>
 8008cde:	a802      	add	r0, sp, #8
 8008ce0:	f000 f9da 	bl	8009098 <matherr>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d0df      	beq.n	8008ca8 <log+0x74>
 8008ce8:	4811      	ldr	r0, [pc, #68]	; (8008d30 <log+0xfc>)
 8008cea:	f000 f9d7 	bl	800909c <nan>
 8008cee:	9008      	str	r0, [sp, #32]
 8008cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8008cf2:	e006      	b.n	8008d02 <log+0xce>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	9302      	str	r3, [sp, #8]
 8008cf8:	a802      	add	r0, sp, #8
 8008cfa:	f000 f9cd 	bl	8009098 <matherr>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d0e8      	beq.n	8008cd4 <log+0xa0>
 8008d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d004      	beq.n	8008d14 <log+0xe0>
 8008d0a:	f7fd fb17 	bl	800633c <__errno>
 8008d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d10:	9301      	str	r3, [sp, #4]
 8008d12:	6003      	str	r3, [r0, #0]
 8008d14:	9e08      	ldr	r6, [sp, #32]
 8008d16:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008d18:	0030      	movs	r0, r6
 8008d1a:	0039      	movs	r1, r7
 8008d1c:	b00d      	add	sp, #52	; 0x34
 8008d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d20:	200001d4 	.word	0x200001d4
 8008d24:	08009578 	.word	0x08009578
 8008d28:	c7efffff 	.word	0xc7efffff
 8008d2c:	fff00000 	.word	0xfff00000
 8008d30:	08009461 	.word	0x08009461

08008d34 <__ieee754_log>:
 8008d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d36:	4bba      	ldr	r3, [pc, #744]	; (8009020 <__ieee754_log+0x2ec>)
 8008d38:	b08d      	sub	sp, #52	; 0x34
 8008d3a:	000e      	movs	r6, r1
 8008d3c:	4299      	cmp	r1, r3
 8008d3e:	dc23      	bgt.n	8008d88 <__ieee754_log+0x54>
 8008d40:	004b      	lsls	r3, r1, #1
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	4303      	orrs	r3, r0
 8008d46:	d107      	bne.n	8008d58 <__ieee754_log+0x24>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	49b5      	ldr	r1, [pc, #724]	; (8009024 <__ieee754_log+0x2f0>)
 8008d50:	f7f8 fe20 	bl	8001994 <__aeabi_ddiv>
 8008d54:	b00d      	add	sp, #52	; 0x34
 8008d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	da06      	bge.n	8008d6a <__ieee754_log+0x36>
 8008d5c:	0002      	movs	r2, r0
 8008d5e:	000b      	movs	r3, r1
 8008d60:	f7f9 fc94 	bl	800268c <__aeabi_dsub>
 8008d64:	2200      	movs	r2, #0
 8008d66:	2300      	movs	r3, #0
 8008d68:	e7f2      	b.n	8008d50 <__ieee754_log+0x1c>
 8008d6a:	4baf      	ldr	r3, [pc, #700]	; (8009028 <__ieee754_log+0x2f4>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f7f9 fa1b 	bl	80021a8 <__aeabi_dmul>
 8008d72:	2336      	movs	r3, #54	; 0x36
 8008d74:	000e      	movs	r6, r1
 8008d76:	425b      	negs	r3, r3
 8008d78:	4aac      	ldr	r2, [pc, #688]	; (800902c <__ieee754_log+0x2f8>)
 8008d7a:	4296      	cmp	r6, r2
 8008d7c:	dd06      	ble.n	8008d8c <__ieee754_log+0x58>
 8008d7e:	0002      	movs	r2, r0
 8008d80:	000b      	movs	r3, r1
 8008d82:	f7f8 faeb 	bl	800135c <__aeabi_dadd>
 8008d86:	e7e5      	b.n	8008d54 <__ieee754_log+0x20>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	e7f5      	b.n	8008d78 <__ieee754_log+0x44>
 8008d8c:	4ca8      	ldr	r4, [pc, #672]	; (8009030 <__ieee754_log+0x2fc>)
 8008d8e:	1532      	asrs	r2, r6, #20
 8008d90:	1912      	adds	r2, r2, r4
 8008d92:	0336      	lsls	r6, r6, #12
 8008d94:	4ca7      	ldr	r4, [pc, #668]	; (8009034 <__ieee754_log+0x300>)
 8008d96:	18d2      	adds	r2, r2, r3
 8008d98:	0b33      	lsrs	r3, r6, #12
 8008d9a:	9302      	str	r3, [sp, #8]
 8008d9c:	191c      	adds	r4, r3, r4
 8008d9e:	2380      	movs	r3, #128	; 0x80
 8008da0:	035b      	lsls	r3, r3, #13
 8008da2:	4023      	ands	r3, r4
 8008da4:	4ca4      	ldr	r4, [pc, #656]	; (8009038 <__ieee754_log+0x304>)
 8008da6:	9d02      	ldr	r5, [sp, #8]
 8008da8:	405c      	eors	r4, r3
 8008daa:	151b      	asrs	r3, r3, #20
 8008dac:	189b      	adds	r3, r3, r2
 8008dae:	4325      	orrs	r5, r4
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	2200      	movs	r2, #0
 8008db4:	4ba0      	ldr	r3, [pc, #640]	; (8009038 <__ieee754_log+0x304>)
 8008db6:	0029      	movs	r1, r5
 8008db8:	f7f9 fc68 	bl	800268c <__aeabi_dsub>
 8008dbc:	9b02      	ldr	r3, [sp, #8]
 8008dbe:	0006      	movs	r6, r0
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	031b      	lsls	r3, r3, #12
 8008dc4:	000f      	movs	r7, r1
 8008dc6:	0b1b      	lsrs	r3, r3, #12
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	dc64      	bgt.n	8008e98 <__ieee754_log+0x164>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f7f7 fb32 	bl	8000438 <__aeabi_dcmpeq>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d019      	beq.n	8008e0c <__ieee754_log+0xd8>
 8008dd8:	9b00      	ldr	r3, [sp, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d100      	bne.n	8008de0 <__ieee754_log+0xac>
 8008dde:	e11c      	b.n	800901a <__ieee754_log+0x2e6>
 8008de0:	0018      	movs	r0, r3
 8008de2:	f7f9 ffed 	bl	8002dc0 <__aeabi_i2d>
 8008de6:	4a95      	ldr	r2, [pc, #596]	; (800903c <__ieee754_log+0x308>)
 8008de8:	4b95      	ldr	r3, [pc, #596]	; (8009040 <__ieee754_log+0x30c>)
 8008dea:	0004      	movs	r4, r0
 8008dec:	000d      	movs	r5, r1
 8008dee:	f7f9 f9db 	bl	80021a8 <__aeabi_dmul>
 8008df2:	4a94      	ldr	r2, [pc, #592]	; (8009044 <__ieee754_log+0x310>)
 8008df4:	0006      	movs	r6, r0
 8008df6:	000f      	movs	r7, r1
 8008df8:	4b93      	ldr	r3, [pc, #588]	; (8009048 <__ieee754_log+0x314>)
 8008dfa:	0020      	movs	r0, r4
 8008dfc:	0029      	movs	r1, r5
 8008dfe:	f7f9 f9d3 	bl	80021a8 <__aeabi_dmul>
 8008e02:	0002      	movs	r2, r0
 8008e04:	000b      	movs	r3, r1
 8008e06:	0030      	movs	r0, r6
 8008e08:	0039      	movs	r1, r7
 8008e0a:	e7ba      	b.n	8008d82 <__ieee754_log+0x4e>
 8008e0c:	4a8f      	ldr	r2, [pc, #572]	; (800904c <__ieee754_log+0x318>)
 8008e0e:	4b90      	ldr	r3, [pc, #576]	; (8009050 <__ieee754_log+0x31c>)
 8008e10:	0030      	movs	r0, r6
 8008e12:	0039      	movs	r1, r7
 8008e14:	f7f9 f9c8 	bl	80021a8 <__aeabi_dmul>
 8008e18:	0002      	movs	r2, r0
 8008e1a:	000b      	movs	r3, r1
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	498d      	ldr	r1, [pc, #564]	; (8009054 <__ieee754_log+0x320>)
 8008e20:	f7f9 fc34 	bl	800268c <__aeabi_dsub>
 8008e24:	0032      	movs	r2, r6
 8008e26:	0004      	movs	r4, r0
 8008e28:	000d      	movs	r5, r1
 8008e2a:	003b      	movs	r3, r7
 8008e2c:	0030      	movs	r0, r6
 8008e2e:	0039      	movs	r1, r7
 8008e30:	f7f9 f9ba 	bl	80021a8 <__aeabi_dmul>
 8008e34:	000b      	movs	r3, r1
 8008e36:	0002      	movs	r2, r0
 8008e38:	0029      	movs	r1, r5
 8008e3a:	0020      	movs	r0, r4
 8008e3c:	f7f9 f9b4 	bl	80021a8 <__aeabi_dmul>
 8008e40:	9b00      	ldr	r3, [sp, #0]
 8008e42:	9002      	str	r0, [sp, #8]
 8008e44:	9103      	str	r1, [sp, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d106      	bne.n	8008e58 <__ieee754_log+0x124>
 8008e4a:	0002      	movs	r2, r0
 8008e4c:	000b      	movs	r3, r1
 8008e4e:	0030      	movs	r0, r6
 8008e50:	0039      	movs	r1, r7
 8008e52:	f7f9 fc1b 	bl	800268c <__aeabi_dsub>
 8008e56:	e77d      	b.n	8008d54 <__ieee754_log+0x20>
 8008e58:	9800      	ldr	r0, [sp, #0]
 8008e5a:	f7f9 ffb1 	bl	8002dc0 <__aeabi_i2d>
 8008e5e:	4a77      	ldr	r2, [pc, #476]	; (800903c <__ieee754_log+0x308>)
 8008e60:	4b77      	ldr	r3, [pc, #476]	; (8009040 <__ieee754_log+0x30c>)
 8008e62:	0004      	movs	r4, r0
 8008e64:	000d      	movs	r5, r1
 8008e66:	f7f9 f99f 	bl	80021a8 <__aeabi_dmul>
 8008e6a:	4a76      	ldr	r2, [pc, #472]	; (8009044 <__ieee754_log+0x310>)
 8008e6c:	9000      	str	r0, [sp, #0]
 8008e6e:	9101      	str	r1, [sp, #4]
 8008e70:	4b75      	ldr	r3, [pc, #468]	; (8009048 <__ieee754_log+0x314>)
 8008e72:	0020      	movs	r0, r4
 8008e74:	0029      	movs	r1, r5
 8008e76:	f7f9 f997 	bl	80021a8 <__aeabi_dmul>
 8008e7a:	0002      	movs	r2, r0
 8008e7c:	000b      	movs	r3, r1
 8008e7e:	9802      	ldr	r0, [sp, #8]
 8008e80:	9903      	ldr	r1, [sp, #12]
 8008e82:	f7f9 fc03 	bl	800268c <__aeabi_dsub>
 8008e86:	0032      	movs	r2, r6
 8008e88:	003b      	movs	r3, r7
 8008e8a:	f7f9 fbff 	bl	800268c <__aeabi_dsub>
 8008e8e:	0002      	movs	r2, r0
 8008e90:	000b      	movs	r3, r1
 8008e92:	9800      	ldr	r0, [sp, #0]
 8008e94:	9901      	ldr	r1, [sp, #4]
 8008e96:	e7dc      	b.n	8008e52 <__ieee754_log+0x11e>
 8008e98:	2380      	movs	r3, #128	; 0x80
 8008e9a:	05db      	lsls	r3, r3, #23
 8008e9c:	f7f8 fa5e 	bl	800135c <__aeabi_dadd>
 8008ea0:	0002      	movs	r2, r0
 8008ea2:	000b      	movs	r3, r1
 8008ea4:	0030      	movs	r0, r6
 8008ea6:	0039      	movs	r1, r7
 8008ea8:	f7f8 fd74 	bl	8001994 <__aeabi_ddiv>
 8008eac:	9004      	str	r0, [sp, #16]
 8008eae:	9105      	str	r1, [sp, #20]
 8008eb0:	9800      	ldr	r0, [sp, #0]
 8008eb2:	f7f9 ff85 	bl	8002dc0 <__aeabi_i2d>
 8008eb6:	9a04      	ldr	r2, [sp, #16]
 8008eb8:	9b05      	ldr	r3, [sp, #20]
 8008eba:	9006      	str	r0, [sp, #24]
 8008ebc:	9107      	str	r1, [sp, #28]
 8008ebe:	0010      	movs	r0, r2
 8008ec0:	0019      	movs	r1, r3
 8008ec2:	f7f9 f971 	bl	80021a8 <__aeabi_dmul>
 8008ec6:	4a64      	ldr	r2, [pc, #400]	; (8009058 <__ieee754_log+0x324>)
 8008ec8:	9b02      	ldr	r3, [sp, #8]
 8008eca:	4694      	mov	ip, r2
 8008ecc:	4463      	add	r3, ip
 8008ece:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ed0:	0002      	movs	r2, r0
 8008ed2:	000b      	movs	r3, r1
 8008ed4:	9008      	str	r0, [sp, #32]
 8008ed6:	9109      	str	r1, [sp, #36]	; 0x24
 8008ed8:	f7f9 f966 	bl	80021a8 <__aeabi_dmul>
 8008edc:	0004      	movs	r4, r0
 8008ede:	000d      	movs	r5, r1
 8008ee0:	4a5e      	ldr	r2, [pc, #376]	; (800905c <__ieee754_log+0x328>)
 8008ee2:	4b5f      	ldr	r3, [pc, #380]	; (8009060 <__ieee754_log+0x32c>)
 8008ee4:	f7f9 f960 	bl	80021a8 <__aeabi_dmul>
 8008ee8:	4a5e      	ldr	r2, [pc, #376]	; (8009064 <__ieee754_log+0x330>)
 8008eea:	4b5f      	ldr	r3, [pc, #380]	; (8009068 <__ieee754_log+0x334>)
 8008eec:	f7f8 fa36 	bl	800135c <__aeabi_dadd>
 8008ef0:	0022      	movs	r2, r4
 8008ef2:	002b      	movs	r3, r5
 8008ef4:	f7f9 f958 	bl	80021a8 <__aeabi_dmul>
 8008ef8:	4a5c      	ldr	r2, [pc, #368]	; (800906c <__ieee754_log+0x338>)
 8008efa:	4b5d      	ldr	r3, [pc, #372]	; (8009070 <__ieee754_log+0x33c>)
 8008efc:	f7f8 fa2e 	bl	800135c <__aeabi_dadd>
 8008f00:	0022      	movs	r2, r4
 8008f02:	002b      	movs	r3, r5
 8008f04:	f7f9 f950 	bl	80021a8 <__aeabi_dmul>
 8008f08:	4a5a      	ldr	r2, [pc, #360]	; (8009074 <__ieee754_log+0x340>)
 8008f0a:	4b5b      	ldr	r3, [pc, #364]	; (8009078 <__ieee754_log+0x344>)
 8008f0c:	f7f8 fa26 	bl	800135c <__aeabi_dadd>
 8008f10:	9a08      	ldr	r2, [sp, #32]
 8008f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f14:	f7f9 f948 	bl	80021a8 <__aeabi_dmul>
 8008f18:	4a58      	ldr	r2, [pc, #352]	; (800907c <__ieee754_log+0x348>)
 8008f1a:	9008      	str	r0, [sp, #32]
 8008f1c:	9109      	str	r1, [sp, #36]	; 0x24
 8008f1e:	4b58      	ldr	r3, [pc, #352]	; (8009080 <__ieee754_log+0x34c>)
 8008f20:	0020      	movs	r0, r4
 8008f22:	0029      	movs	r1, r5
 8008f24:	f7f9 f940 	bl	80021a8 <__aeabi_dmul>
 8008f28:	4a56      	ldr	r2, [pc, #344]	; (8009084 <__ieee754_log+0x350>)
 8008f2a:	4b57      	ldr	r3, [pc, #348]	; (8009088 <__ieee754_log+0x354>)
 8008f2c:	f7f8 fa16 	bl	800135c <__aeabi_dadd>
 8008f30:	0022      	movs	r2, r4
 8008f32:	002b      	movs	r3, r5
 8008f34:	f7f9 f938 	bl	80021a8 <__aeabi_dmul>
 8008f38:	4a54      	ldr	r2, [pc, #336]	; (800908c <__ieee754_log+0x358>)
 8008f3a:	4b55      	ldr	r3, [pc, #340]	; (8009090 <__ieee754_log+0x35c>)
 8008f3c:	f7f8 fa0e 	bl	800135c <__aeabi_dadd>
 8008f40:	0022      	movs	r2, r4
 8008f42:	002b      	movs	r3, r5
 8008f44:	f7f9 f930 	bl	80021a8 <__aeabi_dmul>
 8008f48:	0002      	movs	r2, r0
 8008f4a:	000b      	movs	r3, r1
 8008f4c:	9808      	ldr	r0, [sp, #32]
 8008f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f50:	f7f8 fa04 	bl	800135c <__aeabi_dadd>
 8008f54:	9a02      	ldr	r2, [sp, #8]
 8008f56:	4b4f      	ldr	r3, [pc, #316]	; (8009094 <__ieee754_log+0x360>)
 8008f58:	0004      	movs	r4, r0
 8008f5a:	1a9b      	subs	r3, r3, r2
 8008f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f5e:	000d      	movs	r5, r1
 8008f60:	4313      	orrs	r3, r2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	dd34      	ble.n	8008fd0 <__ieee754_log+0x29c>
 8008f66:	2200      	movs	r2, #0
 8008f68:	4b3a      	ldr	r3, [pc, #232]	; (8009054 <__ieee754_log+0x320>)
 8008f6a:	0030      	movs	r0, r6
 8008f6c:	0039      	movs	r1, r7
 8008f6e:	f7f9 f91b 	bl	80021a8 <__aeabi_dmul>
 8008f72:	0032      	movs	r2, r6
 8008f74:	003b      	movs	r3, r7
 8008f76:	f7f9 f917 	bl	80021a8 <__aeabi_dmul>
 8008f7a:	9002      	str	r0, [sp, #8]
 8008f7c:	9103      	str	r1, [sp, #12]
 8008f7e:	0002      	movs	r2, r0
 8008f80:	000b      	movs	r3, r1
 8008f82:	0020      	movs	r0, r4
 8008f84:	0029      	movs	r1, r5
 8008f86:	f7f8 f9e9 	bl	800135c <__aeabi_dadd>
 8008f8a:	9a04      	ldr	r2, [sp, #16]
 8008f8c:	9b05      	ldr	r3, [sp, #20]
 8008f8e:	f7f9 f90b 	bl	80021a8 <__aeabi_dmul>
 8008f92:	9b00      	ldr	r3, [sp, #0]
 8008f94:	0004      	movs	r4, r0
 8008f96:	000d      	movs	r5, r1
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <__ieee754_log+0x276>
 8008f9c:	0002      	movs	r2, r0
 8008f9e:	000b      	movs	r3, r1
 8008fa0:	9802      	ldr	r0, [sp, #8]
 8008fa2:	9903      	ldr	r1, [sp, #12]
 8008fa4:	f7f9 fb72 	bl	800268c <__aeabi_dsub>
 8008fa8:	e74f      	b.n	8008e4a <__ieee754_log+0x116>
 8008faa:	4a24      	ldr	r2, [pc, #144]	; (800903c <__ieee754_log+0x308>)
 8008fac:	4b24      	ldr	r3, [pc, #144]	; (8009040 <__ieee754_log+0x30c>)
 8008fae:	9806      	ldr	r0, [sp, #24]
 8008fb0:	9907      	ldr	r1, [sp, #28]
 8008fb2:	f7f9 f8f9 	bl	80021a8 <__aeabi_dmul>
 8008fb6:	4a23      	ldr	r2, [pc, #140]	; (8009044 <__ieee754_log+0x310>)
 8008fb8:	9000      	str	r0, [sp, #0]
 8008fba:	9101      	str	r1, [sp, #4]
 8008fbc:	9806      	ldr	r0, [sp, #24]
 8008fbe:	9907      	ldr	r1, [sp, #28]
 8008fc0:	4b21      	ldr	r3, [pc, #132]	; (8009048 <__ieee754_log+0x314>)
 8008fc2:	f7f9 f8f1 	bl	80021a8 <__aeabi_dmul>
 8008fc6:	0022      	movs	r2, r4
 8008fc8:	002b      	movs	r3, r5
 8008fca:	f7f8 f9c7 	bl	800135c <__aeabi_dadd>
 8008fce:	e754      	b.n	8008e7a <__ieee754_log+0x146>
 8008fd0:	0002      	movs	r2, r0
 8008fd2:	000b      	movs	r3, r1
 8008fd4:	0030      	movs	r0, r6
 8008fd6:	0039      	movs	r1, r7
 8008fd8:	f7f9 fb58 	bl	800268c <__aeabi_dsub>
 8008fdc:	9a04      	ldr	r2, [sp, #16]
 8008fde:	9b05      	ldr	r3, [sp, #20]
 8008fe0:	f7f9 f8e2 	bl	80021a8 <__aeabi_dmul>
 8008fe4:	9b00      	ldr	r3, [sp, #0]
 8008fe6:	0004      	movs	r4, r0
 8008fe8:	000d      	movs	r5, r1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d102      	bne.n	8008ff4 <__ieee754_log+0x2c0>
 8008fee:	0002      	movs	r2, r0
 8008ff0:	000b      	movs	r3, r1
 8008ff2:	e72c      	b.n	8008e4e <__ieee754_log+0x11a>
 8008ff4:	4a11      	ldr	r2, [pc, #68]	; (800903c <__ieee754_log+0x308>)
 8008ff6:	4b12      	ldr	r3, [pc, #72]	; (8009040 <__ieee754_log+0x30c>)
 8008ff8:	9806      	ldr	r0, [sp, #24]
 8008ffa:	9907      	ldr	r1, [sp, #28]
 8008ffc:	f7f9 f8d4 	bl	80021a8 <__aeabi_dmul>
 8009000:	4a10      	ldr	r2, [pc, #64]	; (8009044 <__ieee754_log+0x310>)
 8009002:	9000      	str	r0, [sp, #0]
 8009004:	9101      	str	r1, [sp, #4]
 8009006:	9806      	ldr	r0, [sp, #24]
 8009008:	9907      	ldr	r1, [sp, #28]
 800900a:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <__ieee754_log+0x314>)
 800900c:	f7f9 f8cc 	bl	80021a8 <__aeabi_dmul>
 8009010:	0002      	movs	r2, r0
 8009012:	000b      	movs	r3, r1
 8009014:	0020      	movs	r0, r4
 8009016:	0029      	movs	r1, r5
 8009018:	e733      	b.n	8008e82 <__ieee754_log+0x14e>
 800901a:	2000      	movs	r0, #0
 800901c:	2100      	movs	r1, #0
 800901e:	e699      	b.n	8008d54 <__ieee754_log+0x20>
 8009020:	000fffff 	.word	0x000fffff
 8009024:	c3500000 	.word	0xc3500000
 8009028:	43500000 	.word	0x43500000
 800902c:	7fefffff 	.word	0x7fefffff
 8009030:	fffffc01 	.word	0xfffffc01
 8009034:	00095f64 	.word	0x00095f64
 8009038:	3ff00000 	.word	0x3ff00000
 800903c:	fee00000 	.word	0xfee00000
 8009040:	3fe62e42 	.word	0x3fe62e42
 8009044:	35793c76 	.word	0x35793c76
 8009048:	3dea39ef 	.word	0x3dea39ef
 800904c:	55555555 	.word	0x55555555
 8009050:	3fd55555 	.word	0x3fd55555
 8009054:	3fe00000 	.word	0x3fe00000
 8009058:	fff9eb86 	.word	0xfff9eb86
 800905c:	df3e5244 	.word	0xdf3e5244
 8009060:	3fc2f112 	.word	0x3fc2f112
 8009064:	96cb03de 	.word	0x96cb03de
 8009068:	3fc74664 	.word	0x3fc74664
 800906c:	94229359 	.word	0x94229359
 8009070:	3fd24924 	.word	0x3fd24924
 8009074:	55555593 	.word	0x55555593
 8009078:	3fe55555 	.word	0x3fe55555
 800907c:	d078c69f 	.word	0xd078c69f
 8009080:	3fc39a09 	.word	0x3fc39a09
 8009084:	1d8e78af 	.word	0x1d8e78af
 8009088:	3fcc71c5 	.word	0x3fcc71c5
 800908c:	9997fa04 	.word	0x9997fa04
 8009090:	3fd99999 	.word	0x3fd99999
 8009094:	0006b851 	.word	0x0006b851

08009098 <matherr>:
 8009098:	2000      	movs	r0, #0
 800909a:	4770      	bx	lr

0800909c <nan>:
 800909c:	2000      	movs	r0, #0
 800909e:	4901      	ldr	r1, [pc, #4]	; (80090a4 <nan+0x8>)
 80090a0:	4770      	bx	lr
 80090a2:	46c0      	nop			; (mov r8, r8)
 80090a4:	7ff80000 	.word	0x7ff80000

080090a8 <_init>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ae:	bc08      	pop	{r3}
 80090b0:	469e      	mov	lr, r3
 80090b2:	4770      	bx	lr

080090b4 <_fini>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	46c0      	nop			; (mov r8, r8)
 80090b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ba:	bc08      	pop	{r3}
 80090bc:	469e      	mov	lr, r3
 80090be:	4770      	bx	lr
