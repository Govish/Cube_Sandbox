
pca9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08004b20  08004b20  00014b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b8  080053b8  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080053b8  080053b8  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053b8  080053b8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080053c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000084  08005444  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08005444  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cb5  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003159  00000000  00000000  00038d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  0003bec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  0003cde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019e0f  00000000  00000000  0003db90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011259  00000000  00000000  0005799f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ffc2  00000000  00000000  00068bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8bba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd8  00000000  00000000  000e8c38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b08 	.word	0x08004b08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08004b08 	.word	0x08004b08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 f9d3 	bl	80005dc <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 f92b 	bl	800049c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f9c5 	bl	80005dc <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 f9bb 	bl	80005dc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 f94d 	bl	8000514 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 f943 	bl	8000514 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f8a9 	bl	80003fc <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f82b 	bl	8000310 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f89b 	bl	80003fc <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f891 	bl	80003fc <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f839 	bl	8000360 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f82f 	bl	8000360 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__eqsf2>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	0042      	lsls	r2, r0, #1
 8000314:	024e      	lsls	r6, r1, #9
 8000316:	004c      	lsls	r4, r1, #1
 8000318:	0245      	lsls	r5, r0, #9
 800031a:	0a6d      	lsrs	r5, r5, #9
 800031c:	0e12      	lsrs	r2, r2, #24
 800031e:	0fc3      	lsrs	r3, r0, #31
 8000320:	0a76      	lsrs	r6, r6, #9
 8000322:	0e24      	lsrs	r4, r4, #24
 8000324:	0fc9      	lsrs	r1, r1, #31
 8000326:	2aff      	cmp	r2, #255	; 0xff
 8000328:	d00f      	beq.n	800034a <__eqsf2+0x3a>
 800032a:	2cff      	cmp	r4, #255	; 0xff
 800032c:	d011      	beq.n	8000352 <__eqsf2+0x42>
 800032e:	2001      	movs	r0, #1
 8000330:	42a2      	cmp	r2, r4
 8000332:	d000      	beq.n	8000336 <__eqsf2+0x26>
 8000334:	bd70      	pop	{r4, r5, r6, pc}
 8000336:	42b5      	cmp	r5, r6
 8000338:	d1fc      	bne.n	8000334 <__eqsf2+0x24>
 800033a:	428b      	cmp	r3, r1
 800033c:	d00d      	beq.n	800035a <__eqsf2+0x4a>
 800033e:	2a00      	cmp	r2, #0
 8000340:	d1f8      	bne.n	8000334 <__eqsf2+0x24>
 8000342:	0028      	movs	r0, r5
 8000344:	1e45      	subs	r5, r0, #1
 8000346:	41a8      	sbcs	r0, r5
 8000348:	e7f4      	b.n	8000334 <__eqsf2+0x24>
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d1f1      	bne.n	8000334 <__eqsf2+0x24>
 8000350:	e7eb      	b.n	800032a <__eqsf2+0x1a>
 8000352:	2001      	movs	r0, #1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d1ed      	bne.n	8000334 <__eqsf2+0x24>
 8000358:	e7e9      	b.n	800032e <__eqsf2+0x1e>
 800035a:	2000      	movs	r0, #0
 800035c:	e7ea      	b.n	8000334 <__eqsf2+0x24>
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <__gesf2>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	004a      	lsls	r2, r1, #1
 8000364:	024e      	lsls	r6, r1, #9
 8000366:	0245      	lsls	r5, r0, #9
 8000368:	0044      	lsls	r4, r0, #1
 800036a:	0a6d      	lsrs	r5, r5, #9
 800036c:	0e24      	lsrs	r4, r4, #24
 800036e:	0fc3      	lsrs	r3, r0, #31
 8000370:	0a76      	lsrs	r6, r6, #9
 8000372:	0e12      	lsrs	r2, r2, #24
 8000374:	0fc9      	lsrs	r1, r1, #31
 8000376:	2cff      	cmp	r4, #255	; 0xff
 8000378:	d015      	beq.n	80003a6 <__gesf2+0x46>
 800037a:	2aff      	cmp	r2, #255	; 0xff
 800037c:	d00e      	beq.n	800039c <__gesf2+0x3c>
 800037e:	2c00      	cmp	r4, #0
 8000380:	d115      	bne.n	80003ae <__gesf2+0x4e>
 8000382:	2a00      	cmp	r2, #0
 8000384:	d101      	bne.n	800038a <__gesf2+0x2a>
 8000386:	2e00      	cmp	r6, #0
 8000388:	d01c      	beq.n	80003c4 <__gesf2+0x64>
 800038a:	2d00      	cmp	r5, #0
 800038c:	d014      	beq.n	80003b8 <__gesf2+0x58>
 800038e:	428b      	cmp	r3, r1
 8000390:	d027      	beq.n	80003e2 <__gesf2+0x82>
 8000392:	2002      	movs	r0, #2
 8000394:	3b01      	subs	r3, #1
 8000396:	4018      	ands	r0, r3
 8000398:	3801      	subs	r0, #1
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	2e00      	cmp	r6, #0
 800039e:	d0ee      	beq.n	800037e <__gesf2+0x1e>
 80003a0:	2002      	movs	r0, #2
 80003a2:	4240      	negs	r0, r0
 80003a4:	e7f9      	b.n	800039a <__gesf2+0x3a>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d1fa      	bne.n	80003a0 <__gesf2+0x40>
 80003aa:	2aff      	cmp	r2, #255	; 0xff
 80003ac:	d00e      	beq.n	80003cc <__gesf2+0x6c>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d10e      	bne.n	80003d0 <__gesf2+0x70>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d0ed      	beq.n	8000392 <__gesf2+0x32>
 80003b6:	e00b      	b.n	80003d0 <__gesf2+0x70>
 80003b8:	2301      	movs	r3, #1
 80003ba:	3901      	subs	r1, #1
 80003bc:	4399      	bics	r1, r3
 80003be:	0008      	movs	r0, r1
 80003c0:	3001      	adds	r0, #1
 80003c2:	e7ea      	b.n	800039a <__gesf2+0x3a>
 80003c4:	2000      	movs	r0, #0
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	d0e7      	beq.n	800039a <__gesf2+0x3a>
 80003ca:	e7e2      	b.n	8000392 <__gesf2+0x32>
 80003cc:	2e00      	cmp	r6, #0
 80003ce:	d1e7      	bne.n	80003a0 <__gesf2+0x40>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d1de      	bne.n	8000392 <__gesf2+0x32>
 80003d4:	4294      	cmp	r4, r2
 80003d6:	dd05      	ble.n	80003e4 <__gesf2+0x84>
 80003d8:	2102      	movs	r1, #2
 80003da:	1e58      	subs	r0, r3, #1
 80003dc:	4008      	ands	r0, r1
 80003de:	3801      	subs	r0, #1
 80003e0:	e7db      	b.n	800039a <__gesf2+0x3a>
 80003e2:	2400      	movs	r4, #0
 80003e4:	42a2      	cmp	r2, r4
 80003e6:	dc04      	bgt.n	80003f2 <__gesf2+0x92>
 80003e8:	42b5      	cmp	r5, r6
 80003ea:	d8d2      	bhi.n	8000392 <__gesf2+0x32>
 80003ec:	2000      	movs	r0, #0
 80003ee:	42b5      	cmp	r5, r6
 80003f0:	d2d3      	bcs.n	800039a <__gesf2+0x3a>
 80003f2:	1e58      	subs	r0, r3, #1
 80003f4:	2301      	movs	r3, #1
 80003f6:	4398      	bics	r0, r3
 80003f8:	3001      	adds	r0, #1
 80003fa:	e7ce      	b.n	800039a <__gesf2+0x3a>

080003fc <__lesf2>:
 80003fc:	b530      	push	{r4, r5, lr}
 80003fe:	0042      	lsls	r2, r0, #1
 8000400:	0244      	lsls	r4, r0, #9
 8000402:	024d      	lsls	r5, r1, #9
 8000404:	0fc3      	lsrs	r3, r0, #31
 8000406:	0048      	lsls	r0, r1, #1
 8000408:	0a64      	lsrs	r4, r4, #9
 800040a:	0e12      	lsrs	r2, r2, #24
 800040c:	0a6d      	lsrs	r5, r5, #9
 800040e:	0e00      	lsrs	r0, r0, #24
 8000410:	0fc9      	lsrs	r1, r1, #31
 8000412:	2aff      	cmp	r2, #255	; 0xff
 8000414:	d012      	beq.n	800043c <__lesf2+0x40>
 8000416:	28ff      	cmp	r0, #255	; 0xff
 8000418:	d00c      	beq.n	8000434 <__lesf2+0x38>
 800041a:	2a00      	cmp	r2, #0
 800041c:	d112      	bne.n	8000444 <__lesf2+0x48>
 800041e:	2800      	cmp	r0, #0
 8000420:	d119      	bne.n	8000456 <__lesf2+0x5a>
 8000422:	2d00      	cmp	r5, #0
 8000424:	d117      	bne.n	8000456 <__lesf2+0x5a>
 8000426:	2c00      	cmp	r4, #0
 8000428:	d02b      	beq.n	8000482 <__lesf2+0x86>
 800042a:	2002      	movs	r0, #2
 800042c:	3b01      	subs	r3, #1
 800042e:	4018      	ands	r0, r3
 8000430:	3801      	subs	r0, #1
 8000432:	e026      	b.n	8000482 <__lesf2+0x86>
 8000434:	2d00      	cmp	r5, #0
 8000436:	d0f0      	beq.n	800041a <__lesf2+0x1e>
 8000438:	2002      	movs	r0, #2
 800043a:	e022      	b.n	8000482 <__lesf2+0x86>
 800043c:	2c00      	cmp	r4, #0
 800043e:	d1fb      	bne.n	8000438 <__lesf2+0x3c>
 8000440:	28ff      	cmp	r0, #255	; 0xff
 8000442:	d01f      	beq.n	8000484 <__lesf2+0x88>
 8000444:	2800      	cmp	r0, #0
 8000446:	d11f      	bne.n	8000488 <__lesf2+0x8c>
 8000448:	2d00      	cmp	r5, #0
 800044a:	d11d      	bne.n	8000488 <__lesf2+0x8c>
 800044c:	2002      	movs	r0, #2
 800044e:	3b01      	subs	r3, #1
 8000450:	4018      	ands	r0, r3
 8000452:	3801      	subs	r0, #1
 8000454:	e015      	b.n	8000482 <__lesf2+0x86>
 8000456:	2c00      	cmp	r4, #0
 8000458:	d00e      	beq.n	8000478 <__lesf2+0x7c>
 800045a:	428b      	cmp	r3, r1
 800045c:	d1e5      	bne.n	800042a <__lesf2+0x2e>
 800045e:	2200      	movs	r2, #0
 8000460:	4290      	cmp	r0, r2
 8000462:	dc04      	bgt.n	800046e <__lesf2+0x72>
 8000464:	42ac      	cmp	r4, r5
 8000466:	d8e0      	bhi.n	800042a <__lesf2+0x2e>
 8000468:	2000      	movs	r0, #0
 800046a:	42ac      	cmp	r4, r5
 800046c:	d209      	bcs.n	8000482 <__lesf2+0x86>
 800046e:	1e58      	subs	r0, r3, #1
 8000470:	2301      	movs	r3, #1
 8000472:	4398      	bics	r0, r3
 8000474:	3001      	adds	r0, #1
 8000476:	e004      	b.n	8000482 <__lesf2+0x86>
 8000478:	2301      	movs	r3, #1
 800047a:	3901      	subs	r1, #1
 800047c:	4399      	bics	r1, r3
 800047e:	0008      	movs	r0, r1
 8000480:	3001      	adds	r0, #1
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	2d00      	cmp	r5, #0
 8000486:	d1d7      	bne.n	8000438 <__lesf2+0x3c>
 8000488:	428b      	cmp	r3, r1
 800048a:	d1ce      	bne.n	800042a <__lesf2+0x2e>
 800048c:	4282      	cmp	r2, r0
 800048e:	dde7      	ble.n	8000460 <__lesf2+0x64>
 8000490:	2102      	movs	r1, #2
 8000492:	1e58      	subs	r0, r3, #1
 8000494:	4008      	ands	r0, r1
 8000496:	3801      	subs	r0, #1
 8000498:	e7f3      	b.n	8000482 <__lesf2+0x86>
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__eqdf2>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	464f      	mov	r7, r9
 80004a0:	4646      	mov	r6, r8
 80004a2:	46d6      	mov	lr, sl
 80004a4:	4684      	mov	ip, r0
 80004a6:	b5c0      	push	{r6, r7, lr}
 80004a8:	4680      	mov	r8, r0
 80004aa:	4e19      	ldr	r6, [pc, #100]	; (8000510 <__eqdf2+0x74>)
 80004ac:	0318      	lsls	r0, r3, #12
 80004ae:	030f      	lsls	r7, r1, #12
 80004b0:	004d      	lsls	r5, r1, #1
 80004b2:	0b00      	lsrs	r0, r0, #12
 80004b4:	005c      	lsls	r4, r3, #1
 80004b6:	4682      	mov	sl, r0
 80004b8:	0b3f      	lsrs	r7, r7, #12
 80004ba:	0d6d      	lsrs	r5, r5, #21
 80004bc:	0fc9      	lsrs	r1, r1, #31
 80004be:	4691      	mov	r9, r2
 80004c0:	0d64      	lsrs	r4, r4, #21
 80004c2:	0fdb      	lsrs	r3, r3, #31
 80004c4:	2001      	movs	r0, #1
 80004c6:	42b5      	cmp	r5, r6
 80004c8:	d00a      	beq.n	80004e0 <__eqdf2+0x44>
 80004ca:	42b4      	cmp	r4, r6
 80004cc:	d003      	beq.n	80004d6 <__eqdf2+0x3a>
 80004ce:	42a5      	cmp	r5, r4
 80004d0:	d101      	bne.n	80004d6 <__eqdf2+0x3a>
 80004d2:	4557      	cmp	r7, sl
 80004d4:	d00c      	beq.n	80004f0 <__eqdf2+0x54>
 80004d6:	bc1c      	pop	{r2, r3, r4}
 80004d8:	4690      	mov	r8, r2
 80004da:	4699      	mov	r9, r3
 80004dc:	46a2      	mov	sl, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4666      	mov	r6, ip
 80004e2:	433e      	orrs	r6, r7
 80004e4:	d1f7      	bne.n	80004d6 <__eqdf2+0x3a>
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	d1f5      	bne.n	80004d6 <__eqdf2+0x3a>
 80004ea:	4654      	mov	r4, sl
 80004ec:	4314      	orrs	r4, r2
 80004ee:	d1f2      	bne.n	80004d6 <__eqdf2+0x3a>
 80004f0:	2001      	movs	r0, #1
 80004f2:	45c8      	cmp	r8, r9
 80004f4:	d1ef      	bne.n	80004d6 <__eqdf2+0x3a>
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d007      	beq.n	800050a <__eqdf2+0x6e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d1eb      	bne.n	80004d6 <__eqdf2+0x3a>
 80004fe:	4663      	mov	r3, ip
 8000500:	431f      	orrs	r7, r3
 8000502:	0038      	movs	r0, r7
 8000504:	1e47      	subs	r7, r0, #1
 8000506:	41b8      	sbcs	r0, r7
 8000508:	e7e5      	b.n	80004d6 <__eqdf2+0x3a>
 800050a:	2000      	movs	r0, #0
 800050c:	e7e3      	b.n	80004d6 <__eqdf2+0x3a>
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	000007ff 	.word	0x000007ff

08000514 <__gedf2>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	464f      	mov	r7, r9
 8000518:	4646      	mov	r6, r8
 800051a:	46d6      	mov	lr, sl
 800051c:	004d      	lsls	r5, r1, #1
 800051e:	b5c0      	push	{r6, r7, lr}
 8000520:	030e      	lsls	r6, r1, #12
 8000522:	0fc9      	lsrs	r1, r1, #31
 8000524:	468a      	mov	sl, r1
 8000526:	492c      	ldr	r1, [pc, #176]	; (80005d8 <__gedf2+0xc4>)
 8000528:	031f      	lsls	r7, r3, #12
 800052a:	005c      	lsls	r4, r3, #1
 800052c:	4680      	mov	r8, r0
 800052e:	0b36      	lsrs	r6, r6, #12
 8000530:	0d6d      	lsrs	r5, r5, #21
 8000532:	4691      	mov	r9, r2
 8000534:	0b3f      	lsrs	r7, r7, #12
 8000536:	0d64      	lsrs	r4, r4, #21
 8000538:	0fdb      	lsrs	r3, r3, #31
 800053a:	428d      	cmp	r5, r1
 800053c:	d01e      	beq.n	800057c <__gedf2+0x68>
 800053e:	428c      	cmp	r4, r1
 8000540:	d016      	beq.n	8000570 <__gedf2+0x5c>
 8000542:	2d00      	cmp	r5, #0
 8000544:	d11e      	bne.n	8000584 <__gedf2+0x70>
 8000546:	4330      	orrs	r0, r6
 8000548:	4684      	mov	ip, r0
 800054a:	2c00      	cmp	r4, #0
 800054c:	d101      	bne.n	8000552 <__gedf2+0x3e>
 800054e:	433a      	orrs	r2, r7
 8000550:	d023      	beq.n	800059a <__gedf2+0x86>
 8000552:	4662      	mov	r2, ip
 8000554:	2a00      	cmp	r2, #0
 8000556:	d01a      	beq.n	800058e <__gedf2+0x7a>
 8000558:	459a      	cmp	sl, r3
 800055a:	d029      	beq.n	80005b0 <__gedf2+0x9c>
 800055c:	4651      	mov	r1, sl
 800055e:	2002      	movs	r0, #2
 8000560:	3901      	subs	r1, #1
 8000562:	4008      	ands	r0, r1
 8000564:	3801      	subs	r0, #1
 8000566:	bc1c      	pop	{r2, r3, r4}
 8000568:	4690      	mov	r8, r2
 800056a:	4699      	mov	r9, r3
 800056c:	46a2      	mov	sl, r4
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	0039      	movs	r1, r7
 8000572:	4311      	orrs	r1, r2
 8000574:	d0e5      	beq.n	8000542 <__gedf2+0x2e>
 8000576:	2002      	movs	r0, #2
 8000578:	4240      	negs	r0, r0
 800057a:	e7f4      	b.n	8000566 <__gedf2+0x52>
 800057c:	4330      	orrs	r0, r6
 800057e:	d1fa      	bne.n	8000576 <__gedf2+0x62>
 8000580:	42ac      	cmp	r4, r5
 8000582:	d00f      	beq.n	80005a4 <__gedf2+0x90>
 8000584:	2c00      	cmp	r4, #0
 8000586:	d10f      	bne.n	80005a8 <__gedf2+0x94>
 8000588:	433a      	orrs	r2, r7
 800058a:	d0e7      	beq.n	800055c <__gedf2+0x48>
 800058c:	e00c      	b.n	80005a8 <__gedf2+0x94>
 800058e:	2201      	movs	r2, #1
 8000590:	3b01      	subs	r3, #1
 8000592:	4393      	bics	r3, r2
 8000594:	0018      	movs	r0, r3
 8000596:	3001      	adds	r0, #1
 8000598:	e7e5      	b.n	8000566 <__gedf2+0x52>
 800059a:	4663      	mov	r3, ip
 800059c:	2000      	movs	r0, #0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0e1      	beq.n	8000566 <__gedf2+0x52>
 80005a2:	e7db      	b.n	800055c <__gedf2+0x48>
 80005a4:	433a      	orrs	r2, r7
 80005a6:	d1e6      	bne.n	8000576 <__gedf2+0x62>
 80005a8:	459a      	cmp	sl, r3
 80005aa:	d1d7      	bne.n	800055c <__gedf2+0x48>
 80005ac:	42a5      	cmp	r5, r4
 80005ae:	dcd5      	bgt.n	800055c <__gedf2+0x48>
 80005b0:	42a5      	cmp	r5, r4
 80005b2:	db05      	blt.n	80005c0 <__gedf2+0xac>
 80005b4:	42be      	cmp	r6, r7
 80005b6:	d8d1      	bhi.n	800055c <__gedf2+0x48>
 80005b8:	d008      	beq.n	80005cc <__gedf2+0xb8>
 80005ba:	2000      	movs	r0, #0
 80005bc:	42be      	cmp	r6, r7
 80005be:	d2d2      	bcs.n	8000566 <__gedf2+0x52>
 80005c0:	4650      	mov	r0, sl
 80005c2:	2301      	movs	r3, #1
 80005c4:	3801      	subs	r0, #1
 80005c6:	4398      	bics	r0, r3
 80005c8:	3001      	adds	r0, #1
 80005ca:	e7cc      	b.n	8000566 <__gedf2+0x52>
 80005cc:	45c8      	cmp	r8, r9
 80005ce:	d8c5      	bhi.n	800055c <__gedf2+0x48>
 80005d0:	2000      	movs	r0, #0
 80005d2:	45c8      	cmp	r8, r9
 80005d4:	d3f4      	bcc.n	80005c0 <__gedf2+0xac>
 80005d6:	e7c6      	b.n	8000566 <__gedf2+0x52>
 80005d8:	000007ff 	.word	0x000007ff

080005dc <__ledf2>:
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	464f      	mov	r7, r9
 80005e0:	4646      	mov	r6, r8
 80005e2:	46d6      	mov	lr, sl
 80005e4:	004d      	lsls	r5, r1, #1
 80005e6:	b5c0      	push	{r6, r7, lr}
 80005e8:	030e      	lsls	r6, r1, #12
 80005ea:	0fc9      	lsrs	r1, r1, #31
 80005ec:	468a      	mov	sl, r1
 80005ee:	492e      	ldr	r1, [pc, #184]	; (80006a8 <__ledf2+0xcc>)
 80005f0:	031f      	lsls	r7, r3, #12
 80005f2:	005c      	lsls	r4, r3, #1
 80005f4:	4680      	mov	r8, r0
 80005f6:	0b36      	lsrs	r6, r6, #12
 80005f8:	0d6d      	lsrs	r5, r5, #21
 80005fa:	4691      	mov	r9, r2
 80005fc:	0b3f      	lsrs	r7, r7, #12
 80005fe:	0d64      	lsrs	r4, r4, #21
 8000600:	0fdb      	lsrs	r3, r3, #31
 8000602:	428d      	cmp	r5, r1
 8000604:	d018      	beq.n	8000638 <__ledf2+0x5c>
 8000606:	428c      	cmp	r4, r1
 8000608:	d011      	beq.n	800062e <__ledf2+0x52>
 800060a:	2d00      	cmp	r5, #0
 800060c:	d118      	bne.n	8000640 <__ledf2+0x64>
 800060e:	4330      	orrs	r0, r6
 8000610:	4684      	mov	ip, r0
 8000612:	2c00      	cmp	r4, #0
 8000614:	d11e      	bne.n	8000654 <__ledf2+0x78>
 8000616:	433a      	orrs	r2, r7
 8000618:	d11c      	bne.n	8000654 <__ledf2+0x78>
 800061a:	4663      	mov	r3, ip
 800061c:	2000      	movs	r0, #0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d030      	beq.n	8000684 <__ledf2+0xa8>
 8000622:	4651      	mov	r1, sl
 8000624:	2002      	movs	r0, #2
 8000626:	3901      	subs	r1, #1
 8000628:	4008      	ands	r0, r1
 800062a:	3801      	subs	r0, #1
 800062c:	e02a      	b.n	8000684 <__ledf2+0xa8>
 800062e:	0039      	movs	r1, r7
 8000630:	4311      	orrs	r1, r2
 8000632:	d0ea      	beq.n	800060a <__ledf2+0x2e>
 8000634:	2002      	movs	r0, #2
 8000636:	e025      	b.n	8000684 <__ledf2+0xa8>
 8000638:	4330      	orrs	r0, r6
 800063a:	d1fb      	bne.n	8000634 <__ledf2+0x58>
 800063c:	42ac      	cmp	r4, r5
 800063e:	d026      	beq.n	800068e <__ledf2+0xb2>
 8000640:	2c00      	cmp	r4, #0
 8000642:	d126      	bne.n	8000692 <__ledf2+0xb6>
 8000644:	433a      	orrs	r2, r7
 8000646:	d124      	bne.n	8000692 <__ledf2+0xb6>
 8000648:	4651      	mov	r1, sl
 800064a:	2002      	movs	r0, #2
 800064c:	3901      	subs	r1, #1
 800064e:	4008      	ands	r0, r1
 8000650:	3801      	subs	r0, #1
 8000652:	e017      	b.n	8000684 <__ledf2+0xa8>
 8000654:	4662      	mov	r2, ip
 8000656:	2a00      	cmp	r2, #0
 8000658:	d00f      	beq.n	800067a <__ledf2+0x9e>
 800065a:	459a      	cmp	sl, r3
 800065c:	d1e1      	bne.n	8000622 <__ledf2+0x46>
 800065e:	42a5      	cmp	r5, r4
 8000660:	db05      	blt.n	800066e <__ledf2+0x92>
 8000662:	42be      	cmp	r6, r7
 8000664:	d8dd      	bhi.n	8000622 <__ledf2+0x46>
 8000666:	d019      	beq.n	800069c <__ledf2+0xc0>
 8000668:	2000      	movs	r0, #0
 800066a:	42be      	cmp	r6, r7
 800066c:	d20a      	bcs.n	8000684 <__ledf2+0xa8>
 800066e:	4650      	mov	r0, sl
 8000670:	2301      	movs	r3, #1
 8000672:	3801      	subs	r0, #1
 8000674:	4398      	bics	r0, r3
 8000676:	3001      	adds	r0, #1
 8000678:	e004      	b.n	8000684 <__ledf2+0xa8>
 800067a:	2201      	movs	r2, #1
 800067c:	3b01      	subs	r3, #1
 800067e:	4393      	bics	r3, r2
 8000680:	0018      	movs	r0, r3
 8000682:	3001      	adds	r0, #1
 8000684:	bc1c      	pop	{r2, r3, r4}
 8000686:	4690      	mov	r8, r2
 8000688:	4699      	mov	r9, r3
 800068a:	46a2      	mov	sl, r4
 800068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068e:	433a      	orrs	r2, r7
 8000690:	d1d0      	bne.n	8000634 <__ledf2+0x58>
 8000692:	459a      	cmp	sl, r3
 8000694:	d1c5      	bne.n	8000622 <__ledf2+0x46>
 8000696:	42a5      	cmp	r5, r4
 8000698:	dcc3      	bgt.n	8000622 <__ledf2+0x46>
 800069a:	e7e0      	b.n	800065e <__ledf2+0x82>
 800069c:	45c8      	cmp	r8, r9
 800069e:	d8c0      	bhi.n	8000622 <__ledf2+0x46>
 80006a0:	2000      	movs	r0, #0
 80006a2:	45c8      	cmp	r8, r9
 80006a4:	d3e3      	bcc.n	800066e <__ledf2+0x92>
 80006a6:	e7ed      	b.n	8000684 <__ledf2+0xa8>
 80006a8:	000007ff 	.word	0x000007ff

080006ac <__aeabi_f2d>:
 80006ac:	0041      	lsls	r1, r0, #1
 80006ae:	0e09      	lsrs	r1, r1, #24
 80006b0:	1c4b      	adds	r3, r1, #1
 80006b2:	b570      	push	{r4, r5, r6, lr}
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	0246      	lsls	r6, r0, #9
 80006b8:	0a75      	lsrs	r5, r6, #9
 80006ba:	0fc4      	lsrs	r4, r0, #31
 80006bc:	2b01      	cmp	r3, #1
 80006be:	dd14      	ble.n	80006ea <__aeabi_f2d+0x3e>
 80006c0:	23e0      	movs	r3, #224	; 0xe0
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	076d      	lsls	r5, r5, #29
 80006c6:	0b36      	lsrs	r6, r6, #12
 80006c8:	18cb      	adds	r3, r1, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	0d0a      	lsrs	r2, r1, #20
 80006ce:	0028      	movs	r0, r5
 80006d0:	0512      	lsls	r2, r2, #20
 80006d2:	4d1c      	ldr	r5, [pc, #112]	; (8000744 <__aeabi_f2d+0x98>)
 80006d4:	4332      	orrs	r2, r6
 80006d6:	055b      	lsls	r3, r3, #21
 80006d8:	402a      	ands	r2, r5
 80006da:	085b      	lsrs	r3, r3, #1
 80006dc:	4313      	orrs	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	07e4      	lsls	r4, r4, #31
 80006e2:	085b      	lsrs	r3, r3, #1
 80006e4:	4323      	orrs	r3, r4
 80006e6:	0019      	movs	r1, r3
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	2900      	cmp	r1, #0
 80006ec:	d114      	bne.n	8000718 <__aeabi_f2d+0x6c>
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d01e      	beq.n	8000730 <__aeabi_f2d+0x84>
 80006f2:	0028      	movs	r0, r5
 80006f4:	f000 f82c 	bl	8000750 <__clzsi2>
 80006f8:	280a      	cmp	r0, #10
 80006fa:	dc1c      	bgt.n	8000736 <__aeabi_f2d+0x8a>
 80006fc:	230b      	movs	r3, #11
 80006fe:	002a      	movs	r2, r5
 8000700:	1a1b      	subs	r3, r3, r0
 8000702:	40da      	lsrs	r2, r3
 8000704:	0003      	movs	r3, r0
 8000706:	3315      	adds	r3, #21
 8000708:	409d      	lsls	r5, r3
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <__aeabi_f2d+0x9c>)
 800070c:	0312      	lsls	r2, r2, #12
 800070e:	1a1b      	subs	r3, r3, r0
 8000710:	055b      	lsls	r3, r3, #21
 8000712:	0b16      	lsrs	r6, r2, #12
 8000714:	0d5b      	lsrs	r3, r3, #21
 8000716:	e7d8      	b.n	80006ca <__aeabi_f2d+0x1e>
 8000718:	2d00      	cmp	r5, #0
 800071a:	d006      	beq.n	800072a <__aeabi_f2d+0x7e>
 800071c:	0b32      	lsrs	r2, r6, #12
 800071e:	2680      	movs	r6, #128	; 0x80
 8000720:	0336      	lsls	r6, r6, #12
 8000722:	076d      	lsls	r5, r5, #29
 8000724:	4316      	orrs	r6, r2
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <__aeabi_f2d+0xa0>)
 8000728:	e7cf      	b.n	80006ca <__aeabi_f2d+0x1e>
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <__aeabi_f2d+0xa0>)
 800072c:	2600      	movs	r6, #0
 800072e:	e7cc      	b.n	80006ca <__aeabi_f2d+0x1e>
 8000730:	2300      	movs	r3, #0
 8000732:	2600      	movs	r6, #0
 8000734:	e7c9      	b.n	80006ca <__aeabi_f2d+0x1e>
 8000736:	0003      	movs	r3, r0
 8000738:	002a      	movs	r2, r5
 800073a:	3b0b      	subs	r3, #11
 800073c:	409a      	lsls	r2, r3
 800073e:	2500      	movs	r5, #0
 8000740:	e7e3      	b.n	800070a <__aeabi_f2d+0x5e>
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	800fffff 	.word	0x800fffff
 8000748:	00000389 	.word	0x00000389
 800074c:	000007ff 	.word	0x000007ff

08000750 <__clzsi2>:
 8000750:	211c      	movs	r1, #28
 8000752:	2301      	movs	r3, #1
 8000754:	041b      	lsls	r3, r3, #16
 8000756:	4298      	cmp	r0, r3
 8000758:	d301      	bcc.n	800075e <__clzsi2+0xe>
 800075a:	0c00      	lsrs	r0, r0, #16
 800075c:	3910      	subs	r1, #16
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	4298      	cmp	r0, r3
 8000762:	d301      	bcc.n	8000768 <__clzsi2+0x18>
 8000764:	0a00      	lsrs	r0, r0, #8
 8000766:	3908      	subs	r1, #8
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	4298      	cmp	r0, r3
 800076c:	d301      	bcc.n	8000772 <__clzsi2+0x22>
 800076e:	0900      	lsrs	r0, r0, #4
 8000770:	3904      	subs	r1, #4
 8000772:	a202      	add	r2, pc, #8	; (adr r2, 800077c <__clzsi2+0x2c>)
 8000774:	5c10      	ldrb	r0, [r2, r0]
 8000776:	1840      	adds	r0, r0, r1
 8000778:	4770      	bx	lr
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	02020304 	.word	0x02020304
 8000780:	01010101 	.word	0x01010101
	...

0800078c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_Init+0x24>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_Init+0x24>)
 8000796:	2110      	movs	r1, #16
 8000798:	430a      	orrs	r2, r1
 800079a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800079c:	2000      	movs	r0, #0
 800079e:	f000 f809 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a2:	f003 fadd 	bl	8003d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a6:	2300      	movs	r3, #0
}
 80007a8:	0018      	movs	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80007bc:	f001 fcc6 	bl	800214c <HAL_RCC_GetHCLKFreq>
 80007c0:	0002      	movs	r2, r0
 80007c2:	23fa      	movs	r3, #250	; 0xfa
 80007c4:	0099      	lsls	r1, r3, #2
 80007c6:	0010      	movs	r0, r2
 80007c8:	f7ff fc9e 	bl	8000108 <__udivsi3>
 80007cc:	0003      	movs	r3, r0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 f90d 	bl	80009ee <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	2301      	movs	r3, #1
 80007d8:	425b      	negs	r3, r3
 80007da:	2200      	movs	r2, #0
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 f8e1 	bl	80009a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  uwTick++;
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <HAL_IncTick+0x14>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	4b02      	ldr	r3, [pc, #8]	; (8000800 <HAL_IncTick+0x14>)
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000b8 	.word	0x200000b8

08000804 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <HAL_GetTick+0x10>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	200000b8 	.word	0x200000b8

08000818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000820:	f7ff fff0 	bl	8000804 <HAL_GetTick>
 8000824:	0003      	movs	r3, r0
 8000826:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	d002      	beq.n	8000838 <HAL_Delay+0x20>
  {
     wait++;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	3301      	adds	r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	f7ff ffe3 	bl	8000804 <HAL_GetTick>
 800083e:	0002      	movs	r2, r0
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	429a      	cmp	r2, r3
 8000848:	d8f7      	bhi.n	800083a <HAL_Delay+0x22>
  {
  }
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b004      	add	sp, #16
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	0002      	movs	r2, r0
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	001a      	movs	r2, r3
 8000866:	231f      	movs	r3, #31
 8000868:	401a      	ands	r2, r3
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <NVIC_EnableIRQ+0x28>)
 800086c:	2101      	movs	r1, #1
 800086e:	4091      	lsls	r1, r2
 8000870:	000a      	movs	r2, r1
 8000872:	601a      	str	r2, [r3, #0]
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b002      	add	sp, #8
 800087a:	bd80      	pop	{r7, pc}
 800087c:	e000e100 	.word	0xe000e100

08000880 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	0002      	movs	r2, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b7f      	cmp	r3, #127	; 0x7f
 8000894:	d932      	bls.n	80008fc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000896:	4a2f      	ldr	r2, [pc, #188]	; (8000954 <NVIC_SetPriority+0xd4>)
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	0019      	movs	r1, r3
 800089e:	230f      	movs	r3, #15
 80008a0:	400b      	ands	r3, r1
 80008a2:	3b08      	subs	r3, #8
 80008a4:	089b      	lsrs	r3, r3, #2
 80008a6:	3306      	adds	r3, #6
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	18d3      	adds	r3, r2, r3
 80008ac:	3304      	adds	r3, #4
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	1dfa      	adds	r2, r7, #7
 80008b2:	7812      	ldrb	r2, [r2, #0]
 80008b4:	0011      	movs	r1, r2
 80008b6:	2203      	movs	r2, #3
 80008b8:	400a      	ands	r2, r1
 80008ba:	00d2      	lsls	r2, r2, #3
 80008bc:	21ff      	movs	r1, #255	; 0xff
 80008be:	4091      	lsls	r1, r2
 80008c0:	000a      	movs	r2, r1
 80008c2:	43d2      	mvns	r2, r2
 80008c4:	401a      	ands	r2, r3
 80008c6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	019b      	lsls	r3, r3, #6
 80008cc:	22ff      	movs	r2, #255	; 0xff
 80008ce:	401a      	ands	r2, r3
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	0018      	movs	r0, r3
 80008d6:	2303      	movs	r3, #3
 80008d8:	4003      	ands	r3, r0
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008de:	481d      	ldr	r0, [pc, #116]	; (8000954 <NVIC_SetPriority+0xd4>)
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	001c      	movs	r4, r3
 80008e6:	230f      	movs	r3, #15
 80008e8:	4023      	ands	r3, r4
 80008ea:	3b08      	subs	r3, #8
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	430a      	orrs	r2, r1
 80008f0:	3306      	adds	r3, #6
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	18c3      	adds	r3, r0, r3
 80008f6:	3304      	adds	r3, #4
 80008f8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008fa:	e027      	b.n	800094c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008fc:	4a16      	ldr	r2, [pc, #88]	; (8000958 <NVIC_SetPriority+0xd8>)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b25b      	sxtb	r3, r3
 8000904:	089b      	lsrs	r3, r3, #2
 8000906:	33c0      	adds	r3, #192	; 0xc0
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	589b      	ldr	r3, [r3, r2]
 800090c:	1dfa      	adds	r2, r7, #7
 800090e:	7812      	ldrb	r2, [r2, #0]
 8000910:	0011      	movs	r1, r2
 8000912:	2203      	movs	r2, #3
 8000914:	400a      	ands	r2, r1
 8000916:	00d2      	lsls	r2, r2, #3
 8000918:	21ff      	movs	r1, #255	; 0xff
 800091a:	4091      	lsls	r1, r2
 800091c:	000a      	movs	r2, r1
 800091e:	43d2      	mvns	r2, r2
 8000920:	401a      	ands	r2, r3
 8000922:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	019b      	lsls	r3, r3, #6
 8000928:	22ff      	movs	r2, #255	; 0xff
 800092a:	401a      	ands	r2, r3
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	0018      	movs	r0, r3
 8000932:	2303      	movs	r3, #3
 8000934:	4003      	ands	r3, r0
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <NVIC_SetPriority+0xd8>)
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b25b      	sxtb	r3, r3
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	430a      	orrs	r2, r1
 8000946:	33c0      	adds	r3, #192	; 0xc0
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	501a      	str	r2, [r3, r0]
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b003      	add	sp, #12
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	e000ed00 	.word	0xe000ed00
 8000958:	e000e100 	.word	0xe000e100

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <SysTick_Config+0x40>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d901      	bls.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e010      	b.n	8000994 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <SysTick_Config+0x44>)
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	3a01      	subs	r2, #1
 8000978:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	2301      	movs	r3, #1
 800097c:	425b      	negs	r3, r3
 800097e:	2103      	movs	r1, #3
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ff7d 	bl	8000880 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <SysTick_Config+0x44>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SysTick_Config+0x44>)
 800098e:	2207      	movs	r2, #7
 8000990:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000992:	2300      	movs	r3, #0
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}
 800099c:	00ffffff 	.word	0x00ffffff
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	210f      	movs	r1, #15
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	1c02      	adds	r2, r0, #0
 80009b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ff5d 	bl	8000880 <NVIC_SetPriority>
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	0002      	movs	r2, r0
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff ff37 	bl	8000854 <NVIC_EnableIRQ>
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff ffaf 	bl	800095c <SysTick_Config>
 80009fe:	0003      	movs	r3, r0
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a1e:	e155      	b.n	8000ccc <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2101      	movs	r1, #1
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	4091      	lsls	r1, r2
 8000a2a:	000a      	movs	r2, r1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <HAL_GPIO_Init+0x30>
 8000a36:	e146      	b.n	8000cc6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0x40>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b12      	cmp	r3, #18
 8000a46:	d123      	bne.n	8000a90 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	08da      	lsrs	r2, r3, #3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3208      	adds	r2, #8
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	58d3      	ldr	r3, [r2, r3]
 8000a54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	2207      	movs	r2, #7
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	220f      	movs	r2, #15
 8000a60:	409a      	lsls	r2, r3
 8000a62:	0013      	movs	r3, r2
 8000a64:	43da      	mvns	r2, r3
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	2107      	movs	r1, #7
 8000a74:	400b      	ands	r3, r1
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	08da      	lsrs	r2, r3, #3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3208      	adds	r2, #8
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	6939      	ldr	r1, [r7, #16]
 8000a8e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	43da      	mvns	r2, r3
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2203      	movs	r2, #3
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	409a      	lsls	r2, r3
 8000ab6:	0013      	movs	r3, r2
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d00b      	beq.n	8000ae4 <HAL_GPIO_Init+0xdc>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d007      	beq.n	8000ae4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad8:	2b11      	cmp	r3, #17
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b12      	cmp	r3, #18
 8000ae2:	d130      	bne.n	8000b46 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	2203      	movs	r2, #3
 8000af0:	409a      	lsls	r2, r3
 8000af2:	0013      	movs	r3, r2
 8000af4:	43da      	mvns	r2, r3
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	43da      	mvns	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	091b      	lsrs	r3, r3, #4
 8000b30:	2201      	movs	r2, #1
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	409a      	lsls	r2, r3
 8000b54:	0013      	movs	r3, r2
 8000b56:	43da      	mvns	r2, r3
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	055b      	lsls	r3, r3, #21
 8000b7e:	4013      	ands	r3, r2
 8000b80:	d100      	bne.n	8000b84 <HAL_GPIO_Init+0x17c>
 8000b82:	e0a0      	b.n	8000cc6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b84:	4b57      	ldr	r3, [pc, #348]	; (8000ce4 <HAL_GPIO_Init+0x2dc>)
 8000b86:	699a      	ldr	r2, [r3, #24]
 8000b88:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <HAL_GPIO_Init+0x2dc>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	619a      	str	r2, [r3, #24]
 8000b90:	4b54      	ldr	r3, [pc, #336]	; (8000ce4 <HAL_GPIO_Init+0x2dc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	2201      	movs	r2, #1
 8000b96:	4013      	ands	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000b9c:	4a52      	ldr	r2, [pc, #328]	; (8000ce8 <HAL_GPIO_Init+0x2e0>)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	589b      	ldr	r3, [r3, r2]
 8000ba8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	2203      	movs	r2, #3
 8000bae:	4013      	ands	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	2390      	movs	r3, #144	; 0x90
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d019      	beq.n	8000bfe <HAL_GPIO_Init+0x1f6>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a47      	ldr	r2, [pc, #284]	; (8000cec <HAL_GPIO_Init+0x2e4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d013      	beq.n	8000bfa <HAL_GPIO_Init+0x1f2>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a46      	ldr	r2, [pc, #280]	; (8000cf0 <HAL_GPIO_Init+0x2e8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d00d      	beq.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a45      	ldr	r2, [pc, #276]	; (8000cf4 <HAL_GPIO_Init+0x2ec>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d007      	beq.n	8000bf2 <HAL_GPIO_Init+0x1ea>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a44      	ldr	r2, [pc, #272]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_GPIO_Init+0x1e6>
 8000bea:	2304      	movs	r3, #4
 8000bec:	e008      	b.n	8000c00 <HAL_GPIO_Init+0x1f8>
 8000bee:	2305      	movs	r3, #5
 8000bf0:	e006      	b.n	8000c00 <HAL_GPIO_Init+0x1f8>
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e004      	b.n	8000c00 <HAL_GPIO_Init+0x1f8>
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	e002      	b.n	8000c00 <HAL_GPIO_Init+0x1f8>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <HAL_GPIO_Init+0x1f8>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	2103      	movs	r1, #3
 8000c04:	400a      	ands	r2, r1
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	4093      	lsls	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c10:	4935      	ldr	r1, [pc, #212]	; (8000ce8 <HAL_GPIO_Init+0x2e0>)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	3302      	adds	r3, #2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c1e:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	43da      	mvns	r2, r3
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	025b      	lsls	r3, r3, #9
 8000c36:	4013      	ands	r3, r2
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43da      	mvns	r2, r3
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	029b      	lsls	r3, r3, #10
 8000c60:	4013      	ands	r3, r2
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	035b      	lsls	r3, r3, #13
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	43da      	mvns	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	039b      	lsls	r3, r3, #14
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d003      	beq.n	8000cc0 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	40da      	lsrs	r2, r3
 8000cd4:	1e13      	subs	r3, r2, #0
 8000cd6:	d000      	beq.n	8000cda <HAL_GPIO_Init+0x2d2>
 8000cd8:	e6a2      	b.n	8000a20 <HAL_GPIO_Init+0x18>
  } 
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b006      	add	sp, #24
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	48000400 	.word	0x48000400
 8000cf0:	48000800 	.word	0x48000800
 8000cf4:	48000c00 	.word	0x48000c00
 8000cf8:	48001000 	.word	0x48001000
 8000cfc:	40010400 	.word	0x40010400

08000d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	0008      	movs	r0, r1
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	1cbb      	adds	r3, r7, #2
 8000d0e:	1c02      	adds	r2, r0, #0
 8000d10:	801a      	strh	r2, [r3, #0]
 8000d12:	1c7b      	adds	r3, r7, #1
 8000d14:	1c0a      	adds	r2, r1, #0
 8000d16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d18:	1c7b      	adds	r3, r7, #1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d004      	beq.n	8000d2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d20:	1cbb      	adds	r3, r7, #2
 8000d22:	881a      	ldrh	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d28:	e003      	b.n	8000d32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d2a:	1cbb      	adds	r3, r7, #2
 8000d2c:	881a      	ldrh	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e082      	b.n	8000e54 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2241      	movs	r2, #65	; 0x41
 8000d52:	5c9b      	ldrb	r3, [r3, r2]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d107      	bne.n	8000d6a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	2100      	movs	r1, #0
 8000d60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0018      	movs	r0, r3
 8000d66:	f002 f9d7 	bl	8003118 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2241      	movs	r2, #65	; 0x41
 8000d6e:	2124      	movs	r1, #36	; 0x24
 8000d70:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	438a      	bics	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4934      	ldr	r1, [pc, #208]	; (8000e5c <HAL_I2C_Init+0x120>)
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4931      	ldr	r1, [pc, #196]	; (8000e60 <HAL_I2C_Init+0x124>)
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d108      	bne.n	8000dba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	0209      	lsls	r1, r1, #8
 8000db4:	430a      	orrs	r2, r1
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	e007      	b.n	8000dca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2184      	movs	r1, #132	; 0x84
 8000dc4:	0209      	lsls	r1, r1, #8
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d104      	bne.n	8000ddc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	491f      	ldr	r1, [pc, #124]	; (8000e64 <HAL_I2C_Init+0x128>)
 8000de8:	430a      	orrs	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	491a      	ldr	r1, [pc, #104]	; (8000e60 <HAL_I2C_Init+0x124>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	0011      	movs	r1, r2
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	021a      	lsls	r2, r3, #8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69d9      	ldr	r1, [r3, #28]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a1a      	ldr	r2, [r3, #32]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	430a      	orrs	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2241      	movs	r2, #65	; 0x41
 8000e40:	2120      	movs	r1, #32
 8000e42:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2242      	movs	r2, #66	; 0x42
 8000e4e:	2100      	movs	r1, #0
 8000e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	0018      	movs	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	f0ffffff 	.word	0xf0ffffff
 8000e60:	ffff7fff 	.word	0xffff7fff
 8000e64:	02008000 	.word	0x02008000

08000e68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	0008      	movs	r0, r1
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	0019      	movs	r1, r3
 8000e76:	230a      	movs	r3, #10
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	1c02      	adds	r2, r0, #0
 8000e7c:	801a      	strh	r2, [r3, #0]
 8000e7e:	2308      	movs	r3, #8
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	1c0a      	adds	r2, r1, #0
 8000e84:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2241      	movs	r2, #65	; 0x41
 8000e8e:	5c9b      	ldrb	r3, [r3, r2]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b20      	cmp	r3, #32
 8000e94:	d000      	beq.n	8000e98 <HAL_I2C_Master_Transmit+0x30>
 8000e96:	e0f3      	b.n	8001080 <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2240      	movs	r2, #64	; 0x40
 8000e9c:	5c9b      	ldrb	r3, [r3, r2]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d101      	bne.n	8000ea6 <HAL_I2C_Master_Transmit+0x3e>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e0ed      	b.n	8001082 <HAL_I2C_Master_Transmit+0x21a>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2240      	movs	r2, #64	; 0x40
 8000eaa:	2101      	movs	r1, #1
 8000eac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000eae:	f7ff fca9 	bl	8000804 <HAL_GetTick>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	0219      	lsls	r1, r3, #8
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2319      	movs	r3, #25
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f000 fa1a 	bl	80012fc <I2C_WaitOnFlagUntilTimeout>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e0d8      	b.n	8001082 <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2241      	movs	r2, #65	; 0x41
 8000ed4:	2121      	movs	r1, #33	; 0x21
 8000ed6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2242      	movs	r2, #66	; 0x42
 8000edc:	2110      	movs	r1, #16
 8000ede:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2208      	movs	r2, #8
 8000ef0:	18ba      	adds	r2, r7, r2
 8000ef2:	8812      	ldrh	r2, [r2, #0]
 8000ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	2bff      	cmp	r3, #255	; 0xff
 8000f04:	d912      	bls.n	8000f2c <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	22ff      	movs	r2, #255	; 0xff
 8000f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	045c      	lsls	r4, r3, #17
 8000f16:	230a      	movs	r3, #10
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	8819      	ldrh	r1, [r3, #0]
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	0023      	movs	r3, r4
 8000f26:	f000 fb59 	bl	80015dc <I2C_TransferConfig>
 8000f2a:	e07a      	b.n	8001022 <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	049c      	lsls	r4, r3, #18
 8000f40:	230a      	movs	r3, #10
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	8819      	ldrh	r1, [r3, #0]
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	019b      	lsls	r3, r3, #6
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	0023      	movs	r3, r4
 8000f50:	f000 fb44 	bl	80015dc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000f54:	e065      	b.n	8001022 <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f000 fa06 	bl	800136e <I2C_WaitOnTXISFlagUntilTimeout>
 8000f62:	1e03      	subs	r3, r0, #0
 8000f64:	d007      	beq.n	8000f76 <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d101      	bne.n	8000f72 <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e087      	b.n	8001082 <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e085      	b.n	8001082 <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	1c59      	adds	r1, r3, #1
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	6251      	str	r1, [r2, #36]	; 0x24
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d13b      	bne.n	8001022 <HAL_I2C_Master_Transmit+0x1ba>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d036      	beq.n	8001022 <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	f000 f99b 	bl	80012fc <I2C_WaitOnFlagUntilTimeout>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e059      	b.n	8001082 <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	2bff      	cmp	r3, #255	; 0xff
 8000fd6:	d911      	bls.n	8000ffc <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	045c      	lsls	r4, r3, #17
 8000fe8:	230a      	movs	r3, #10
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	8819      	ldrh	r1, [r3, #0]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	0023      	movs	r3, r4
 8000ff6:	f000 faf1 	bl	80015dc <I2C_TransferConfig>
 8000ffa:	e012      	b.n	8001022 <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001000:	b29a      	uxth	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800100a:	b2da      	uxtb	r2, r3
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	049c      	lsls	r4, r3, #18
 8001010:	230a      	movs	r3, #10
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	8819      	ldrh	r1, [r3, #0]
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	2300      	movs	r3, #0
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	0023      	movs	r3, r4
 800101e:	f000 fadd 	bl	80015dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001026:	b29b      	uxth	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d194      	bne.n	8000f56 <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	0018      	movs	r0, r3
 8001034:	f000 f9da 	bl	80013ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001038:	1e03      	subs	r3, r0, #0
 800103a:	d007      	beq.n	800104c <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	2b04      	cmp	r3, #4
 8001042:	d101      	bne.n	8001048 <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e01c      	b.n	8001082 <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e01a      	b.n	8001082 <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2220      	movs	r2, #32
 8001052:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	490b      	ldr	r1, [pc, #44]	; (800108c <HAL_I2C_Master_Transmit+0x224>)
 8001060:	400a      	ands	r2, r1
 8001062:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2241      	movs	r2, #65	; 0x41
 8001068:	2120      	movs	r1, #32
 800106a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2242      	movs	r2, #66	; 0x42
 8001070:	2100      	movs	r1, #0
 8001072:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2240      	movs	r2, #64	; 0x40
 8001078:	2100      	movs	r1, #0
 800107a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	e000      	b.n	8001082 <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8001080:	2302      	movs	r3, #2
  }
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b007      	add	sp, #28
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	fe00e800 	.word	0xfe00e800

08001090 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af02      	add	r7, sp, #8
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	0008      	movs	r0, r1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	0019      	movs	r1, r3
 800109e:	230a      	movs	r3, #10
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	2308      	movs	r3, #8
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	1c0a      	adds	r2, r1, #0
 80010ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2241      	movs	r2, #65	; 0x41
 80010b6:	5c9b      	ldrb	r3, [r3, r2]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b20      	cmp	r3, #32
 80010bc:	d000      	beq.n	80010c0 <HAL_I2C_Master_Receive+0x30>
 80010be:	e0f4      	b.n	80012aa <HAL_I2C_Master_Receive+0x21a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2240      	movs	r2, #64	; 0x40
 80010c4:	5c9b      	ldrb	r3, [r3, r2]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_I2C_Master_Receive+0x3e>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e0ee      	b.n	80012ac <HAL_I2C_Master_Receive+0x21c>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2240      	movs	r2, #64	; 0x40
 80010d2:	2101      	movs	r1, #1
 80010d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010d6:	f7ff fb95 	bl	8000804 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	0219      	lsls	r1, r3, #8
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2319      	movs	r3, #25
 80010ea:	2201      	movs	r2, #1
 80010ec:	f000 f906 	bl	80012fc <I2C_WaitOnFlagUntilTimeout>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_I2C_Master_Receive+0x68>
    {
      return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e0d9      	b.n	80012ac <HAL_I2C_Master_Receive+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2241      	movs	r2, #65	; 0x41
 80010fc:	2122      	movs	r1, #34	; 0x22
 80010fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2242      	movs	r2, #66	; 0x42
 8001104:	2110      	movs	r1, #16
 8001106:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2208      	movs	r2, #8
 8001118:	18ba      	adds	r2, r7, r2
 800111a:	8812      	ldrh	r2, [r2, #0]
 800111c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001128:	b29b      	uxth	r3, r3
 800112a:	2bff      	cmp	r3, #255	; 0xff
 800112c:	d912      	bls.n	8001154 <HAL_I2C_Master_Receive+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001138:	b2da      	uxtb	r2, r3
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	045c      	lsls	r4, r3, #17
 800113e:	230a      	movs	r3, #10
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	8819      	ldrh	r1, [r3, #0]
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	2390      	movs	r3, #144	; 0x90
 8001148:	019b      	lsls	r3, r3, #6
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	0023      	movs	r3, r4
 800114e:	f000 fa45 	bl	80015dc <I2C_TransferConfig>
 8001152:	e07b      	b.n	800124c <HAL_I2C_Master_Receive+0x1bc>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001158:	b29a      	uxth	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001162:	b2da      	uxtb	r2, r3
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	049c      	lsls	r4, r3, #18
 8001168:	230a      	movs	r3, #10
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	8819      	ldrh	r1, [r3, #0]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	2390      	movs	r3, #144	; 0x90
 8001172:	019b      	lsls	r3, r3, #6
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	0023      	movs	r3, r4
 8001178:	f000 fa30 	bl	80015dc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800117c:	e066      	b.n	800124c <HAL_I2C_Master_Receive+0x1bc>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	0018      	movs	r0, r3
 8001186:	f000 f96d 	bl	8001464 <I2C_WaitOnRXNEFlagUntilTimeout>
 800118a:	1e03      	subs	r3, r0, #0
 800118c:	d007      	beq.n	800119e <HAL_I2C_Master_Receive+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	2b04      	cmp	r3, #4
 8001194:	d101      	bne.n	800119a <HAL_I2C_Master_Receive+0x10a>
        {
          return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e088      	b.n	80012ac <HAL_I2C_Master_Receive+0x21c>
        }
        else
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e086      	b.n	80012ac <HAL_I2C_Master_Receive+0x21c>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	1c59      	adds	r1, r3, #1
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	6251      	str	r1, [r2, #36]	; 0x24
 80011ae:	b2c2      	uxtb	r2, r0
 80011b0:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b6:	3b01      	subs	r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d13b      	bne.n	800124c <HAL_I2C_Master_Receive+0x1bc>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d036      	beq.n	800124c <HAL_I2C_Master_Receive+0x1bc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	0013      	movs	r3, r2
 80011e8:	2200      	movs	r2, #0
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	f000 f886 	bl	80012fc <I2C_WaitOnFlagUntilTimeout>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_I2C_Master_Receive+0x168>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e059      	b.n	80012ac <HAL_I2C_Master_Receive+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	d911      	bls.n	8001226 <HAL_I2C_Master_Receive+0x196>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120c:	b2da      	uxtb	r2, r3
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	045c      	lsls	r4, r3, #17
 8001212:	230a      	movs	r3, #10
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	8819      	ldrh	r1, [r3, #0]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	2300      	movs	r3, #0
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	0023      	movs	r3, r4
 8001220:	f000 f9dc 	bl	80015dc <I2C_TransferConfig>
 8001224:	e012      	b.n	800124c <HAL_I2C_Master_Receive+0x1bc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122a:	b29a      	uxth	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001234:	b2da      	uxtb	r2, r3
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	049c      	lsls	r4, r3, #18
 800123a:	230a      	movs	r3, #10
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	8819      	ldrh	r1, [r3, #0]
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	2300      	movs	r3, #0
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	0023      	movs	r3, r4
 8001248:	f000 f9c8 	bl	80015dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001250:	b29b      	uxth	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d193      	bne.n	800117e <HAL_I2C_Master_Receive+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	0018      	movs	r0, r3
 800125e:	f000 f8c5 	bl	80013ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d007      	beq.n	8001276 <HAL_I2C_Master_Receive+0x1e6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	2b04      	cmp	r3, #4
 800126c:	d101      	bne.n	8001272 <HAL_I2C_Master_Receive+0x1e2>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e01c      	b.n	80012ac <HAL_I2C_Master_Receive+0x21c>
      }
      else
      {
        return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e01a      	b.n	80012ac <HAL_I2C_Master_Receive+0x21c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2220      	movs	r2, #32
 800127c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	490a      	ldr	r1, [pc, #40]	; (80012b4 <HAL_I2C_Master_Receive+0x224>)
 800128a:	400a      	ands	r2, r1
 800128c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2241      	movs	r2, #65	; 0x41
 8001292:	2120      	movs	r1, #32
 8001294:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2242      	movs	r2, #66	; 0x42
 800129a:	2100      	movs	r1, #0
 800129c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2240      	movs	r2, #64	; 0x40
 80012a2:	2100      	movs	r1, #0
 80012a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_I2C_Master_Receive+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80012aa:	2302      	movs	r3, #2
  }
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b007      	add	sp, #28
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	fe00e800 	.word	0xfe00e800

080012b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	2202      	movs	r2, #2
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d103      	bne.n	80012d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2201      	movs	r2, #1
 80012de:	4013      	ands	r3, r2
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d007      	beq.n	80012f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2101      	movs	r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	619a      	str	r2, [r3, #24]
  }
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}

080012fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800130c:	e01b      	b.n	8001346 <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	d018      	beq.n	8001346 <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <I2C_WaitOnFlagUntilTimeout+0x2e>
 800131a:	f7ff fa73 	bl	8000804 <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d20d      	bcs.n	8001346 <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2241      	movs	r2, #65	; 0x41
 800132e:	2120      	movs	r1, #32
 8001330:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2242      	movs	r2, #66	; 0x42
 8001336:	2100      	movs	r1, #0
 8001338:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2240      	movs	r2, #64	; 0x40
 800133e:	2100      	movs	r1, #0
 8001340:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e00f      	b.n	8001366 <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	4013      	ands	r3, r2
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	425a      	negs	r2, r3
 8001356:	4153      	adcs	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	001a      	movs	r2, r3
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d0d4      	beq.n	800130e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	b004      	add	sp, #16
 800136c:	bd80      	pop	{r7, pc}

0800136e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800137a:	e02b      	b.n	80013d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	0018      	movs	r0, r3
 8001384:	f000 f8cc 	bl	8001520 <I2C_IsAcknowledgeFailed>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e029      	b.n	80013e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	3301      	adds	r3, #1
 8001394:	d01e      	beq.n	80013d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d007      	beq.n	80013ac <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800139c:	f7ff fa32 	bl	8000804 <HAL_GetTick>
 80013a0:	0002      	movs	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d213      	bcs.n	80013d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	2220      	movs	r2, #32
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2241      	movs	r2, #65	; 0x41
 80013bc:	2120      	movs	r1, #32
 80013be:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2242      	movs	r2, #66	; 0x42
 80013c4:	2100      	movs	r1, #0
 80013c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2240      	movs	r2, #64	; 0x40
 80013cc:	2100      	movs	r1, #0
 80013ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e007      	b.n	80013e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d1cc      	bne.n	800137c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b004      	add	sp, #16
 80013ea:	bd80      	pop	{r7, pc}

080013ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013f8:	e028      	b.n	800144c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	0018      	movs	r0, r3
 8001402:	f000 f88d 	bl	8001520 <I2C_IsAcknowledgeFailed>
 8001406:	1e03      	subs	r3, r0, #0
 8001408:	d001      	beq.n	800140e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e026      	b.n	800145c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001414:	f7ff f9f6 	bl	8000804 <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	429a      	cmp	r2, r3
 8001422:	d213      	bcs.n	800144c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	2220      	movs	r2, #32
 800142a:	431a      	orrs	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2241      	movs	r2, #65	; 0x41
 8001434:	2120      	movs	r1, #32
 8001436:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2242      	movs	r2, #66	; 0x42
 800143c:	2100      	movs	r1, #0
 800143e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2240      	movs	r2, #64	; 0x40
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e007      	b.n	800145c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2220      	movs	r2, #32
 8001454:	4013      	ands	r3, r2
 8001456:	2b20      	cmp	r3, #32
 8001458:	d1cf      	bne.n	80013fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b004      	add	sp, #16
 8001462:	bd80      	pop	{r7, pc}

08001464 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001470:	e048      	b.n	8001504 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	0018      	movs	r0, r3
 800147a:	f000 f851 	bl	8001520 <I2C_IsAcknowledgeFailed>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d001      	beq.n	8001486 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e046      	b.n	8001514 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2220      	movs	r2, #32
 800148e:	4013      	ands	r3, r2
 8001490:	2b20      	cmp	r3, #32
 8001492:	d11c      	bne.n	80014ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2220      	movs	r2, #32
 800149a:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	491d      	ldr	r1, [pc, #116]	; (800151c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	605a      	str	r2, [r3, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2241      	movs	r2, #65	; 0x41
 80014b6:	2120      	movs	r1, #32
 80014b8:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2242      	movs	r2, #66	; 0x42
 80014be:	2100      	movs	r1, #0
 80014c0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2240      	movs	r2, #64	; 0x40
 80014c6:	2100      	movs	r1, #0
 80014c8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e022      	b.n	8001514 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 80014d4:	f7ff f996 	bl	8000804 <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d20f      	bcs.n	8001504 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e8:	2220      	movs	r2, #32
 80014ea:	431a      	orrs	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2241      	movs	r2, #65	; 0x41
 80014f4:	2120      	movs	r1, #32
 80014f6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	2100      	movs	r1, #0
 80014fe:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e007      	b.n	8001514 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2204      	movs	r2, #4
 800150c:	4013      	ands	r3, r2
 800150e:	2b04      	cmp	r3, #4
 8001510:	d1af      	bne.n	8001472 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b004      	add	sp, #16
 800151a:	bd80      	pop	{r7, pc}
 800151c:	fe00e800 	.word	0xfe00e800

08001520 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2210      	movs	r2, #16
 8001534:	4013      	ands	r3, r2
 8001536:	2b10      	cmp	r3, #16
 8001538:	d148      	bne.n	80015cc <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800153a:	e01b      	b.n	8001574 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	3301      	adds	r3, #1
 8001540:	d018      	beq.n	8001574 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <I2C_IsAcknowledgeFailed+0x38>
 8001548:	f7ff f95c 	bl	8000804 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d20d      	bcs.n	8001574 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2241      	movs	r2, #65	; 0x41
 800155c:	2120      	movs	r1, #32
 800155e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2242      	movs	r2, #66	; 0x42
 8001564:	2100      	movs	r1, #0
 8001566:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2240      	movs	r2, #64	; 0x40
 800156c:	2100      	movs	r1, #0
 800156e:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e02c      	b.n	80015ce <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2220      	movs	r2, #32
 800157c:	4013      	ands	r3, r2
 800157e:	2b20      	cmp	r3, #32
 8001580:	d1dc      	bne.n	800153c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2210      	movs	r2, #16
 8001588:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2220      	movs	r2, #32
 8001590:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fe8f 	bl	80012b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <I2C_IsAcknowledgeFailed+0xb8>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2204      	movs	r2, #4
 80015ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2241      	movs	r2, #65	; 0x41
 80015b4:	2120      	movs	r1, #32
 80015b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2242      	movs	r2, #66	; 0x42
 80015bc:	2100      	movs	r1, #0
 80015be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2240      	movs	r2, #64	; 0x40
 80015c4:	2100      	movs	r1, #0
 80015c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	fe00e800 	.word	0xfe00e800

080015dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	0008      	movs	r0, r1
 80015e6:	0011      	movs	r1, r2
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	240a      	movs	r4, #10
 80015ec:	193b      	adds	r3, r7, r4
 80015ee:	1c02      	adds	r2, r0, #0
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	2009      	movs	r0, #9
 80015f4:	183b      	adds	r3, r7, r0
 80015f6:	1c0a      	adds	r2, r1, #0
 80015f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <I2C_TransferConfig+0x68>)
 800160a:	4013      	ands	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800160e:	193b      	adds	r3, r7, r4
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	059b      	lsls	r3, r3, #22
 8001614:	0d9a      	lsrs	r2, r3, #22
 8001616:	183b      	adds	r3, r7, r0
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	0419      	lsls	r1, r3, #16
 800161c:	23ff      	movs	r3, #255	; 0xff
 800161e:	041b      	lsls	r3, r3, #16
 8001620:	400b      	ands	r3, r1
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	431a      	orrs	r2, r3
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	4313      	orrs	r3, r2
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	605a      	str	r2, [r3, #4]
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b007      	add	sp, #28
 8001640:	bd90      	pop	{r4, r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	fc009800 	.word	0xfc009800

08001648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2241      	movs	r2, #65	; 0x41
 8001656:	5c9b      	ldrb	r3, [r3, r2]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b20      	cmp	r3, #32
 800165c:	d138      	bne.n	80016d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2240      	movs	r2, #64	; 0x40
 8001662:	5c9b      	ldrb	r3, [r3, r2]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001668:	2302      	movs	r3, #2
 800166a:	e032      	b.n	80016d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2240      	movs	r2, #64	; 0x40
 8001670:	2101      	movs	r1, #1
 8001672:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2241      	movs	r2, #65	; 0x41
 8001678:	2124      	movs	r1, #36	; 0x24
 800167a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2101      	movs	r1, #1
 8001688:	438a      	bics	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4911      	ldr	r1, [pc, #68]	; (80016dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2241      	movs	r2, #65	; 0x41
 80016c0:	2120      	movs	r1, #32
 80016c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
  }
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	ffffefff 	.word	0xffffefff

080016e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2241      	movs	r2, #65	; 0x41
 80016f2:	5c9b      	ldrb	r3, [r3, r2]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b20      	cmp	r3, #32
 80016f8:	d139      	bne.n	800176e <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2240      	movs	r2, #64	; 0x40
 80016fe:	5c9b      	ldrb	r3, [r3, r2]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001704:	2302      	movs	r3, #2
 8001706:	e033      	b.n	8001770 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	2101      	movs	r1, #1
 800170e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2241      	movs	r2, #65	; 0x41
 8001714:	2124      	movs	r1, #36	; 0x24
 8001716:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2101      	movs	r1, #1
 8001724:	438a      	bics	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2241      	movs	r2, #65	; 0x41
 800175e:	2120      	movs	r1, #32
 8001760:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2240      	movs	r2, #64	; 0x40
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 800176e:	2302      	movs	r3, #2
  }
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	b004      	add	sp, #16
 8001776:	bd80      	pop	{r7, pc}
 8001778:	fffff0ff 	.word	0xfffff0ff

0800177c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d100      	bne.n	8001794 <HAL_RCC_OscConfig+0x18>
 8001792:	e08d      	b.n	80018b0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001794:	4bc5      	ldr	r3, [pc, #788]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	220c      	movs	r2, #12
 800179a:	4013      	ands	r3, r2
 800179c:	2b04      	cmp	r3, #4
 800179e:	d00e      	beq.n	80017be <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a0:	4bc2      	ldr	r3, [pc, #776]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	220c      	movs	r2, #12
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d116      	bne.n	80017da <HAL_RCC_OscConfig+0x5e>
 80017ac:	4bbf      	ldr	r3, [pc, #764]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	23c0      	movs	r3, #192	; 0xc0
 80017b2:	025b      	lsls	r3, r3, #9
 80017b4:	401a      	ands	r2, r3
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d10d      	bne.n	80017da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017be:	4bbb      	ldr	r3, [pc, #748]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	029b      	lsls	r3, r3, #10
 80017c6:	4013      	ands	r3, r2
 80017c8:	d100      	bne.n	80017cc <HAL_RCC_OscConfig+0x50>
 80017ca:	e070      	b.n	80018ae <HAL_RCC_OscConfig+0x132>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d000      	beq.n	80017d6 <HAL_RCC_OscConfig+0x5a>
 80017d4:	e06b      	b.n	80018ae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e329      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_OscConfig+0x76>
 80017e2:	4bb2      	ldr	r3, [pc, #712]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4bb1      	ldr	r3, [pc, #708]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	0249      	lsls	r1, r1, #9
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e02f      	b.n	8001852 <HAL_RCC_OscConfig+0xd6>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x98>
 80017fa:	4bac      	ldr	r3, [pc, #688]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4bab      	ldr	r3, [pc, #684]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001800:	49ab      	ldr	r1, [pc, #684]	; (8001ab0 <HAL_RCC_OscConfig+0x334>)
 8001802:	400a      	ands	r2, r1
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	4ba9      	ldr	r3, [pc, #676]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4ba8      	ldr	r3, [pc, #672]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800180c:	49a9      	ldr	r1, [pc, #676]	; (8001ab4 <HAL_RCC_OscConfig+0x338>)
 800180e:	400a      	ands	r2, r1
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e01e      	b.n	8001852 <HAL_RCC_OscConfig+0xd6>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b05      	cmp	r3, #5
 800181a:	d10e      	bne.n	800183a <HAL_RCC_OscConfig+0xbe>
 800181c:	4ba3      	ldr	r3, [pc, #652]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4ba2      	ldr	r3, [pc, #648]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	02c9      	lsls	r1, r1, #11
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	4ba0      	ldr	r3, [pc, #640]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b9f      	ldr	r3, [pc, #636]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	0249      	lsls	r1, r1, #9
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e00b      	b.n	8001852 <HAL_RCC_OscConfig+0xd6>
 800183a:	4b9c      	ldr	r3, [pc, #624]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b9b      	ldr	r3, [pc, #620]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001840:	499b      	ldr	r1, [pc, #620]	; (8001ab0 <HAL_RCC_OscConfig+0x334>)
 8001842:	400a      	ands	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4b99      	ldr	r3, [pc, #612]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b98      	ldr	r3, [pc, #608]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800184c:	4999      	ldr	r1, [pc, #612]	; (8001ab4 <HAL_RCC_OscConfig+0x338>)
 800184e:	400a      	ands	r2, r1
 8001850:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d014      	beq.n	8001884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7fe ffd3 	bl	8000804 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001864:	f7fe ffce 	bl	8000804 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e2db      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b8d      	ldr	r3, [pc, #564]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	4013      	ands	r3, r2
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0xe8>
 8001882:	e015      	b.n	80018b0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7fe ffbe 	bl	8000804 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188e:	f7fe ffb9 	bl	8000804 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b64      	cmp	r3, #100	; 0x64
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e2c6      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a0:	4b82      	ldr	r3, [pc, #520]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	4013      	ands	r3, r2
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x112>
 80018ac:	e000      	b.n	80018b0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2202      	movs	r2, #2
 80018b6:	4013      	ands	r3, r2
 80018b8:	d100      	bne.n	80018bc <HAL_RCC_OscConfig+0x140>
 80018ba:	e06c      	b.n	8001996 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018bc:	4b7b      	ldr	r3, [pc, #492]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	220c      	movs	r2, #12
 80018c2:	4013      	ands	r3, r2
 80018c4:	d00e      	beq.n	80018e4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018c6:	4b79      	ldr	r3, [pc, #484]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	220c      	movs	r2, #12
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d11f      	bne.n	8001912 <HAL_RCC_OscConfig+0x196>
 80018d2:	4b76      	ldr	r3, [pc, #472]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	23c0      	movs	r3, #192	; 0xc0
 80018d8:	025b      	lsls	r3, r3, #9
 80018da:	401a      	ands	r2, r3
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d116      	bne.n	8001912 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e4:	4b71      	ldr	r3, [pc, #452]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d005      	beq.n	80018fa <HAL_RCC_OscConfig+0x17e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e299      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	4b6c      	ldr	r3, [pc, #432]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	22f8      	movs	r2, #248	; 0xf8
 8001900:	4393      	bics	r3, r2
 8001902:	0019      	movs	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	00da      	lsls	r2, r3, #3
 800190a:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001910:	e041      	b.n	8001996 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d024      	beq.n	8001964 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191a:	4b64      	ldr	r3, [pc, #400]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b63      	ldr	r3, [pc, #396]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001920:	2101      	movs	r1, #1
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7fe ff6d 	bl	8000804 <HAL_GetTick>
 800192a:	0003      	movs	r3, r0
 800192c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001930:	f7fe ff68 	bl	8000804 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e275      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2202      	movs	r2, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d0f1      	beq.n	8001930 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	22f8      	movs	r2, #248	; 0xf8
 8001952:	4393      	bics	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00da      	lsls	r2, r3, #3
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e018      	b.n	8001996 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001964:	4b51      	ldr	r3, [pc, #324]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b50      	ldr	r3, [pc, #320]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800196a:	2101      	movs	r1, #1
 800196c:	438a      	bics	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7fe ff48 	bl	8000804 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197a:	f7fe ff43 	bl	8000804 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e250      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198c:	4b47      	ldr	r3, [pc, #284]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d1f1      	bne.n	800197a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2208      	movs	r2, #8
 800199c:	4013      	ands	r3, r2
 800199e:	d036      	beq.n	8001a0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d019      	beq.n	80019dc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a8:	4b40      	ldr	r3, [pc, #256]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80019aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ac:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7fe ff26 	bl	8000804 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019be:	f7fe ff21 	bl	8000804 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e22e      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d0:	4b36      	ldr	r3, [pc, #216]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	2202      	movs	r2, #2
 80019d6:	4013      	ands	r3, r2
 80019d8:	d0f1      	beq.n	80019be <HAL_RCC_OscConfig+0x242>
 80019da:	e018      	b.n	8001a0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019dc:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80019de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	438a      	bics	r2, r1
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e8:	f7fe ff0c 	bl	8000804 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f2:	f7fe ff07 	bl	8000804 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e214      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d1f1      	bne.n	80019f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2204      	movs	r2, #4
 8001a14:	4013      	ands	r3, r2
 8001a16:	d100      	bne.n	8001a1a <HAL_RCC_OscConfig+0x29e>
 8001a18:	e0b6      	b.n	8001b88 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1a:	2317      	movs	r3, #23
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	055b      	lsls	r3, r3, #21
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d111      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0549      	lsls	r1, r1, #21
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	61da      	str	r2, [r3, #28]
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001a3e:	69da      	ldr	r2, [r3, #28]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	055b      	lsls	r3, r3, #21
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a4a:	2317      	movs	r3, #23
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_OscConfig+0x33c>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d11a      	bne.n	8001a94 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_RCC_OscConfig+0x33c>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_RCC_OscConfig+0x33c>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	0049      	lsls	r1, r1, #1
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6c:	f7fe feca 	bl	8000804 <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a76:	f7fe fec5 	bl	8000804 <HAL_GetTick>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b64      	cmp	r3, #100	; 0x64
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1d2      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x33c>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4013      	ands	r3, r2
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10f      	bne.n	8001abc <HAL_RCC_OscConfig+0x340>
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	621a      	str	r2, [r3, #32]
 8001aa8:	e036      	b.n	8001b18 <HAL_RCC_OscConfig+0x39c>
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	fffeffff 	.word	0xfffeffff
 8001ab4:	fffbffff 	.word	0xfffbffff
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x362>
 8001ac4:	4bca      	ldr	r3, [pc, #808]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	4bc9      	ldr	r3, [pc, #804]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	438a      	bics	r2, r1
 8001ace:	621a      	str	r2, [r3, #32]
 8001ad0:	4bc7      	ldr	r3, [pc, #796]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
 8001ad4:	4bc6      	ldr	r3, [pc, #792]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	438a      	bics	r2, r1
 8001ada:	621a      	str	r2, [r3, #32]
 8001adc:	e01c      	b.n	8001b18 <HAL_RCC_OscConfig+0x39c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x384>
 8001ae6:	4bc2      	ldr	r3, [pc, #776]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001ae8:	6a1a      	ldr	r2, [r3, #32]
 8001aea:	4bc1      	ldr	r3, [pc, #772]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001aec:	2104      	movs	r1, #4
 8001aee:	430a      	orrs	r2, r1
 8001af0:	621a      	str	r2, [r3, #32]
 8001af2:	4bbf      	ldr	r3, [pc, #764]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	4bbe      	ldr	r3, [pc, #760]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001af8:	2101      	movs	r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	621a      	str	r2, [r3, #32]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0x39c>
 8001b00:	4bbb      	ldr	r3, [pc, #748]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001b02:	6a1a      	ldr	r2, [r3, #32]
 8001b04:	4bba      	ldr	r3, [pc, #744]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001b06:	2101      	movs	r1, #1
 8001b08:	438a      	bics	r2, r1
 8001b0a:	621a      	str	r2, [r3, #32]
 8001b0c:	4bb8      	ldr	r3, [pc, #736]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001b0e:	6a1a      	ldr	r2, [r3, #32]
 8001b10:	4bb7      	ldr	r3, [pc, #732]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001b12:	2104      	movs	r1, #4
 8001b14:	438a      	bics	r2, r1
 8001b16:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d014      	beq.n	8001b4a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7fe fe70 	bl	8000804 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	e009      	b.n	8001b3e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7fe fe6b 	bl	8000804 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	4aaf      	ldr	r2, [pc, #700]	; (8001df4 <HAL_RCC_OscConfig+0x678>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e177      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3e:	4bac      	ldr	r3, [pc, #688]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x3ae>
 8001b48:	e013      	b.n	8001b72 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7fe fe5b 	bl	8000804 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b52:	e009      	b.n	8001b68 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b54:	f7fe fe56 	bl	8000804 <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	4aa5      	ldr	r2, [pc, #660]	; (8001df4 <HAL_RCC_OscConfig+0x678>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e162      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	4ba1      	ldr	r3, [pc, #644]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b72:	2317      	movs	r3, #23
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7c:	4b9c      	ldr	r3, [pc, #624]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001b7e:	69da      	ldr	r2, [r3, #28]
 8001b80:	4b9b      	ldr	r3, [pc, #620]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001b82:	499d      	ldr	r1, [pc, #628]	; (8001df8 <HAL_RCC_OscConfig+0x67c>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d063      	beq.n	8001c5a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d12a      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b9a:	4b95      	ldr	r3, [pc, #596]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9e:	4b94      	ldr	r3, [pc, #592]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ba6:	4b92      	ldr	r3, [pc, #584]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001baa:	4b91      	ldr	r3, [pc, #580]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7fe fe27 	bl	8000804 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bbc:	f7fe fe22 	bl	8000804 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e12f      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bce:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d0f1      	beq.n	8001bbc <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bd8:	4b85      	ldr	r3, [pc, #532]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bdc:	22f8      	movs	r2, #248	; 0xf8
 8001bde:	4393      	bics	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	00da      	lsls	r2, r3, #3
 8001be8:	4b81      	ldr	r3, [pc, #516]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001bea:	430a      	orrs	r2, r1
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
 8001bee:	e034      	b.n	8001c5a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	3305      	adds	r3, #5
 8001bf6:	d111      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bf8:	4b7d      	ldr	r3, [pc, #500]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfc:	4b7c      	ldr	r3, [pc, #496]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001bfe:	2104      	movs	r1, #4
 8001c00:	438a      	bics	r2, r1
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c04:	4b7a      	ldr	r3, [pc, #488]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c08:	22f8      	movs	r2, #248	; 0xf8
 8001c0a:	4393      	bics	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	00da      	lsls	r2, r3, #3
 8001c14:	4b76      	ldr	r3, [pc, #472]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1a:	e01e      	b.n	8001c5a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c1c:	4b74      	ldr	r3, [pc, #464]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c20:	4b73      	ldr	r3, [pc, #460]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c22:	2104      	movs	r1, #4
 8001c24:	430a      	orrs	r2, r1
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c28:	4b71      	ldr	r3, [pc, #452]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2c:	4b70      	ldr	r3, [pc, #448]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	438a      	bics	r2, r1
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7fe fde6 	bl	8000804 <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c3e:	f7fe fde1 	bl	8000804 <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e0ee      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c50:	4b67      	ldr	r3, [pc, #412]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c54:	2202      	movs	r2, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d1f1      	bne.n	8001c3e <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	4013      	ands	r3, r2
 8001c62:	d05c      	beq.n	8001d1e <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c64:	4b62      	ldr	r3, [pc, #392]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	220c      	movs	r2, #12
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d00e      	beq.n	8001c8e <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c70:	4b5f      	ldr	r3, [pc, #380]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	220c      	movs	r2, #12
 8001c76:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d114      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c7c:	4b5c      	ldr	r3, [pc, #368]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	23c0      	movs	r3, #192	; 0xc0
 8001c82:	025b      	lsls	r3, r3, #9
 8001c84:	401a      	ands	r2, r3
 8001c86:	23c0      	movs	r3, #192	; 0xc0
 8001c88:	025b      	lsls	r3, r3, #9
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c8e:	4b58      	ldr	r3, [pc, #352]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	025b      	lsls	r3, r3, #9
 8001c96:	4013      	ands	r3, r2
 8001c98:	d040      	beq.n	8001d1c <HAL_RCC_OscConfig+0x5a0>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d03c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0c3      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01b      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001cae:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001cb4:	2180      	movs	r1, #128	; 0x80
 8001cb6:	0249      	lsls	r1, r1, #9
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fda2 	bl	8000804 <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc6:	f7fe fd9d 	bl	8000804 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0aa      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cd8:	4b45      	ldr	r3, [pc, #276]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	025b      	lsls	r3, r3, #9
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x54a>
 8001ce4:	e01b      	b.n	8001d1e <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ce6:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cea:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001cec:	4943      	ldr	r1, [pc, #268]	; (8001dfc <HAL_RCC_OscConfig+0x680>)
 8001cee:	400a      	ands	r2, r1
 8001cf0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fd87 	bl	8000804 <HAL_GetTick>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cfc:	f7fe fd82 	bl	8000804 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e08f      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d0e:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	025b      	lsls	r3, r3, #9
 8001d16:	4013      	ands	r3, r2
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x580>
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d1c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d100      	bne.n	8001d28 <HAL_RCC_OscConfig+0x5ac>
 8001d26:	e081      	b.n	8001e2c <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d100      	bne.n	8001d36 <HAL_RCC_OscConfig+0x5ba>
 8001d34:	e078      	b.n	8001e28 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d14c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001d44:	492e      	ldr	r1, [pc, #184]	; (8001e00 <HAL_RCC_OscConfig+0x684>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7fe fd5b 	bl	8000804 <HAL_GetTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d54:	f7fe fd56 	bl	8000804 <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e063      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	049b      	lsls	r3, r3, #18
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	220f      	movs	r2, #15
 8001d78:	4393      	bics	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_RCC_OscConfig+0x688>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	0019      	movs	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	0449      	lsls	r1, r1, #17
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7fe fd29 	bl	8000804 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe fd24 	bl	8000804 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e031      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	049b      	lsls	r3, r3, #18
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x63c>
 8001dd6:	e029      	b.n	8001e2c <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <HAL_RCC_OscConfig+0x674>)
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <HAL_RCC_OscConfig+0x684>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe fd0e 	bl	8000804 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x69e>
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	40021000 	.word	0x40021000
 8001df4:	00001388 	.word	0x00001388
 8001df8:	efffffff 	.word	0xefffffff
 8001dfc:	fffeffff 	.word	0xfffeffff
 8001e00:	feffffff 	.word	0xfeffffff
 8001e04:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7fe fcfc 	bl	8000804 <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <HAL_RCC_OscConfig+0x6bc>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	049b      	lsls	r3, r3, #18
 8001e22:	4013      	ands	r3, r2
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x68c>
 8001e26:	e001      	b.n	8001e2c <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b006      	add	sp, #24
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e4a:	4b7b      	ldr	r3, [pc, #492]	; (8002038 <HAL_RCC_ClockConfig+0x1fc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d911      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e58:	4b77      	ldr	r3, [pc, #476]	; (8002038 <HAL_RCC_ClockConfig+0x1fc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4393      	bics	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	4b75      	ldr	r3, [pc, #468]	; (8002038 <HAL_RCC_ClockConfig+0x1fc>)
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e6a:	4b73      	ldr	r3, [pc, #460]	; (8002038 <HAL_RCC_ClockConfig+0x1fc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0d8      	b.n	800202e <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e86:	4b6d      	ldr	r3, [pc, #436]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	22f0      	movs	r2, #240	; 0xf0
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4b69      	ldr	r3, [pc, #420]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x6a>
 8001ea4:	e089      	b.n	8001fba <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d120      	bne.n	8001efc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0b7      	b.n	800202e <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	049b      	lsls	r3, r3, #18
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d114      	bne.n	8001efc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0ab      	b.n	800202e <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ede:	4b57      	ldr	r3, [pc, #348]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	025b      	lsls	r3, r3, #9
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d108      	bne.n	8001efc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e09f      	b.n	800202e <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eee:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e098      	b.n	800202e <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efc:	4b4f      	ldr	r3, [pc, #316]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	4393      	bics	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f10:	f7fe fc78 	bl	8000804 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d111      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7fe fc6f 	bl	8000804 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a44      	ldr	r2, [pc, #272]	; (8002040 <HAL_RCC_ClockConfig+0x204>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e07b      	b.n	800202e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f36:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d1ef      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xe6>
 8001f42:	e03a      	b.n	8001fba <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d111      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4c:	e009      	b.n	8001f62 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4e:	f7fe fc59 	bl	8000804 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	4a39      	ldr	r2, [pc, #228]	; (8002040 <HAL_RCC_ClockConfig+0x204>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e065      	b.n	800202e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f62:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	220c      	movs	r2, #12
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d1ef      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x112>
 8001f6e:	e024      	b.n	8001fba <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d11b      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001f78:	e009      	b.n	8001f8e <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7a:	f7fe fc43 	bl	8000804 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <HAL_RCC_ClockConfig+0x204>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e04f      	b.n	800202e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	220c      	movs	r2, #12
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d1ef      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x13e>
 8001f9a:	e00e      	b.n	8001fba <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7fe fc32 	bl	8000804 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	4a26      	ldr	r2, [pc, #152]	; (8002040 <HAL_RCC_ClockConfig+0x204>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e03e      	b.n	800202e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	220c      	movs	r2, #12
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <HAL_RCC_ClockConfig+0x1fc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d211      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_ClockConfig+0x1fc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4393      	bics	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_ClockConfig+0x1fc>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_RCC_ClockConfig+0x1fc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e020      	b.n	800202e <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <HAL_RCC_ClockConfig+0x208>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	0001      	movs	r1, r0
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x200>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	220f      	movs	r2, #15
 8002018:	4013      	ands	r3, r2
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_RCC_ClockConfig+0x20c>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	000a      	movs	r2, r1
 8002020:	40da      	lsrs	r2, r3
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_RCC_ClockConfig+0x210>)
 8002024:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002026:	2000      	movs	r0, #0
 8002028:	f7fe fbc4 	bl	80007b4 <HAL_InitTick>
  
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	40022000 	.word	0x40022000
 800203c:	40021000 	.word	0x40021000
 8002040:	00001388 	.word	0x00001388
 8002044:	fffff8ff 	.word	0xfffff8ff
 8002048:	0800533c 	.word	0x0800533c
 800204c:	2000001c 	.word	0x2000001c

08002050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b08f      	sub	sp, #60	; 0x3c
 8002054:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002056:	2314      	movs	r3, #20
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	4a37      	ldr	r2, [pc, #220]	; (8002138 <HAL_RCC_GetSysClockFreq+0xe8>)
 800205c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800205e:	c313      	stmia	r3!, {r0, r1, r4}
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	4a35      	ldr	r2, [pc, #212]	; (800213c <HAL_RCC_GetSysClockFreq+0xec>)
 8002068:	ca13      	ldmia	r2!, {r0, r1, r4}
 800206a:	c313      	stmia	r3!, {r0, r1, r4}
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
 8002078:	2300      	movs	r3, #0
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002084:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	220c      	movs	r2, #12
 800208e:	4013      	ands	r3, r2
 8002090:	2b08      	cmp	r3, #8
 8002092:	d006      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x52>
 8002094:	2b0c      	cmp	r3, #12
 8002096:	d043      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0xd0>
 8002098:	2b04      	cmp	r3, #4
 800209a:	d144      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_GetSysClockFreq+0xf4>)
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020a0:	e044      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	220f      	movs	r2, #15
 80020a8:	4013      	ands	r3, r2
 80020aa:	2214      	movs	r2, #20
 80020ac:	18ba      	adds	r2, r7, r2
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020b2:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_RCC_GetSysClockFreq+0xf0>)
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	220f      	movs	r2, #15
 80020b8:	4013      	ands	r3, r2
 80020ba:	1d3a      	adds	r2, r7, #4
 80020bc:	5cd3      	ldrb	r3, [r2, r3]
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80020c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c2:	23c0      	movs	r3, #192	; 0xc0
 80020c4:	025b      	lsls	r3, r3, #9
 80020c6:	401a      	ands	r2, r3
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	025b      	lsls	r3, r3, #9
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d109      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80020d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020d2:	481c      	ldr	r0, [pc, #112]	; (8002144 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020d4:	f7fe f818 	bl	8000108 <__udivsi3>
 80020d8:	0003      	movs	r3, r0
 80020da:	001a      	movs	r2, r3
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	4353      	muls	r3, r2
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
 80020e2:	e01a      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80020e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e6:	23c0      	movs	r3, #192	; 0xc0
 80020e8:	025b      	lsls	r3, r3, #9
 80020ea:	401a      	ands	r2, r3
 80020ec:	23c0      	movs	r3, #192	; 0xc0
 80020ee:	025b      	lsls	r3, r3, #9
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d109      	bne.n	8002108 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80020f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f6:	4814      	ldr	r0, [pc, #80]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f8:	f7fe f806 	bl	8000108 <__udivsi3>
 80020fc:	0003      	movs	r3, r0
 80020fe:	001a      	movs	r2, r3
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	4353      	muls	r3, r2
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
 8002106:	e008      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8002108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800210a:	480e      	ldr	r0, [pc, #56]	; (8002144 <HAL_RCC_GetSysClockFreq+0xf4>)
 800210c:	f7fd fffc 	bl	8000108 <__udivsi3>
 8002110:	0003      	movs	r3, r0
 8002112:	001a      	movs	r2, r3
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	4353      	muls	r3, r2
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800211e:	e005      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002124:	e002      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800212a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b00f      	add	sp, #60	; 0x3c
 8002134:	bd90      	pop	{r4, r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	08004b20 	.word	0x08004b20
 800213c:	08004b30 	.word	0x08004b30
 8002140:	40021000 	.word	0x40021000
 8002144:	007a1200 	.word	0x007a1200
 8002148:	02dc6c00 	.word	0x02dc6c00

0800214c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002150:	4b02      	ldr	r3, [pc, #8]	; (800215c <HAL_RCC_GetHCLKFreq+0x10>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	2000001c 	.word	0x2000001c

08002160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002164:	f7ff fff2 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8002168:	0001      	movs	r1, r0
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	2207      	movs	r2, #7
 8002172:	4013      	ands	r3, r2
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	40d9      	lsrs	r1, r3
 800217a:	000b      	movs	r3, r1
}    
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	40021000 	.word	0x40021000
 8002188:	0800534c 	.word	0x0800534c

0800218c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	025b      	lsls	r3, r3, #9
 80021a4:	4013      	ands	r3, r2
 80021a6:	d100      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80021a8:	e08f      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80021aa:	2317      	movs	r3, #23
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	055b      	lsls	r3, r3, #21
 80021ba:	4013      	ands	r3, r2
 80021bc:	d111      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	4b6b      	ldr	r3, [pc, #428]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0549      	lsls	r1, r1, #21
 80021c8:	430a      	orrs	r2, r1
 80021ca:	61da      	str	r2, [r3, #28]
 80021cc:	4b68      	ldr	r3, [pc, #416]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2317      	movs	r3, #23
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e2:	4b64      	ldr	r3, [pc, #400]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4013      	ands	r3, r2
 80021ec:	d11a      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ee:	4b61      	ldr	r3, [pc, #388]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b60      	ldr	r3, [pc, #384]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021f4:	2180      	movs	r1, #128	; 0x80
 80021f6:	0049      	lsls	r1, r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fc:	f7fe fb02 	bl	8000804 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	e008      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7fe fafd 	bl	8000804 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b64      	cmp	r3, #100	; 0x64
 8002212:	d901      	bls.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0a6      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	4b56      	ldr	r3, [pc, #344]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d0f0      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002224:	4b52      	ldr	r3, [pc, #328]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	23c0      	movs	r3, #192	; 0xc0
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d034      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	23c0      	movs	r3, #192	; 0xc0
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4013      	ands	r3, r2
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	429a      	cmp	r2, r3
 8002244:	d02c      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002246:	4b4a      	ldr	r3, [pc, #296]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a4b      	ldr	r2, [pc, #300]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002250:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002256:	2180      	movs	r1, #128	; 0x80
 8002258:	0249      	lsls	r1, r1, #9
 800225a:	430a      	orrs	r2, r1
 800225c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800225e:	4b44      	ldr	r3, [pc, #272]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002264:	4945      	ldr	r1, [pc, #276]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002266:	400a      	ands	r2, r1
 8002268:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	4013      	ands	r3, r2
 8002276:	d013      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7fe fac4 	bl	8000804 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	e009      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fabf 	bl	8000804 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e067      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002296:	4b36      	ldr	r3, [pc, #216]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	2202      	movs	r2, #2
 800229c:	4013      	ands	r3, r2
 800229e:	d0f0      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022a0:	4b33      	ldr	r3, [pc, #204]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a34      	ldr	r2, [pc, #208]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	0019      	movs	r1, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4b30      	ldr	r3, [pc, #192]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022b4:	2317      	movs	r3, #23
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022c4:	492f      	ldr	r1, [pc, #188]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022c6:	400a      	ands	r2, r1
 80022c8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	d009      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022d4:	4b26      	ldr	r3, [pc, #152]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	2203      	movs	r2, #3
 80022da:	4393      	bics	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2202      	movs	r2, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d009      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a24      	ldr	r2, [pc, #144]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002302:	430a      	orrs	r2, r1
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2220      	movs	r2, #32
 800230c:	4013      	ands	r3, r2
 800230e:	d009      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	2210      	movs	r2, #16
 8002316:	4393      	bics	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002320:	430a      	orrs	r2, r1
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	029b      	lsls	r3, r3, #10
 800232c:	4013      	ands	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	2280      	movs	r2, #128	; 0x80
 8002336:	4393      	bics	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002340:	430a      	orrs	r2, r1
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4013      	ands	r3, r2
 800234e:	d009      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	4393      	bics	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002360:	430a      	orrs	r2, r1
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b006      	add	sp, #24
 800236c:	bd80      	pop	{r7, pc}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	40021000 	.word	0x40021000
 8002374:	40007000 	.word	0x40007000
 8002378:	fffffcff 	.word	0xfffffcff
 800237c:	fffeffff 	.word	0xfffeffff
 8002380:	00001388 	.word	0x00001388
 8002384:	efffffff 	.word	0xefffffff
 8002388:	fffcffff 	.word	0xfffcffff

0800238c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e01e      	b.n	80023dc <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	223d      	movs	r2, #61	; 0x3d
 80023a2:	5c9b      	ldrb	r3, [r3, r2]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	223c      	movs	r2, #60	; 0x3c
 80023ae:	2100      	movs	r1, #0
 80023b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f001 fdff 	bl	8003fb8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223d      	movs	r2, #61	; 0x3d
 80023be:	2102      	movs	r1, #2
 80023c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	0019      	movs	r1, r3
 80023cc:	0010      	movs	r0, r2
 80023ce:	f000 f959 	bl	8002684 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	223d      	movs	r2, #61	; 0x3d
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	430a      	orrs	r2, r1
 80023fa:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b002      	add	sp, #8
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2202      	movs	r2, #2
 8002426:	4013      	ands	r3, r2
 8002428:	2b02      	cmp	r3, #2
 800242a:	d124      	bne.n	8002476 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2202      	movs	r2, #2
 8002434:	4013      	ands	r3, r2
 8002436:	2b02      	cmp	r3, #2
 8002438:	d11d      	bne.n	8002476 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2203      	movs	r2, #3
 8002440:	4252      	negs	r2, r2
 8002442:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2203      	movs	r2, #3
 8002452:	4013      	ands	r3, r2
 8002454:	d004      	beq.n	8002460 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	0018      	movs	r0, r3
 800245a:	f000 f8fa 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 800245e:	e007      	b.n	8002470 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f8ed 	bl	8002642 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f000 f8f9 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2204      	movs	r2, #4
 800247e:	4013      	ands	r3, r2
 8002480:	2b04      	cmp	r3, #4
 8002482:	d125      	bne.n	80024d0 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2204      	movs	r2, #4
 800248c:	4013      	ands	r3, r2
 800248e:	2b04      	cmp	r3, #4
 8002490:	d11e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2205      	movs	r2, #5
 8002498:	4252      	negs	r2, r2
 800249a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	23c0      	movs	r3, #192	; 0xc0
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	d004      	beq.n	80024ba <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 f8cd 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 80024b8:	e007      	b.n	80024ca <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0018      	movs	r0, r3
 80024be:	f000 f8c0 	bl	8002642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 f8cc 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2208      	movs	r2, #8
 80024d8:	4013      	ands	r3, r2
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d124      	bne.n	8002528 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2208      	movs	r2, #8
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d11d      	bne.n	8002528 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2209      	movs	r2, #9
 80024f2:	4252      	negs	r2, r2
 80024f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2204      	movs	r2, #4
 80024fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	2203      	movs	r2, #3
 8002504:	4013      	ands	r3, r2
 8002506:	d004      	beq.n	8002512 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 f8a1 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002510:	e007      	b.n	8002522 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0018      	movs	r0, r3
 8002516:	f000 f894 	bl	8002642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	0018      	movs	r0, r3
 800251e:	f000 f8a0 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2210      	movs	r2, #16
 8002530:	4013      	ands	r3, r2
 8002532:	2b10      	cmp	r3, #16
 8002534:	d125      	bne.n	8002582 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2210      	movs	r2, #16
 800253e:	4013      	ands	r3, r2
 8002540:	2b10      	cmp	r3, #16
 8002542:	d11e      	bne.n	8002582 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2211      	movs	r2, #17
 800254a:	4252      	negs	r2, r2
 800254c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2208      	movs	r2, #8
 8002552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	23c0      	movs	r3, #192	; 0xc0
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4013      	ands	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f874 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 800256a:	e007      	b.n	800257c <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	0018      	movs	r0, r3
 8002570:	f000 f867 	bl	8002642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f873 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2201      	movs	r2, #1
 800258a:	4013      	ands	r3, r2
 800258c:	2b01      	cmp	r3, #1
 800258e:	d10f      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	4013      	ands	r3, r2
 800259a:	2b01      	cmp	r3, #1
 800259c:	d108      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2202      	movs	r2, #2
 80025a4:	4252      	negs	r2, r2
 80025a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 ffe2 	bl	8003574 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b80      	cmp	r3, #128	; 0x80
 80025bc:	d10f      	bne.n	80025de <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d108      	bne.n	80025de <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2281      	movs	r2, #129	; 0x81
 80025d2:	4252      	negs	r2, r2
 80025d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 f8dd 	bl	8002798 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2240      	movs	r2, #64	; 0x40
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b40      	cmp	r3, #64	; 0x40
 80025ea:	d10f      	bne.n	800260c <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d108      	bne.n	800260c <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2241      	movs	r2, #65	; 0x41
 8002600:	4252      	negs	r2, r2
 8002602:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	0018      	movs	r0, r3
 8002608:	f000 f833 	bl	8002672 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2220      	movs	r2, #32
 8002614:	4013      	ands	r3, r2
 8002616:	2b20      	cmp	r3, #32
 8002618:	d10f      	bne.n	800263a <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	4013      	ands	r3, r2
 8002624:	2b20      	cmp	r3, #32
 8002626:	d108      	bne.n	800263a <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2221      	movs	r2, #33	; 0x21
 800262e:	4252      	negs	r2, r2
 8002630:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0018      	movs	r0, r3
 8002636:	f000 f8a7 	bl	8002788 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b002      	add	sp, #8
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b002      	add	sp, #8
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a34      	ldr	r2, [pc, #208]	; (800276c <TIM_Base_SetConfig+0xe8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d008      	beq.n	80026b2 <TIM_Base_SetConfig+0x2e>
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d003      	beq.n	80026b2 <TIM_Base_SetConfig+0x2e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a30      	ldr	r2, [pc, #192]	; (8002770 <TIM_Base_SetConfig+0xec>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d108      	bne.n	80026c4 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2270      	movs	r2, #112	; 0x70
 80026b6:	4393      	bics	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a29      	ldr	r2, [pc, #164]	; (800276c <TIM_Base_SetConfig+0xe8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d018      	beq.n	80026fe <TIM_Base_SetConfig+0x7a>
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	05db      	lsls	r3, r3, #23
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d013      	beq.n	80026fe <TIM_Base_SetConfig+0x7a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a25      	ldr	r2, [pc, #148]	; (8002770 <TIM_Base_SetConfig+0xec>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00f      	beq.n	80026fe <TIM_Base_SetConfig+0x7a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <TIM_Base_SetConfig+0xf0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00b      	beq.n	80026fe <TIM_Base_SetConfig+0x7a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a23      	ldr	r2, [pc, #140]	; (8002778 <TIM_Base_SetConfig+0xf4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <TIM_Base_SetConfig+0x7a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a22      	ldr	r2, [pc, #136]	; (800277c <TIM_Base_SetConfig+0xf8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d003      	beq.n	80026fe <TIM_Base_SetConfig+0x7a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a21      	ldr	r2, [pc, #132]	; (8002780 <TIM_Base_SetConfig+0xfc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d108      	bne.n	8002710 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a20      	ldr	r2, [pc, #128]	; (8002784 <TIM_Base_SetConfig+0x100>)
 8002702:	4013      	ands	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	4393      	bics	r3, r2
 8002716:	001a      	movs	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a0c      	ldr	r2, [pc, #48]	; (800276c <TIM_Base_SetConfig+0xe8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00b      	beq.n	8002756 <TIM_Base_SetConfig+0xd2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <TIM_Base_SetConfig+0xf4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <TIM_Base_SetConfig+0xd2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a0c      	ldr	r2, [pc, #48]	; (800277c <TIM_Base_SetConfig+0xf8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <TIM_Base_SetConfig+0xd2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <TIM_Base_SetConfig+0xfc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d103      	bne.n	800275e <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	615a      	str	r2, [r3, #20]
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b004      	add	sp, #16
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40000400 	.word	0x40000400
 8002774:	40002000 	.word	0x40002000
 8002778:	40014000 	.word	0x40014000
 800277c:	40014400 	.word	0x40014400
 8002780:	40014800 	.word	0x40014800
 8002784:	fffffcff 	.word	0xfffffcff

08002788 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e047      	b.n	800284a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2269      	movs	r2, #105	; 0x69
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d107      	bne.n	80027d6 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2268      	movs	r2, #104	; 0x68
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f001 fc49 	bl	8004068 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2269      	movs	r2, #105	; 0x69
 80027da:	2124      	movs	r1, #36	; 0x24
 80027dc:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	438a      	bics	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 f8d5 	bl	80029a0 <UART_SetConfig>
 80027f6:	0003      	movs	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e024      	b.n	800284a <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	0018      	movs	r0, r3
 800280c:	f000 fa84 	bl	8002d18 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	490e      	ldr	r1, [pc, #56]	; (8002854 <HAL_UART_Init+0xac>)
 800281c:	400a      	ands	r2, r1
 800281e:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	212a      	movs	r1, #42	; 0x2a
 800282c:	438a      	bics	r2, r1
 800282e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2101      	movs	r1, #1
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fb1c 	bl	8002e80 <UART_CheckIdleState>
 8002848:	0003      	movs	r3, r0
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b002      	add	sp, #8
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	ffffb7ff 	.word	0xffffb7ff

08002858 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	1dbb      	adds	r3, r7, #6
 8002866:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2269      	movs	r2, #105	; 0x69
 8002870:	5c9b      	ldrb	r3, [r3, r2]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b20      	cmp	r3, #32
 8002876:	d000      	beq.n	800287a <HAL_UART_Transmit+0x22>
 8002878:	e08c      	b.n	8002994 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_UART_Transmit+0x30>
 8002880:	1dbb      	adds	r3, r7, #6
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e084      	b.n	8002996 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	015b      	lsls	r3, r3, #5
 8002894:	429a      	cmp	r2, r3
 8002896:	d109      	bne.n	80028ac <HAL_UART_Transmit+0x54>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2201      	movs	r2, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	d001      	beq.n	80028ac <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e074      	b.n	8002996 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2268      	movs	r2, #104	; 0x68
 80028b0:	5c9b      	ldrb	r3, [r3, r2]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_UART_Transmit+0x62>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e06d      	b.n	8002996 <HAL_UART_Transmit+0x13e>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2268      	movs	r2, #104	; 0x68
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2269      	movs	r2, #105	; 0x69
 80028cc:	2121      	movs	r1, #33	; 0x21
 80028ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80028d0:	f7fd ff98 	bl	8000804 <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1dba      	adds	r2, r7, #6
 80028dc:	2150      	movs	r1, #80	; 0x50
 80028de:	8812      	ldrh	r2, [r2, #0]
 80028e0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1dba      	adds	r2, r7, #6
 80028e6:	2152      	movs	r1, #82	; 0x52
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 80028ec:	e035      	b.n	800295a <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2252      	movs	r2, #82	; 0x52
 80028f2:	5a9b      	ldrh	r3, [r3, r2]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b299      	uxth	r1, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2252      	movs	r2, #82	; 0x52
 80028fe:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	0013      	movs	r3, r2
 800290a:	2200      	movs	r2, #0
 800290c:	2180      	movs	r1, #128	; 0x80
 800290e:	f000 fb0f 	bl	8002f30 <UART_WaitOnFlagUntilTimeout>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d001      	beq.n	800291a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e03d      	b.n	8002996 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	015b      	lsls	r3, r3, #5
 8002922:	429a      	cmp	r2, r3
 8002924:	d111      	bne.n	800294a <HAL_UART_Transmit+0xf2>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	05d2      	lsls	r2, r2, #23
 800293c:	0dd2      	lsrs	r2, r2, #23
 800293e:	b292      	uxth	r2, r2
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3302      	adds	r3, #2
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	e007      	b.n	800295a <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	60ba      	str	r2, [r7, #8]
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b292      	uxth	r2, r2
 8002958:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2252      	movs	r2, #82	; 0x52
 800295e:	5a9b      	ldrh	r3, [r3, r2]
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1c3      	bne.n	80028ee <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	0013      	movs	r3, r2
 8002970:	2200      	movs	r2, #0
 8002972:	2140      	movs	r1, #64	; 0x40
 8002974:	f000 fadc 	bl	8002f30 <UART_WaitOnFlagUntilTimeout>
 8002978:	1e03      	subs	r3, r0, #0
 800297a:	d001      	beq.n	8002980 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e00a      	b.n	8002996 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2269      	movs	r2, #105	; 0x69
 8002984:	2120      	movs	r1, #32
 8002986:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2268      	movs	r2, #104	; 0x68
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b006      	add	sp, #24
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80029ac:	2317      	movs	r3, #23
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2210      	movs	r2, #16
 80029b2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80029b4:	230a      	movs	r3, #10
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	2200      	movs	r2, #0
 80029ba:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80029bc:	2314      	movs	r3, #20
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	2200      	movs	r2, #0
 80029c2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029c4:	2313      	movs	r3, #19
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4ac1      	ldr	r2, [pc, #772]	; (8002cf0 <UART_SetConfig+0x350>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4abc      	ldr	r2, [pc, #752]	; (8002cf4 <UART_SetConfig+0x354>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4ab4      	ldr	r2, [pc, #720]	; (8002cf8 <UART_SetConfig+0x358>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4ab0      	ldr	r2, [pc, #704]	; (8002cfc <UART_SetConfig+0x35c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d125      	bne.n	8002a8a <UART_SetConfig+0xea>
 8002a3e:	4bb0      	ldr	r3, [pc, #704]	; (8002d00 <UART_SetConfig+0x360>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	2203      	movs	r2, #3
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d00f      	beq.n	8002a6a <UART_SetConfig+0xca>
 8002a4a:	d304      	bcc.n	8002a56 <UART_SetConfig+0xb6>
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d011      	beq.n	8002a74 <UART_SetConfig+0xd4>
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d005      	beq.n	8002a60 <UART_SetConfig+0xc0>
 8002a54:	e013      	b.n	8002a7e <UART_SetConfig+0xde>
 8002a56:	2317      	movs	r3, #23
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e064      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002a60:	2317      	movs	r3, #23
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2202      	movs	r2, #2
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e05f      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002a6a:	2317      	movs	r3, #23
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2204      	movs	r2, #4
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e05a      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002a74:	2317      	movs	r3, #23
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2208      	movs	r2, #8
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e055      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002a7e:	2317      	movs	r3, #23
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	2210      	movs	r2, #16
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	e04f      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a9d      	ldr	r2, [pc, #628]	; (8002d04 <UART_SetConfig+0x364>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d132      	bne.n	8002afa <UART_SetConfig+0x15a>
 8002a94:	4b9a      	ldr	r3, [pc, #616]	; (8002d00 <UART_SetConfig+0x360>)
 8002a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a98:	23c0      	movs	r3, #192	; 0xc0
 8002a9a:	029b      	lsls	r3, r3, #10
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	0252      	lsls	r2, r2, #9
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d019      	beq.n	8002ada <UART_SetConfig+0x13a>
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	0252      	lsls	r2, r2, #9
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d802      	bhi.n	8002ab4 <UART_SetConfig+0x114>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <UART_SetConfig+0x126>
 8002ab2:	e01c      	b.n	8002aee <UART_SetConfig+0x14e>
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	0292      	lsls	r2, r2, #10
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <UART_SetConfig+0x144>
 8002abc:	22c0      	movs	r2, #192	; 0xc0
 8002abe:	0292      	lsls	r2, r2, #10
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d005      	beq.n	8002ad0 <UART_SetConfig+0x130>
 8002ac4:	e013      	b.n	8002aee <UART_SetConfig+0x14e>
 8002ac6:	2317      	movs	r3, #23
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e02c      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002ad0:	2317      	movs	r3, #23
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e027      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002ada:	2317      	movs	r3, #23
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2204      	movs	r2, #4
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e022      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002ae4:	2317      	movs	r3, #23
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	2208      	movs	r2, #8
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e01d      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002aee:	2317      	movs	r3, #23
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	2210      	movs	r2, #16
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	e017      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a82      	ldr	r2, [pc, #520]	; (8002d08 <UART_SetConfig+0x368>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d104      	bne.n	8002b0e <UART_SetConfig+0x16e>
 8002b04:	2317      	movs	r3, #23
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e00d      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7e      	ldr	r2, [pc, #504]	; (8002d0c <UART_SetConfig+0x36c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d104      	bne.n	8002b22 <UART_SetConfig+0x182>
 8002b18:	2317      	movs	r3, #23
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	e003      	b.n	8002b2a <UART_SetConfig+0x18a>
 8002b22:	2317      	movs	r3, #23
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2210      	movs	r2, #16
 8002b28:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d000      	beq.n	8002b38 <UART_SetConfig+0x198>
 8002b36:	e077      	b.n	8002c28 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8002b38:	2317      	movs	r3, #23
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d01c      	beq.n	8002b7c <UART_SetConfig+0x1dc>
 8002b42:	dc02      	bgt.n	8002b4a <UART_SetConfig+0x1aa>
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <UART_SetConfig+0x1b4>
 8002b48:	e04f      	b.n	8002bea <UART_SetConfig+0x24a>
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d027      	beq.n	8002b9e <UART_SetConfig+0x1fe>
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d039      	beq.n	8002bc6 <UART_SetConfig+0x226>
 8002b52:	e04a      	b.n	8002bea <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b54:	f7ff fb04 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	005a      	lsls	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	18d2      	adds	r2, r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0019      	movs	r1, r3
 8002b6a:	0010      	movs	r0, r2
 8002b6c:	f7fd facc 	bl	8000108 <__udivsi3>
 8002b70:	0003      	movs	r3, r0
 8002b72:	001a      	movs	r2, r3
 8002b74:	2314      	movs	r3, #20
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	801a      	strh	r2, [r3, #0]
        break;
 8002b7a:	e03b      	b.n	8002bf4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	4a63      	ldr	r2, [pc, #396]	; (8002d10 <UART_SetConfig+0x370>)
 8002b84:	189a      	adds	r2, r3, r2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	0010      	movs	r0, r2
 8002b8e:	f7fd fabb 	bl	8000108 <__udivsi3>
 8002b92:	0003      	movs	r3, r0
 8002b94:	001a      	movs	r2, r3
 8002b96:	2314      	movs	r3, #20
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	801a      	strh	r2, [r3, #0]
        break;
 8002b9c:	e02a      	b.n	8002bf4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b9e:	f7ff fa57 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	005a      	lsls	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	18d2      	adds	r2, r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	f7fd faa7 	bl	8000108 <__udivsi3>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	2314      	movs	r3, #20
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	801a      	strh	r2, [r3, #0]
        break;
 8002bc4:	e016      	b.n	8002bf4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	0252      	lsls	r2, r2, #9
 8002bd0:	189a      	adds	r2, r3, r2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	0010      	movs	r0, r2
 8002bda:	f7fd fa95 	bl	8000108 <__udivsi3>
 8002bde:	0003      	movs	r3, r0
 8002be0:	001a      	movs	r2, r3
 8002be2:	2314      	movs	r3, #20
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	801a      	strh	r2, [r3, #0]
        break;
 8002be8:	e004      	b.n	8002bf4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002bea:	2313      	movs	r3, #19
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
        break;
 8002bf2:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002bf4:	200a      	movs	r0, #10
 8002bf6:	183b      	adds	r3, r7, r0
 8002bf8:	2414      	movs	r4, #20
 8002bfa:	193a      	adds	r2, r7, r4
 8002bfc:	8812      	ldrh	r2, [r2, #0]
 8002bfe:	210f      	movs	r1, #15
 8002c00:	438a      	bics	r2, r1
 8002c02:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	105b      	asrs	r3, r3, #1
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b299      	uxth	r1, r3
 8002c12:	183b      	adds	r3, r7, r0
 8002c14:	183a      	adds	r2, r7, r0
 8002c16:	8812      	ldrh	r2, [r2, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	183a      	adds	r2, r7, r0
 8002c22:	8812      	ldrh	r2, [r2, #0]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	e05b      	b.n	8002ce0 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8002c28:	2317      	movs	r3, #23
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d01b      	beq.n	8002c6a <UART_SetConfig+0x2ca>
 8002c32:	dc02      	bgt.n	8002c3a <UART_SetConfig+0x29a>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <UART_SetConfig+0x2a4>
 8002c38:	e04d      	b.n	8002cd6 <UART_SetConfig+0x336>
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d026      	beq.n	8002c8c <UART_SetConfig+0x2ec>
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d037      	beq.n	8002cb2 <UART_SetConfig+0x312>
 8002c42:	e048      	b.n	8002cd6 <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c44:	f7ff fa8c 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	18d2      	adds	r2, r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0019      	movs	r1, r3
 8002c58:	0010      	movs	r0, r2
 8002c5a:	f7fd fa55 	bl	8000108 <__udivsi3>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60da      	str	r2, [r3, #12]
        break;
 8002c68:	e03a      	b.n	8002ce0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <UART_SetConfig+0x374>)
 8002c72:	189a      	adds	r2, r3, r2
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	0019      	movs	r1, r3
 8002c7a:	0010      	movs	r0, r2
 8002c7c:	f7fd fa44 	bl	8000108 <__udivsi3>
 8002c80:	0003      	movs	r3, r0
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60da      	str	r2, [r3, #12]
        break;
 8002c8a:	e029      	b.n	8002ce0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c8c:	f7ff f9e0 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8002c90:	0002      	movs	r2, r0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	18d2      	adds	r2, r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	0010      	movs	r0, r2
 8002ca2:	f7fd fa31 	bl	8000108 <__udivsi3>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60da      	str	r2, [r3, #12]
        break;
 8002cb0:	e016      	b.n	8002ce0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	0212      	lsls	r2, r2, #8
 8002cbc:	189a      	adds	r2, r3, r2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	f7fd fa1f 	bl	8000108 <__udivsi3>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60da      	str	r2, [r3, #12]
        break;
 8002cd4:	e004      	b.n	8002ce0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002cd6:	2313      	movs	r3, #19
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
        break;
 8002cde:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002ce0:	2313      	movs	r3, #19
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	781b      	ldrb	r3, [r3, #0]

}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b007      	add	sp, #28
 8002cec:	bd90      	pop	{r4, r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	efff69f3 	.word	0xefff69f3
 8002cf4:	ffffcfff 	.word	0xffffcfff
 8002cf8:	fffff4ff 	.word	0xfffff4ff
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40004400 	.word	0x40004400
 8002d08:	40004800 	.word	0x40004800
 8002d0c:	40004c00 	.word	0x40004c00
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	2201      	movs	r2, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a4a      	ldr	r2, [pc, #296]	; (8002e5c <UART_AdvFeatureConfig+0x144>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2202      	movs	r2, #2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a43      	ldr	r2, [pc, #268]	; (8002e60 <UART_AdvFeatureConfig+0x148>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2204      	movs	r2, #4
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a3b      	ldr	r2, [pc, #236]	; (8002e64 <UART_AdvFeatureConfig+0x14c>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d00b      	beq.n	8002da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4a34      	ldr	r2, [pc, #208]	; (8002e68 <UART_AdvFeatureConfig+0x150>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2210      	movs	r2, #16
 8002dae:	4013      	ands	r3, r2
 8002db0:	d00b      	beq.n	8002dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <UART_AdvFeatureConfig+0x154>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2220      	movs	r2, #32
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d00b      	beq.n	8002dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	4a25      	ldr	r2, [pc, #148]	; (8002e70 <UART_AdvFeatureConfig+0x158>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	0019      	movs	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2240      	movs	r2, #64	; 0x40
 8002df2:	4013      	ands	r3, r2
 8002df4:	d01d      	beq.n	8002e32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <UART_AdvFeatureConfig+0x15c>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	035b      	lsls	r3, r3, #13
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d10b      	bne.n	8002e32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <UART_AdvFeatureConfig+0x160>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d00b      	beq.n	8002e54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <UART_AdvFeatureConfig+0x164>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
  }
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	fffdffff 	.word	0xfffdffff
 8002e60:	fffeffff 	.word	0xfffeffff
 8002e64:	fffbffff 	.word	0xfffbffff
 8002e68:	ffff7fff 	.word	0xffff7fff
 8002e6c:	ffffefff 	.word	0xffffefff
 8002e70:	ffffdfff 	.word	0xffffdfff
 8002e74:	ffefffff 	.word	0xffefffff
 8002e78:	ff9fffff 	.word	0xff9fffff
 8002e7c:	fff7ffff 	.word	0xfff7ffff

08002e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002e92:	f7fd fcb7 	bl	8000804 <HAL_GetTick>
 8002e96:	0003      	movs	r3, r0
 8002e98:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a21      	ldr	r2, [pc, #132]	; (8002f24 <UART_CheckIdleState+0xa4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <UART_CheckIdleState+0x2e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <UART_CheckIdleState+0xa8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d129      	bne.n	8002f02 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d10d      	bne.n	8002ed8 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	0399      	lsls	r1, r3, #14
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <UART_CheckIdleState+0xac>)
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	0013      	movs	r3, r2
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f000 f830 	bl	8002f30 <UART_WaitOnFlagUntilTimeout>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d001      	beq.n	8002ed8 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e021      	b.n	8002f1c <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d10d      	bne.n	8002f02 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	03d9      	lsls	r1, r3, #15
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <UART_CheckIdleState+0xac>)
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	0013      	movs	r3, r2
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f000 f81b 	bl	8002f30 <UART_WaitOnFlagUntilTimeout>
 8002efa:	1e03      	subs	r3, r0, #0
 8002efc:	d001      	beq.n	8002f02 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e00c      	b.n	8002f1c <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2269      	movs	r2, #105	; 0x69
 8002f06:	2120      	movs	r1, #32
 8002f08:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	226a      	movs	r2, #106	; 0x6a
 8002f0e:	2120      	movs	r1, #32
 8002f10:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2268      	movs	r2, #104	; 0x68
 8002f16:	2100      	movs	r1, #0
 8002f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40013800 	.word	0x40013800
 8002f28:	40004400 	.word	0x40004400
 8002f2c:	01ffffff 	.word	0x01ffffff

08002f30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	1dfb      	adds	r3, r7, #7
 8002f3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f40:	e02b      	b.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	3301      	adds	r3, #1
 8002f46:	d028      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f4e:	f7fd fc59 	bl	8000804 <HAL_GetTick>
 8002f52:	0002      	movs	r2, r0
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d21d      	bcs.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4916      	ldr	r1, [pc, #88]	; (8002fc4 <UART_WaitOnFlagUntilTimeout+0x94>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	438a      	bics	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2269      	movs	r2, #105	; 0x69
 8002f82:	2120      	movs	r1, #32
 8002f84:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	226a      	movs	r2, #106	; 0x6a
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2268      	movs	r2, #104	; 0x68
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e00f      	b.n	8002fba <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	425a      	negs	r2, r3
 8002faa:	4153      	adcs	r3, r2
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	001a      	movs	r2, r3
 8002fb0:	1dfb      	adds	r3, r7, #7
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d0c4      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b004      	add	sp, #16
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	fffffe5f 	.word	0xfffffe5f

08002fc8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fce:	240c      	movs	r4, #12
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	2314      	movs	r3, #20
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f001 f8e5 	bl	80041a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <MX_GPIO_Init+0xc8>)
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <MX_GPIO_Init+0xc8>)
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	0309      	lsls	r1, r1, #12
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	615a      	str	r2, [r3, #20]
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <MX_GPIO_Init+0xc8>)
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	031b      	lsls	r3, r3, #12
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <MX_GPIO_Init+0xc8>)
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	4b24      	ldr	r3, [pc, #144]	; (8003090 <MX_GPIO_Init+0xc8>)
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	0289      	lsls	r1, r1, #10
 8003004:	430a      	orrs	r2, r1
 8003006:	615a      	str	r2, [r3, #20]
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <MX_GPIO_Init+0xc8>)
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	029b      	lsls	r3, r3, #10
 8003010:	4013      	ands	r3, r2
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <MX_GPIO_Init+0xc8>)
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <MX_GPIO_Init+0xc8>)
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	02c9      	lsls	r1, r1, #11
 8003020:	430a      	orrs	r2, r1
 8003022:	615a      	str	r2, [r3, #20]
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <MX_GPIO_Init+0xc8>)
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	02db      	lsls	r3, r3, #11
 800302c:	4013      	ands	r3, r2
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003032:	2390      	movs	r3, #144	; 0x90
 8003034:	05db      	lsls	r3, r3, #23
 8003036:	2200      	movs	r2, #0
 8003038:	2120      	movs	r1, #32
 800303a:	0018      	movs	r0, r3
 800303c:	f7fd fe60 	bl	8000d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003040:	193b      	adds	r3, r7, r4
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	0192      	lsls	r2, r2, #6
 8003046:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003048:	193b      	adds	r3, r7, r4
 800304a:	2200      	movs	r2, #0
 800304c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	193b      	adds	r3, r7, r4
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003054:	193b      	adds	r3, r7, r4
 8003056:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <MX_GPIO_Init+0xcc>)
 8003058:	0019      	movs	r1, r3
 800305a:	0010      	movs	r0, r2
 800305c:	f7fd fcd4 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003060:	0021      	movs	r1, r4
 8003062:	187b      	adds	r3, r7, r1
 8003064:	2220      	movs	r2, #32
 8003066:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003068:	187b      	adds	r3, r7, r1
 800306a:	2201      	movs	r2, #1
 800306c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	187b      	adds	r3, r7, r1
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003074:	187b      	adds	r3, r7, r1
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800307a:	187a      	adds	r2, r7, r1
 800307c:	2390      	movs	r3, #144	; 0x90
 800307e:	05db      	lsls	r3, r3, #23
 8003080:	0011      	movs	r1, r2
 8003082:	0018      	movs	r0, r3
 8003084:	f7fd fcc0 	bl	8000a08 <HAL_GPIO_Init>

}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	b009      	add	sp, #36	; 0x24
 800308e:	bd90      	pop	{r4, r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	48000800 	.word	0x48000800

08003098 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <MX_I2C2_Init+0x74>)
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <MX_I2C2_Init+0x78>)
 80030a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00506682;
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <MX_I2C2_Init+0x74>)
 80030a4:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <MX_I2C2_Init+0x7c>)
 80030a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80030a8:	4b18      	ldr	r3, [pc, #96]	; (800310c <MX_I2C2_Init+0x74>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030ae:	4b17      	ldr	r3, [pc, #92]	; (800310c <MX_I2C2_Init+0x74>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030b4:	4b15      	ldr	r3, [pc, #84]	; (800310c <MX_I2C2_Init+0x74>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80030ba:	4b14      	ldr	r3, [pc, #80]	; (800310c <MX_I2C2_Init+0x74>)
 80030bc:	2200      	movs	r2, #0
 80030be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <MX_I2C2_Init+0x74>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <MX_I2C2_Init+0x74>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030cc:	4b0f      	ldr	r3, [pc, #60]	; (800310c <MX_I2C2_Init+0x74>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <MX_I2C2_Init+0x74>)
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7fd fe31 	bl	8000d3c <HAL_I2C_Init>
 80030da:	1e03      	subs	r3, r0, #0
 80030dc:	d001      	beq.n	80030e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80030de:	f000 fa5b 	bl	8003598 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <MX_I2C2_Init+0x74>)
 80030e4:	2100      	movs	r1, #0
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7fe faae 	bl	8001648 <HAL_I2CEx_ConfigAnalogFilter>
 80030ec:	1e03      	subs	r3, r0, #0
 80030ee:	d001      	beq.n	80030f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80030f0:	f000 fa52 	bl	8003598 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <MX_I2C2_Init+0x74>)
 80030f6:	2100      	movs	r1, #0
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7fe faf1 	bl	80016e0 <HAL_I2CEx_ConfigDigitalFilter>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d001      	beq.n	8003106 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003102:	f000 fa49 	bl	8003598 <Error_Handler>
  }

}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200000bc 	.word	0x200000bc
 8003110:	40005800 	.word	0x40005800
 8003114:	00506682 	.word	0x00506682

08003118 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	2314      	movs	r3, #20
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	0018      	movs	r0, r3
 8003126:	2314      	movs	r3, #20
 8003128:	001a      	movs	r2, r3
 800312a:	2100      	movs	r1, #0
 800312c:	f001 f83c 	bl	80041a8 <memset>
  if(i2cHandle->Instance==I2C2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <HAL_I2C_MspInit+0x90>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d132      	bne.n	80031a0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800313a:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <HAL_I2C_MspInit+0x94>)
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <HAL_I2C_MspInit+0x94>)
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	02c9      	lsls	r1, r1, #11
 8003144:	430a      	orrs	r2, r1
 8003146:	615a      	str	r2, [r3, #20]
 8003148:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_I2C_MspInit+0x94>)
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	02db      	lsls	r3, r3, #11
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003156:	2114      	movs	r1, #20
 8003158:	187b      	adds	r3, r7, r1
 800315a:	22c0      	movs	r2, #192	; 0xc0
 800315c:	01d2      	lsls	r2, r2, #7
 800315e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003160:	187b      	adds	r3, r7, r1
 8003162:	2212      	movs	r2, #18
 8003164:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003166:	187b      	adds	r3, r7, r1
 8003168:	2201      	movs	r2, #1
 800316a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316c:	187b      	adds	r3, r7, r1
 800316e:	2203      	movs	r2, #3
 8003170:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8003172:	187b      	adds	r3, r7, r1
 8003174:	2205      	movs	r2, #5
 8003176:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003178:	187b      	adds	r3, r7, r1
 800317a:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <HAL_I2C_MspInit+0x98>)
 800317c:	0019      	movs	r1, r3
 800317e:	0010      	movs	r0, r2
 8003180:	f7fd fc42 	bl	8000a08 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_I2C_MspInit+0x94>)
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_I2C_MspInit+0x94>)
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	03c9      	lsls	r1, r1, #15
 800318e:	430a      	orrs	r2, r1
 8003190:	61da      	str	r2, [r3, #28]
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_I2C_MspInit+0x94>)
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	03db      	lsls	r3, r3, #15
 800319a:	4013      	ands	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b00a      	add	sp, #40	; 0x28
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40005800 	.word	0x40005800
 80031ac:	40021000 	.word	0x40021000
 80031b0:	48000400 	.word	0x48000400

080031b4 <i2c_read_reg>:
} 

/* USER CODE BEGIN 1 */

//a couple wrapper functions to make I2C transactions a little easier
HAL_StatusTypeDef i2c_read_reg(uint8_t addr, uint8_t reg, uint8_t* buf) {
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	603a      	str	r2, [r7, #0]
 80031bc:	1dfb      	adds	r3, r7, #7
 80031be:	1c02      	adds	r2, r0, #0
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	1dbb      	adds	r3, r7, #6
 80031c4:	1c0a      	adds	r2, r1, #0
 80031c6:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	if(BUS_IN_USE) return HAL_BUSY;
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <i2c_read_reg+0x7c>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <i2c_read_reg+0x20>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e028      	b.n	8003226 <i2c_read_reg+0x72>
	BUS_IN_USE = 1; //lock the bus
 80031d4:	4b16      	ldr	r3, [pc, #88]	; (8003230 <i2c_read_reg+0x7c>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, &reg, 1, 1); //1ms timeout
 80031da:	1dfb      	adds	r3, r7, #7
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b299      	uxth	r1, r3
 80031e0:	250f      	movs	r5, #15
 80031e2:	197c      	adds	r4, r7, r5
 80031e4:	1dba      	adds	r2, r7, #6
 80031e6:	4813      	ldr	r0, [pc, #76]	; (8003234 <i2c_read_reg+0x80>)
 80031e8:	2301      	movs	r3, #1
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2301      	movs	r3, #1
 80031ee:	f7fd fe3b 	bl	8000e68 <HAL_I2C_Master_Transmit>
 80031f2:	0003      	movs	r3, r0
 80031f4:	7023      	strb	r3, [r4, #0]
	if(status == HAL_OK) status = HAL_I2C_Master_Receive(&hi2c2, addr, buf, 1, 1); //1ms timeout
 80031f6:	197b      	adds	r3, r7, r5
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10d      	bne.n	800321a <i2c_read_reg+0x66>
 80031fe:	1dfb      	adds	r3, r7, #7
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b299      	uxth	r1, r3
 8003204:	230f      	movs	r3, #15
 8003206:	18fc      	adds	r4, r7, r3
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	480a      	ldr	r0, [pc, #40]	; (8003234 <i2c_read_reg+0x80>)
 800320c:	2301      	movs	r3, #1
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2301      	movs	r3, #1
 8003212:	f7fd ff3d 	bl	8001090 <HAL_I2C_Master_Receive>
 8003216:	0003      	movs	r3, r0
 8003218:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0;//unlock the bus
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <i2c_read_reg+0x7c>)
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
	return status;
 8003220:	230f      	movs	r3, #15
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	781b      	ldrb	r3, [r3, #0]
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b004      	add	sp, #16
 800322c:	bdb0      	pop	{r4, r5, r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	200000a0 	.word	0x200000a0
 8003234:	200000bc 	.word	0x200000bc

08003238 <i2c_write_command>:

HAL_StatusTypeDef i2c_write_command(uint8_t addr, uint8_t command) {
 8003238:	b5b0      	push	{r4, r5, r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af02      	add	r7, sp, #8
 800323e:	0002      	movs	r2, r0
 8003240:	1dfb      	adds	r3, r7, #7
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	1dbb      	adds	r3, r7, #6
 8003246:	1c0a      	adds	r2, r1, #0
 8003248:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	if(BUS_IN_USE) return HAL_BUSY;
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <i2c_write_command+0x54>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <i2c_write_command+0x1e>
 8003252:	2302      	movs	r3, #2
 8003254:	e015      	b.n	8003282 <i2c_write_command+0x4a>
	BUS_IN_USE = 1; //lock the bus
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <i2c_write_command+0x54>)
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, &command, 1, 1); //1ms timeout
 800325c:	1dfb      	adds	r3, r7, #7
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	b299      	uxth	r1, r3
 8003262:	250f      	movs	r5, #15
 8003264:	197c      	adds	r4, r7, r5
 8003266:	1dba      	adds	r2, r7, #6
 8003268:	4809      	ldr	r0, [pc, #36]	; (8003290 <i2c_write_command+0x58>)
 800326a:	2301      	movs	r3, #1
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2301      	movs	r3, #1
 8003270:	f7fd fdfa 	bl	8000e68 <HAL_I2C_Master_Transmit>
 8003274:	0003      	movs	r3, r0
 8003276:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0; //unlock the bus
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <i2c_write_command+0x54>)
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
	return status;
 800327e:	197b      	adds	r3, r7, r5
 8003280:	781b      	ldrb	r3, [r3, #0]
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b004      	add	sp, #16
 8003288:	bdb0      	pop	{r4, r5, r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	200000a0 	.word	0x200000a0
 8003290:	200000bc 	.word	0x200000bc

08003294 <i2c_write_reg>:

HAL_StatusTypeDef i2c_write_reg(uint8_t addr, uint8_t reg, uint8_t data) {
 8003294:	b5b0      	push	{r4, r5, r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af02      	add	r7, sp, #8
 800329a:	0004      	movs	r4, r0
 800329c:	0008      	movs	r0, r1
 800329e:	0011      	movs	r1, r2
 80032a0:	1dfb      	adds	r3, r7, #7
 80032a2:	1c22      	adds	r2, r4, #0
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	1dbb      	adds	r3, r7, #6
 80032a8:	1c02      	adds	r2, r0, #0
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	1d7b      	adds	r3, r7, #5
 80032ae:	1c0a      	adds	r2, r1, #0
 80032b0:	701a      	strb	r2, [r3, #0]
	uint8_t txdata[2];
	HAL_StatusTypeDef status;
	txdata[0] = reg;
 80032b2:	210c      	movs	r1, #12
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	1dba      	adds	r2, r7, #6
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	701a      	strb	r2, [r3, #0]
	txdata[1] = data;
 80032bc:	187b      	adds	r3, r7, r1
 80032be:	1d7a      	adds	r2, r7, #5
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	705a      	strb	r2, [r3, #1]
	if(BUS_IN_USE) return HAL_BUSY;
 80032c4:	4b10      	ldr	r3, [pc, #64]	; (8003308 <i2c_write_reg+0x74>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <i2c_write_reg+0x3c>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e016      	b.n	80032fe <i2c_write_reg+0x6a>
	BUS_IN_USE = 1; //lock the bus
 80032d0:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <i2c_write_reg+0x74>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, txdata, 2, 1); //1ms timeout
 80032d6:	1dfb      	adds	r3, r7, #7
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	b299      	uxth	r1, r3
 80032dc:	250f      	movs	r5, #15
 80032de:	197c      	adds	r4, r7, r5
 80032e0:	230c      	movs	r3, #12
 80032e2:	18fa      	adds	r2, r7, r3
 80032e4:	4809      	ldr	r0, [pc, #36]	; (800330c <i2c_write_reg+0x78>)
 80032e6:	2301      	movs	r3, #1
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2302      	movs	r3, #2
 80032ec:	f7fd fdbc 	bl	8000e68 <HAL_I2C_Master_Transmit>
 80032f0:	0003      	movs	r3, r0
 80032f2:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0; //unlock the bus
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <i2c_write_reg+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
	return status;
 80032fa:	197b      	adds	r3, r7, r5
 80032fc:	781b      	ldrb	r3, [r3, #0]
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b004      	add	sp, #16
 8003304:	bdb0      	pop	{r4, r5, r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	200000a0 	.word	0x200000a0
 800330c:	200000bc 	.word	0x200000bc

08003310 <i2c_write_regs>:
	if(status == HAL_OK) status = HAL_I2C_Master_Receive(&hi2c2, addr, read_data, num_regs, num_regs>>2); //500us per byte, should be plenty even at 100khz
	else BUS_IN_USE = 0; //unlock the bus
	return status;
}

HAL_StatusTypeDef i2c_write_regs(uint8_t addr, uint8_t* data_to_write, uint8_t len) {
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	b087      	sub	sp, #28
 8003314:	af02      	add	r7, sp, #8
 8003316:	6039      	str	r1, [r7, #0]
 8003318:	0011      	movs	r1, r2
 800331a:	1dfb      	adds	r3, r7, #7
 800331c:	1c02      	adds	r2, r0, #0
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	1dbb      	adds	r3, r7, #6
 8003322:	1c0a      	adds	r2, r1, #0
 8003324:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	if(BUS_IN_USE) return HAL_BUSY;
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <i2c_write_regs+0x64>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <i2c_write_regs+0x22>
 800332e:	2302      	movs	r3, #2
 8003330:	e01b      	b.n	800336a <i2c_write_regs+0x5a>
	BUS_IN_USE = 1; //lock the bus
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <i2c_write_regs+0x64>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, data_to_write, len, len>>2); //500us per byte, should be plenty even at 100khz
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	b299      	uxth	r1, r3
 800333e:	1dbb      	adds	r3, r7, #6
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	b29d      	uxth	r5, r3
 8003344:	1dbb      	adds	r3, r7, #6
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	b2db      	uxtb	r3, r3
 800334c:	260f      	movs	r6, #15
 800334e:	19bc      	adds	r4, r7, r6
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4809      	ldr	r0, [pc, #36]	; (8003378 <i2c_write_regs+0x68>)
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	002b      	movs	r3, r5
 8003358:	f7fd fd86 	bl	8000e68 <HAL_I2C_Master_Transmit>
 800335c:	0003      	movs	r3, r0
 800335e:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0; //unlock the bus
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <i2c_write_regs+0x64>)
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
	return status;
 8003366:	19bb      	adds	r3, r7, r6
 8003368:	781b      	ldrb	r3, [r3, #0]
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b005      	add	sp, #20
 8003370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	200000a0 	.word	0x200000a0
 8003378:	200000bc 	.word	0x200000bc

0800337c <_write>:
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len)
{
 800337c:	b5b0      	push	{r4, r5, r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d00a      	beq.n	80033a4 <_write+0x28>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d007      	beq.n	80033a4 <_write+0x28>
   {
      errno = EBADF;
 8003394:	f000 fede 	bl	8004154 <__errno>
 8003398:	0003      	movs	r3, r0
 800339a:	2209      	movs	r2, #9
 800339c:	601a      	str	r2, [r3, #0]
      return -1;
 800339e:	2301      	movs	r3, #1
 80033a0:	425b      	negs	r3, r3
 80033a2:	e011      	b.n	80033c8 <_write+0x4c>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 0xFFFF);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	b29a      	uxth	r2, r3
   HAL_StatusTypeDef status =
 80033a8:	2517      	movs	r5, #23
 80033aa:	197c      	adds	r4, r7, r5
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <_write+0x54>)
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	4808      	ldr	r0, [pc, #32]	; (80033d4 <_write+0x58>)
 80033b2:	f7ff fa51 	bl	8002858 <HAL_UART_Transmit>
 80033b6:	0003      	movs	r3, r0
 80033b8:	7023      	strb	r3, [r4, #0]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80033ba:	197b      	adds	r3, r7, r5
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <_write+0x4a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	e000      	b.n	80033c8 <_write+0x4c>
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b006      	add	sp, #24
 80033ce:	bdb0      	pop	{r4, r5, r7, pc}
 80033d0:	0000ffff 	.word	0x0000ffff
 80033d4:	20000148 	.word	0x20000148

080033d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033de:	f7fd f9d5 	bl	800078c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033e2:	f000 f873 	bl	80034cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033e6:	f7ff fdef 	bl	8002fc8 <MX_GPIO_Init>
  MX_I2C2_Init();
 80033ea:	f7ff fe55 	bl	8003098 <MX_I2C2_Init>
  MX_TIM17_Init();
 80033ee:	f000 fdbb 	bl	8003f68 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80033f2:	f000 fe09 	bl	8004008 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting...\r\n");
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <main+0xe0>)
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 ff3d 	bl	8004278 <puts>
  HAL_TIM_Base_Start_IT(&htim17);
 80033fe:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <main+0xe4>)
 8003400:	0018      	movs	r0, r3
 8003402:	f7fe ffef 	bl	80023e4 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 8003406:	23fa      	movs	r3, #250	; 0xfa
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	0018      	movs	r0, r3
 800340c:	f7fd fa04 	bl	8000818 <HAL_Delay>
  pca_init();
 8003410:	f000 f8c8 	bl	80035a4 <pca_init>
  pca_display_SOC(0.99);
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <main+0xe8>)
 8003416:	1c18      	adds	r0, r3, #0
 8003418:	f000 faf0 	bl	80039fc <pca_display_SOC>
  HAL_Delay(1000);
 800341c:	23fa      	movs	r3, #250	; 0xfa
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	0018      	movs	r0, r3
 8003422:	f7fd f9f9 	bl	8000818 <HAL_Delay>
  pca_display_SOC(0.99);
 8003426:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <main+0xe8>)
 8003428:	1c18      	adds	r0, r3, #0
 800342a:	f000 fae7 	bl	80039fc <pca_display_SOC>
  HAL_Delay(6000);
 800342e:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <main+0xec>)
 8003430:	0018      	movs	r0, r3
 8003432:	f7fd f9f1 	bl	8000818 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int j = 0; j < 7; j++) {
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e039      	b.n	80034b0 <main+0xd8>
		  LEDColorTypedef* color;
		  color = (LEDColorTypedef*)color_array[j];
 800343c:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <main+0xf0>)
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	0092      	lsls	r2, r2, #2
 8003442:	58d3      	ldr	r3, [r2, r3]
 8003444:	603b      	str	r3, [r7, #0]

		  for(int i = 0; i<4; i++) {
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	e012      	b.n	8003472 <main+0x9a>
			  pca_all_off();
 800344c:	f000 fab8 	bl	80039c0 <pca_all_off>
			  pca_write_led(i, color);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f000 f977 	bl	800374c <pca_write_led>
			  pca_sleep();
 800345e:	f000 f94b 	bl	80036f8 <pca_sleep>
			  //HAL_Delay(10);
			  pca_wake();
 8003462:	f000 f905 	bl	8003670 <pca_wake>
			  HAL_Delay(75);
 8003466:	204b      	movs	r0, #75	; 0x4b
 8003468:	f7fd f9d6 	bl	8000818 <HAL_Delay>
		  for(int i = 0; i<4; i++) {
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	3301      	adds	r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b03      	cmp	r3, #3
 8003476:	dde9      	ble.n	800344c <main+0x74>
		  }
		  for(int i = 4; i>0; i--) {
 8003478:	2304      	movs	r3, #4
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	e012      	b.n	80034a4 <main+0xcc>
			  pca_all_off();
 800347e:	f000 fa9f 	bl	80039c0 <pca_all_off>
			  pca_write_led(i, color);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	0011      	movs	r1, r2
 800348a:	0018      	movs	r0, r3
 800348c:	f000 f95e 	bl	800374c <pca_write_led>
			  pca_sleep();
 8003490:	f000 f932 	bl	80036f8 <pca_sleep>
			  //HAL_Delay(10);
			  pca_wake();
 8003494:	f000 f8ec 	bl	8003670 <pca_wake>
			  HAL_Delay(75);
 8003498:	204b      	movs	r0, #75	; 0x4b
 800349a:	f7fd f9bd 	bl	8000818 <HAL_Delay>
		  for(int i = 4; i>0; i--) {
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dce9      	bgt.n	800347e <main+0xa6>
	  for(int j = 0; j < 7; j++) {
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3301      	adds	r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	ddc2      	ble.n	800343c <main+0x64>
 80034b6:	e7be      	b.n	8003436 <main+0x5e>
 80034b8:	08004b40 	.word	0x08004b40
 80034bc:	20000108 	.word	0x20000108
 80034c0:	3f7d70a4 	.word	0x3f7d70a4
 80034c4:	00001770 	.word	0x00001770
 80034c8:	20000000 	.word	0x20000000

080034cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b099      	sub	sp, #100	; 0x64
 80034d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034d2:	242c      	movs	r4, #44	; 0x2c
 80034d4:	193b      	adds	r3, r7, r4
 80034d6:	0018      	movs	r0, r3
 80034d8:	2334      	movs	r3, #52	; 0x34
 80034da:	001a      	movs	r2, r3
 80034dc:	2100      	movs	r1, #0
 80034de:	f000 fe63 	bl	80041a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034e2:	231c      	movs	r3, #28
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	0018      	movs	r0, r3
 80034e8:	2310      	movs	r3, #16
 80034ea:	001a      	movs	r2, r3
 80034ec:	2100      	movs	r1, #0
 80034ee:	f000 fe5b 	bl	80041a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034f2:	003b      	movs	r3, r7
 80034f4:	0018      	movs	r0, r3
 80034f6:	231c      	movs	r3, #28
 80034f8:	001a      	movs	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	f000 fe54 	bl	80041a8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8003500:	193b      	adds	r3, r7, r4
 8003502:	2220      	movs	r2, #32
 8003504:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003506:	193b      	adds	r3, r7, r4
 8003508:	2201      	movs	r2, #1
 800350a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800350c:	193b      	adds	r3, r7, r4
 800350e:	2200      	movs	r2, #0
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003512:	193b      	adds	r3, r7, r4
 8003514:	0018      	movs	r0, r3
 8003516:	f7fe f931 	bl	800177c <HAL_RCC_OscConfig>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d001      	beq.n	8003522 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800351e:	f000 f83b 	bl	8003598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003522:	211c      	movs	r1, #28
 8003524:	187b      	adds	r3, r7, r1
 8003526:	2207      	movs	r2, #7
 8003528:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800352a:	187b      	adds	r3, r7, r1
 800352c:	2203      	movs	r2, #3
 800352e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003530:	187b      	adds	r3, r7, r1
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003536:	187b      	adds	r3, r7, r1
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	00d2      	lsls	r2, r2, #3
 800353c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800353e:	187b      	adds	r3, r7, r1
 8003540:	2101      	movs	r1, #1
 8003542:	0018      	movs	r0, r3
 8003544:	f7fe fc7a 	bl	8001e3c <HAL_RCC_ClockConfig>
 8003548:	1e03      	subs	r3, r0, #0
 800354a:	d001      	beq.n	8003550 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800354c:	f000 f824 	bl	8003598 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003550:	003b      	movs	r3, r7
 8003552:	2202      	movs	r2, #2
 8003554:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003556:	003b      	movs	r3, r7
 8003558:	2200      	movs	r2, #0
 800355a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800355c:	003b      	movs	r3, r7
 800355e:	0018      	movs	r0, r3
 8003560:	f7fe fe14 	bl	800218c <HAL_RCCEx_PeriphCLKConfig>
 8003564:	1e03      	subs	r3, r0, #0
 8003566:	d001      	beq.n	800356c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003568:	f000 f816 	bl	8003598 <Error_Handler>
  }
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b019      	add	sp, #100	; 0x64
 8003572:	bd90      	pop	{r4, r7, pc}

08003574 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim17) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	if(pca_update() != HAL_OK) printf("TX Error\r\n");
 800357c:	f000 fbde 	bl	8003d3c <pca_update>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d003      	beq.n	800358c <HAL_TIM_PeriodElapsedCallback+0x18>
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003586:	0018      	movs	r0, r3
 8003588:	f000 fe76 	bl	8004278 <puts>
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}
 8003594:	08004b50 	.word	0x08004b50

08003598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <pca_init>:
static volatile uint16_t event_tick_counter; //holds the ms tick for the event sequencing

#define PCA_ADDR 0x80
#define OFFSET_MULT 256

HAL_StatusTypeDef pca_init() {
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
	//configure the mode registers
		//ehhh prescaler is 200hz by default so should be fine
	//wake the device if it's in sleep
	//set all the LEDs off
	event_active = false;
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <pca_init+0xa8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	Mode1RegTypedef mode1;
	Mode2RegTypedef mode2;

	mode1.data = 0;
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
	mode1.map.auto_inc_en = 1;
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	2120      	movs	r1, #32
 80035bc:	430a      	orrs	r2, r1
 80035be:	701a      	strb	r2, [r3, #0]

	mode2.data = 0;
 80035c0:	003b      	movs	r3, r7
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]
	mode2.map.invert = 1;
 80035c6:	003b      	movs	r3, r7
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	2110      	movs	r1, #16
 80035cc:	430a      	orrs	r2, r1
 80035ce:	701a      	strb	r2, [r3, #0]
	mode2.map.o_en = 2;
 80035d0:	003b      	movs	r3, r7
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	2103      	movs	r1, #3
 80035d6:	438a      	bics	r2, r1
 80035d8:	1c11      	adds	r1, r2, #0
 80035da:	2202      	movs	r2, #2
 80035dc:	430a      	orrs	r2, r1
 80035de:	701a      	strb	r2, [r3, #0]

	status = pca_reset();
 80035e0:	1dfc      	adds	r4, r7, #7
 80035e2:	f000 f835 	bl	8003650 <pca_reset>
 80035e6:	0003      	movs	r3, r0
 80035e8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80035ea:	1dfb      	adds	r3, r7, #7
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <pca_init+0x54>
 80035f2:	1dfb      	adds	r3, r7, #7
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	e024      	b.n	8003642 <pca_init+0x9e>
	status = i2c_write_reg(PCA_ADDR, MODE_1_REG, mode1.data);
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	1dfc      	adds	r4, r7, #7
 80035fe:	001a      	movs	r2, r3
 8003600:	2100      	movs	r1, #0
 8003602:	2080      	movs	r0, #128	; 0x80
 8003604:	f7ff fe46 	bl	8003294 <i2c_write_reg>
 8003608:	0003      	movs	r3, r0
 800360a:	7023      	strb	r3, [r4, #0]

	if(status != HAL_OK) return status;
 800360c:	1dfb      	adds	r3, r7, #7
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <pca_init+0x76>
 8003614:	1dfb      	adds	r3, r7, #7
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	e013      	b.n	8003642 <pca_init+0x9e>
	status = i2c_write_reg(PCA_ADDR, MODE_2_REG, mode2.data);
 800361a:	003b      	movs	r3, r7
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	1dfc      	adds	r4, r7, #7
 8003620:	001a      	movs	r2, r3
 8003622:	2101      	movs	r1, #1
 8003624:	2080      	movs	r0, #128	; 0x80
 8003626:	f7ff fe35 	bl	8003294 <i2c_write_reg>
 800362a:	0003      	movs	r3, r0
 800362c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 800362e:	1dfb      	adds	r3, r7, #7
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <pca_init+0x98>
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	e002      	b.n	8003642 <pca_init+0x9e>

	return pca_all_off();
 800363c:	f000 f9c0 	bl	80039c0 <pca_all_off>
 8003640:	0003      	movs	r3, r0
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	b003      	add	sp, #12
 8003648:	bd90      	pop	{r4, r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	200000a1 	.word	0x200000a1

08003650 <pca_reset>:

HAL_StatusTypeDef pca_reset() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
	event_active = false;
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <pca_reset+0x1c>)
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
	return i2c_write_command(GENERAL_CALL, SW_RESET_COMMAND);
 800365a:	2106      	movs	r1, #6
 800365c:	2000      	movs	r0, #0
 800365e:	f7ff fdeb 	bl	8003238 <i2c_write_command>
 8003662:	0003      	movs	r3, r0
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	200000a1 	.word	0x200000a1

08003670 <pca_wake>:

HAL_StatusTypeDef pca_wake() {
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
	Mode1RegTypedef mode1;
	HAL_StatusTypeDef status;

	event_active = false;
 8003676:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <pca_wake+0x84>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]

	//read the mode1 register
	status = i2c_read_reg(PCA_ADDR, MODE_1_REG, &mode1.data);
 800367c:	1dfc      	adds	r4, r7, #7
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	001a      	movs	r2, r3
 8003682:	2100      	movs	r1, #0
 8003684:	2080      	movs	r0, #128	; 0x80
 8003686:	f7ff fd95 	bl	80031b4 <i2c_read_reg>
 800368a:	0003      	movs	r3, r0
 800368c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 800368e:	1dfb      	adds	r3, r7, #7
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <pca_wake+0x2c>
 8003696:	1dfb      	adds	r3, r7, #7
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	e026      	b.n	80036ea <pca_wake+0x7a>

	mode1.map.sleep_en = 0;
 800369c:	1d3b      	adds	r3, r7, #4
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	2110      	movs	r1, #16
 80036a2:	438a      	bics	r2, r1
 80036a4:	701a      	strb	r2, [r3, #0]
	status = i2c_write_reg(PCA_ADDR, MODE_1_REG, mode1.data);
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	1dfc      	adds	r4, r7, #7
 80036ac:	001a      	movs	r2, r3
 80036ae:	2100      	movs	r1, #0
 80036b0:	2080      	movs	r0, #128	; 0x80
 80036b2:	f7ff fdef 	bl	8003294 <i2c_write_reg>
 80036b6:	0003      	movs	r3, r0
 80036b8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80036ba:	1dfb      	adds	r3, r7, #7
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <pca_wake+0x58>
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	e010      	b.n	80036ea <pca_wake+0x7a>

	HAL_Delay(1); //let the oscillator stabilize
 80036c8:	2001      	movs	r0, #1
 80036ca:	f7fd f8a5 	bl	8000818 <HAL_Delay>
	mode1.map.restart = 1; //restart the PWM channels
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	4249      	negs	r1, r1
 80036d6:	430a      	orrs	r2, r1
 80036d8:	701a      	strb	r2, [r3, #0]
	return i2c_write_reg(PCA_ADDR, MODE_1_REG, mode1.data);
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	001a      	movs	r2, r3
 80036e0:	2100      	movs	r1, #0
 80036e2:	2080      	movs	r0, #128	; 0x80
 80036e4:	f7ff fdd6 	bl	8003294 <i2c_write_reg>
 80036e8:	0003      	movs	r3, r0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b003      	add	sp, #12
 80036f0:	bd90      	pop	{r4, r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	200000a1 	.word	0x200000a1

080036f8 <pca_sleep>:

HAL_StatusTypeDef pca_sleep() {
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
	Mode1RegTypedef mode1;
	HAL_StatusTypeDef status;

	event_active = false;
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <pca_sleep+0x50>)
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]

	//read the mode1 register
	status = i2c_read_reg(PCA_ADDR, MODE_1_REG, &mode1.data);
 8003704:	1dfc      	adds	r4, r7, #7
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	001a      	movs	r2, r3
 800370a:	2100      	movs	r1, #0
 800370c:	2080      	movs	r0, #128	; 0x80
 800370e:	f7ff fd51 	bl	80031b4 <i2c_read_reg>
 8003712:	0003      	movs	r3, r0
 8003714:	7023      	strb	r3, [r4, #0]

	mode1.map.sleep_en = 1; //set the sleep bit
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	2110      	movs	r1, #16
 800371c:	430a      	orrs	r2, r1
 800371e:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK) return status;
 8003720:	1dfb      	adds	r3, r7, #7
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <pca_sleep+0x36>
 8003728:	1dfb      	adds	r3, r7, #7
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	e007      	b.n	800373e <pca_sleep+0x46>
	return i2c_write_reg(PCA_ADDR, MODE_1_REG, mode1.data);
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	001a      	movs	r2, r3
 8003734:	2100      	movs	r1, #0
 8003736:	2080      	movs	r0, #128	; 0x80
 8003738:	f7ff fdac 	bl	8003294 <i2c_write_reg>
 800373c:	0003      	movs	r3, r0
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b003      	add	sp, #12
 8003744:	bd90      	pop	{r4, r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	200000a1 	.word	0x200000a1

0800374c <pca_write_led>:

HAL_StatusTypeDef pca_write_led(uint8_t led, LEDColorTypedef *color) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	0002      	movs	r2, r0
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	701a      	strb	r2, [r3, #0]
	if(led > 4) return HAL_ERROR; //make sure the input is only between 0 and 4
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d901      	bls.n	8003766 <pca_write_led+0x1a>
 8003762:	2301      	movs	r3, #1
 8003764:	e124      	b.n	80039b0 <pca_write_led+0x264>
	led = led_map[led];
 8003766:	1dfb      	adds	r3, r7, #7
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	4992      	ldr	r1, [pc, #584]	; (80039b8 <pca_write_led+0x26c>)
 800376e:	5c8a      	ldrb	r2, [r1, r2]
 8003770:	701a      	strb	r2, [r3, #0]

	uint16_t red_start, green_start, blue_start, red_end, green_end, blue_end;
	uint8_t txdata[13];

	//stagger the LED turn-on so we don't get huge current spikes at the beginning of the cycle
	red_start = OFFSET_MULT * (led*3);
 8003772:	1dfb      	adds	r3, r7, #7
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	2226      	movs	r2, #38	; 0x26
 800377a:	18ba      	adds	r2, r7, r2
 800377c:	1c19      	adds	r1, r3, #0
 800377e:	1c0b      	adds	r3, r1, #0
 8003780:	18db      	adds	r3, r3, r3
 8003782:	185b      	adds	r3, r3, r1
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	8013      	strh	r3, [r2, #0]
	green_start = OFFSET_MULT * (led*3 + 1);
 8003788:	1dfb      	adds	r3, r7, #7
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	0013      	movs	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	189b      	adds	r3, r3, r2
 8003792:	3301      	adds	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	2324      	movs	r3, #36	; 0x24
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	0212      	lsls	r2, r2, #8
 800379c:	801a      	strh	r2, [r3, #0]
	blue_start = OFFSET_MULT * (led*3 + 2);
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	0013      	movs	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	3302      	adds	r3, #2
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	2322      	movs	r3, #34	; 0x22
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	0212      	lsls	r2, r2, #8
 80037b2:	801a      	strh	r2, [r3, #0]

	red_end = color->red == 0 ? 0x1FFF : (red_start + color->red) % 4096;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <pca_write_led+0x86>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	881a      	ldrh	r2, [r3, #0]
 80037c0:	2326      	movs	r3, #38	; 0x26
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	18d3      	adds	r3, r2, r3
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	051b      	lsls	r3, r3, #20
 80037cc:	0d1b      	lsrs	r3, r3, #20
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	e000      	b.n	80037d4 <pca_write_led+0x88>
 80037d2:	4a7a      	ldr	r2, [pc, #488]	; (80039bc <pca_write_led+0x270>)
 80037d4:	2320      	movs	r3, #32
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	801a      	strh	r2, [r3, #0]
	green_end = color->green == 0 ? 0x1FFF : (green_start + color->green) % 4096;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	885b      	ldrh	r3, [r3, #2]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <pca_write_led+0xac>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	885a      	ldrh	r2, [r3, #2]
 80037e6:	2324      	movs	r3, #36	; 0x24
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	051b      	lsls	r3, r3, #20
 80037f2:	0d1b      	lsrs	r3, r3, #20
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	e000      	b.n	80037fa <pca_write_led+0xae>
 80037f8:	4a70      	ldr	r2, [pc, #448]	; (80039bc <pca_write_led+0x270>)
 80037fa:	231e      	movs	r3, #30
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	801a      	strh	r2, [r3, #0]
	blue_end = color->blue == 0 ? 0x1FFF : (blue_start + color->blue) % 4096;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	889b      	ldrh	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <pca_write_led+0xd2>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	889a      	ldrh	r2, [r3, #4]
 800380c:	2322      	movs	r3, #34	; 0x22
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	18d3      	adds	r3, r2, r3
 8003814:	b29b      	uxth	r3, r3
 8003816:	051b      	lsls	r3, r3, #20
 8003818:	0d1b      	lsrs	r3, r3, #20
 800381a:	b29a      	uxth	r2, r3
 800381c:	e000      	b.n	8003820 <pca_write_led+0xd4>
 800381e:	4a67      	ldr	r2, [pc, #412]	; (80039bc <pca_write_led+0x270>)
 8003820:	231c      	movs	r3, #28
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	801a      	strh	r2, [r3, #0]

	txdata[0] = LED_REG_BASE + 3 * (led<<2);
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	b2db      	uxtb	r3, r3
 800382e:	1c1a      	adds	r2, r3, #0
 8003830:	1c13      	adds	r3, r2, #0
 8003832:	18db      	adds	r3, r3, r3
 8003834:	189b      	adds	r3, r3, r2
 8003836:	b2db      	uxtb	r3, r3
 8003838:	3306      	adds	r3, #6
 800383a:	b2da      	uxtb	r2, r3
 800383c:	230c      	movs	r3, #12
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	701a      	strb	r2, [r3, #0]
	if(led <= 2) {
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d821      	bhi.n	800388e <pca_write_led+0x142>
		txdata[1] = red_start & 0xFF;
 800384a:	2026      	movs	r0, #38	; 0x26
 800384c:	183b      	adds	r3, r7, r0
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	210c      	movs	r1, #12
 8003854:	187b      	adds	r3, r7, r1
 8003856:	705a      	strb	r2, [r3, #1]
		txdata[2] = (red_start >> 8) & 0x1F;
 8003858:	183b      	adds	r3, r7, r0
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	b29b      	uxth	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	221f      	movs	r2, #31
 8003864:	4013      	ands	r3, r2
 8003866:	b2da      	uxtb	r2, r3
 8003868:	187b      	adds	r3, r7, r1
 800386a:	709a      	strb	r2, [r3, #2]
		txdata[3] = red_end & 0xFF;
 800386c:	2020      	movs	r0, #32
 800386e:	183b      	adds	r3, r7, r0
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	187b      	adds	r3, r7, r1
 8003876:	70da      	strb	r2, [r3, #3]
		txdata[4] = (red_end >> 8) & 0x1F;
 8003878:	183b      	adds	r3, r7, r0
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	b29b      	uxth	r3, r3
 8003880:	b2db      	uxtb	r3, r3
 8003882:	221f      	movs	r2, #31
 8003884:	4013      	ands	r3, r2
 8003886:	b2da      	uxtb	r2, r3
 8003888:	187b      	adds	r3, r7, r1
 800388a:	711a      	strb	r2, [r3, #4]
 800388c:	e020      	b.n	80038d0 <pca_write_led+0x184>
	}
	else {
		txdata[1] = blue_start & 0xFF;
 800388e:	2022      	movs	r0, #34	; 0x22
 8003890:	183b      	adds	r3, r7, r0
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	210c      	movs	r1, #12
 8003898:	187b      	adds	r3, r7, r1
 800389a:	705a      	strb	r2, [r3, #1]
		txdata[2] = (blue_start >> 8) & 0x1F;
 800389c:	183b      	adds	r3, r7, r0
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	221f      	movs	r2, #31
 80038a8:	4013      	ands	r3, r2
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	187b      	adds	r3, r7, r1
 80038ae:	709a      	strb	r2, [r3, #2]
		txdata[3] = blue_end & 0xFF;
 80038b0:	201c      	movs	r0, #28
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	70da      	strb	r2, [r3, #3]
		txdata[4] = (blue_end >> 8) & 0x1F;
 80038bc:	183b      	adds	r3, r7, r0
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	221f      	movs	r2, #31
 80038c8:	4013      	ands	r3, r2
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	711a      	strb	r2, [r3, #4]
	}

	txdata[5] = green_start & 0xFF;
 80038d0:	2024      	movs	r0, #36	; 0x24
 80038d2:	183b      	adds	r3, r7, r0
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	210c      	movs	r1, #12
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	715a      	strb	r2, [r3, #5]
	txdata[6] = (green_start >> 8) & 0x1F;
 80038de:	183b      	adds	r3, r7, r0
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	221f      	movs	r2, #31
 80038ea:	4013      	ands	r3, r2
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	719a      	strb	r2, [r3, #6]
	txdata[7] = green_end & 0xFF;
 80038f2:	201e      	movs	r0, #30
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	187b      	adds	r3, r7, r1
 80038fc:	71da      	strb	r2, [r3, #7]
	txdata[8] = (green_end >> 8) & 0x1F;
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	b29b      	uxth	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	221f      	movs	r2, #31
 800390a:	4013      	ands	r3, r2
 800390c:	b2da      	uxtb	r2, r3
 800390e:	187b      	adds	r3, r7, r1
 8003910:	721a      	strb	r2, [r3, #8]

	if(led <= 2) {
 8003912:	1dfb      	adds	r3, r7, #7
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d821      	bhi.n	800395e <pca_write_led+0x212>
		txdata[9] = blue_start & 0xFF;
 800391a:	2022      	movs	r0, #34	; 0x22
 800391c:	183b      	adds	r3, r7, r0
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	210c      	movs	r1, #12
 8003924:	187b      	adds	r3, r7, r1
 8003926:	725a      	strb	r2, [r3, #9]
		txdata[10] = (blue_start >> 8) & 0x1F;
 8003928:	183b      	adds	r3, r7, r0
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	0a1b      	lsrs	r3, r3, #8
 800392e:	b29b      	uxth	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	221f      	movs	r2, #31
 8003934:	4013      	ands	r3, r2
 8003936:	b2da      	uxtb	r2, r3
 8003938:	187b      	adds	r3, r7, r1
 800393a:	729a      	strb	r2, [r3, #10]
		txdata[11] = blue_end & 0xFF;
 800393c:	201c      	movs	r0, #28
 800393e:	183b      	adds	r3, r7, r0
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	187b      	adds	r3, r7, r1
 8003946:	72da      	strb	r2, [r3, #11]
		txdata[12] = (blue_end >> 8) & 0x1F;
 8003948:	183b      	adds	r3, r7, r0
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	b29b      	uxth	r3, r3
 8003950:	b2db      	uxtb	r3, r3
 8003952:	221f      	movs	r2, #31
 8003954:	4013      	ands	r3, r2
 8003956:	b2da      	uxtb	r2, r3
 8003958:	187b      	adds	r3, r7, r1
 800395a:	731a      	strb	r2, [r3, #12]
 800395c:	e020      	b.n	80039a0 <pca_write_led+0x254>
	}
	else {
		txdata[9] = red_start & 0xFF;
 800395e:	2026      	movs	r0, #38	; 0x26
 8003960:	183b      	adds	r3, r7, r0
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	210c      	movs	r1, #12
 8003968:	187b      	adds	r3, r7, r1
 800396a:	725a      	strb	r2, [r3, #9]
		txdata[10] = (red_start >> 8) & 0x1F;
 800396c:	183b      	adds	r3, r7, r0
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	b29b      	uxth	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	221f      	movs	r2, #31
 8003978:	4013      	ands	r3, r2
 800397a:	b2da      	uxtb	r2, r3
 800397c:	187b      	adds	r3, r7, r1
 800397e:	729a      	strb	r2, [r3, #10]
		txdata[11] = red_end & 0xFF;
 8003980:	2020      	movs	r0, #32
 8003982:	183b      	adds	r3, r7, r0
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	187b      	adds	r3, r7, r1
 800398a:	72da      	strb	r2, [r3, #11]
		txdata[12] = (red_end >> 8) & 0x1F;
 800398c:	183b      	adds	r3, r7, r0
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	b29b      	uxth	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	221f      	movs	r2, #31
 8003998:	4013      	ands	r3, r2
 800399a:	b2da      	uxtb	r2, r3
 800399c:	187b      	adds	r3, r7, r1
 800399e:	731a      	strb	r2, [r3, #12]
	}

	return i2c_write_regs(PCA_ADDR, txdata, 13);
 80039a0:	230c      	movs	r3, #12
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	220d      	movs	r2, #13
 80039a6:	0019      	movs	r1, r3
 80039a8:	2080      	movs	r0, #128	; 0x80
 80039aa:	f7ff fcb1 	bl	8003310 <i2c_write_regs>
 80039ae:	0003      	movs	r3, r0
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b00a      	add	sp, #40	; 0x28
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	08005334 	.word	0x08005334
 80039bc:	00001fff 	.word	0x00001fff

080039c0 <pca_all_off>:

HAL_StatusTypeDef pca_all_off() {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
	uint8_t txdata[5];
	txdata[0] = ALL_ON_REG_BASE;
 80039c6:	003b      	movs	r3, r7
 80039c8:	22fa      	movs	r2, #250	; 0xfa
 80039ca:	701a      	strb	r2, [r3, #0]
	txdata[1] = 0;
 80039cc:	003b      	movs	r3, r7
 80039ce:	2200      	movs	r2, #0
 80039d0:	705a      	strb	r2, [r3, #1]
	txdata[2] = 0;
 80039d2:	003b      	movs	r3, r7
 80039d4:	2200      	movs	r2, #0
 80039d6:	709a      	strb	r2, [r3, #2]
	txdata[3] = 0;
 80039d8:	003b      	movs	r3, r7
 80039da:	2200      	movs	r2, #0
 80039dc:	70da      	strb	r2, [r3, #3]
	txdata[4] = 0x10;
 80039de:	003b      	movs	r3, r7
 80039e0:	2210      	movs	r2, #16
 80039e2:	711a      	strb	r2, [r3, #4]
	return i2c_write_regs(PCA_ADDR, txdata, 5);
 80039e4:	003b      	movs	r3, r7
 80039e6:	2205      	movs	r2, #5
 80039e8:	0019      	movs	r1, r3
 80039ea:	2080      	movs	r0, #128	; 0x80
 80039ec:	f7ff fc90 	bl	8003310 <i2c_write_regs>
 80039f0:	0003      	movs	r3, r0
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b002      	add	sp, #8
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <pca_display_SOC>:

void pca_display_SOC(float soc) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	//re-casting so compiler shuts up about discarding const qualifier
	if(soc > 0.9) event_sequence = (LEDEventTypedef*) PACK_100;
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fc fe51 	bl	80006ac <__aeabi_f2d>
 8003a0a:	4a46      	ldr	r2, [pc, #280]	; (8003b24 <pca_display_SOC+0x128>)
 8003a0c:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <pca_display_SOC+0x12c>)
 8003a0e:	f7fc fc31 	bl	8000274 <__aeabi_dcmpgt>
 8003a12:	1e03      	subs	r3, r0, #0
 8003a14:	d003      	beq.n	8003a1e <pca_display_SOC+0x22>
 8003a16:	4b45      	ldr	r3, [pc, #276]	; (8003b2c <pca_display_SOC+0x130>)
 8003a18:	4a45      	ldr	r2, [pc, #276]	; (8003b30 <pca_display_SOC+0x134>)
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e075      	b.n	8003b0a <pca_display_SOC+0x10e>
	else if(soc > 0.8) event_sequence = (LEDEventTypedef*) PACK_90;
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fc fe44 	bl	80006ac <__aeabi_f2d>
 8003a24:	4a43      	ldr	r2, [pc, #268]	; (8003b34 <pca_display_SOC+0x138>)
 8003a26:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <pca_display_SOC+0x13c>)
 8003a28:	f7fc fc24 	bl	8000274 <__aeabi_dcmpgt>
 8003a2c:	1e03      	subs	r3, r0, #0
 8003a2e:	d003      	beq.n	8003a38 <pca_display_SOC+0x3c>
 8003a30:	4b3e      	ldr	r3, [pc, #248]	; (8003b2c <pca_display_SOC+0x130>)
 8003a32:	4a42      	ldr	r2, [pc, #264]	; (8003b3c <pca_display_SOC+0x140>)
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e068      	b.n	8003b0a <pca_display_SOC+0x10e>
	else if(soc > 0.7) event_sequence = (LEDEventTypedef*) PACK_80;
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fc fe37 	bl	80006ac <__aeabi_f2d>
 8003a3e:	4a40      	ldr	r2, [pc, #256]	; (8003b40 <pca_display_SOC+0x144>)
 8003a40:	4b40      	ldr	r3, [pc, #256]	; (8003b44 <pca_display_SOC+0x148>)
 8003a42:	f7fc fc17 	bl	8000274 <__aeabi_dcmpgt>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d003      	beq.n	8003a52 <pca_display_SOC+0x56>
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <pca_display_SOC+0x130>)
 8003a4c:	4a3e      	ldr	r2, [pc, #248]	; (8003b48 <pca_display_SOC+0x14c>)
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	e05b      	b.n	8003b0a <pca_display_SOC+0x10e>
	else if(soc > 0.6) event_sequence = (LEDEventTypedef*) PACK_70;
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fc fe2a 	bl	80006ac <__aeabi_f2d>
 8003a58:	4a3c      	ldr	r2, [pc, #240]	; (8003b4c <pca_display_SOC+0x150>)
 8003a5a:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <pca_display_SOC+0x154>)
 8003a5c:	f7fc fc0a 	bl	8000274 <__aeabi_dcmpgt>
 8003a60:	1e03      	subs	r3, r0, #0
 8003a62:	d003      	beq.n	8003a6c <pca_display_SOC+0x70>
 8003a64:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <pca_display_SOC+0x130>)
 8003a66:	4a3b      	ldr	r2, [pc, #236]	; (8003b54 <pca_display_SOC+0x158>)
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e04e      	b.n	8003b0a <pca_display_SOC+0x10e>
	else if(soc > 0.5) event_sequence = (LEDEventTypedef*) PACK_60;
 8003a6c:	21fc      	movs	r1, #252	; 0xfc
 8003a6e:	0589      	lsls	r1, r1, #22
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fc fc39 	bl	80002e8 <__aeabi_fcmpgt>
 8003a76:	1e03      	subs	r3, r0, #0
 8003a78:	d003      	beq.n	8003a82 <pca_display_SOC+0x86>
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <pca_display_SOC+0x130>)
 8003a7c:	4a36      	ldr	r2, [pc, #216]	; (8003b58 <pca_display_SOC+0x15c>)
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e043      	b.n	8003b0a <pca_display_SOC+0x10e>
	else if(soc > 0.4) event_sequence = (LEDEventTypedef*) PACK_50;
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fc fe12 	bl	80006ac <__aeabi_f2d>
 8003a88:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <pca_display_SOC+0x138>)
 8003a8a:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <pca_display_SOC+0x160>)
 8003a8c:	f7fc fbf2 	bl	8000274 <__aeabi_dcmpgt>
 8003a90:	1e03      	subs	r3, r0, #0
 8003a92:	d003      	beq.n	8003a9c <pca_display_SOC+0xa0>
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <pca_display_SOC+0x130>)
 8003a96:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <pca_display_SOC+0x164>)
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	e036      	b.n	8003b0a <pca_display_SOC+0x10e>
	else if(soc > 0.3) event_sequence = (LEDEventTypedef*) PACK_40;
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fc fe05 	bl	80006ac <__aeabi_f2d>
 8003aa2:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <pca_display_SOC+0x150>)
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <pca_display_SOC+0x168>)
 8003aa6:	f7fc fbe5 	bl	8000274 <__aeabi_dcmpgt>
 8003aaa:	1e03      	subs	r3, r0, #0
 8003aac:	d003      	beq.n	8003ab6 <pca_display_SOC+0xba>
 8003aae:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <pca_display_SOC+0x130>)
 8003ab0:	4a2d      	ldr	r2, [pc, #180]	; (8003b68 <pca_display_SOC+0x16c>)
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e029      	b.n	8003b0a <pca_display_SOC+0x10e>
	else if(soc > 0.2) event_sequence = (LEDEventTypedef*) PACK_30;
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fc fdf8 	bl	80006ac <__aeabi_f2d>
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <pca_display_SOC+0x138>)
 8003abe:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <pca_display_SOC+0x170>)
 8003ac0:	f7fc fbd8 	bl	8000274 <__aeabi_dcmpgt>
 8003ac4:	1e03      	subs	r3, r0, #0
 8003ac6:	d003      	beq.n	8003ad0 <pca_display_SOC+0xd4>
 8003ac8:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <pca_display_SOC+0x130>)
 8003aca:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <pca_display_SOC+0x174>)
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e01c      	b.n	8003b0a <pca_display_SOC+0x10e>
	else if(soc > 0.1) event_sequence = (LEDEventTypedef*) PACK_20;
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7fc fdeb 	bl	80006ac <__aeabi_f2d>
 8003ad6:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <pca_display_SOC+0x138>)
 8003ad8:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <pca_display_SOC+0x178>)
 8003ada:	f7fc fbcb 	bl	8000274 <__aeabi_dcmpgt>
 8003ade:	1e03      	subs	r3, r0, #0
 8003ae0:	d003      	beq.n	8003aea <pca_display_SOC+0xee>
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <pca_display_SOC+0x130>)
 8003ae4:	4a24      	ldr	r2, [pc, #144]	; (8003b78 <pca_display_SOC+0x17c>)
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	e00f      	b.n	8003b0a <pca_display_SOC+0x10e>
	else if(soc > PACK_CRITICAL_THRESHOLD) event_sequence = (LEDEventTypedef*) PACK_10;
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fc fdde 	bl	80006ac <__aeabi_f2d>
 8003af0:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <pca_display_SOC+0x180>)
 8003af2:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <pca_display_SOC+0x184>)
 8003af4:	f7fc fbbe 	bl	8000274 <__aeabi_dcmpgt>
 8003af8:	1e03      	subs	r3, r0, #0
 8003afa:	d003      	beq.n	8003b04 <pca_display_SOC+0x108>
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <pca_display_SOC+0x130>)
 8003afe:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <pca_display_SOC+0x188>)
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e002      	b.n	8003b0a <pca_display_SOC+0x10e>
	else event_sequence = (LEDEventTypedef*) PACK_CRITICAL;
 8003b04:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <pca_display_SOC+0x130>)
 8003b06:	4a20      	ldr	r2, [pc, #128]	; (8003b88 <pca_display_SOC+0x18c>)
 8003b08:	601a      	str	r2, [r3, #0]
	event_active = true;
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <pca_display_SOC+0x190>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
	sequence_pointer = 0;
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <pca_display_SOC+0x194>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
	event_tick_counter = 0;
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <pca_display_SOC+0x198>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	801a      	strh	r2, [r3, #0]
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	cccccccd 	.word	0xcccccccd
 8003b28:	3feccccc 	.word	0x3feccccc
 8003b2c:	200000a4 	.word	0x200000a4
 8003b30:	08004b5c 	.word	0x08004b5c
 8003b34:	9999999a 	.word	0x9999999a
 8003b38:	3fe99999 	.word	0x3fe99999
 8003b3c:	08004c1c 	.word	0x08004c1c
 8003b40:	66666666 	.word	0x66666666
 8003b44:	3fe66666 	.word	0x3fe66666
 8003b48:	08004cd0 	.word	0x08004cd0
 8003b4c:	33333333 	.word	0x33333333
 8003b50:	3fe33333 	.word	0x3fe33333
 8003b54:	08004d78 	.word	0x08004d78
 8003b58:	08004e14 	.word	0x08004e14
 8003b5c:	3fd99999 	.word	0x3fd99999
 8003b60:	08004ea4 	.word	0x08004ea4
 8003b64:	3fd33333 	.word	0x3fd33333
 8003b68:	08004f64 	.word	0x08004f64
 8003b6c:	3fc99999 	.word	0x3fc99999
 8003b70:	08005018 	.word	0x08005018
 8003b74:	3fb99999 	.word	0x3fb99999
 8003b78:	080050c0 	.word	0x080050c0
 8003b7c:	47ae147b 	.word	0x47ae147b
 8003b80:	3fa47ae1 	.word	0x3fa47ae1
 8003b84:	0800515c 	.word	0x0800515c
 8003b88:	080051ec 	.word	0x080051ec
 8003b8c:	200000a1 	.word	0x200000a1
 8003b90:	200000a8 	.word	0x200000a8
 8003b94:	200000aa 	.word	0x200000aa

08003b98 <pca_run_event>:

//====================== PRIVATE FUNCTIONS ========================

//typically gets called from interrupt context
static HAL_StatusTypeDef pca_run_event() {
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	status = HAL_OK;
 8003b9e:	2317      	movs	r3, #23
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]

	LEDEventTypedef* active_event; //create a pointer
	active_event = &event_sequence[sequence_pointer]; //and point it to the active event in our sequence
 8003ba6:	4b60      	ldr	r3, [pc, #384]	; (8003d28 <pca_run_event+0x190>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b60      	ldr	r3, [pc, #384]	; (8003d2c <pca_run_event+0x194>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	000b      	movs	r3, r1
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	185b      	adds	r3, r3, r1
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	18d3      	adds	r3, r2, r3
 8003bbc:	613b      	str	r3, [r7, #16]

	if(active_event->LED_no == END_SEQUENCE.LED_no) { //deactivate event
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	003b      	movs	r3, r7
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	7019      	strb	r1, [r3, #0]
 8003bc8:	003b      	movs	r3, r7
 8003bca:	2100      	movs	r1, #0
 8003bcc:	6059      	str	r1, [r3, #4]
 8003bce:	003b      	movs	r3, r7
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	8119      	strh	r1, [r3, #8]
 8003bd4:	003b      	movs	r3, r7
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d106      	bne.n	8003bea <pca_run_event+0x52>
		event_active = false;
 8003bdc:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <pca_run_event+0x198>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
		return pca_all_off(); //just shutting down all the LEDs after the event finishes
 8003be2:	f7ff feed 	bl	80039c0 <pca_all_off>
 8003be6:	0003      	movs	r3, r0
 8003be8:	e09a      	b.n	8003d20 <pca_run_event+0x188>
	}
	else if(event_tick_counter >= active_event->timestamp) { //time to execute the event
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	891a      	ldrh	r2, [r3, #8]
 8003bee:	4b51      	ldr	r3, [pc, #324]	; (8003d34 <pca_run_event+0x19c>)
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d900      	bls.n	8003bfa <pca_run_event+0x62>
 8003bf8:	e088      	b.n	8003d0c <pca_run_event+0x174>
		uint8_t enabled_leds;
		enabled_leds = active_event->LED_no;
 8003bfa:	210f      	movs	r1, #15
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	7812      	ldrb	r2, [r2, #0]
 8003c02:	701a      	strb	r2, [r3, #0]
		if((enabled_leds == 0x1F) && (active_event->color == &LED_OFF)) status = pca_all_off();
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b1f      	cmp	r3, #31
 8003c0a:	d10b      	bne.n	8003c24 <pca_run_event+0x8c>
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <pca_run_event+0x1a0>)
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d106      	bne.n	8003c24 <pca_run_event+0x8c>
 8003c16:	2317      	movs	r3, #23
 8003c18:	18fc      	adds	r4, r7, r3
 8003c1a:	f7ff fed1 	bl	80039c0 <pca_all_off>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	7023      	strb	r3, [r4, #0]
 8003c22:	e068      	b.n	8003cf6 <pca_run_event+0x15e>
		//recasting to remove the "no more const" warning
		else {
			if((enabled_leds & CHANNEL_0) && (status == HAL_OK)) status = pca_write_led(0, (LEDColorTypedef *) active_event->color);
 8003c24:	230f      	movs	r3, #15
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d00e      	beq.n	8003c4e <pca_run_event+0xb6>
 8003c30:	2317      	movs	r3, #23
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <pca_run_event+0xb6>
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2217      	movs	r2, #23
 8003c40:	18bc      	adds	r4, r7, r2
 8003c42:	0019      	movs	r1, r3
 8003c44:	2000      	movs	r0, #0
 8003c46:	f7ff fd81 	bl	800374c <pca_write_led>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	7023      	strb	r3, [r4, #0]
			if((enabled_leds & CHANNEL_1) && (status == HAL_OK)) status = pca_write_led(1, (LEDColorTypedef *) active_event->color);
 8003c4e:	230f      	movs	r3, #15
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2202      	movs	r2, #2
 8003c56:	4013      	ands	r3, r2
 8003c58:	d00e      	beq.n	8003c78 <pca_run_event+0xe0>
 8003c5a:	2317      	movs	r3, #23
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <pca_run_event+0xe0>
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2217      	movs	r2, #23
 8003c6a:	18bc      	adds	r4, r7, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f7ff fd6c 	bl	800374c <pca_write_led>
 8003c74:	0003      	movs	r3, r0
 8003c76:	7023      	strb	r3, [r4, #0]
			if((enabled_leds & CHANNEL_2) && (status == HAL_OK)) status = pca_write_led(2, (LEDColorTypedef *) active_event->color);
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2204      	movs	r2, #4
 8003c80:	4013      	ands	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <pca_run_event+0x10a>
 8003c84:	2317      	movs	r3, #23
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <pca_run_event+0x10a>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2217      	movs	r2, #23
 8003c94:	18bc      	adds	r4, r7, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	2002      	movs	r0, #2
 8003c9a:	f7ff fd57 	bl	800374c <pca_write_led>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	7023      	strb	r3, [r4, #0]
			if((enabled_leds & CHANNEL_3) && (status == HAL_OK)) status = pca_write_led(3, (LEDColorTypedef *) active_event->color);
 8003ca2:	230f      	movs	r3, #15
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	4013      	ands	r3, r2
 8003cac:	d00e      	beq.n	8003ccc <pca_run_event+0x134>
 8003cae:	2317      	movs	r3, #23
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <pca_run_event+0x134>
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2217      	movs	r2, #23
 8003cbe:	18bc      	adds	r4, r7, r2
 8003cc0:	0019      	movs	r1, r3
 8003cc2:	2003      	movs	r0, #3
 8003cc4:	f7ff fd42 	bl	800374c <pca_write_led>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	7023      	strb	r3, [r4, #0]
			if((enabled_leds & CHANNEL_4) && (status == HAL_OK)) status = pca_write_led(4, (LEDColorTypedef *) active_event->color);
 8003ccc:	230f      	movs	r3, #15
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <pca_run_event+0x15e>
 8003cd8:	2317      	movs	r3, #23
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <pca_run_event+0x15e>
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2217      	movs	r2, #23
 8003ce8:	18bc      	adds	r4, r7, r2
 8003cea:	0019      	movs	r1, r3
 8003cec:	2004      	movs	r0, #4
 8003cee:	f7ff fd2d 	bl	800374c <pca_write_led>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	7023      	strb	r3, [r4, #0]
		}
		sequence_pointer++; //look at the next event UNCONITIONALLY (i.e. even if there's a tx failure)
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <pca_run_event+0x194>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <pca_run_event+0x194>)
 8003d02:	701a      	strb	r2, [r3, #0]
		event_tick_counter = 0; //reset the counter for the next event
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <pca_run_event+0x19c>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	801a      	strh	r2, [r3, #0]
 8003d0a:	e006      	b.n	8003d1a <pca_run_event+0x182>
	}
	else event_tick_counter++;
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <pca_run_event+0x19c>)
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <pca_run_event+0x19c>)
 8003d18:	801a      	strh	r2, [r3, #0]
	return status;
 8003d1a:	2317      	movs	r3, #23
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	781b      	ldrb	r3, [r3, #0]
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b007      	add	sp, #28
 8003d26:	bd90      	pop	{r4, r7, pc}
 8003d28:	200000a4 	.word	0x200000a4
 8003d2c:	200000a8 	.word	0x200000a8
 8003d30:	200000a1 	.word	0x200000a1
 8003d34:	200000aa 	.word	0x200000aa
 8003d38:	080052f4 	.word	0x080052f4

08003d3c <pca_update>:

//============================== 1ms ISR FUNCTION =============================
HAL_StatusTypeDef pca_update() {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
	if(event_active) return pca_run_event();
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <pca_update+0x20>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <pca_update+0x16>
 8003d4a:	f7ff ff25 	bl	8003b98 <pca_run_event>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	e000      	b.n	8003d54 <pca_update+0x18>
	return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	200000a1 	.word	0x200000a1

08003d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d66:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <HAL_MspInit+0x44>)
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_MspInit+0x44>)
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	619a      	str	r2, [r3, #24]
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <HAL_MspInit+0x44>)
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2201      	movs	r2, #1
 8003d78:	4013      	ands	r3, r2
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <HAL_MspInit+0x44>)
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_MspInit+0x44>)
 8003d84:	2180      	movs	r1, #128	; 0x80
 8003d86:	0549      	lsls	r1, r1, #21
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	61da      	str	r2, [r3, #28]
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_MspInit+0x44>)
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	055b      	lsls	r3, r3, #21
 8003d94:	4013      	ands	r3, r2
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b002      	add	sp, #8
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	40021000 	.word	0x40021000

08003da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003db6:	e7fe      	b.n	8003db6 <HardFault_Handler+0x4>

08003db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd0:	f7fc fd0c 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd4:	46c0      	nop			; (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003de0:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <TIM17_IRQHandler+0x14>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fe fb17 	bl	8002416 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	20000108 	.word	0x20000108

08003df4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e00a      	b.n	8003e1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e06:	e000      	b.n	8003e0a <_read+0x16>
 8003e08:	bf00      	nop
 8003e0a:	0001      	movs	r1, r0
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	60ba      	str	r2, [r7, #8]
 8003e12:	b2ca      	uxtb	r2, r1
 8003e14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	dbf0      	blt.n	8003e06 <_read+0x12>
	}

return len;
 8003e24:	687b      	ldr	r3, [r7, #4]
}
 8003e26:	0018      	movs	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b006      	add	sp, #24
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
	return -1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	425b      	negs	r3, r3
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b002      	add	sp, #8
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2280      	movs	r2, #128	; 0x80
 8003e50:	0192      	lsls	r2, r2, #6
 8003e52:	605a      	str	r2, [r3, #4]
	return 0;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b002      	add	sp, #8
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <_isatty>:

int _isatty(int file)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
	return 1;
 8003e66:	2301      	movs	r3, #1
}
 8003e68:	0018      	movs	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b002      	add	sp, #8
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
	return 0;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b004      	add	sp, #16
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <_sbrk+0x50>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <_sbrk+0x16>
		heap_end = &end;
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <_sbrk+0x50>)
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <_sbrk+0x54>)
 8003e9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <_sbrk+0x50>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <_sbrk+0x50>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	18d3      	adds	r3, r2, r3
 8003eac:	466a      	mov	r2, sp
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d907      	bls.n	8003ec2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003eb2:	f000 f94f 	bl	8004154 <__errno>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	220c      	movs	r2, #12
 8003eba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	425b      	negs	r3, r3
 8003ec0:	e006      	b.n	8003ed0 <_sbrk+0x48>
	}

	heap_end += incr;
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <_sbrk+0x50>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	18d2      	adds	r2, r2, r3
 8003eca:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <_sbrk+0x50>)
 8003ecc:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b004      	add	sp, #16
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	200000ac 	.word	0x200000ac
 8003edc:	200001c0 	.word	0x200001c0

08003ee0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <SystemInit+0x70>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <SystemInit+0x70>)
 8003eea:	2101      	movs	r1, #1
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <SystemInit+0x70>)
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <SystemInit+0x70>)
 8003ef6:	4917      	ldr	r1, [pc, #92]	; (8003f54 <SystemInit+0x74>)
 8003ef8:	400a      	ands	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003efc:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <SystemInit+0x70>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <SystemInit+0x70>)
 8003f02:	4915      	ldr	r1, [pc, #84]	; (8003f58 <SystemInit+0x78>)
 8003f04:	400a      	ands	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <SystemInit+0x70>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <SystemInit+0x70>)
 8003f0e:	4913      	ldr	r1, [pc, #76]	; (8003f5c <SystemInit+0x7c>)
 8003f10:	400a      	ands	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003f14:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <SystemInit+0x70>)
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <SystemInit+0x70>)
 8003f1a:	4911      	ldr	r1, [pc, #68]	; (8003f60 <SystemInit+0x80>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <SystemInit+0x70>)
 8003f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f24:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <SystemInit+0x70>)
 8003f26:	210f      	movs	r1, #15
 8003f28:	438a      	bics	r2, r1
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8003f2c:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <SystemInit+0x70>)
 8003f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <SystemInit+0x70>)
 8003f32:	490c      	ldr	r1, [pc, #48]	; (8003f64 <SystemInit+0x84>)
 8003f34:	400a      	ands	r2, r1
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <SystemInit+0x70>)
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <SystemInit+0x70>)
 8003f3e:	2101      	movs	r1, #1
 8003f40:	438a      	bics	r2, r1
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003f44:	4b02      	ldr	r3, [pc, #8]	; (8003f50 <SystemInit+0x70>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]

}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000
 8003f54:	08ffb80c 	.word	0x08ffb80c
 8003f58:	fef6ffff 	.word	0xfef6ffff
 8003f5c:	fffbffff 	.word	0xfffbffff
 8003f60:	ffc0ffff 	.word	0xffc0ffff
 8003f64:	fffcfe2c 	.word	0xfffcfe2c

08003f68 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <MX_TIM17_Init+0x44>)
 8003f6e:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <MX_TIM17_Init+0x48>)
 8003f70:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 24000;
 8003f72:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <MX_TIM17_Init+0x44>)
 8003f74:	4a0f      	ldr	r2, [pc, #60]	; (8003fb4 <MX_TIM17_Init+0x4c>)
 8003f76:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <MX_TIM17_Init+0x44>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1;
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <MX_TIM17_Init+0x44>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <MX_TIM17_Init+0x44>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <MX_TIM17_Init+0x44>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f90:	4b06      	ldr	r3, [pc, #24]	; (8003fac <MX_TIM17_Init+0x44>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <MX_TIM17_Init+0x44>)
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7fe f9f7 	bl	800238c <HAL_TIM_Base_Init>
 8003f9e:	1e03      	subs	r3, r0, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8003fa2:	f7ff faf9 	bl	8003598 <Error_Handler>
  }

}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20000108 	.word	0x20000108
 8003fb0:	40014800 	.word	0x40014800
 8003fb4:	00005dc0 	.word	0x00005dc0

08003fb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0e      	ldr	r2, [pc, #56]	; (8004000 <HAL_TIM_Base_MspInit+0x48>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d115      	bne.n	8003ff6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <HAL_TIM_Base_MspInit+0x4c>)
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <HAL_TIM_Base_MspInit+0x4c>)
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	02c9      	lsls	r1, r1, #11
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	619a      	str	r2, [r3, #24]
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <HAL_TIM_Base_MspInit+0x4c>)
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	02db      	lsls	r3, r3, #11
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2100      	movs	r1, #0
 8003fea:	2016      	movs	r0, #22
 8003fec:	f7fc fcda 	bl	80009a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003ff0:	2016      	movs	r0, #22
 8003ff2:	f7fc fcec 	bl	80009ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b004      	add	sp, #16
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	40014800 	.word	0x40014800
 8004004:	40021000 	.word	0x40021000

08004008 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800400c:	4b14      	ldr	r3, [pc, #80]	; (8004060 <MX_USART2_UART_Init+0x58>)
 800400e:	4a15      	ldr	r2, [pc, #84]	; (8004064 <MX_USART2_UART_Init+0x5c>)
 8004010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004012:	4b13      	ldr	r3, [pc, #76]	; (8004060 <MX_USART2_UART_Init+0x58>)
 8004014:	22e1      	movs	r2, #225	; 0xe1
 8004016:	0252      	lsls	r2, r2, #9
 8004018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <MX_USART2_UART_Init+0x58>)
 800401c:	2200      	movs	r2, #0
 800401e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <MX_USART2_UART_Init+0x58>)
 8004022:	2200      	movs	r2, #0
 8004024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004026:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <MX_USART2_UART_Init+0x58>)
 8004028:	2200      	movs	r2, #0
 800402a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <MX_USART2_UART_Init+0x58>)
 800402e:	220c      	movs	r2, #12
 8004030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <MX_USART2_UART_Init+0x58>)
 8004034:	2200      	movs	r2, #0
 8004036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <MX_USART2_UART_Init+0x58>)
 800403a:	2200      	movs	r2, #0
 800403c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <MX_USART2_UART_Init+0x58>)
 8004040:	2200      	movs	r2, #0
 8004042:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <MX_USART2_UART_Init+0x58>)
 8004046:	2200      	movs	r2, #0
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <MX_USART2_UART_Init+0x58>)
 800404c:	0018      	movs	r0, r3
 800404e:	f7fe fbab 	bl	80027a8 <HAL_UART_Init>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d001      	beq.n	800405a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004056:	f7ff fa9f 	bl	8003598 <Error_Handler>
  }

}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000148 	.word	0x20000148
 8004064:	40004400 	.word	0x40004400

08004068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004070:	2314      	movs	r3, #20
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	0018      	movs	r0, r3
 8004076:	2314      	movs	r3, #20
 8004078:	001a      	movs	r2, r3
 800407a:	2100      	movs	r1, #0
 800407c:	f000 f894 	bl	80041a8 <memset>
  if(uartHandle->Instance==USART2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <HAL_UART_MspInit+0x90>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d132      	bne.n	80040f0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800408a:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <HAL_UART_MspInit+0x94>)
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_UART_MspInit+0x94>)
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	0289      	lsls	r1, r1, #10
 8004094:	430a      	orrs	r2, r1
 8004096:	61da      	str	r2, [r3, #28]
 8004098:	4b18      	ldr	r3, [pc, #96]	; (80040fc <HAL_UART_MspInit+0x94>)
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	029b      	lsls	r3, r3, #10
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <HAL_UART_MspInit+0x94>)
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <HAL_UART_MspInit+0x94>)
 80040ac:	2180      	movs	r1, #128	; 0x80
 80040ae:	0289      	lsls	r1, r1, #10
 80040b0:	430a      	orrs	r2, r1
 80040b2:	615a      	str	r2, [r3, #20]
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <HAL_UART_MspInit+0x94>)
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	029b      	lsls	r3, r3, #10
 80040bc:	4013      	ands	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040c2:	2114      	movs	r1, #20
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	220c      	movs	r2, #12
 80040c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	2202      	movs	r2, #2
 80040ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	187b      	adds	r3, r7, r1
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040d6:	187b      	adds	r3, r7, r1
 80040d8:	2203      	movs	r2, #3
 80040da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80040dc:	187b      	adds	r3, r7, r1
 80040de:	2201      	movs	r2, #1
 80040e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e2:	187a      	adds	r2, r7, r1
 80040e4:	2390      	movs	r3, #144	; 0x90
 80040e6:	05db      	lsls	r3, r3, #23
 80040e8:	0011      	movs	r1, r2
 80040ea:	0018      	movs	r0, r3
 80040ec:	f7fc fc8c 	bl	8000a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b00a      	add	sp, #40	; 0x28
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40004400 	.word	0x40004400
 80040fc:	40021000 	.word	0x40021000

08004100 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004100:	480d      	ldr	r0, [pc, #52]	; (8004138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004102:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004104:	480d      	ldr	r0, [pc, #52]	; (800413c <LoopForever+0x6>)
  ldr r1, =_edata
 8004106:	490e      	ldr	r1, [pc, #56]	; (8004140 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004108:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <LoopForever+0xe>)
  movs r3, #0
 800410a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800410c:	e002      	b.n	8004114 <LoopCopyDataInit>

0800410e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800410e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004112:	3304      	adds	r3, #4

08004114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004118:	d3f9      	bcc.n	800410e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800411a:	4a0b      	ldr	r2, [pc, #44]	; (8004148 <LoopForever+0x12>)
  ldr r4, =_ebss
 800411c:	4c0b      	ldr	r4, [pc, #44]	; (800414c <LoopForever+0x16>)
  movs r3, #0
 800411e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004120:	e001      	b.n	8004126 <LoopFillZerobss>

08004122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004124:	3204      	adds	r2, #4

08004126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004128:	d3fb      	bcc.n	8004122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800412a:	f7ff fed9 	bl	8003ee0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800412e:	f000 f817 	bl	8004160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004132:	f7ff f951 	bl	80033d8 <main>

08004136 <LoopForever>:

LoopForever:
    b LoopForever
 8004136:	e7fe      	b.n	8004136 <LoopForever>
  ldr   r0, =_estack
 8004138:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800413c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004140:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004144:	080053c0 	.word	0x080053c0
  ldr r2, =_sbss
 8004148:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800414c:	200001bc 	.word	0x200001bc

08004150 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004150:	e7fe      	b.n	8004150 <ADC1_COMP_IRQHandler>
	...

08004154 <__errno>:
 8004154:	4b01      	ldr	r3, [pc, #4]	; (800415c <__errno+0x8>)
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	4770      	bx	lr
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	20000020 	.word	0x20000020

08004160 <__libc_init_array>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	2600      	movs	r6, #0
 8004164:	4d0c      	ldr	r5, [pc, #48]	; (8004198 <__libc_init_array+0x38>)
 8004166:	4c0d      	ldr	r4, [pc, #52]	; (800419c <__libc_init_array+0x3c>)
 8004168:	1b64      	subs	r4, r4, r5
 800416a:	10a4      	asrs	r4, r4, #2
 800416c:	42a6      	cmp	r6, r4
 800416e:	d109      	bne.n	8004184 <__libc_init_array+0x24>
 8004170:	2600      	movs	r6, #0
 8004172:	f000 fcc9 	bl	8004b08 <_init>
 8004176:	4d0a      	ldr	r5, [pc, #40]	; (80041a0 <__libc_init_array+0x40>)
 8004178:	4c0a      	ldr	r4, [pc, #40]	; (80041a4 <__libc_init_array+0x44>)
 800417a:	1b64      	subs	r4, r4, r5
 800417c:	10a4      	asrs	r4, r4, #2
 800417e:	42a6      	cmp	r6, r4
 8004180:	d105      	bne.n	800418e <__libc_init_array+0x2e>
 8004182:	bd70      	pop	{r4, r5, r6, pc}
 8004184:	00b3      	lsls	r3, r6, #2
 8004186:	58eb      	ldr	r3, [r5, r3]
 8004188:	4798      	blx	r3
 800418a:	3601      	adds	r6, #1
 800418c:	e7ee      	b.n	800416c <__libc_init_array+0xc>
 800418e:	00b3      	lsls	r3, r6, #2
 8004190:	58eb      	ldr	r3, [r5, r3]
 8004192:	4798      	blx	r3
 8004194:	3601      	adds	r6, #1
 8004196:	e7f2      	b.n	800417e <__libc_init_array+0x1e>
 8004198:	080053b8 	.word	0x080053b8
 800419c:	080053b8 	.word	0x080053b8
 80041a0:	080053b8 	.word	0x080053b8
 80041a4:	080053bc 	.word	0x080053bc

080041a8 <memset>:
 80041a8:	0003      	movs	r3, r0
 80041aa:	1812      	adds	r2, r2, r0
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d100      	bne.n	80041b2 <memset+0xa>
 80041b0:	4770      	bx	lr
 80041b2:	7019      	strb	r1, [r3, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	e7f9      	b.n	80041ac <memset+0x4>

080041b8 <_puts_r>:
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	0005      	movs	r5, r0
 80041bc:	000e      	movs	r6, r1
 80041be:	2800      	cmp	r0, #0
 80041c0:	d004      	beq.n	80041cc <_puts_r+0x14>
 80041c2:	6983      	ldr	r3, [r0, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <_puts_r+0x14>
 80041c8:	f000 fa24 	bl	8004614 <__sinit>
 80041cc:	69ab      	ldr	r3, [r5, #24]
 80041ce:	68ac      	ldr	r4, [r5, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <_puts_r+0x22>
 80041d4:	0028      	movs	r0, r5
 80041d6:	f000 fa1d 	bl	8004614 <__sinit>
 80041da:	4b24      	ldr	r3, [pc, #144]	; (800426c <_puts_r+0xb4>)
 80041dc:	429c      	cmp	r4, r3
 80041de:	d10f      	bne.n	8004200 <_puts_r+0x48>
 80041e0:	686c      	ldr	r4, [r5, #4]
 80041e2:	89a3      	ldrh	r3, [r4, #12]
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	d502      	bpl.n	80041ee <_puts_r+0x36>
 80041e8:	6923      	ldr	r3, [r4, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11f      	bne.n	800422e <_puts_r+0x76>
 80041ee:	0021      	movs	r1, r4
 80041f0:	0028      	movs	r0, r5
 80041f2:	f000 f8a1 	bl	8004338 <__swsetup_r>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d019      	beq.n	800422e <_puts_r+0x76>
 80041fa:	2001      	movs	r0, #1
 80041fc:	4240      	negs	r0, r0
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <_puts_r+0xb8>)
 8004202:	429c      	cmp	r4, r3
 8004204:	d101      	bne.n	800420a <_puts_r+0x52>
 8004206:	68ac      	ldr	r4, [r5, #8]
 8004208:	e7eb      	b.n	80041e2 <_puts_r+0x2a>
 800420a:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <_puts_r+0xbc>)
 800420c:	429c      	cmp	r4, r3
 800420e:	d1e8      	bne.n	80041e2 <_puts_r+0x2a>
 8004210:	68ec      	ldr	r4, [r5, #12]
 8004212:	e7e6      	b.n	80041e2 <_puts_r+0x2a>
 8004214:	3601      	adds	r6, #1
 8004216:	60a3      	str	r3, [r4, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	da04      	bge.n	8004226 <_puts_r+0x6e>
 800421c:	69a2      	ldr	r2, [r4, #24]
 800421e:	429a      	cmp	r2, r3
 8004220:	dc16      	bgt.n	8004250 <_puts_r+0x98>
 8004222:	290a      	cmp	r1, #10
 8004224:	d014      	beq.n	8004250 <_puts_r+0x98>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	6022      	str	r2, [r4, #0]
 800422c:	7019      	strb	r1, [r3, #0]
 800422e:	68a3      	ldr	r3, [r4, #8]
 8004230:	7831      	ldrb	r1, [r6, #0]
 8004232:	3b01      	subs	r3, #1
 8004234:	2900      	cmp	r1, #0
 8004236:	d1ed      	bne.n	8004214 <_puts_r+0x5c>
 8004238:	60a3      	str	r3, [r4, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	da0f      	bge.n	800425e <_puts_r+0xa6>
 800423e:	0022      	movs	r2, r4
 8004240:	310a      	adds	r1, #10
 8004242:	0028      	movs	r0, r5
 8004244:	f000 f822 	bl	800428c <__swbuf_r>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d0d6      	beq.n	80041fa <_puts_r+0x42>
 800424c:	200a      	movs	r0, #10
 800424e:	e7d6      	b.n	80041fe <_puts_r+0x46>
 8004250:	0022      	movs	r2, r4
 8004252:	0028      	movs	r0, r5
 8004254:	f000 f81a 	bl	800428c <__swbuf_r>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d1e8      	bne.n	800422e <_puts_r+0x76>
 800425c:	e7cd      	b.n	80041fa <_puts_r+0x42>
 800425e:	200a      	movs	r0, #10
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	6022      	str	r2, [r4, #0]
 8004266:	7018      	strb	r0, [r3, #0]
 8004268:	e7c9      	b.n	80041fe <_puts_r+0x46>
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	08005378 	.word	0x08005378
 8004270:	08005398 	.word	0x08005398
 8004274:	08005358 	.word	0x08005358

08004278 <puts>:
 8004278:	b510      	push	{r4, lr}
 800427a:	4b03      	ldr	r3, [pc, #12]	; (8004288 <puts+0x10>)
 800427c:	0001      	movs	r1, r0
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	f7ff ff9a 	bl	80041b8 <_puts_r>
 8004284:	bd10      	pop	{r4, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	20000020 	.word	0x20000020

0800428c <__swbuf_r>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	0005      	movs	r5, r0
 8004290:	000e      	movs	r6, r1
 8004292:	0014      	movs	r4, r2
 8004294:	2800      	cmp	r0, #0
 8004296:	d004      	beq.n	80042a2 <__swbuf_r+0x16>
 8004298:	6983      	ldr	r3, [r0, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <__swbuf_r+0x16>
 800429e:	f000 f9b9 	bl	8004614 <__sinit>
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <__swbuf_r+0xa0>)
 80042a4:	429c      	cmp	r4, r3
 80042a6:	d12d      	bne.n	8004304 <__swbuf_r+0x78>
 80042a8:	686c      	ldr	r4, [r5, #4]
 80042aa:	69a3      	ldr	r3, [r4, #24]
 80042ac:	60a3      	str	r3, [r4, #8]
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	071b      	lsls	r3, r3, #28
 80042b2:	d531      	bpl.n	8004318 <__swbuf_r+0x8c>
 80042b4:	6923      	ldr	r3, [r4, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d02e      	beq.n	8004318 <__swbuf_r+0x8c>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	6922      	ldr	r2, [r4, #16]
 80042be:	b2f7      	uxtb	r7, r6
 80042c0:	1a98      	subs	r0, r3, r2
 80042c2:	6963      	ldr	r3, [r4, #20]
 80042c4:	b2f6      	uxtb	r6, r6
 80042c6:	4283      	cmp	r3, r0
 80042c8:	dc05      	bgt.n	80042d6 <__swbuf_r+0x4a>
 80042ca:	0021      	movs	r1, r4
 80042cc:	0028      	movs	r0, r5
 80042ce:	f000 f933 	bl	8004538 <_fflush_r>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d126      	bne.n	8004324 <__swbuf_r+0x98>
 80042d6:	68a3      	ldr	r3, [r4, #8]
 80042d8:	3001      	adds	r0, #1
 80042da:	3b01      	subs	r3, #1
 80042dc:	60a3      	str	r3, [r4, #8]
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	6022      	str	r2, [r4, #0]
 80042e4:	701f      	strb	r7, [r3, #0]
 80042e6:	6963      	ldr	r3, [r4, #20]
 80042e8:	4283      	cmp	r3, r0
 80042ea:	d004      	beq.n	80042f6 <__swbuf_r+0x6a>
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	07db      	lsls	r3, r3, #31
 80042f0:	d51a      	bpl.n	8004328 <__swbuf_r+0x9c>
 80042f2:	2e0a      	cmp	r6, #10
 80042f4:	d118      	bne.n	8004328 <__swbuf_r+0x9c>
 80042f6:	0021      	movs	r1, r4
 80042f8:	0028      	movs	r0, r5
 80042fa:	f000 f91d 	bl	8004538 <_fflush_r>
 80042fe:	2800      	cmp	r0, #0
 8004300:	d012      	beq.n	8004328 <__swbuf_r+0x9c>
 8004302:	e00f      	b.n	8004324 <__swbuf_r+0x98>
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <__swbuf_r+0xa4>)
 8004306:	429c      	cmp	r4, r3
 8004308:	d101      	bne.n	800430e <__swbuf_r+0x82>
 800430a:	68ac      	ldr	r4, [r5, #8]
 800430c:	e7cd      	b.n	80042aa <__swbuf_r+0x1e>
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <__swbuf_r+0xa8>)
 8004310:	429c      	cmp	r4, r3
 8004312:	d1ca      	bne.n	80042aa <__swbuf_r+0x1e>
 8004314:	68ec      	ldr	r4, [r5, #12]
 8004316:	e7c8      	b.n	80042aa <__swbuf_r+0x1e>
 8004318:	0021      	movs	r1, r4
 800431a:	0028      	movs	r0, r5
 800431c:	f000 f80c 	bl	8004338 <__swsetup_r>
 8004320:	2800      	cmp	r0, #0
 8004322:	d0ca      	beq.n	80042ba <__swbuf_r+0x2e>
 8004324:	2601      	movs	r6, #1
 8004326:	4276      	negs	r6, r6
 8004328:	0030      	movs	r0, r6
 800432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800432c:	08005378 	.word	0x08005378
 8004330:	08005398 	.word	0x08005398
 8004334:	08005358 	.word	0x08005358

08004338 <__swsetup_r>:
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <__swsetup_r+0xdc>)
 800433a:	b570      	push	{r4, r5, r6, lr}
 800433c:	681d      	ldr	r5, [r3, #0]
 800433e:	0006      	movs	r6, r0
 8004340:	000c      	movs	r4, r1
 8004342:	2d00      	cmp	r5, #0
 8004344:	d005      	beq.n	8004352 <__swsetup_r+0x1a>
 8004346:	69ab      	ldr	r3, [r5, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <__swsetup_r+0x1a>
 800434c:	0028      	movs	r0, r5
 800434e:	f000 f961 	bl	8004614 <__sinit>
 8004352:	4b31      	ldr	r3, [pc, #196]	; (8004418 <__swsetup_r+0xe0>)
 8004354:	429c      	cmp	r4, r3
 8004356:	d10f      	bne.n	8004378 <__swsetup_r+0x40>
 8004358:	686c      	ldr	r4, [r5, #4]
 800435a:	230c      	movs	r3, #12
 800435c:	5ee2      	ldrsh	r2, [r4, r3]
 800435e:	b293      	uxth	r3, r2
 8004360:	0719      	lsls	r1, r3, #28
 8004362:	d42d      	bmi.n	80043c0 <__swsetup_r+0x88>
 8004364:	06d9      	lsls	r1, r3, #27
 8004366:	d411      	bmi.n	800438c <__swsetup_r+0x54>
 8004368:	2309      	movs	r3, #9
 800436a:	2001      	movs	r0, #1
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	3337      	adds	r3, #55	; 0x37
 8004370:	4313      	orrs	r3, r2
 8004372:	81a3      	strh	r3, [r4, #12]
 8004374:	4240      	negs	r0, r0
 8004376:	bd70      	pop	{r4, r5, r6, pc}
 8004378:	4b28      	ldr	r3, [pc, #160]	; (800441c <__swsetup_r+0xe4>)
 800437a:	429c      	cmp	r4, r3
 800437c:	d101      	bne.n	8004382 <__swsetup_r+0x4a>
 800437e:	68ac      	ldr	r4, [r5, #8]
 8004380:	e7eb      	b.n	800435a <__swsetup_r+0x22>
 8004382:	4b27      	ldr	r3, [pc, #156]	; (8004420 <__swsetup_r+0xe8>)
 8004384:	429c      	cmp	r4, r3
 8004386:	d1e8      	bne.n	800435a <__swsetup_r+0x22>
 8004388:	68ec      	ldr	r4, [r5, #12]
 800438a:	e7e6      	b.n	800435a <__swsetup_r+0x22>
 800438c:	075b      	lsls	r3, r3, #29
 800438e:	d513      	bpl.n	80043b8 <__swsetup_r+0x80>
 8004390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004392:	2900      	cmp	r1, #0
 8004394:	d008      	beq.n	80043a8 <__swsetup_r+0x70>
 8004396:	0023      	movs	r3, r4
 8004398:	3344      	adds	r3, #68	; 0x44
 800439a:	4299      	cmp	r1, r3
 800439c:	d002      	beq.n	80043a4 <__swsetup_r+0x6c>
 800439e:	0030      	movs	r0, r6
 80043a0:	f000 fa38 	bl	8004814 <_free_r>
 80043a4:	2300      	movs	r3, #0
 80043a6:	6363      	str	r3, [r4, #52]	; 0x34
 80043a8:	2224      	movs	r2, #36	; 0x24
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	4393      	bics	r3, r2
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	2300      	movs	r3, #0
 80043b2:	6063      	str	r3, [r4, #4]
 80043b4:	6923      	ldr	r3, [r4, #16]
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	2308      	movs	r3, #8
 80043ba:	89a2      	ldrh	r2, [r4, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	6923      	ldr	r3, [r4, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10b      	bne.n	80043de <__swsetup_r+0xa6>
 80043c6:	21a0      	movs	r1, #160	; 0xa0
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	0089      	lsls	r1, r1, #2
 80043ce:	0092      	lsls	r2, r2, #2
 80043d0:	400b      	ands	r3, r1
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <__swsetup_r+0xa6>
 80043d6:	0021      	movs	r1, r4
 80043d8:	0030      	movs	r0, r6
 80043da:	f000 f9d7 	bl	800478c <__smakebuf_r>
 80043de:	2301      	movs	r3, #1
 80043e0:	89a2      	ldrh	r2, [r4, #12]
 80043e2:	4013      	ands	r3, r2
 80043e4:	d011      	beq.n	800440a <__swsetup_r+0xd2>
 80043e6:	2300      	movs	r3, #0
 80043e8:	60a3      	str	r3, [r4, #8]
 80043ea:	6963      	ldr	r3, [r4, #20]
 80043ec:	425b      	negs	r3, r3
 80043ee:	61a3      	str	r3, [r4, #24]
 80043f0:	2000      	movs	r0, #0
 80043f2:	6923      	ldr	r3, [r4, #16]
 80043f4:	4283      	cmp	r3, r0
 80043f6:	d1be      	bne.n	8004376 <__swsetup_r+0x3e>
 80043f8:	230c      	movs	r3, #12
 80043fa:	5ee2      	ldrsh	r2, [r4, r3]
 80043fc:	0613      	lsls	r3, r2, #24
 80043fe:	d5ba      	bpl.n	8004376 <__swsetup_r+0x3e>
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	4313      	orrs	r3, r2
 8004404:	81a3      	strh	r3, [r4, #12]
 8004406:	3801      	subs	r0, #1
 8004408:	e7b5      	b.n	8004376 <__swsetup_r+0x3e>
 800440a:	0792      	lsls	r2, r2, #30
 800440c:	d400      	bmi.n	8004410 <__swsetup_r+0xd8>
 800440e:	6963      	ldr	r3, [r4, #20]
 8004410:	60a3      	str	r3, [r4, #8]
 8004412:	e7ed      	b.n	80043f0 <__swsetup_r+0xb8>
 8004414:	20000020 	.word	0x20000020
 8004418:	08005378 	.word	0x08005378
 800441c:	08005398 	.word	0x08005398
 8004420:	08005358 	.word	0x08005358

08004424 <__sflush_r>:
 8004424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004426:	898a      	ldrh	r2, [r1, #12]
 8004428:	0005      	movs	r5, r0
 800442a:	000c      	movs	r4, r1
 800442c:	0713      	lsls	r3, r2, #28
 800442e:	d460      	bmi.n	80044f2 <__sflush_r+0xce>
 8004430:	684b      	ldr	r3, [r1, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	dc04      	bgt.n	8004440 <__sflush_r+0x1c>
 8004436:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	dc01      	bgt.n	8004440 <__sflush_r+0x1c>
 800443c:	2000      	movs	r0, #0
 800443e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004440:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004442:	2f00      	cmp	r7, #0
 8004444:	d0fa      	beq.n	800443c <__sflush_r+0x18>
 8004446:	2300      	movs	r3, #0
 8004448:	682e      	ldr	r6, [r5, #0]
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	015b      	lsls	r3, r3, #5
 8004450:	6a21      	ldr	r1, [r4, #32]
 8004452:	401a      	ands	r2, r3
 8004454:	d034      	beq.n	80044c0 <__sflush_r+0x9c>
 8004456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	075b      	lsls	r3, r3, #29
 800445c:	d506      	bpl.n	800446c <__sflush_r+0x48>
 800445e:	6863      	ldr	r3, [r4, #4]
 8004460:	1ac0      	subs	r0, r0, r3
 8004462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <__sflush_r+0x48>
 8004468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800446a:	1ac0      	subs	r0, r0, r3
 800446c:	0002      	movs	r2, r0
 800446e:	6a21      	ldr	r1, [r4, #32]
 8004470:	2300      	movs	r3, #0
 8004472:	0028      	movs	r0, r5
 8004474:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004476:	47b8      	blx	r7
 8004478:	89a1      	ldrh	r1, [r4, #12]
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d106      	bne.n	800448c <__sflush_r+0x68>
 800447e:	682b      	ldr	r3, [r5, #0]
 8004480:	2b1d      	cmp	r3, #29
 8004482:	d830      	bhi.n	80044e6 <__sflush_r+0xc2>
 8004484:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <__sflush_r+0x110>)
 8004486:	40da      	lsrs	r2, r3
 8004488:	07d3      	lsls	r3, r2, #31
 800448a:	d52c      	bpl.n	80044e6 <__sflush_r+0xc2>
 800448c:	2300      	movs	r3, #0
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	6923      	ldr	r3, [r4, #16]
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	04cb      	lsls	r3, r1, #19
 8004496:	d505      	bpl.n	80044a4 <__sflush_r+0x80>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <__sflush_r+0x7e>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d100      	bne.n	80044a4 <__sflush_r+0x80>
 80044a2:	6560      	str	r0, [r4, #84]	; 0x54
 80044a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a6:	602e      	str	r6, [r5, #0]
 80044a8:	2900      	cmp	r1, #0
 80044aa:	d0c7      	beq.n	800443c <__sflush_r+0x18>
 80044ac:	0023      	movs	r3, r4
 80044ae:	3344      	adds	r3, #68	; 0x44
 80044b0:	4299      	cmp	r1, r3
 80044b2:	d002      	beq.n	80044ba <__sflush_r+0x96>
 80044b4:	0028      	movs	r0, r5
 80044b6:	f000 f9ad 	bl	8004814 <_free_r>
 80044ba:	2000      	movs	r0, #0
 80044bc:	6360      	str	r0, [r4, #52]	; 0x34
 80044be:	e7be      	b.n	800443e <__sflush_r+0x1a>
 80044c0:	2301      	movs	r3, #1
 80044c2:	0028      	movs	r0, r5
 80044c4:	47b8      	blx	r7
 80044c6:	1c43      	adds	r3, r0, #1
 80044c8:	d1c6      	bne.n	8004458 <__sflush_r+0x34>
 80044ca:	682b      	ldr	r3, [r5, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0c3      	beq.n	8004458 <__sflush_r+0x34>
 80044d0:	2b1d      	cmp	r3, #29
 80044d2:	d001      	beq.n	80044d8 <__sflush_r+0xb4>
 80044d4:	2b16      	cmp	r3, #22
 80044d6:	d101      	bne.n	80044dc <__sflush_r+0xb8>
 80044d8:	602e      	str	r6, [r5, #0]
 80044da:	e7af      	b.n	800443c <__sflush_r+0x18>
 80044dc:	2340      	movs	r3, #64	; 0x40
 80044de:	89a2      	ldrh	r2, [r4, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	81a3      	strh	r3, [r4, #12]
 80044e4:	e7ab      	b.n	800443e <__sflush_r+0x1a>
 80044e6:	2340      	movs	r3, #64	; 0x40
 80044e8:	430b      	orrs	r3, r1
 80044ea:	2001      	movs	r0, #1
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	4240      	negs	r0, r0
 80044f0:	e7a5      	b.n	800443e <__sflush_r+0x1a>
 80044f2:	690f      	ldr	r7, [r1, #16]
 80044f4:	2f00      	cmp	r7, #0
 80044f6:	d0a1      	beq.n	800443c <__sflush_r+0x18>
 80044f8:	680b      	ldr	r3, [r1, #0]
 80044fa:	600f      	str	r7, [r1, #0]
 80044fc:	1bdb      	subs	r3, r3, r7
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	2300      	movs	r3, #0
 8004502:	0792      	lsls	r2, r2, #30
 8004504:	d100      	bne.n	8004508 <__sflush_r+0xe4>
 8004506:	694b      	ldr	r3, [r1, #20]
 8004508:	60a3      	str	r3, [r4, #8]
 800450a:	9b01      	ldr	r3, [sp, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	dc00      	bgt.n	8004512 <__sflush_r+0xee>
 8004510:	e794      	b.n	800443c <__sflush_r+0x18>
 8004512:	9b01      	ldr	r3, [sp, #4]
 8004514:	003a      	movs	r2, r7
 8004516:	6a21      	ldr	r1, [r4, #32]
 8004518:	0028      	movs	r0, r5
 800451a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800451c:	47b0      	blx	r6
 800451e:	2800      	cmp	r0, #0
 8004520:	dc03      	bgt.n	800452a <__sflush_r+0x106>
 8004522:	2340      	movs	r3, #64	; 0x40
 8004524:	89a2      	ldrh	r2, [r4, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	e7df      	b.n	80044ea <__sflush_r+0xc6>
 800452a:	9b01      	ldr	r3, [sp, #4]
 800452c:	183f      	adds	r7, r7, r0
 800452e:	1a1b      	subs	r3, r3, r0
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	e7ea      	b.n	800450a <__sflush_r+0xe6>
 8004534:	20400001 	.word	0x20400001

08004538 <_fflush_r>:
 8004538:	690b      	ldr	r3, [r1, #16]
 800453a:	b570      	push	{r4, r5, r6, lr}
 800453c:	0005      	movs	r5, r0
 800453e:	000c      	movs	r4, r1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <_fflush_r+0x10>
 8004544:	2000      	movs	r0, #0
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	2800      	cmp	r0, #0
 800454a:	d004      	beq.n	8004556 <_fflush_r+0x1e>
 800454c:	6983      	ldr	r3, [r0, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <_fflush_r+0x1e>
 8004552:	f000 f85f 	bl	8004614 <__sinit>
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <_fflush_r+0x4c>)
 8004558:	429c      	cmp	r4, r3
 800455a:	d109      	bne.n	8004570 <_fflush_r+0x38>
 800455c:	686c      	ldr	r4, [r5, #4]
 800455e:	220c      	movs	r2, #12
 8004560:	5ea3      	ldrsh	r3, [r4, r2]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ee      	beq.n	8004544 <_fflush_r+0xc>
 8004566:	0021      	movs	r1, r4
 8004568:	0028      	movs	r0, r5
 800456a:	f7ff ff5b 	bl	8004424 <__sflush_r>
 800456e:	e7ea      	b.n	8004546 <_fflush_r+0xe>
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <_fflush_r+0x50>)
 8004572:	429c      	cmp	r4, r3
 8004574:	d101      	bne.n	800457a <_fflush_r+0x42>
 8004576:	68ac      	ldr	r4, [r5, #8]
 8004578:	e7f1      	b.n	800455e <_fflush_r+0x26>
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <_fflush_r+0x54>)
 800457c:	429c      	cmp	r4, r3
 800457e:	d1ee      	bne.n	800455e <_fflush_r+0x26>
 8004580:	68ec      	ldr	r4, [r5, #12]
 8004582:	e7ec      	b.n	800455e <_fflush_r+0x26>
 8004584:	08005378 	.word	0x08005378
 8004588:	08005398 	.word	0x08005398
 800458c:	08005358 	.word	0x08005358

08004590 <std>:
 8004590:	2300      	movs	r3, #0
 8004592:	b510      	push	{r4, lr}
 8004594:	0004      	movs	r4, r0
 8004596:	6003      	str	r3, [r0, #0]
 8004598:	6043      	str	r3, [r0, #4]
 800459a:	6083      	str	r3, [r0, #8]
 800459c:	8181      	strh	r1, [r0, #12]
 800459e:	6643      	str	r3, [r0, #100]	; 0x64
 80045a0:	81c2      	strh	r2, [r0, #14]
 80045a2:	6103      	str	r3, [r0, #16]
 80045a4:	6143      	str	r3, [r0, #20]
 80045a6:	6183      	str	r3, [r0, #24]
 80045a8:	0019      	movs	r1, r3
 80045aa:	2208      	movs	r2, #8
 80045ac:	305c      	adds	r0, #92	; 0x5c
 80045ae:	f7ff fdfb 	bl	80041a8 <memset>
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <std+0x38>)
 80045b4:	6224      	str	r4, [r4, #32]
 80045b6:	6263      	str	r3, [r4, #36]	; 0x24
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <std+0x3c>)
 80045ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <std+0x40>)
 80045be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <std+0x44>)
 80045c2:	6323      	str	r3, [r4, #48]	; 0x30
 80045c4:	bd10      	pop	{r4, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	08004989 	.word	0x08004989
 80045cc:	080049b1 	.word	0x080049b1
 80045d0:	080049e9 	.word	0x080049e9
 80045d4:	08004a15 	.word	0x08004a15

080045d8 <_cleanup_r>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	4902      	ldr	r1, [pc, #8]	; (80045e4 <_cleanup_r+0xc>)
 80045dc:	f000 f88c 	bl	80046f8 <_fwalk_reent>
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	08004539 	.word	0x08004539

080045e8 <__sfmoreglue>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	2568      	movs	r5, #104	; 0x68
 80045ec:	1e4a      	subs	r2, r1, #1
 80045ee:	4355      	muls	r5, r2
 80045f0:	000e      	movs	r6, r1
 80045f2:	0029      	movs	r1, r5
 80045f4:	3174      	adds	r1, #116	; 0x74
 80045f6:	f000 f957 	bl	80048a8 <_malloc_r>
 80045fa:	1e04      	subs	r4, r0, #0
 80045fc:	d008      	beq.n	8004610 <__sfmoreglue+0x28>
 80045fe:	2100      	movs	r1, #0
 8004600:	002a      	movs	r2, r5
 8004602:	6001      	str	r1, [r0, #0]
 8004604:	6046      	str	r6, [r0, #4]
 8004606:	300c      	adds	r0, #12
 8004608:	60a0      	str	r0, [r4, #8]
 800460a:	3268      	adds	r2, #104	; 0x68
 800460c:	f7ff fdcc 	bl	80041a8 <memset>
 8004610:	0020      	movs	r0, r4
 8004612:	bd70      	pop	{r4, r5, r6, pc}

08004614 <__sinit>:
 8004614:	6983      	ldr	r3, [r0, #24]
 8004616:	b513      	push	{r0, r1, r4, lr}
 8004618:	0004      	movs	r4, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d128      	bne.n	8004670 <__sinit+0x5c>
 800461e:	6483      	str	r3, [r0, #72]	; 0x48
 8004620:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004622:	6503      	str	r3, [r0, #80]	; 0x50
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <__sinit+0x60>)
 8004626:	4a14      	ldr	r2, [pc, #80]	; (8004678 <__sinit+0x64>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6282      	str	r2, [r0, #40]	; 0x28
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	4298      	cmp	r0, r3
 8004630:	d101      	bne.n	8004636 <__sinit+0x22>
 8004632:	2301      	movs	r3, #1
 8004634:	6183      	str	r3, [r0, #24]
 8004636:	0020      	movs	r0, r4
 8004638:	f000 f820 	bl	800467c <__sfp>
 800463c:	6060      	str	r0, [r4, #4]
 800463e:	0020      	movs	r0, r4
 8004640:	f000 f81c 	bl	800467c <__sfp>
 8004644:	60a0      	str	r0, [r4, #8]
 8004646:	0020      	movs	r0, r4
 8004648:	f000 f818 	bl	800467c <__sfp>
 800464c:	2200      	movs	r2, #0
 800464e:	60e0      	str	r0, [r4, #12]
 8004650:	2104      	movs	r1, #4
 8004652:	6860      	ldr	r0, [r4, #4]
 8004654:	f7ff ff9c 	bl	8004590 <std>
 8004658:	2201      	movs	r2, #1
 800465a:	2109      	movs	r1, #9
 800465c:	68a0      	ldr	r0, [r4, #8]
 800465e:	f7ff ff97 	bl	8004590 <std>
 8004662:	2202      	movs	r2, #2
 8004664:	2112      	movs	r1, #18
 8004666:	68e0      	ldr	r0, [r4, #12]
 8004668:	f7ff ff92 	bl	8004590 <std>
 800466c:	2301      	movs	r3, #1
 800466e:	61a3      	str	r3, [r4, #24]
 8004670:	bd13      	pop	{r0, r1, r4, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	08005354 	.word	0x08005354
 8004678:	080045d9 	.word	0x080045d9

0800467c <__sfp>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <__sfp+0x74>)
 8004680:	0007      	movs	r7, r0
 8004682:	681e      	ldr	r6, [r3, #0]
 8004684:	69b3      	ldr	r3, [r6, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <__sfp+0x14>
 800468a:	0030      	movs	r0, r6
 800468c:	f7ff ffc2 	bl	8004614 <__sinit>
 8004690:	3648      	adds	r6, #72	; 0x48
 8004692:	68b4      	ldr	r4, [r6, #8]
 8004694:	6873      	ldr	r3, [r6, #4]
 8004696:	3b01      	subs	r3, #1
 8004698:	d504      	bpl.n	80046a4 <__sfp+0x28>
 800469a:	6833      	ldr	r3, [r6, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <__sfp+0x34>
 80046a0:	6836      	ldr	r6, [r6, #0]
 80046a2:	e7f6      	b.n	8004692 <__sfp+0x16>
 80046a4:	220c      	movs	r2, #12
 80046a6:	5ea5      	ldrsh	r5, [r4, r2]
 80046a8:	2d00      	cmp	r5, #0
 80046aa:	d00d      	beq.n	80046c8 <__sfp+0x4c>
 80046ac:	3468      	adds	r4, #104	; 0x68
 80046ae:	e7f2      	b.n	8004696 <__sfp+0x1a>
 80046b0:	2104      	movs	r1, #4
 80046b2:	0038      	movs	r0, r7
 80046b4:	f7ff ff98 	bl	80045e8 <__sfmoreglue>
 80046b8:	6030      	str	r0, [r6, #0]
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d1f0      	bne.n	80046a0 <__sfp+0x24>
 80046be:	230c      	movs	r3, #12
 80046c0:	0004      	movs	r4, r0
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	0020      	movs	r0, r4
 80046c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046c8:	0020      	movs	r0, r4
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <__sfp+0x78>)
 80046cc:	6665      	str	r5, [r4, #100]	; 0x64
 80046ce:	6025      	str	r5, [r4, #0]
 80046d0:	6065      	str	r5, [r4, #4]
 80046d2:	60a5      	str	r5, [r4, #8]
 80046d4:	60e3      	str	r3, [r4, #12]
 80046d6:	6125      	str	r5, [r4, #16]
 80046d8:	6165      	str	r5, [r4, #20]
 80046da:	61a5      	str	r5, [r4, #24]
 80046dc:	2208      	movs	r2, #8
 80046de:	0029      	movs	r1, r5
 80046e0:	305c      	adds	r0, #92	; 0x5c
 80046e2:	f7ff fd61 	bl	80041a8 <memset>
 80046e6:	6365      	str	r5, [r4, #52]	; 0x34
 80046e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80046ea:	64a5      	str	r5, [r4, #72]	; 0x48
 80046ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 80046ee:	e7e9      	b.n	80046c4 <__sfp+0x48>
 80046f0:	08005354 	.word	0x08005354
 80046f4:	ffff0001 	.word	0xffff0001

080046f8 <_fwalk_reent>:
 80046f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046fa:	0004      	movs	r4, r0
 80046fc:	0007      	movs	r7, r0
 80046fe:	2600      	movs	r6, #0
 8004700:	9101      	str	r1, [sp, #4]
 8004702:	3448      	adds	r4, #72	; 0x48
 8004704:	2c00      	cmp	r4, #0
 8004706:	d101      	bne.n	800470c <_fwalk_reent+0x14>
 8004708:	0030      	movs	r0, r6
 800470a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	68a5      	ldr	r5, [r4, #8]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	9b00      	ldr	r3, [sp, #0]
 8004714:	3b01      	subs	r3, #1
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	d501      	bpl.n	800471e <_fwalk_reent+0x26>
 800471a:	6824      	ldr	r4, [r4, #0]
 800471c:	e7f2      	b.n	8004704 <_fwalk_reent+0xc>
 800471e:	89ab      	ldrh	r3, [r5, #12]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d908      	bls.n	8004736 <_fwalk_reent+0x3e>
 8004724:	220e      	movs	r2, #14
 8004726:	5eab      	ldrsh	r3, [r5, r2]
 8004728:	3301      	adds	r3, #1
 800472a:	d004      	beq.n	8004736 <_fwalk_reent+0x3e>
 800472c:	0029      	movs	r1, r5
 800472e:	0038      	movs	r0, r7
 8004730:	9b01      	ldr	r3, [sp, #4]
 8004732:	4798      	blx	r3
 8004734:	4306      	orrs	r6, r0
 8004736:	3568      	adds	r5, #104	; 0x68
 8004738:	e7eb      	b.n	8004712 <_fwalk_reent+0x1a>
	...

0800473c <__swhatbuf_r>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	000e      	movs	r6, r1
 8004740:	001d      	movs	r5, r3
 8004742:	230e      	movs	r3, #14
 8004744:	5ec9      	ldrsh	r1, [r1, r3]
 8004746:	b096      	sub	sp, #88	; 0x58
 8004748:	0014      	movs	r4, r2
 800474a:	2900      	cmp	r1, #0
 800474c:	da07      	bge.n	800475e <__swhatbuf_r+0x22>
 800474e:	2300      	movs	r3, #0
 8004750:	602b      	str	r3, [r5, #0]
 8004752:	89b3      	ldrh	r3, [r6, #12]
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	d411      	bmi.n	800477c <__swhatbuf_r+0x40>
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	e00f      	b.n	800477e <__swhatbuf_r+0x42>
 800475e:	466a      	mov	r2, sp
 8004760:	f000 f984 	bl	8004a6c <_fstat_r>
 8004764:	2800      	cmp	r0, #0
 8004766:	dbf2      	blt.n	800474e <__swhatbuf_r+0x12>
 8004768:	22f0      	movs	r2, #240	; 0xf0
 800476a:	9b01      	ldr	r3, [sp, #4]
 800476c:	0212      	lsls	r2, r2, #8
 800476e:	4013      	ands	r3, r2
 8004770:	4a05      	ldr	r2, [pc, #20]	; (8004788 <__swhatbuf_r+0x4c>)
 8004772:	189b      	adds	r3, r3, r2
 8004774:	425a      	negs	r2, r3
 8004776:	4153      	adcs	r3, r2
 8004778:	602b      	str	r3, [r5, #0]
 800477a:	e7ed      	b.n	8004758 <__swhatbuf_r+0x1c>
 800477c:	2340      	movs	r3, #64	; 0x40
 800477e:	2000      	movs	r0, #0
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	b016      	add	sp, #88	; 0x58
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	ffffe000 	.word	0xffffe000

0800478c <__smakebuf_r>:
 800478c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800478e:	2602      	movs	r6, #2
 8004790:	898b      	ldrh	r3, [r1, #12]
 8004792:	0005      	movs	r5, r0
 8004794:	000c      	movs	r4, r1
 8004796:	4233      	tst	r3, r6
 8004798:	d006      	beq.n	80047a8 <__smakebuf_r+0x1c>
 800479a:	0023      	movs	r3, r4
 800479c:	3347      	adds	r3, #71	; 0x47
 800479e:	6023      	str	r3, [r4, #0]
 80047a0:	6123      	str	r3, [r4, #16]
 80047a2:	2301      	movs	r3, #1
 80047a4:	6163      	str	r3, [r4, #20]
 80047a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80047a8:	ab01      	add	r3, sp, #4
 80047aa:	466a      	mov	r2, sp
 80047ac:	f7ff ffc6 	bl	800473c <__swhatbuf_r>
 80047b0:	9900      	ldr	r1, [sp, #0]
 80047b2:	0007      	movs	r7, r0
 80047b4:	0028      	movs	r0, r5
 80047b6:	f000 f877 	bl	80048a8 <_malloc_r>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d108      	bne.n	80047d0 <__smakebuf_r+0x44>
 80047be:	220c      	movs	r2, #12
 80047c0:	5ea3      	ldrsh	r3, [r4, r2]
 80047c2:	059a      	lsls	r2, r3, #22
 80047c4:	d4ef      	bmi.n	80047a6 <__smakebuf_r+0x1a>
 80047c6:	2203      	movs	r2, #3
 80047c8:	4393      	bics	r3, r2
 80047ca:	431e      	orrs	r6, r3
 80047cc:	81a6      	strh	r6, [r4, #12]
 80047ce:	e7e4      	b.n	800479a <__smakebuf_r+0xe>
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <__smakebuf_r+0x84>)
 80047d2:	62ab      	str	r3, [r5, #40]	; 0x28
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	89a2      	ldrh	r2, [r4, #12]
 80047d8:	6020      	str	r0, [r4, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	9b00      	ldr	r3, [sp, #0]
 80047e0:	6120      	str	r0, [r4, #16]
 80047e2:	6163      	str	r3, [r4, #20]
 80047e4:	9b01      	ldr	r3, [sp, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <__smakebuf_r+0x7a>
 80047ea:	230e      	movs	r3, #14
 80047ec:	5ee1      	ldrsh	r1, [r4, r3]
 80047ee:	0028      	movs	r0, r5
 80047f0:	f000 f94e 	bl	8004a90 <_isatty_r>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d006      	beq.n	8004806 <__smakebuf_r+0x7a>
 80047f8:	2203      	movs	r2, #3
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	4393      	bics	r3, r2
 80047fe:	001a      	movs	r2, r3
 8004800:	2301      	movs	r3, #1
 8004802:	4313      	orrs	r3, r2
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	89a0      	ldrh	r0, [r4, #12]
 8004808:	4338      	orrs	r0, r7
 800480a:	81a0      	strh	r0, [r4, #12]
 800480c:	e7cb      	b.n	80047a6 <__smakebuf_r+0x1a>
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	080045d9 	.word	0x080045d9

08004814 <_free_r>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	0005      	movs	r5, r0
 8004818:	2900      	cmp	r1, #0
 800481a:	d010      	beq.n	800483e <_free_r+0x2a>
 800481c:	1f0c      	subs	r4, r1, #4
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	da00      	bge.n	8004826 <_free_r+0x12>
 8004824:	18e4      	adds	r4, r4, r3
 8004826:	0028      	movs	r0, r5
 8004828:	f000 f958 	bl	8004adc <__malloc_lock>
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <_free_r+0x90>)
 800482e:	6813      	ldr	r3, [r2, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <_free_r+0x2c>
 8004834:	6063      	str	r3, [r4, #4]
 8004836:	6014      	str	r4, [r2, #0]
 8004838:	0028      	movs	r0, r5
 800483a:	f000 f950 	bl	8004ade <__malloc_unlock>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	42a3      	cmp	r3, r4
 8004842:	d909      	bls.n	8004858 <_free_r+0x44>
 8004844:	6821      	ldr	r1, [r4, #0]
 8004846:	1860      	adds	r0, r4, r1
 8004848:	4283      	cmp	r3, r0
 800484a:	d1f3      	bne.n	8004834 <_free_r+0x20>
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	1841      	adds	r1, r0, r1
 8004852:	6021      	str	r1, [r4, #0]
 8004854:	e7ee      	b.n	8004834 <_free_r+0x20>
 8004856:	0013      	movs	r3, r2
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	2a00      	cmp	r2, #0
 800485c:	d001      	beq.n	8004862 <_free_r+0x4e>
 800485e:	42a2      	cmp	r2, r4
 8004860:	d9f9      	bls.n	8004856 <_free_r+0x42>
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	1858      	adds	r0, r3, r1
 8004866:	42a0      	cmp	r0, r4
 8004868:	d10b      	bne.n	8004882 <_free_r+0x6e>
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	1809      	adds	r1, r1, r0
 800486e:	1858      	adds	r0, r3, r1
 8004870:	6019      	str	r1, [r3, #0]
 8004872:	4282      	cmp	r2, r0
 8004874:	d1e0      	bne.n	8004838 <_free_r+0x24>
 8004876:	6810      	ldr	r0, [r2, #0]
 8004878:	6852      	ldr	r2, [r2, #4]
 800487a:	1841      	adds	r1, r0, r1
 800487c:	6019      	str	r1, [r3, #0]
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	e7da      	b.n	8004838 <_free_r+0x24>
 8004882:	42a0      	cmp	r0, r4
 8004884:	d902      	bls.n	800488c <_free_r+0x78>
 8004886:	230c      	movs	r3, #12
 8004888:	602b      	str	r3, [r5, #0]
 800488a:	e7d5      	b.n	8004838 <_free_r+0x24>
 800488c:	6821      	ldr	r1, [r4, #0]
 800488e:	1860      	adds	r0, r4, r1
 8004890:	4282      	cmp	r2, r0
 8004892:	d103      	bne.n	800489c <_free_r+0x88>
 8004894:	6810      	ldr	r0, [r2, #0]
 8004896:	6852      	ldr	r2, [r2, #4]
 8004898:	1841      	adds	r1, r0, r1
 800489a:	6021      	str	r1, [r4, #0]
 800489c:	6062      	str	r2, [r4, #4]
 800489e:	605c      	str	r4, [r3, #4]
 80048a0:	e7ca      	b.n	8004838 <_free_r+0x24>
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	200000b0 	.word	0x200000b0

080048a8 <_malloc_r>:
 80048a8:	2303      	movs	r3, #3
 80048aa:	b570      	push	{r4, r5, r6, lr}
 80048ac:	1ccd      	adds	r5, r1, #3
 80048ae:	439d      	bics	r5, r3
 80048b0:	3508      	adds	r5, #8
 80048b2:	0006      	movs	r6, r0
 80048b4:	2d0c      	cmp	r5, #12
 80048b6:	d21e      	bcs.n	80048f6 <_malloc_r+0x4e>
 80048b8:	250c      	movs	r5, #12
 80048ba:	42a9      	cmp	r1, r5
 80048bc:	d81d      	bhi.n	80048fa <_malloc_r+0x52>
 80048be:	0030      	movs	r0, r6
 80048c0:	f000 f90c 	bl	8004adc <__malloc_lock>
 80048c4:	4a25      	ldr	r2, [pc, #148]	; (800495c <_malloc_r+0xb4>)
 80048c6:	6814      	ldr	r4, [r2, #0]
 80048c8:	0021      	movs	r1, r4
 80048ca:	2900      	cmp	r1, #0
 80048cc:	d119      	bne.n	8004902 <_malloc_r+0x5a>
 80048ce:	4c24      	ldr	r4, [pc, #144]	; (8004960 <_malloc_r+0xb8>)
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d103      	bne.n	80048de <_malloc_r+0x36>
 80048d6:	0030      	movs	r0, r6
 80048d8:	f000 f844 	bl	8004964 <_sbrk_r>
 80048dc:	6020      	str	r0, [r4, #0]
 80048de:	0029      	movs	r1, r5
 80048e0:	0030      	movs	r0, r6
 80048e2:	f000 f83f 	bl	8004964 <_sbrk_r>
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	d12b      	bne.n	8004942 <_malloc_r+0x9a>
 80048ea:	230c      	movs	r3, #12
 80048ec:	0030      	movs	r0, r6
 80048ee:	6033      	str	r3, [r6, #0]
 80048f0:	f000 f8f5 	bl	8004ade <__malloc_unlock>
 80048f4:	e003      	b.n	80048fe <_malloc_r+0x56>
 80048f6:	2d00      	cmp	r5, #0
 80048f8:	dadf      	bge.n	80048ba <_malloc_r+0x12>
 80048fa:	230c      	movs	r3, #12
 80048fc:	6033      	str	r3, [r6, #0]
 80048fe:	2000      	movs	r0, #0
 8004900:	bd70      	pop	{r4, r5, r6, pc}
 8004902:	680b      	ldr	r3, [r1, #0]
 8004904:	1b5b      	subs	r3, r3, r5
 8004906:	d419      	bmi.n	800493c <_malloc_r+0x94>
 8004908:	2b0b      	cmp	r3, #11
 800490a:	d903      	bls.n	8004914 <_malloc_r+0x6c>
 800490c:	600b      	str	r3, [r1, #0]
 800490e:	18cc      	adds	r4, r1, r3
 8004910:	6025      	str	r5, [r4, #0]
 8004912:	e003      	b.n	800491c <_malloc_r+0x74>
 8004914:	684b      	ldr	r3, [r1, #4]
 8004916:	428c      	cmp	r4, r1
 8004918:	d10d      	bne.n	8004936 <_malloc_r+0x8e>
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	0030      	movs	r0, r6
 800491e:	f000 f8de 	bl	8004ade <__malloc_unlock>
 8004922:	0020      	movs	r0, r4
 8004924:	2207      	movs	r2, #7
 8004926:	300b      	adds	r0, #11
 8004928:	1d23      	adds	r3, r4, #4
 800492a:	4390      	bics	r0, r2
 800492c:	1ac3      	subs	r3, r0, r3
 800492e:	d0e7      	beq.n	8004900 <_malloc_r+0x58>
 8004930:	425a      	negs	r2, r3
 8004932:	50e2      	str	r2, [r4, r3]
 8004934:	e7e4      	b.n	8004900 <_malloc_r+0x58>
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	000c      	movs	r4, r1
 800493a:	e7ef      	b.n	800491c <_malloc_r+0x74>
 800493c:	000c      	movs	r4, r1
 800493e:	6849      	ldr	r1, [r1, #4]
 8004940:	e7c3      	b.n	80048ca <_malloc_r+0x22>
 8004942:	2303      	movs	r3, #3
 8004944:	1cc4      	adds	r4, r0, #3
 8004946:	439c      	bics	r4, r3
 8004948:	42a0      	cmp	r0, r4
 800494a:	d0e1      	beq.n	8004910 <_malloc_r+0x68>
 800494c:	1a21      	subs	r1, r4, r0
 800494e:	0030      	movs	r0, r6
 8004950:	f000 f808 	bl	8004964 <_sbrk_r>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d1db      	bne.n	8004910 <_malloc_r+0x68>
 8004958:	e7c7      	b.n	80048ea <_malloc_r+0x42>
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	200000b0 	.word	0x200000b0
 8004960:	200000b4 	.word	0x200000b4

08004964 <_sbrk_r>:
 8004964:	2300      	movs	r3, #0
 8004966:	b570      	push	{r4, r5, r6, lr}
 8004968:	4c06      	ldr	r4, [pc, #24]	; (8004984 <_sbrk_r+0x20>)
 800496a:	0005      	movs	r5, r0
 800496c:	0008      	movs	r0, r1
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	f7ff fa8a 	bl	8003e88 <_sbrk>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	d103      	bne.n	8004980 <_sbrk_r+0x1c>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d000      	beq.n	8004980 <_sbrk_r+0x1c>
 800497e:	602b      	str	r3, [r5, #0]
 8004980:	bd70      	pop	{r4, r5, r6, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	200001b8 	.word	0x200001b8

08004988 <__sread>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	000c      	movs	r4, r1
 800498c:	250e      	movs	r5, #14
 800498e:	5f49      	ldrsh	r1, [r1, r5]
 8004990:	f000 f8a6 	bl	8004ae0 <_read_r>
 8004994:	2800      	cmp	r0, #0
 8004996:	db03      	blt.n	80049a0 <__sread+0x18>
 8004998:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800499a:	181b      	adds	r3, r3, r0
 800499c:	6563      	str	r3, [r4, #84]	; 0x54
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	4a02      	ldr	r2, [pc, #8]	; (80049ac <__sread+0x24>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	e7f9      	b.n	800499e <__sread+0x16>
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	ffffefff 	.word	0xffffefff

080049b0 <__swrite>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	001f      	movs	r7, r3
 80049b4:	898b      	ldrh	r3, [r1, #12]
 80049b6:	0005      	movs	r5, r0
 80049b8:	000c      	movs	r4, r1
 80049ba:	0016      	movs	r6, r2
 80049bc:	05db      	lsls	r3, r3, #23
 80049be:	d505      	bpl.n	80049cc <__swrite+0x1c>
 80049c0:	230e      	movs	r3, #14
 80049c2:	5ec9      	ldrsh	r1, [r1, r3]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2302      	movs	r3, #2
 80049c8:	f000 f874 	bl	8004ab4 <_lseek_r>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	4a05      	ldr	r2, [pc, #20]	; (80049e4 <__swrite+0x34>)
 80049d0:	0028      	movs	r0, r5
 80049d2:	4013      	ands	r3, r2
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	0032      	movs	r2, r6
 80049d8:	230e      	movs	r3, #14
 80049da:	5ee1      	ldrsh	r1, [r4, r3]
 80049dc:	003b      	movs	r3, r7
 80049de:	f000 f81f 	bl	8004a20 <_write_r>
 80049e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e4:	ffffefff 	.word	0xffffefff

080049e8 <__sseek>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	000c      	movs	r4, r1
 80049ec:	250e      	movs	r5, #14
 80049ee:	5f49      	ldrsh	r1, [r1, r5]
 80049f0:	f000 f860 	bl	8004ab4 <_lseek_r>
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	1c42      	adds	r2, r0, #1
 80049f8:	d103      	bne.n	8004a02 <__sseek+0x1a>
 80049fa:	4a05      	ldr	r2, [pc, #20]	; (8004a10 <__sseek+0x28>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	81a3      	strh	r3, [r4, #12]
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
 8004a02:	2280      	movs	r2, #128	; 0x80
 8004a04:	0152      	lsls	r2, r2, #5
 8004a06:	4313      	orrs	r3, r2
 8004a08:	81a3      	strh	r3, [r4, #12]
 8004a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8004a0c:	e7f8      	b.n	8004a00 <__sseek+0x18>
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	ffffefff 	.word	0xffffefff

08004a14 <__sclose>:
 8004a14:	b510      	push	{r4, lr}
 8004a16:	230e      	movs	r3, #14
 8004a18:	5ec9      	ldrsh	r1, [r1, r3]
 8004a1a:	f000 f815 	bl	8004a48 <_close_r>
 8004a1e:	bd10      	pop	{r4, pc}

08004a20 <_write_r>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	0005      	movs	r5, r0
 8004a24:	0008      	movs	r0, r1
 8004a26:	0011      	movs	r1, r2
 8004a28:	2200      	movs	r2, #0
 8004a2a:	4c06      	ldr	r4, [pc, #24]	; (8004a44 <_write_r+0x24>)
 8004a2c:	6022      	str	r2, [r4, #0]
 8004a2e:	001a      	movs	r2, r3
 8004a30:	f7fe fca4 	bl	800337c <_write>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d103      	bne.n	8004a40 <_write_r+0x20>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d000      	beq.n	8004a40 <_write_r+0x20>
 8004a3e:	602b      	str	r3, [r5, #0]
 8004a40:	bd70      	pop	{r4, r5, r6, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	200001b8 	.word	0x200001b8

08004a48 <_close_r>:
 8004a48:	2300      	movs	r3, #0
 8004a4a:	b570      	push	{r4, r5, r6, lr}
 8004a4c:	4c06      	ldr	r4, [pc, #24]	; (8004a68 <_close_r+0x20>)
 8004a4e:	0005      	movs	r5, r0
 8004a50:	0008      	movs	r0, r1
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	f7ff f9eb 	bl	8003e2e <_close>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d103      	bne.n	8004a64 <_close_r+0x1c>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d000      	beq.n	8004a64 <_close_r+0x1c>
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	bd70      	pop	{r4, r5, r6, pc}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	200001b8 	.word	0x200001b8

08004a6c <_fstat_r>:
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	b570      	push	{r4, r5, r6, lr}
 8004a70:	4c06      	ldr	r4, [pc, #24]	; (8004a8c <_fstat_r+0x20>)
 8004a72:	0005      	movs	r5, r0
 8004a74:	0008      	movs	r0, r1
 8004a76:	0011      	movs	r1, r2
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	f7ff f9e2 	bl	8003e42 <_fstat>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	d103      	bne.n	8004a8a <_fstat_r+0x1e>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d000      	beq.n	8004a8a <_fstat_r+0x1e>
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	200001b8 	.word	0x200001b8

08004a90 <_isatty_r>:
 8004a90:	2300      	movs	r3, #0
 8004a92:	b570      	push	{r4, r5, r6, lr}
 8004a94:	4c06      	ldr	r4, [pc, #24]	; (8004ab0 <_isatty_r+0x20>)
 8004a96:	0005      	movs	r5, r0
 8004a98:	0008      	movs	r0, r1
 8004a9a:	6023      	str	r3, [r4, #0]
 8004a9c:	f7ff f9df 	bl	8003e5e <_isatty>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d103      	bne.n	8004aac <_isatty_r+0x1c>
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d000      	beq.n	8004aac <_isatty_r+0x1c>
 8004aaa:	602b      	str	r3, [r5, #0]
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	200001b8 	.word	0x200001b8

08004ab4 <_lseek_r>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	0005      	movs	r5, r0
 8004ab8:	0008      	movs	r0, r1
 8004aba:	0011      	movs	r1, r2
 8004abc:	2200      	movs	r2, #0
 8004abe:	4c06      	ldr	r4, [pc, #24]	; (8004ad8 <_lseek_r+0x24>)
 8004ac0:	6022      	str	r2, [r4, #0]
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	f7ff f9d4 	bl	8003e70 <_lseek>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d103      	bne.n	8004ad4 <_lseek_r+0x20>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d000      	beq.n	8004ad4 <_lseek_r+0x20>
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	bd70      	pop	{r4, r5, r6, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	200001b8 	.word	0x200001b8

08004adc <__malloc_lock>:
 8004adc:	4770      	bx	lr

08004ade <__malloc_unlock>:
 8004ade:	4770      	bx	lr

08004ae0 <_read_r>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	0005      	movs	r5, r0
 8004ae4:	0008      	movs	r0, r1
 8004ae6:	0011      	movs	r1, r2
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4c06      	ldr	r4, [pc, #24]	; (8004b04 <_read_r+0x24>)
 8004aec:	6022      	str	r2, [r4, #0]
 8004aee:	001a      	movs	r2, r3
 8004af0:	f7ff f980 	bl	8003df4 <_read>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d103      	bne.n	8004b00 <_read_r+0x20>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d000      	beq.n	8004b00 <_read_r+0x20>
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	200001b8 	.word	0x200001b8

08004b08 <_init>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr

08004b14 <_fini>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr
