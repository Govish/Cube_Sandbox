
i2c_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800399c  0800399c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800399c  0800399c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800399c  0800399c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080039a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000068  08003a0c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003a0c  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eefc  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002006  00000000  00000000  0002ef8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  000318c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017aa7  00000000  00000000  00032110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a6f0  00000000  00000000  00049bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ad8  00000000  00000000  000542a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ccd7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  000ccdfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003868 	.word	0x08003868

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003868 	.word	0x08003868

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 f9a9 	bl	800258c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 faf2 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8c9 	bl	80003fa <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8ad 	bl	80003d0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000090 	.word	0x20000090

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000090 	.word	0x20000090

080002ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b7f      	cmp	r3, #127	; 0x7f
 80002c0:	d932      	bls.n	8000328 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c2:	4a2f      	ldr	r2, [pc, #188]	; (8000380 <NVIC_SetPriority+0xd4>)
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	0019      	movs	r1, r3
 80002ca:	230f      	movs	r3, #15
 80002cc:	400b      	ands	r3, r1
 80002ce:	3b08      	subs	r3, #8
 80002d0:	089b      	lsrs	r3, r3, #2
 80002d2:	3306      	adds	r3, #6
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	18d3      	adds	r3, r2, r3
 80002d8:	3304      	adds	r3, #4
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	1dfa      	adds	r2, r7, #7
 80002de:	7812      	ldrb	r2, [r2, #0]
 80002e0:	0011      	movs	r1, r2
 80002e2:	2203      	movs	r2, #3
 80002e4:	400a      	ands	r2, r1
 80002e6:	00d2      	lsls	r2, r2, #3
 80002e8:	21ff      	movs	r1, #255	; 0xff
 80002ea:	4091      	lsls	r1, r2
 80002ec:	000a      	movs	r2, r1
 80002ee:	43d2      	mvns	r2, r2
 80002f0:	401a      	ands	r2, r3
 80002f2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	019b      	lsls	r3, r3, #6
 80002f8:	22ff      	movs	r2, #255	; 0xff
 80002fa:	401a      	ands	r2, r3
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	0018      	movs	r0, r3
 8000302:	2303      	movs	r3, #3
 8000304:	4003      	ands	r3, r0
 8000306:	00db      	lsls	r3, r3, #3
 8000308:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030a:	481d      	ldr	r0, [pc, #116]	; (8000380 <NVIC_SetPriority+0xd4>)
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	001c      	movs	r4, r3
 8000312:	230f      	movs	r3, #15
 8000314:	4023      	ands	r3, r4
 8000316:	3b08      	subs	r3, #8
 8000318:	089b      	lsrs	r3, r3, #2
 800031a:	430a      	orrs	r2, r1
 800031c:	3306      	adds	r3, #6
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	18c3      	adds	r3, r0, r3
 8000322:	3304      	adds	r3, #4
 8000324:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000326:	e027      	b.n	8000378 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	4a16      	ldr	r2, [pc, #88]	; (8000384 <NVIC_SetPriority+0xd8>)
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b25b      	sxtb	r3, r3
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	33c0      	adds	r3, #192	; 0xc0
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	589b      	ldr	r3, [r3, r2]
 8000338:	1dfa      	adds	r2, r7, #7
 800033a:	7812      	ldrb	r2, [r2, #0]
 800033c:	0011      	movs	r1, r2
 800033e:	2203      	movs	r2, #3
 8000340:	400a      	ands	r2, r1
 8000342:	00d2      	lsls	r2, r2, #3
 8000344:	21ff      	movs	r1, #255	; 0xff
 8000346:	4091      	lsls	r1, r2
 8000348:	000a      	movs	r2, r1
 800034a:	43d2      	mvns	r2, r2
 800034c:	401a      	ands	r2, r3
 800034e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	019b      	lsls	r3, r3, #6
 8000354:	22ff      	movs	r2, #255	; 0xff
 8000356:	401a      	ands	r2, r3
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	0018      	movs	r0, r3
 800035e:	2303      	movs	r3, #3
 8000360:	4003      	ands	r3, r0
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000366:	4807      	ldr	r0, [pc, #28]	; (8000384 <NVIC_SetPriority+0xd8>)
 8000368:	1dfb      	adds	r3, r7, #7
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b25b      	sxtb	r3, r3
 800036e:	089b      	lsrs	r3, r3, #2
 8000370:	430a      	orrs	r2, r1
 8000372:	33c0      	adds	r3, #192	; 0xc0
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	501a      	str	r2, [r3, r0]
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b003      	add	sp, #12
 800037e:	bd90      	pop	{r4, r7, pc}
 8000380:	e000ed00 	.word	0xe000ed00
 8000384:	e000e100 	.word	0xe000e100

08000388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <SysTick_Config+0x40>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d901      	bls.n	800039e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800039a:	2301      	movs	r3, #1
 800039c:	e010      	b.n	80003c0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <SysTick_Config+0x44>)
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	3a01      	subs	r2, #1
 80003a4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a6:	2301      	movs	r3, #1
 80003a8:	425b      	negs	r3, r3
 80003aa:	2103      	movs	r1, #3
 80003ac:	0018      	movs	r0, r3
 80003ae:	f7ff ff7d 	bl	80002ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <SysTick_Config+0x44>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <SysTick_Config+0x44>)
 80003ba:	2207      	movs	r2, #7
 80003bc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003be:	2300      	movs	r3, #0
}
 80003c0:	0018      	movs	r0, r3
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	00ffffff 	.word	0x00ffffff
 80003cc:	e000e010 	.word	0xe000e010

080003d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
 80003da:	210f      	movs	r1, #15
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	1c02      	adds	r2, r0, #0
 80003e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	b25b      	sxtb	r3, r3
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f7ff ff5d 	bl	80002ac <NVIC_SetPriority>
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b004      	add	sp, #16
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b082      	sub	sp, #8
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	0018      	movs	r0, r3
 8000406:	f7ff ffbf 	bl	8000388 <SysTick_Config>
 800040a:	0003      	movs	r3, r0
}
 800040c:	0018      	movs	r0, r3
 800040e:	46bd      	mov	sp, r7
 8000410:	b002      	add	sp, #8
 8000412:	bd80      	pop	{r7, pc}

08000414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800042a:	e155      	b.n	80006d8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2101      	movs	r1, #1
 8000432:	697a      	ldr	r2, [r7, #20]
 8000434:	4091      	lsls	r1, r2
 8000436:	000a      	movs	r2, r1
 8000438:	4013      	ands	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d100      	bne.n	8000444 <HAL_GPIO_Init+0x30>
 8000442:	e146      	b.n	80006d2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	2b02      	cmp	r3, #2
 800044a:	d003      	beq.n	8000454 <HAL_GPIO_Init+0x40>
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	2b12      	cmp	r3, #18
 8000452:	d123      	bne.n	800049c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	08da      	lsrs	r2, r3, #3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3208      	adds	r2, #8
 800045c:	0092      	lsls	r2, r2, #2
 800045e:	58d3      	ldr	r3, [r2, r3]
 8000460:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	2207      	movs	r2, #7
 8000466:	4013      	ands	r3, r2
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	220f      	movs	r2, #15
 800046c:	409a      	lsls	r2, r3
 800046e:	0013      	movs	r3, r2
 8000470:	43da      	mvns	r2, r3
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	4013      	ands	r3, r2
 8000476:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	691a      	ldr	r2, [r3, #16]
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	2107      	movs	r1, #7
 8000480:	400b      	ands	r3, r1
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	409a      	lsls	r2, r3
 8000486:	0013      	movs	r3, r2
 8000488:	693a      	ldr	r2, [r7, #16]
 800048a:	4313      	orrs	r3, r2
 800048c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	08da      	lsrs	r2, r3, #3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	3208      	adds	r2, #8
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	6939      	ldr	r1, [r7, #16]
 800049a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	2203      	movs	r2, #3
 80004a8:	409a      	lsls	r2, r3
 80004aa:	0013      	movs	r3, r2
 80004ac:	43da      	mvns	r2, r3
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	4013      	ands	r3, r2
 80004b2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	2203      	movs	r2, #3
 80004ba:	401a      	ands	r2, r3
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	409a      	lsls	r2, r3
 80004c2:	0013      	movs	r3, r2
 80004c4:	693a      	ldr	r2, [r7, #16]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	693a      	ldr	r2, [r7, #16]
 80004ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d00b      	beq.n	80004f0 <HAL_GPIO_Init+0xdc>
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d007      	beq.n	80004f0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004e4:	2b11      	cmp	r3, #17
 80004e6:	d003      	beq.n	80004f0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	2b12      	cmp	r3, #18
 80004ee:	d130      	bne.n	8000552 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	2203      	movs	r2, #3
 80004fc:	409a      	lsls	r2, r3
 80004fe:	0013      	movs	r3, r2
 8000500:	43da      	mvns	r2, r3
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	4013      	ands	r3, r2
 8000506:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	68da      	ldr	r2, [r3, #12]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	409a      	lsls	r2, r3
 8000512:	0013      	movs	r3, r2
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	4313      	orrs	r3, r2
 8000518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000526:	2201      	movs	r2, #1
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	409a      	lsls	r2, r3
 800052c:	0013      	movs	r3, r2
 800052e:	43da      	mvns	r2, r3
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	4013      	ands	r3, r2
 8000534:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	091b      	lsrs	r3, r3, #4
 800053c:	2201      	movs	r2, #1
 800053e:	401a      	ands	r2, r3
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	409a      	lsls	r2, r3
 8000544:	0013      	movs	r3, r2
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	4313      	orrs	r3, r2
 800054a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	2203      	movs	r2, #3
 800055e:	409a      	lsls	r2, r3
 8000560:	0013      	movs	r3, r2
 8000562:	43da      	mvns	r2, r3
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	4013      	ands	r3, r2
 8000568:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	689a      	ldr	r2, [r3, #8]
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	409a      	lsls	r2, r3
 8000574:	0013      	movs	r3, r2
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	4313      	orrs	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	055b      	lsls	r3, r3, #21
 800058a:	4013      	ands	r3, r2
 800058c:	d100      	bne.n	8000590 <HAL_GPIO_Init+0x17c>
 800058e:	e0a0      	b.n	80006d2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000590:	4b57      	ldr	r3, [pc, #348]	; (80006f0 <HAL_GPIO_Init+0x2dc>)
 8000592:	699a      	ldr	r2, [r3, #24]
 8000594:	4b56      	ldr	r3, [pc, #344]	; (80006f0 <HAL_GPIO_Init+0x2dc>)
 8000596:	2101      	movs	r1, #1
 8000598:	430a      	orrs	r2, r1
 800059a:	619a      	str	r2, [r3, #24]
 800059c:	4b54      	ldr	r3, [pc, #336]	; (80006f0 <HAL_GPIO_Init+0x2dc>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	2201      	movs	r2, #1
 80005a2:	4013      	ands	r3, r2
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005a8:	4a52      	ldr	r2, [pc, #328]	; (80006f4 <HAL_GPIO_Init+0x2e0>)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	089b      	lsrs	r3, r3, #2
 80005ae:	3302      	adds	r3, #2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	589b      	ldr	r3, [r3, r2]
 80005b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2203      	movs	r2, #3
 80005ba:	4013      	ands	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	220f      	movs	r2, #15
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0013      	movs	r3, r2
 80005c4:	43da      	mvns	r2, r3
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	4013      	ands	r3, r2
 80005ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	2390      	movs	r3, #144	; 0x90
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d019      	beq.n	800060a <HAL_GPIO_Init+0x1f6>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a47      	ldr	r2, [pc, #284]	; (80006f8 <HAL_GPIO_Init+0x2e4>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d013      	beq.n	8000606 <HAL_GPIO_Init+0x1f2>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a46      	ldr	r2, [pc, #280]	; (80006fc <HAL_GPIO_Init+0x2e8>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d00d      	beq.n	8000602 <HAL_GPIO_Init+0x1ee>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a45      	ldr	r2, [pc, #276]	; (8000700 <HAL_GPIO_Init+0x2ec>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d007      	beq.n	80005fe <HAL_GPIO_Init+0x1ea>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a44      	ldr	r2, [pc, #272]	; (8000704 <HAL_GPIO_Init+0x2f0>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d101      	bne.n	80005fa <HAL_GPIO_Init+0x1e6>
 80005f6:	2304      	movs	r3, #4
 80005f8:	e008      	b.n	800060c <HAL_GPIO_Init+0x1f8>
 80005fa:	2305      	movs	r3, #5
 80005fc:	e006      	b.n	800060c <HAL_GPIO_Init+0x1f8>
 80005fe:	2303      	movs	r3, #3
 8000600:	e004      	b.n	800060c <HAL_GPIO_Init+0x1f8>
 8000602:	2302      	movs	r3, #2
 8000604:	e002      	b.n	800060c <HAL_GPIO_Init+0x1f8>
 8000606:	2301      	movs	r3, #1
 8000608:	e000      	b.n	800060c <HAL_GPIO_Init+0x1f8>
 800060a:	2300      	movs	r3, #0
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	2103      	movs	r1, #3
 8000610:	400a      	ands	r2, r1
 8000612:	0092      	lsls	r2, r2, #2
 8000614:	4093      	lsls	r3, r2
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	4313      	orrs	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800061c:	4935      	ldr	r1, [pc, #212]	; (80006f4 <HAL_GPIO_Init+0x2e0>)
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	3302      	adds	r3, #2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800062a:	4b37      	ldr	r3, [pc, #220]	; (8000708 <HAL_GPIO_Init+0x2f4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	43da      	mvns	r2, r3
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	4013      	ands	r3, r2
 8000638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	025b      	lsls	r3, r3, #9
 8000642:	4013      	ands	r3, r2
 8000644:	d003      	beq.n	800064e <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4313      	orrs	r3, r2
 800064c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800064e:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <HAL_GPIO_Init+0x2f4>)
 8000650:	693a      	ldr	r2, [r7, #16]
 8000652:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <HAL_GPIO_Init+0x2f4>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	43da      	mvns	r2, r3
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	4013      	ands	r3, r2
 8000662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	029b      	lsls	r3, r3, #10
 800066c:	4013      	ands	r3, r2
 800066e:	d003      	beq.n	8000678 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8000670:	693a      	ldr	r2, [r7, #16]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <HAL_GPIO_Init+0x2f4>)
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <HAL_GPIO_Init+0x2f4>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	43da      	mvns	r2, r3
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	4013      	ands	r3, r2
 800068c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	035b      	lsls	r3, r3, #13
 8000696:	4013      	ands	r3, r2
 8000698:	d003      	beq.n	80006a2 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4313      	orrs	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_GPIO_Init+0x2f4>)
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <HAL_GPIO_Init+0x2f4>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	43da      	mvns	r2, r3
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	685a      	ldr	r2, [r3, #4]
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	039b      	lsls	r3, r3, #14
 80006c0:	4013      	ands	r3, r2
 80006c2:	d003      	beq.n	80006cc <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 80006c4:	693a      	ldr	r2, [r7, #16]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <HAL_GPIO_Init+0x2f4>)
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	40da      	lsrs	r2, r3
 80006e0:	1e13      	subs	r3, r2, #0
 80006e2:	d000      	beq.n	80006e6 <HAL_GPIO_Init+0x2d2>
 80006e4:	e6a2      	b.n	800042c <HAL_GPIO_Init+0x18>
  } 
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b006      	add	sp, #24
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010000 	.word	0x40010000
 80006f8:	48000400 	.word	0x48000400
 80006fc:	48000800 	.word	0x48000800
 8000700:	48000c00 	.word	0x48000c00
 8000704:	48001000 	.word	0x48001000
 8000708:	40010400 	.word	0x40010400

0800070c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d101      	bne.n	800071e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e082      	b.n	8000824 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2241      	movs	r2, #65	; 0x41
 8000722:	5c9b      	ldrb	r3, [r3, r2]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d107      	bne.n	800073a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2240      	movs	r2, #64	; 0x40
 800072e:	2100      	movs	r1, #0
 8000730:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	0018      	movs	r0, r3
 8000736:	f001 ff4d 	bl	80025d4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2241      	movs	r2, #65	; 0x41
 800073e:	2124      	movs	r1, #36	; 0x24
 8000740:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2101      	movs	r1, #1
 800074e:	438a      	bics	r2, r1
 8000750:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685a      	ldr	r2, [r3, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4934      	ldr	r1, [pc, #208]	; (800082c <HAL_I2C_Init+0x120>)
 800075c:	400a      	ands	r2, r1
 800075e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4931      	ldr	r1, [pc, #196]	; (8000830 <HAL_I2C_Init+0x124>)
 800076c:	400a      	ands	r2, r1
 800076e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d108      	bne.n	800078a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0209      	lsls	r1, r1, #8
 8000784:	430a      	orrs	r2, r1
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	e007      	b.n	800079a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2184      	movs	r1, #132	; 0x84
 8000794:	0209      	lsls	r1, r1, #8
 8000796:	430a      	orrs	r2, r1
 8000798:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d104      	bne.n	80007ac <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	0112      	lsls	r2, r2, #4
 80007aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	491f      	ldr	r1, [pc, #124]	; (8000834 <HAL_I2C_Init+0x128>)
 80007b8:	430a      	orrs	r2, r1
 80007ba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68da      	ldr	r2, [r3, #12]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	491a      	ldr	r1, [pc, #104]	; (8000830 <HAL_I2C_Init+0x124>)
 80007c8:	400a      	ands	r2, r1
 80007ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	691a      	ldr	r2, [r3, #16]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	431a      	orrs	r2, r3
 80007d6:	0011      	movs	r1, r2
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	021a      	lsls	r2, r3, #8
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	69d9      	ldr	r1, [r3, #28]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6a1a      	ldr	r2, [r3, #32]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	430a      	orrs	r2, r1
 80007f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2101      	movs	r1, #1
 8000802:	430a      	orrs	r2, r1
 8000804:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2241      	movs	r2, #65	; 0x41
 8000810:	2120      	movs	r1, #32
 8000812:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2242      	movs	r2, #66	; 0x42
 800081e:	2100      	movs	r1, #0
 8000820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000822:	2300      	movs	r3, #0
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}
 800082c:	f0ffffff 	.word	0xf0ffffff
 8000830:	ffff7fff 	.word	0xffff7fff
 8000834:	02008000 	.word	0x02008000

08000838 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af02      	add	r7, sp, #8
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	0008      	movs	r0, r1
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	0019      	movs	r1, r3
 8000846:	230a      	movs	r3, #10
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	1c02      	adds	r2, r0, #0
 800084c:	801a      	strh	r2, [r3, #0]
 800084e:	2308      	movs	r3, #8
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	1c0a      	adds	r2, r1, #0
 8000854:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2241      	movs	r2, #65	; 0x41
 800085e:	5c9b      	ldrb	r3, [r3, r2]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b20      	cmp	r3, #32
 8000864:	d000      	beq.n	8000868 <HAL_I2C_Master_Transmit+0x30>
 8000866:	e0f3      	b.n	8000a50 <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2240      	movs	r2, #64	; 0x40
 800086c:	5c9b      	ldrb	r3, [r3, r2]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d101      	bne.n	8000876 <HAL_I2C_Master_Transmit+0x3e>
 8000872:	2302      	movs	r3, #2
 8000874:	e0ed      	b.n	8000a52 <HAL_I2C_Master_Transmit+0x21a>
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	2101      	movs	r1, #1
 800087c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800087e:	f7ff fd0b 	bl	8000298 <HAL_GetTick>
 8000882:	0003      	movs	r3, r0
 8000884:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	0219      	lsls	r1, r3, #8
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2319      	movs	r3, #25
 8000892:	2201      	movs	r2, #1
 8000894:	f000 f906 	bl	8000aa4 <I2C_WaitOnFlagUntilTimeout>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 800089c:	2303      	movs	r3, #3
 800089e:	e0d8      	b.n	8000a52 <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2241      	movs	r2, #65	; 0x41
 80008a4:	2121      	movs	r1, #33	; 0x21
 80008a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2242      	movs	r2, #66	; 0x42
 80008ac:	2110      	movs	r1, #16
 80008ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2200      	movs	r2, #0
 80008b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2208      	movs	r2, #8
 80008c0:	18ba      	adds	r2, r7, r2
 80008c2:	8812      	ldrh	r2, [r2, #0]
 80008c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2200      	movs	r2, #0
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	2bff      	cmp	r3, #255	; 0xff
 80008d4:	d912      	bls.n	80008fc <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	22ff      	movs	r2, #255	; 0xff
 80008da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	045c      	lsls	r4, r3, #17
 80008e6:	230a      	movs	r3, #10
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	8819      	ldrh	r1, [r3, #0]
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	019b      	lsls	r3, r3, #6
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	0023      	movs	r3, r4
 80008f6:	f000 f9e7 	bl	8000cc8 <I2C_TransferConfig>
 80008fa:	e07a      	b.n	80009f2 <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000900:	b29a      	uxth	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800090a:	b2da      	uxtb	r2, r3
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	049c      	lsls	r4, r3, #18
 8000910:	230a      	movs	r3, #10
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	8819      	ldrh	r1, [r3, #0]
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	019b      	lsls	r3, r3, #6
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	0023      	movs	r3, r4
 8000920:	f000 f9d2 	bl	8000cc8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000924:	e065      	b.n	80009f2 <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	0018      	movs	r0, r3
 800092e:	f000 f8f2 	bl	8000b16 <I2C_WaitOnTXISFlagUntilTimeout>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d007      	beq.n	8000946 <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	2b04      	cmp	r3, #4
 800093c:	d101      	bne.n	8000942 <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e087      	b.n	8000a52 <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000942:	2303      	movs	r3, #3
 8000944:	e085      	b.n	8000a52 <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	1c59      	adds	r1, r3, #1
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	6251      	str	r1, [r2, #36]	; 0x24
 8000950:	781a      	ldrb	r2, [r3, #0]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800095c:	b29b      	uxth	r3, r3
 800095e:	3b01      	subs	r3, #1
 8000960:	b29a      	uxth	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800096a:	3b01      	subs	r3, #1
 800096c:	b29a      	uxth	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000976:	2b00      	cmp	r3, #0
 8000978:	d13b      	bne.n	80009f2 <HAL_I2C_Master_Transmit+0x1ba>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800097e:	b29b      	uxth	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d036      	beq.n	80009f2 <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	0013      	movs	r3, r2
 800098e:	2200      	movs	r2, #0
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	f000 f887 	bl	8000aa4 <I2C_WaitOnFlagUntilTimeout>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 800099a:	2303      	movs	r3, #3
 800099c:	e059      	b.n	8000a52 <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	2bff      	cmp	r3, #255	; 0xff
 80009a6:	d911      	bls.n	80009cc <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	045c      	lsls	r4, r3, #17
 80009b8:	230a      	movs	r3, #10
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	8819      	ldrh	r1, [r3, #0]
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	2300      	movs	r3, #0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	0023      	movs	r3, r4
 80009c6:	f000 f97f 	bl	8000cc8 <I2C_TransferConfig>
 80009ca:	e012      	b.n	80009f2 <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	049c      	lsls	r4, r3, #18
 80009e0:	230a      	movs	r3, #10
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	8819      	ldrh	r1, [r3, #0]
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	2300      	movs	r3, #0
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	0023      	movs	r3, r4
 80009ee:	f000 f96b 	bl	8000cc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d194      	bne.n	8000926 <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 f8c6 	bl	8000b94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d007      	beq.n	8000a1c <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d101      	bne.n	8000a18 <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e01c      	b.n	8000a52 <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	e01a      	b.n	8000a52 <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2220      	movs	r2, #32
 8000a22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	490b      	ldr	r1, [pc, #44]	; (8000a5c <HAL_I2C_Master_Transmit+0x224>)
 8000a30:	400a      	ands	r2, r1
 8000a32:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2241      	movs	r2, #65	; 0x41
 8000a38:	2120      	movs	r1, #32
 8000a3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2242      	movs	r2, #66	; 0x42
 8000a40:	2100      	movs	r1, #0
 8000a42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2240      	movs	r2, #64	; 0x40
 8000a48:	2100      	movs	r1, #0
 8000a4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e000      	b.n	8000a52 <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8000a50:	2302      	movs	r3, #2
  }
}
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b007      	add	sp, #28
 8000a58:	bd90      	pop	{r4, r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	fe00e800 	.word	0xfe00e800

08000a60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	2202      	movs	r2, #2
 8000a70:	4013      	ands	r3, r2
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d103      	bne.n	8000a7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	2201      	movs	r2, #1
 8000a86:	4013      	ands	r3, r2
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d007      	beq.n	8000a9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	699a      	ldr	r2, [r3, #24]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2101      	movs	r1, #1
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	619a      	str	r2, [r3, #24]
  }
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ab4:	e01b      	b.n	8000aee <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	d018      	beq.n	8000aee <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000ac2:	f7ff fbe9 	bl	8000298 <HAL_GetTick>
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d20d      	bcs.n	8000aee <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2241      	movs	r2, #65	; 0x41
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2242      	movs	r2, #66	; 0x42
 8000ade:	2100      	movs	r1, #0
 8000ae0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2240      	movs	r2, #64	; 0x40
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000aea:	2303      	movs	r3, #3
 8000aec:	e00f      	b.n	8000b0e <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	68ba      	ldr	r2, [r7, #8]
 8000af6:	4013      	ands	r3, r2
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	425a      	negs	r2, r3
 8000afe:	4153      	adcs	r3, r2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	001a      	movs	r2, r3
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d0d4      	beq.n	8000ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b004      	add	sp, #16
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b084      	sub	sp, #16
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000b22:	e02b      	b.n	8000b7c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	68b9      	ldr	r1, [r7, #8]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f86e 	bl	8000c0c <I2C_IsAcknowledgeFailed>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e029      	b.n	8000b8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	d01e      	beq.n	8000b7c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d007      	beq.n	8000b54 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8000b44:	f7ff fba8 	bl	8000298 <HAL_GetTick>
 8000b48:	0002      	movs	r2, r0
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d213      	bcs.n	8000b7c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b58:	2220      	movs	r2, #32
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2241      	movs	r2, #65	; 0x41
 8000b64:	2120      	movs	r1, #32
 8000b66:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2242      	movs	r2, #66	; 0x42
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2240      	movs	r2, #64	; 0x40
 8000b74:	2100      	movs	r1, #0
 8000b76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e007      	b.n	8000b8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	2202      	movs	r2, #2
 8000b84:	4013      	ands	r3, r2
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d1cc      	bne.n	8000b24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b004      	add	sp, #16
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ba0:	e028      	b.n	8000bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 f82f 	bl	8000c0c <I2C_IsAcknowledgeFailed>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e026      	b.n	8000c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d007      	beq.n	8000bcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000bbc:	f7ff fb6c 	bl	8000298 <HAL_GetTick>
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d213      	bcs.n	8000bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2241      	movs	r2, #65	; 0x41
 8000bdc:	2120      	movs	r1, #32
 8000bde:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2242      	movs	r2, #66	; 0x42
 8000be4:	2100      	movs	r1, #0
 8000be6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2240      	movs	r2, #64	; 0x40
 8000bec:	2100      	movs	r1, #0
 8000bee:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e007      	b.n	8000c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	2b20      	cmp	r3, #32
 8000c00:	d1cf      	bne.n	8000ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b004      	add	sp, #16
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	2210      	movs	r2, #16
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b10      	cmp	r3, #16
 8000c24:	d148      	bne.n	8000cb8 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c26:	e01b      	b.n	8000c60 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	d018      	beq.n	8000c60 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d007      	beq.n	8000c44 <I2C_IsAcknowledgeFailed+0x38>
 8000c34:	f7ff fb30 	bl	8000298 <HAL_GetTick>
 8000c38:	0002      	movs	r2, r0
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d20d      	bcs.n	8000c60 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2241      	movs	r2, #65	; 0x41
 8000c48:	2120      	movs	r1, #32
 8000c4a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2242      	movs	r2, #66	; 0x42
 8000c50:	2100      	movs	r1, #0
 8000c52:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2240      	movs	r2, #64	; 0x40
 8000c58:	2100      	movs	r1, #0
 8000c5a:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e02c      	b.n	8000cba <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	2220      	movs	r2, #32
 8000c68:	4013      	ands	r3, r2
 8000c6a:	2b20      	cmp	r3, #32
 8000c6c:	d1dc      	bne.n	8000c28 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2210      	movs	r2, #16
 8000c74:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff feed 	bl	8000a60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <I2C_IsAcknowledgeFailed+0xb8>)
 8000c92:	400a      	ands	r2, r1
 8000c94:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2241      	movs	r2, #65	; 0x41
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2242      	movs	r2, #66	; 0x42
 8000ca8:	2100      	movs	r1, #0
 8000caa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2240      	movs	r2, #64	; 0x40
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	fe00e800 	.word	0xfe00e800

08000cc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	0008      	movs	r0, r1
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	240a      	movs	r4, #10
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	1c02      	adds	r2, r0, #0
 8000cdc:	801a      	strh	r2, [r3, #0]
 8000cde:	2009      	movs	r0, #9
 8000ce0:	183b      	adds	r3, r7, r0
 8000ce2:	1c0a      	adds	r2, r1, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <I2C_TransferConfig+0x68>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	059b      	lsls	r3, r3, #22
 8000d00:	0d9a      	lsrs	r2, r3, #22
 8000d02:	183b      	adds	r3, r7, r0
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	0419      	lsls	r1, r3, #16
 8000d08:	23ff      	movs	r3, #255	; 0xff
 8000d0a:	041b      	lsls	r3, r3, #16
 8000d0c:	400b      	ands	r3, r1
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d16:	4313      	orrs	r3, r2
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	605a      	str	r2, [r3, #4]
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b007      	add	sp, #28
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	fc009800 	.word	0xfc009800

08000d34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2241      	movs	r2, #65	; 0x41
 8000d42:	5c9b      	ldrb	r3, [r3, r2]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b20      	cmp	r3, #32
 8000d48:	d138      	bne.n	8000dbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2240      	movs	r2, #64	; 0x40
 8000d4e:	5c9b      	ldrb	r3, [r3, r2]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d101      	bne.n	8000d58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e032      	b.n	8000dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2241      	movs	r2, #65	; 0x41
 8000d64:	2124      	movs	r1, #36	; 0x24
 8000d66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2101      	movs	r1, #1
 8000d74:	438a      	bics	r2, r1
 8000d76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4911      	ldr	r1, [pc, #68]	; (8000dc8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000d84:	400a      	ands	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2101      	movs	r1, #1
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2241      	movs	r2, #65	; 0x41
 8000dac:	2120      	movs	r1, #32
 8000dae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2240      	movs	r2, #64	; 0x40
 8000db4:	2100      	movs	r1, #0
 8000db6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	e000      	b.n	8000dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000dbc:	2302      	movs	r3, #2
  }
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	ffffefff 	.word	0xffffefff

08000dcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2241      	movs	r2, #65	; 0x41
 8000dde:	5c9b      	ldrb	r3, [r3, r2]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b20      	cmp	r3, #32
 8000de4:	d139      	bne.n	8000e5a <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2240      	movs	r2, #64	; 0x40
 8000dea:	5c9b      	ldrb	r3, [r3, r2]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d101      	bne.n	8000df4 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e033      	b.n	8000e5c <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2240      	movs	r2, #64	; 0x40
 8000df8:	2101      	movs	r1, #1
 8000dfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2241      	movs	r2, #65	; 0x41
 8000e00:	2124      	movs	r1, #36	; 0x24
 8000e02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2101      	movs	r1, #1
 8000e10:	438a      	bics	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2241      	movs	r2, #65	; 0x41
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2240      	movs	r2, #64	; 0x40
 8000e52:	2100      	movs	r1, #0
 8000e54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8000e5a:	2302      	movs	r3, #2
  }
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b004      	add	sp, #16
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	fffff0ff 	.word	0xfffff0ff

08000e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d100      	bne.n	8000e80 <HAL_RCC_OscConfig+0x18>
 8000e7e:	e08d      	b.n	8000f9c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e80:	4bc5      	ldr	r3, [pc, #788]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	220c      	movs	r2, #12
 8000e86:	4013      	ands	r3, r2
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d00e      	beq.n	8000eaa <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e8c:	4bc2      	ldr	r3, [pc, #776]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	220c      	movs	r2, #12
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d116      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x5e>
 8000e98:	4bbf      	ldr	r3, [pc, #764]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	23c0      	movs	r3, #192	; 0xc0
 8000e9e:	025b      	lsls	r3, r3, #9
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	025b      	lsls	r3, r3, #9
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d10d      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eaa:	4bbb      	ldr	r3, [pc, #748]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	029b      	lsls	r3, r3, #10
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d100      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x50>
 8000eb6:	e070      	b.n	8000f9a <HAL_RCC_OscConfig+0x132>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d000      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x5a>
 8000ec0:	e06b      	b.n	8000f9a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e329      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d107      	bne.n	8000ede <HAL_RCC_OscConfig+0x76>
 8000ece:	4bb2      	ldr	r3, [pc, #712]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4bb1      	ldr	r3, [pc, #708]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	0249      	lsls	r1, r1, #9
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e02f      	b.n	8000f3e <HAL_RCC_OscConfig+0xd6>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10c      	bne.n	8000f00 <HAL_RCC_OscConfig+0x98>
 8000ee6:	4bac      	ldr	r3, [pc, #688]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4bab      	ldr	r3, [pc, #684]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000eec:	49ab      	ldr	r1, [pc, #684]	; (800119c <HAL_RCC_OscConfig+0x334>)
 8000eee:	400a      	ands	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	4ba9      	ldr	r3, [pc, #676]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4ba8      	ldr	r3, [pc, #672]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ef8:	49a9      	ldr	r1, [pc, #676]	; (80011a0 <HAL_RCC_OscConfig+0x338>)
 8000efa:	400a      	ands	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e01e      	b.n	8000f3e <HAL_RCC_OscConfig+0xd6>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b05      	cmp	r3, #5
 8000f06:	d10e      	bne.n	8000f26 <HAL_RCC_OscConfig+0xbe>
 8000f08:	4ba3      	ldr	r3, [pc, #652]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4ba2      	ldr	r3, [pc, #648]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	02c9      	lsls	r1, r1, #11
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	4ba0      	ldr	r3, [pc, #640]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b9f      	ldr	r3, [pc, #636]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0249      	lsls	r1, r1, #9
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e00b      	b.n	8000f3e <HAL_RCC_OscConfig+0xd6>
 8000f26:	4b9c      	ldr	r3, [pc, #624]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b9b      	ldr	r3, [pc, #620]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f2c:	499b      	ldr	r1, [pc, #620]	; (800119c <HAL_RCC_OscConfig+0x334>)
 8000f2e:	400a      	ands	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	4b99      	ldr	r3, [pc, #612]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b98      	ldr	r3, [pc, #608]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f38:	4999      	ldr	r1, [pc, #612]	; (80011a0 <HAL_RCC_OscConfig+0x338>)
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d014      	beq.n	8000f70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff f9a7 	bl	8000298 <HAL_GetTick>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff f9a2 	bl	8000298 <HAL_GetTick>
 8000f54:	0002      	movs	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b64      	cmp	r3, #100	; 0x64
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e2db      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f62:	4b8d      	ldr	r3, [pc, #564]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	029b      	lsls	r3, r3, #10
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d0f0      	beq.n	8000f50 <HAL_RCC_OscConfig+0xe8>
 8000f6e:	e015      	b.n	8000f9c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff f992 	bl	8000298 <HAL_GetTick>
 8000f74:	0003      	movs	r3, r0
 8000f76:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7a:	f7ff f98d 	bl	8000298 <HAL_GetTick>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b64      	cmp	r3, #100	; 0x64
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e2c6      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8c:	4b82      	ldr	r3, [pc, #520]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	029b      	lsls	r3, r3, #10
 8000f94:	4013      	ands	r3, r2
 8000f96:	d1f0      	bne.n	8000f7a <HAL_RCC_OscConfig+0x112>
 8000f98:	e000      	b.n	8000f9c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d100      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x140>
 8000fa6:	e06c      	b.n	8001082 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fa8:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	220c      	movs	r2, #12
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d00e      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fb2:	4b79      	ldr	r3, [pc, #484]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d11f      	bne.n	8000ffe <HAL_RCC_OscConfig+0x196>
 8000fbe:	4b76      	ldr	r3, [pc, #472]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	23c0      	movs	r3, #192	; 0xc0
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d116      	bne.n	8000ffe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd0:	4b71      	ldr	r3, [pc, #452]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x17e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e299      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	22f8      	movs	r2, #248	; 0xf8
 8000fec:	4393      	bics	r3, r2
 8000fee:	0019      	movs	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	00da      	lsls	r2, r3, #3
 8000ff6:	4b68      	ldr	r3, [pc, #416]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffc:	e041      	b.n	8001082 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d024      	beq.n	8001050 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001006:	4b64      	ldr	r3, [pc, #400]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b63      	ldr	r3, [pc, #396]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800100c:	2101      	movs	r1, #1
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff f941 	bl	8000298 <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800101c:	f7ff f93c 	bl	8000298 <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e275      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102e:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2202      	movs	r2, #2
 8001034:	4013      	ands	r3, r2
 8001036:	d0f1      	beq.n	800101c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	4b57      	ldr	r3, [pc, #348]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	22f8      	movs	r2, #248	; 0xf8
 800103e:	4393      	bics	r3, r2
 8001040:	0019      	movs	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	00da      	lsls	r2, r3, #3
 8001048:	4b53      	ldr	r3, [pc, #332]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800104a:	430a      	orrs	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e018      	b.n	8001082 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001050:	4b51      	ldr	r3, [pc, #324]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b50      	ldr	r3, [pc, #320]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8001056:	2101      	movs	r1, #1
 8001058:	438a      	bics	r2, r1
 800105a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff f91c 	bl	8000298 <HAL_GetTick>
 8001060:	0003      	movs	r3, r0
 8001062:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001066:	f7ff f917 	bl	8000298 <HAL_GetTick>
 800106a:	0002      	movs	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e250      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001078:	4b47      	ldr	r3, [pc, #284]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2202      	movs	r2, #2
 800107e:	4013      	ands	r3, r2
 8001080:	d1f1      	bne.n	8001066 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2208      	movs	r2, #8
 8001088:	4013      	ands	r3, r2
 800108a:	d036      	beq.n	80010fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d019      	beq.n	80010c8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001094:	4b40      	ldr	r3, [pc, #256]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8001096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001098:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800109a:	2101      	movs	r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a0:	f7ff f8fa 	bl	8000298 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010aa:	f7ff f8f5 	bl	8000298 <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e22e      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	2202      	movs	r2, #2
 80010c2:	4013      	ands	r3, r2
 80010c4:	d0f1      	beq.n	80010aa <HAL_RCC_OscConfig+0x242>
 80010c6:	e018      	b.n	80010fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 80010ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010cc:	4b32      	ldr	r3, [pc, #200]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	438a      	bics	r2, r1
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d4:	f7ff f8e0 	bl	8000298 <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010de:	f7ff f8db 	bl	8000298 <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e214      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	2202      	movs	r2, #2
 80010f6:	4013      	ands	r3, r2
 80010f8:	d1f1      	bne.n	80010de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2204      	movs	r2, #4
 8001100:	4013      	ands	r3, r2
 8001102:	d100      	bne.n	8001106 <HAL_RCC_OscConfig+0x29e>
 8001104:	e0b6      	b.n	8001274 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001106:	2317      	movs	r3, #23
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8001110:	69da      	ldr	r2, [r3, #28]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	055b      	lsls	r3, r3, #21
 8001116:	4013      	ands	r3, r2
 8001118:	d111      	bne.n	800113e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800111c:	69da      	ldr	r2, [r3, #28]
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	0549      	lsls	r1, r1, #21
 8001124:	430a      	orrs	r2, r1
 8001126:	61da      	str	r2, [r3, #28]
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800112a:	69da      	ldr	r2, [r3, #28]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	055b      	lsls	r3, r3, #21
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001136:	2317      	movs	r3, #23
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_RCC_OscConfig+0x33c>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4013      	ands	r3, r2
 8001148:	d11a      	bne.n	8001180 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_RCC_OscConfig+0x33c>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_RCC_OscConfig+0x33c>)
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	0049      	lsls	r1, r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001158:	f7ff f89e 	bl	8000298 <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001162:	f7ff f899 	bl	8000298 <HAL_GetTick>
 8001166:	0002      	movs	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b64      	cmp	r3, #100	; 0x64
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e1d2      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_RCC_OscConfig+0x33c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4013      	ands	r3, r2
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10f      	bne.n	80011a8 <HAL_RCC_OscConfig+0x340>
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800118a:	6a1a      	ldr	r2, [r3, #32]
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <HAL_RCC_OscConfig+0x330>)
 800118e:	2101      	movs	r1, #1
 8001190:	430a      	orrs	r2, r1
 8001192:	621a      	str	r2, [r3, #32]
 8001194:	e036      	b.n	8001204 <HAL_RCC_OscConfig+0x39c>
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	40021000 	.word	0x40021000
 800119c:	fffeffff 	.word	0xfffeffff
 80011a0:	fffbffff 	.word	0xfffbffff
 80011a4:	40007000 	.word	0x40007000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10c      	bne.n	80011ca <HAL_RCC_OscConfig+0x362>
 80011b0:	4bca      	ldr	r3, [pc, #808]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011b2:	6a1a      	ldr	r2, [r3, #32]
 80011b4:	4bc9      	ldr	r3, [pc, #804]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	438a      	bics	r2, r1
 80011ba:	621a      	str	r2, [r3, #32]
 80011bc:	4bc7      	ldr	r3, [pc, #796]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	4bc6      	ldr	r3, [pc, #792]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011c2:	2104      	movs	r1, #4
 80011c4:	438a      	bics	r2, r1
 80011c6:	621a      	str	r2, [r3, #32]
 80011c8:	e01c      	b.n	8001204 <HAL_RCC_OscConfig+0x39c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b05      	cmp	r3, #5
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0x384>
 80011d2:	4bc2      	ldr	r3, [pc, #776]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011d4:	6a1a      	ldr	r2, [r3, #32]
 80011d6:	4bc1      	ldr	r3, [pc, #772]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011d8:	2104      	movs	r1, #4
 80011da:	430a      	orrs	r2, r1
 80011dc:	621a      	str	r2, [r3, #32]
 80011de:	4bbf      	ldr	r3, [pc, #764]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011e0:	6a1a      	ldr	r2, [r3, #32]
 80011e2:	4bbe      	ldr	r3, [pc, #760]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011e4:	2101      	movs	r1, #1
 80011e6:	430a      	orrs	r2, r1
 80011e8:	621a      	str	r2, [r3, #32]
 80011ea:	e00b      	b.n	8001204 <HAL_RCC_OscConfig+0x39c>
 80011ec:	4bbb      	ldr	r3, [pc, #748]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011ee:	6a1a      	ldr	r2, [r3, #32]
 80011f0:	4bba      	ldr	r3, [pc, #744]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	438a      	bics	r2, r1
 80011f6:	621a      	str	r2, [r3, #32]
 80011f8:	4bb8      	ldr	r3, [pc, #736]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	4bb7      	ldr	r3, [pc, #732]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80011fe:	2104      	movs	r1, #4
 8001200:	438a      	bics	r2, r1
 8001202:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d014      	beq.n	8001236 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120c:	f7ff f844 	bl	8000298 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	e009      	b.n	800122a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff f83f 	bl	8000298 <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	4aaf      	ldr	r2, [pc, #700]	; (80014e0 <HAL_RCC_OscConfig+0x678>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e177      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122a:	4bac      	ldr	r3, [pc, #688]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x3ae>
 8001234:	e013      	b.n	800125e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff f82f 	bl	8000298 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123e:	e009      	b.n	8001254 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001240:	f7ff f82a 	bl	8000298 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	4aa5      	ldr	r2, [pc, #660]	; (80014e0 <HAL_RCC_OscConfig+0x678>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e162      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001254:	4ba1      	ldr	r3, [pc, #644]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	2202      	movs	r2, #2
 800125a:	4013      	ands	r3, r2
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800125e:	2317      	movs	r3, #23
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d105      	bne.n	8001274 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001268:	4b9c      	ldr	r3, [pc, #624]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800126a:	69da      	ldr	r2, [r3, #28]
 800126c:	4b9b      	ldr	r3, [pc, #620]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800126e:	499d      	ldr	r1, [pc, #628]	; (80014e4 <HAL_RCC_OscConfig+0x67c>)
 8001270:	400a      	ands	r2, r1
 8001272:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2210      	movs	r2, #16
 800127a:	4013      	ands	r3, r2
 800127c:	d063      	beq.n	8001346 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d12a      	bne.n	80012dc <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001286:	4b95      	ldr	r3, [pc, #596]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800128a:	4b94      	ldr	r3, [pc, #592]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800128c:	2104      	movs	r1, #4
 800128e:	430a      	orrs	r2, r1
 8001290:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001292:	4b92      	ldr	r3, [pc, #584]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001296:	4b91      	ldr	r3, [pc, #580]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001298:	2101      	movs	r1, #1
 800129a:	430a      	orrs	r2, r1
 800129c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7fe fffb 	bl	8000298 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012a8:	f7fe fff6 	bl	8000298 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e12f      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012ba:	4b88      	ldr	r3, [pc, #544]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80012bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012be:	2202      	movs	r2, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	d0f1      	beq.n	80012a8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012c4:	4b85      	ldr	r3, [pc, #532]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80012c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c8:	22f8      	movs	r2, #248	; 0xf8
 80012ca:	4393      	bics	r3, r2
 80012cc:	0019      	movs	r1, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	00da      	lsls	r2, r3, #3
 80012d4:	4b81      	ldr	r3, [pc, #516]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80012d6:	430a      	orrs	r2, r1
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
 80012da:	e034      	b.n	8001346 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	3305      	adds	r3, #5
 80012e2:	d111      	bne.n	8001308 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012e4:	4b7d      	ldr	r3, [pc, #500]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80012e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e8:	4b7c      	ldr	r3, [pc, #496]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80012ea:	2104      	movs	r1, #4
 80012ec:	438a      	bics	r2, r1
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012f0:	4b7a      	ldr	r3, [pc, #488]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80012f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f4:	22f8      	movs	r2, #248	; 0xf8
 80012f6:	4393      	bics	r3, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	00da      	lsls	r2, r3, #3
 8001300:	4b76      	ldr	r3, [pc, #472]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001302:	430a      	orrs	r2, r1
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
 8001306:	e01e      	b.n	8001346 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001308:	4b74      	ldr	r3, [pc, #464]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800130a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130c:	4b73      	ldr	r3, [pc, #460]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800130e:	2104      	movs	r1, #4
 8001310:	430a      	orrs	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001314:	4b71      	ldr	r3, [pc, #452]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001318:	4b70      	ldr	r3, [pc, #448]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800131a:	2101      	movs	r1, #1
 800131c:	438a      	bics	r2, r1
 800131e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001320:	f7fe ffba 	bl	8000298 <HAL_GetTick>
 8001324:	0003      	movs	r3, r0
 8001326:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800132a:	f7fe ffb5 	bl	8000298 <HAL_GetTick>
 800132e:	0002      	movs	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e0ee      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800133c:	4b67      	ldr	r3, [pc, #412]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800133e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001340:	2202      	movs	r2, #2
 8001342:	4013      	ands	r3, r2
 8001344:	d1f1      	bne.n	800132a <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2220      	movs	r2, #32
 800134c:	4013      	ands	r3, r2
 800134e:	d05c      	beq.n	800140a <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001350:	4b62      	ldr	r3, [pc, #392]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	220c      	movs	r2, #12
 8001356:	4013      	ands	r3, r2
 8001358:	2b0c      	cmp	r3, #12
 800135a:	d00e      	beq.n	800137a <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800135c:	4b5f      	ldr	r3, [pc, #380]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	220c      	movs	r2, #12
 8001362:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001364:	2b08      	cmp	r3, #8
 8001366:	d114      	bne.n	8001392 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001368:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	23c0      	movs	r3, #192	; 0xc0
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	401a      	ands	r2, r3
 8001372:	23c0      	movs	r3, #192	; 0xc0
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	429a      	cmp	r2, r3
 8001378:	d10b      	bne.n	8001392 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800137a:	4b58      	ldr	r3, [pc, #352]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800137c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	025b      	lsls	r3, r3, #9
 8001382:	4013      	ands	r3, r2
 8001384:	d040      	beq.n	8001408 <HAL_RCC_OscConfig+0x5a0>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d03c      	beq.n	8001408 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0c3      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d01b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800139a:	4b50      	ldr	r3, [pc, #320]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800139c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139e:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	0249      	lsls	r1, r1, #9
 80013a4:	430a      	orrs	r2, r1
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7fe ff76 	bl	8000298 <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013b2:	f7fe ff71 	bl	8000298 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e0aa      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013c4:	4b45      	ldr	r3, [pc, #276]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80013c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	025b      	lsls	r3, r3, #9
 80013cc:	4013      	ands	r3, r2
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x54a>
 80013d0:	e01b      	b.n	800140a <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013d2:	4b42      	ldr	r3, [pc, #264]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80013d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d6:	4b41      	ldr	r3, [pc, #260]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80013d8:	4943      	ldr	r1, [pc, #268]	; (80014e8 <HAL_RCC_OscConfig+0x680>)
 80013da:	400a      	ands	r2, r1
 80013dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7fe ff5b 	bl	8000298 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e8:	f7fe ff56 	bl	8000298 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e08f      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80013fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	4013      	ands	r3, r2
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x580>
 8001406:	e000      	b.n	800140a <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001408:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	2b00      	cmp	r3, #0
 8001410:	d100      	bne.n	8001414 <HAL_RCC_OscConfig+0x5ac>
 8001412:	e081      	b.n	8001518 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	220c      	movs	r2, #12
 800141a:	4013      	ands	r3, r2
 800141c:	2b08      	cmp	r3, #8
 800141e:	d100      	bne.n	8001422 <HAL_RCC_OscConfig+0x5ba>
 8001420:	e078      	b.n	8001514 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	2b02      	cmp	r3, #2
 8001428:	d14c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001430:	492e      	ldr	r1, [pc, #184]	; (80014ec <HAL_RCC_OscConfig+0x684>)
 8001432:	400a      	ands	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7fe ff2f 	bl	8000298 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001440:	f7fe ff2a 	bl	8000298 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e063      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	049b      	lsls	r3, r3, #18
 800145a:	4013      	ands	r3, r2
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	220f      	movs	r2, #15
 8001464:	4393      	bics	r3, r2
 8001466:	0019      	movs	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800146e:	430a      	orrs	r2, r1
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <HAL_RCC_OscConfig+0x688>)
 8001478:	4013      	ands	r3, r2
 800147a:	0019      	movs	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	431a      	orrs	r2, r3
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	0449      	lsls	r1, r1, #17
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7fe fefd 	bl	8000298 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7fe fef8 	bl	8000298 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e031      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	049b      	lsls	r3, r3, #18
 80014be:	4013      	ands	r3, r2
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x63c>
 80014c2:	e029      	b.n	8001518 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_RCC_OscConfig+0x674>)
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <HAL_RCC_OscConfig+0x684>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7fe fee2 	bl	8000298 <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d8:	e015      	b.n	8001506 <HAL_RCC_OscConfig+0x69e>
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	40021000 	.word	0x40021000
 80014e0:	00001388 	.word	0x00001388
 80014e4:	efffffff 	.word	0xefffffff
 80014e8:	fffeffff 	.word	0xfffeffff
 80014ec:	feffffff 	.word	0xfeffffff
 80014f0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f4:	f7fe fed0 	bl	8000298 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e009      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_RCC_OscConfig+0x6bc>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	049b      	lsls	r3, r3, #18
 800150e:	4013      	ands	r3, r2
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x68c>
 8001512:	e001      	b.n	8001518 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b006      	add	sp, #24
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001536:	4b7b      	ldr	r3, [pc, #492]	; (8001724 <HAL_RCC_ClockConfig+0x1fc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2201      	movs	r2, #1
 800153c:	4013      	ands	r3, r2
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d911      	bls.n	8001568 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001544:	4b77      	ldr	r3, [pc, #476]	; (8001724 <HAL_RCC_ClockConfig+0x1fc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2201      	movs	r2, #1
 800154a:	4393      	bics	r3, r2
 800154c:	0019      	movs	r1, r3
 800154e:	4b75      	ldr	r3, [pc, #468]	; (8001724 <HAL_RCC_ClockConfig+0x1fc>)
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001556:	4b73      	ldr	r3, [pc, #460]	; (8001724 <HAL_RCC_ClockConfig+0x1fc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2201      	movs	r2, #1
 800155c:	4013      	ands	r3, r2
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0d8      	b.n	800171a <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2202      	movs	r2, #2
 800156e:	4013      	ands	r3, r2
 8001570:	d009      	beq.n	8001586 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001572:	4b6d      	ldr	r3, [pc, #436]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	22f0      	movs	r2, #240	; 0xf0
 8001578:	4393      	bics	r3, r2
 800157a:	0019      	movs	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	4b69      	ldr	r3, [pc, #420]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
 800158e:	d100      	bne.n	8001592 <HAL_RCC_ClockConfig+0x6a>
 8001590:	e089      	b.n	80016a6 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b63      	ldr	r3, [pc, #396]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	029b      	lsls	r3, r3, #10
 80015a2:	4013      	ands	r3, r2
 80015a4:	d120      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0b7      	b.n	800171a <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	049b      	lsls	r3, r3, #18
 80015ba:	4013      	ands	r3, r2
 80015bc:	d114      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0ab      	b.n	800171a <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015ca:	4b57      	ldr	r3, [pc, #348]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 80015cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4013      	ands	r3, r2
 80015d4:	d108      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e09f      	b.n	800171a <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2202      	movs	r2, #2
 80015e0:	4013      	ands	r3, r2
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e098      	b.n	800171a <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e8:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	4393      	bics	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015fc:	f7fe fe4c 	bl	8000298 <HAL_GetTick>
 8001600:	0003      	movs	r3, r0
 8001602:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d111      	bne.n	8001630 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800160c:	e009      	b.n	8001622 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160e:	f7fe fe43 	bl	8000298 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	4a44      	ldr	r2, [pc, #272]	; (800172c <HAL_RCC_ClockConfig+0x204>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e07b      	b.n	800171a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	220c      	movs	r2, #12
 8001628:	4013      	ands	r3, r2
 800162a:	2b04      	cmp	r3, #4
 800162c:	d1ef      	bne.n	800160e <HAL_RCC_ClockConfig+0xe6>
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d111      	bne.n	800165c <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	e009      	b.n	800164e <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163a:	f7fe fe2d 	bl	8000298 <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	4a39      	ldr	r2, [pc, #228]	; (800172c <HAL_RCC_ClockConfig+0x204>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e065      	b.n	800171a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164e:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	220c      	movs	r2, #12
 8001654:	4013      	ands	r3, r2
 8001656:	2b08      	cmp	r3, #8
 8001658:	d1ef      	bne.n	800163a <HAL_RCC_ClockConfig+0x112>
 800165a:	e024      	b.n	80016a6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d11b      	bne.n	800169c <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001664:	e009      	b.n	800167a <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001666:	f7fe fe17 	bl	8000298 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	4a2e      	ldr	r2, [pc, #184]	; (800172c <HAL_RCC_ClockConfig+0x204>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e04f      	b.n	800171a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	220c      	movs	r2, #12
 8001680:	4013      	ands	r3, r2
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d1ef      	bne.n	8001666 <HAL_RCC_ClockConfig+0x13e>
 8001686:	e00e      	b.n	80016a6 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f7fe fe06 	bl	8000298 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_RCC_ClockConfig+0x204>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e03e      	b.n	800171a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	220c      	movs	r2, #12
 80016a2:	4013      	ands	r3, r2
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HAL_RCC_ClockConfig+0x1fc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2201      	movs	r2, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d211      	bcs.n	80016d8 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_RCC_ClockConfig+0x1fc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4393      	bics	r3, r2
 80016bc:	0019      	movs	r1, r3
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_RCC_ClockConfig+0x1fc>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_RCC_ClockConfig+0x1fc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2201      	movs	r2, #1
 80016cc:	4013      	ands	r3, r2
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e020      	b.n	800171a <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2204      	movs	r2, #4
 80016de:	4013      	ands	r3, r2
 80016e0:	d009      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <HAL_RCC_ClockConfig+0x208>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 80016f2:	430a      	orrs	r2, r1
 80016f4:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016f6:	f000 f821 	bl	800173c <HAL_RCC_GetSysClockFreq>
 80016fa:	0001      	movs	r1, r0
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_RCC_ClockConfig+0x200>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	220f      	movs	r2, #15
 8001704:	4013      	ands	r3, r2
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_RCC_ClockConfig+0x20c>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	000a      	movs	r2, r1
 800170c:	40da      	lsrs	r2, r3
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_RCC_ClockConfig+0x210>)
 8001710:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001712:	2000      	movs	r0, #0
 8001714:	f7fe fd98 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b004      	add	sp, #16
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	40022000 	.word	0x40022000
 8001728:	40021000 	.word	0x40021000
 800172c:	00001388 	.word	0x00001388
 8001730:	fffff8ff 	.word	0xfffff8ff
 8001734:	080038ec 	.word	0x080038ec
 8001738:	20000000 	.word	0x20000000

0800173c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b08f      	sub	sp, #60	; 0x3c
 8001740:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001742:	2314      	movs	r3, #20
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	4a37      	ldr	r2, [pc, #220]	; (8001824 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001748:	ca13      	ldmia	r2!, {r0, r1, r4}
 800174a:	c313      	stmia	r3!, {r0, r1, r4}
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4a35      	ldr	r2, [pc, #212]	; (8001828 <HAL_RCC_GetSysClockFreq+0xec>)
 8001754:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001756:	c313      	stmia	r3!, {r0, r1, r4}
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
 8001764:	2300      	movs	r3, #0
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	220c      	movs	r2, #12
 800177a:	4013      	ands	r3, r2
 800177c:	2b08      	cmp	r3, #8
 800177e:	d006      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x52>
 8001780:	2b0c      	cmp	r3, #12
 8001782:	d043      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0xd0>
 8001784:	2b04      	cmp	r3, #4
 8001786:	d144      	bne.n	8001812 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001788:	4b29      	ldr	r3, [pc, #164]	; (8001830 <HAL_RCC_GetSysClockFreq+0xf4>)
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800178c:	e044      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	220f      	movs	r2, #15
 8001794:	4013      	ands	r3, r2
 8001796:	2214      	movs	r2, #20
 8001798:	18ba      	adds	r2, r7, r2
 800179a:	5cd3      	ldrb	r3, [r2, r3]
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_RCC_GetSysClockFreq+0xf0>)
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	220f      	movs	r2, #15
 80017a4:	4013      	ands	r3, r2
 80017a6:	1d3a      	adds	r2, r7, #4
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80017ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ae:	23c0      	movs	r3, #192	; 0xc0
 80017b0:	025b      	lsls	r3, r3, #9
 80017b2:	401a      	ands	r2, r3
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d109      	bne.n	80017d0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80017bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017be:	481c      	ldr	r0, [pc, #112]	; (8001830 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017c0:	f7fe fca2 	bl	8000108 <__udivsi3>
 80017c4:	0003      	movs	r3, r0
 80017c6:	001a      	movs	r2, r3
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	4353      	muls	r3, r2
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
 80017ce:	e01a      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80017d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d2:	23c0      	movs	r3, #192	; 0xc0
 80017d4:	025b      	lsls	r3, r3, #9
 80017d6:	401a      	ands	r2, r3
 80017d8:	23c0      	movs	r3, #192	; 0xc0
 80017da:	025b      	lsls	r3, r3, #9
 80017dc:	429a      	cmp	r2, r3
 80017de:	d109      	bne.n	80017f4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80017e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017e2:	4814      	ldr	r0, [pc, #80]	; (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017e4:	f7fe fc90 	bl	8000108 <__udivsi3>
 80017e8:	0003      	movs	r3, r0
 80017ea:	001a      	movs	r2, r3
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	4353      	muls	r3, r2
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
 80017f2:	e008      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80017f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017f6:	480e      	ldr	r0, [pc, #56]	; (8001830 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017f8:	f7fe fc86 	bl	8000108 <__udivsi3>
 80017fc:	0003      	movs	r3, r0
 80017fe:	001a      	movs	r2, r3
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	4353      	muls	r3, r2
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800180a:	e005      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_GetSysClockFreq+0xf8>)
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001810:	e002      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001816:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b00f      	add	sp, #60	; 0x3c
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	08003880 	.word	0x08003880
 8001828:	08003890 	.word	0x08003890
 800182c:	40021000 	.word	0x40021000
 8001830:	007a1200 	.word	0x007a1200
 8001834:	02dc6c00 	.word	0x02dc6c00

08001838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <HAL_RCC_GetHCLKFreq+0x10>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	20000000 	.word	0x20000000

0800184c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001850:	f7ff fff2 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 8001854:	0001      	movs	r1, r0
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	2207      	movs	r2, #7
 800185e:	4013      	ands	r3, r2
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	40d9      	lsrs	r1, r3
 8001866:	000b      	movs	r3, r1
}    
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40021000 	.word	0x40021000
 8001874:	080038fc 	.word	0x080038fc

08001878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	4013      	ands	r3, r2
 8001892:	d100      	bne.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001894:	e08f      	b.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001896:	2317      	movs	r3, #23
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	055b      	lsls	r3, r3, #21
 80018a6:	4013      	ands	r3, r2
 80018a8:	d111      	bne.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b6c      	ldr	r3, [pc, #432]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	0549      	lsls	r1, r1, #21
 80018b4:	430a      	orrs	r2, r1
 80018b6:	61da      	str	r2, [r3, #28]
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018ba:	69da      	ldr	r2, [r3, #28]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	055b      	lsls	r3, r3, #21
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c6:	2317      	movs	r3, #23
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	4b64      	ldr	r3, [pc, #400]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	d11a      	bne.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018da:	4b61      	ldr	r3, [pc, #388]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	0049      	lsls	r1, r1, #1
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e8:	f7fe fcd6 	bl	8000298 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	e008      	b.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f2:	f7fe fcd1 	bl	8000298 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	; 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0a6      	b.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4013      	ands	r3, r2
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001910:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	23c0      	movs	r3, #192	; 0xc0
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d034      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	23c0      	movs	r3, #192	; 0xc0
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4013      	ands	r3, r2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	429a      	cmp	r2, r3
 8001930:	d02c      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001932:	4b4a      	ldr	r3, [pc, #296]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a4b      	ldr	r2, [pc, #300]	; (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800193c:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800193e:	6a1a      	ldr	r2, [r3, #32]
 8001940:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	0249      	lsls	r1, r1, #9
 8001946:	430a      	orrs	r2, r1
 8001948:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800194a:	4b44      	ldr	r3, [pc, #272]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800194c:	6a1a      	ldr	r2, [r3, #32]
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001950:	4945      	ldr	r1, [pc, #276]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001952:	400a      	ands	r2, r1
 8001954:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2201      	movs	r2, #1
 8001960:	4013      	ands	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7fe fc98 	bl	8000298 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	e009      	b.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7fe fc93 	bl	8000298 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	4a3c      	ldr	r2, [pc, #240]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e067      	b.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001982:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	2202      	movs	r2, #2
 8001988:	4013      	ands	r3, r2
 800198a:	d0f0      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800198c:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4a34      	ldr	r2, [pc, #208]	; (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001992:	4013      	ands	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800199c:	430a      	orrs	r2, r1
 800199e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019a0:	2317      	movs	r3, #23
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d105      	bne.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019b0:	492f      	ldr	r1, [pc, #188]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b2:	400a      	ands	r2, r1
 80019b4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2201      	movs	r2, #1
 80019bc:	4013      	ands	r3, r2
 80019be:	d009      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	2203      	movs	r2, #3
 80019c6:	4393      	bics	r3, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d009      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a24      	ldr	r2, [pc, #144]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2220      	movs	r2, #32
 80019f8:	4013      	ands	r3, r2
 80019fa:	d009      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	2210      	movs	r2, #16
 8001a02:	4393      	bics	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	029b      	lsls	r3, r3, #10
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d009      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d009      	beq.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	4393      	bics	r3, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b006      	add	sp, #24
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40007000 	.word	0x40007000
 8001a64:	fffffcff 	.word	0xfffffcff
 8001a68:	fffeffff 	.word	0xfffeffff
 8001a6c:	00001388 	.word	0x00001388
 8001a70:	efffffff 	.word	0xefffffff
 8001a74:	fffcffff 	.word	0xfffcffff

08001a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e047      	b.n	8001b1a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2269      	movs	r2, #105	; 0x69
 8001a8e:	5c9b      	ldrb	r3, [r3, r2]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d107      	bne.n	8001aa6 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2268      	movs	r2, #104	; 0x68
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 fde5 	bl	8002670 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2269      	movs	r2, #105	; 0x69
 8001aaa:	2124      	movs	r1, #36	; 0x24
 8001aac:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	438a      	bics	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 f8d5 	bl	8001c70 <UART_SetConfig>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e024      	b.n	8001b1a <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f000 fa84 	bl	8001fe8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	490e      	ldr	r1, [pc, #56]	; (8001b24 <HAL_UART_Init+0xac>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	212a      	movs	r1, #42	; 0x2a
 8001afc:	438a      	bics	r2, r1
 8001afe:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 fb1c 	bl	8002150 <UART_CheckIdleState>
 8001b18:	0003      	movs	r3, r0
}
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	ffffb7ff 	.word	0xffffb7ff

08001b28 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	1dbb      	adds	r3, r7, #6
 8001b36:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2269      	movs	r2, #105	; 0x69
 8001b40:	5c9b      	ldrb	r3, [r3, r2]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d000      	beq.n	8001b4a <HAL_UART_Transmit+0x22>
 8001b48:	e08c      	b.n	8001c64 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_UART_Transmit+0x30>
 8001b50:	1dbb      	adds	r3, r7, #6
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e084      	b.n	8001c66 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	015b      	lsls	r3, r3, #5
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d109      	bne.n	8001b7c <HAL_UART_Transmit+0x54>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2201      	movs	r2, #1
 8001b74:	4013      	ands	r3, r2
 8001b76:	d001      	beq.n	8001b7c <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e074      	b.n	8001c66 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2268      	movs	r2, #104	; 0x68
 8001b80:	5c9b      	ldrb	r3, [r3, r2]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_UART_Transmit+0x62>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e06d      	b.n	8001c66 <HAL_UART_Transmit+0x13e>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2268      	movs	r2, #104	; 0x68
 8001b8e:	2101      	movs	r1, #1
 8001b90:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2269      	movs	r2, #105	; 0x69
 8001b9c:	2121      	movs	r1, #33	; 0x21
 8001b9e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001ba0:	f7fe fb7a 	bl	8000298 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1dba      	adds	r2, r7, #6
 8001bac:	2150      	movs	r1, #80	; 0x50
 8001bae:	8812      	ldrh	r2, [r2, #0]
 8001bb0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1dba      	adds	r2, r7, #6
 8001bb6:	2152      	movs	r1, #82	; 0x52
 8001bb8:	8812      	ldrh	r2, [r2, #0]
 8001bba:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001bbc:	e035      	b.n	8001c2a <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2252      	movs	r2, #82	; 0x52
 8001bc2:	5a9b      	ldrh	r3, [r3, r2]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b299      	uxth	r1, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2252      	movs	r2, #82	; 0x52
 8001bce:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	0013      	movs	r3, r2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	f000 fb0f 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 8001be2:	1e03      	subs	r3, r0, #0
 8001be4:	d001      	beq.n	8001bea <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e03d      	b.n	8001c66 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	015b      	lsls	r3, r3, #5
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d111      	bne.n	8001c1a <HAL_UART_Transmit+0xf2>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	05d2      	lsls	r2, r2, #23
 8001c0c:	0dd2      	lsrs	r2, r2, #23
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	3302      	adds	r3, #2
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	e007      	b.n	8001c2a <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	60ba      	str	r2, [r7, #8]
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b292      	uxth	r2, r2
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2252      	movs	r2, #82	; 0x52
 8001c2e:	5a9b      	ldrh	r3, [r3, r2]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1c3      	bne.n	8001bbe <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	0013      	movs	r3, r2
 8001c40:	2200      	movs	r2, #0
 8001c42:	2140      	movs	r1, #64	; 0x40
 8001c44:	f000 fadc 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 8001c48:	1e03      	subs	r3, r0, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e00a      	b.n	8001c66 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2269      	movs	r2, #105	; 0x69
 8001c54:	2120      	movs	r1, #32
 8001c56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2268      	movs	r2, #104	; 0x68
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e000      	b.n	8001c66 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
  }
}
 8001c66:	0018      	movs	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b006      	add	sp, #24
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c7c:	2317      	movs	r3, #23
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	2210      	movs	r2, #16
 8001c82:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001c84:	230a      	movs	r3, #10
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2200      	movs	r2, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001c8c:	2314      	movs	r3, #20
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2200      	movs	r2, #0
 8001c92:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c94:	2313      	movs	r3, #19
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4ac1      	ldr	r2, [pc, #772]	; (8001fc0 <UART_SetConfig+0x350>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4abc      	ldr	r2, [pc, #752]	; (8001fc4 <UART_SetConfig+0x354>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4ab4      	ldr	r2, [pc, #720]	; (8001fc8 <UART_SetConfig+0x358>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4ab0      	ldr	r2, [pc, #704]	; (8001fcc <UART_SetConfig+0x35c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d125      	bne.n	8001d5a <UART_SetConfig+0xea>
 8001d0e:	4bb0      	ldr	r3, [pc, #704]	; (8001fd0 <UART_SetConfig+0x360>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	2203      	movs	r2, #3
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d00f      	beq.n	8001d3a <UART_SetConfig+0xca>
 8001d1a:	d304      	bcc.n	8001d26 <UART_SetConfig+0xb6>
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d011      	beq.n	8001d44 <UART_SetConfig+0xd4>
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d005      	beq.n	8001d30 <UART_SetConfig+0xc0>
 8001d24:	e013      	b.n	8001d4e <UART_SetConfig+0xde>
 8001d26:	2317      	movs	r3, #23
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	e064      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001d30:	2317      	movs	r3, #23
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2202      	movs	r2, #2
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	e05f      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001d3a:	2317      	movs	r3, #23
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	2204      	movs	r2, #4
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e05a      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001d44:	2317      	movs	r3, #23
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2208      	movs	r2, #8
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e055      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001d4e:	2317      	movs	r3, #23
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2210      	movs	r2, #16
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	e04f      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a9d      	ldr	r2, [pc, #628]	; (8001fd4 <UART_SetConfig+0x364>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d132      	bne.n	8001dca <UART_SetConfig+0x15a>
 8001d64:	4b9a      	ldr	r3, [pc, #616]	; (8001fd0 <UART_SetConfig+0x360>)
 8001d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d68:	23c0      	movs	r3, #192	; 0xc0
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	0252      	lsls	r2, r2, #9
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d019      	beq.n	8001daa <UART_SetConfig+0x13a>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0252      	lsls	r2, r2, #9
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d802      	bhi.n	8001d84 <UART_SetConfig+0x114>
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <UART_SetConfig+0x126>
 8001d82:	e01c      	b.n	8001dbe <UART_SetConfig+0x14e>
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	0292      	lsls	r2, r2, #10
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <UART_SetConfig+0x144>
 8001d8c:	22c0      	movs	r2, #192	; 0xc0
 8001d8e:	0292      	lsls	r2, r2, #10
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d005      	beq.n	8001da0 <UART_SetConfig+0x130>
 8001d94:	e013      	b.n	8001dbe <UART_SetConfig+0x14e>
 8001d96:	2317      	movs	r3, #23
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e02c      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001da0:	2317      	movs	r3, #23
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2202      	movs	r2, #2
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e027      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001daa:	2317      	movs	r3, #23
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	2204      	movs	r2, #4
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e022      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001db4:	2317      	movs	r3, #23
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	2208      	movs	r2, #8
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e01d      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001dbe:	2317      	movs	r3, #23
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	e017      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a82      	ldr	r2, [pc, #520]	; (8001fd8 <UART_SetConfig+0x368>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d104      	bne.n	8001dde <UART_SetConfig+0x16e>
 8001dd4:	2317      	movs	r3, #23
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e00d      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7e      	ldr	r2, [pc, #504]	; (8001fdc <UART_SetConfig+0x36c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d104      	bne.n	8001df2 <UART_SetConfig+0x182>
 8001de8:	2317      	movs	r3, #23
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e003      	b.n	8001dfa <UART_SetConfig+0x18a>
 8001df2:	2317      	movs	r3, #23
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2210      	movs	r2, #16
 8001df8:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d000      	beq.n	8001e08 <UART_SetConfig+0x198>
 8001e06:	e077      	b.n	8001ef8 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8001e08:	2317      	movs	r3, #23
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d01c      	beq.n	8001e4c <UART_SetConfig+0x1dc>
 8001e12:	dc02      	bgt.n	8001e1a <UART_SetConfig+0x1aa>
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <UART_SetConfig+0x1b4>
 8001e18:	e04f      	b.n	8001eba <UART_SetConfig+0x24a>
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d027      	beq.n	8001e6e <UART_SetConfig+0x1fe>
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d039      	beq.n	8001e96 <UART_SetConfig+0x226>
 8001e22:	e04a      	b.n	8001eba <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e24:	f7ff fd12 	bl	800184c <HAL_RCC_GetPCLK1Freq>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	005a      	lsls	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	18d2      	adds	r2, r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0019      	movs	r1, r3
 8001e3a:	0010      	movs	r0, r2
 8001e3c:	f7fe f964 	bl	8000108 <__udivsi3>
 8001e40:	0003      	movs	r3, r0
 8001e42:	001a      	movs	r2, r3
 8001e44:	2314      	movs	r3, #20
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	801a      	strh	r2, [r3, #0]
        break;
 8001e4a:	e03b      	b.n	8001ec4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	4a63      	ldr	r2, [pc, #396]	; (8001fe0 <UART_SetConfig+0x370>)
 8001e54:	189a      	adds	r2, r3, r2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	0010      	movs	r0, r2
 8001e5e:	f7fe f953 	bl	8000108 <__udivsi3>
 8001e62:	0003      	movs	r3, r0
 8001e64:	001a      	movs	r2, r3
 8001e66:	2314      	movs	r3, #20
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	801a      	strh	r2, [r3, #0]
        break;
 8001e6c:	e02a      	b.n	8001ec4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e6e:	f7ff fc65 	bl	800173c <HAL_RCC_GetSysClockFreq>
 8001e72:	0003      	movs	r3, r0
 8001e74:	005a      	lsls	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	18d2      	adds	r2, r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0019      	movs	r1, r3
 8001e84:	0010      	movs	r0, r2
 8001e86:	f7fe f93f 	bl	8000108 <__udivsi3>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	2314      	movs	r3, #20
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	801a      	strh	r2, [r3, #0]
        break;
 8001e94:	e016      	b.n	8001ec4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	2280      	movs	r2, #128	; 0x80
 8001e9e:	0252      	lsls	r2, r2, #9
 8001ea0:	189a      	adds	r2, r3, r2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	0010      	movs	r0, r2
 8001eaa:	f7fe f92d 	bl	8000108 <__udivsi3>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	2314      	movs	r3, #20
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	801a      	strh	r2, [r3, #0]
        break;
 8001eb8:	e004      	b.n	8001ec4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001eba:	2313      	movs	r3, #19
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
        break;
 8001ec2:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001ec4:	200a      	movs	r0, #10
 8001ec6:	183b      	adds	r3, r7, r0
 8001ec8:	2414      	movs	r4, #20
 8001eca:	193a      	adds	r2, r7, r4
 8001ecc:	8812      	ldrh	r2, [r2, #0]
 8001ece:	210f      	movs	r1, #15
 8001ed0:	438a      	bics	r2, r1
 8001ed2:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ed4:	193b      	adds	r3, r7, r4
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	105b      	asrs	r3, r3, #1
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2207      	movs	r2, #7
 8001ede:	4013      	ands	r3, r2
 8001ee0:	b299      	uxth	r1, r3
 8001ee2:	183b      	adds	r3, r7, r0
 8001ee4:	183a      	adds	r2, r7, r0
 8001ee6:	8812      	ldrh	r2, [r2, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	183a      	adds	r2, r7, r0
 8001ef2:	8812      	ldrh	r2, [r2, #0]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	e05b      	b.n	8001fb0 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8001ef8:	2317      	movs	r3, #23
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d01b      	beq.n	8001f3a <UART_SetConfig+0x2ca>
 8001f02:	dc02      	bgt.n	8001f0a <UART_SetConfig+0x29a>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <UART_SetConfig+0x2a4>
 8001f08:	e04d      	b.n	8001fa6 <UART_SetConfig+0x336>
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d026      	beq.n	8001f5c <UART_SetConfig+0x2ec>
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d037      	beq.n	8001f82 <UART_SetConfig+0x312>
 8001f12:	e048      	b.n	8001fa6 <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f14:	f7ff fc9a 	bl	800184c <HAL_RCC_GetPCLK1Freq>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	18d2      	adds	r2, r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	0019      	movs	r1, r3
 8001f28:	0010      	movs	r0, r2
 8001f2a:	f7fe f8ed 	bl	8000108 <__udivsi3>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60da      	str	r2, [r3, #12]
        break;
 8001f38:	e03a      	b.n	8001fb0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	085b      	lsrs	r3, r3, #1
 8001f40:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <UART_SetConfig+0x374>)
 8001f42:	189a      	adds	r2, r3, r2
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	0019      	movs	r1, r3
 8001f4a:	0010      	movs	r0, r2
 8001f4c:	f7fe f8dc 	bl	8000108 <__udivsi3>
 8001f50:	0003      	movs	r3, r0
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60da      	str	r2, [r3, #12]
        break;
 8001f5a:	e029      	b.n	8001fb0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f5c:	f7ff fbee 	bl	800173c <HAL_RCC_GetSysClockFreq>
 8001f60:	0002      	movs	r2, r0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	18d2      	adds	r2, r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	0019      	movs	r1, r3
 8001f70:	0010      	movs	r0, r2
 8001f72:	f7fe f8c9 	bl	8000108 <__udivsi3>
 8001f76:	0003      	movs	r3, r0
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60da      	str	r2, [r3, #12]
        break;
 8001f80:	e016      	b.n	8001fb0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	085b      	lsrs	r3, r3, #1
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	0212      	lsls	r2, r2, #8
 8001f8c:	189a      	adds	r2, r3, r2
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	0019      	movs	r1, r3
 8001f94:	0010      	movs	r0, r2
 8001f96:	f7fe f8b7 	bl	8000108 <__udivsi3>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60da      	str	r2, [r3, #12]
        break;
 8001fa4:	e004      	b.n	8001fb0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001fa6:	2313      	movs	r3, #19
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
        break;
 8001fae:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001fb0:	2313      	movs	r3, #19
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	781b      	ldrb	r3, [r3, #0]

}
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b007      	add	sp, #28
 8001fbc:	bd90      	pop	{r4, r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	efff69f3 	.word	0xefff69f3
 8001fc4:	ffffcfff 	.word	0xffffcfff
 8001fc8:	fffff4ff 	.word	0xfffff4ff
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40004400 	.word	0x40004400
 8001fd8:	40004800 	.word	0x40004800
 8001fdc:	40004c00 	.word	0x40004c00
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d00b      	beq.n	8002012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a4a      	ldr	r2, [pc, #296]	; (800212c <UART_AdvFeatureConfig+0x144>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d00b      	beq.n	8002034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4a43      	ldr	r2, [pc, #268]	; (8002130 <UART_AdvFeatureConfig+0x148>)
 8002024:	4013      	ands	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	2204      	movs	r2, #4
 800203a:	4013      	ands	r3, r2
 800203c:	d00b      	beq.n	8002056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <UART_AdvFeatureConfig+0x14c>)
 8002046:	4013      	ands	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	2208      	movs	r2, #8
 800205c:	4013      	ands	r3, r2
 800205e:	d00b      	beq.n	8002078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a34      	ldr	r2, [pc, #208]	; (8002138 <UART_AdvFeatureConfig+0x150>)
 8002068:	4013      	ands	r3, r2
 800206a:	0019      	movs	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2210      	movs	r2, #16
 800207e:	4013      	ands	r3, r2
 8002080:	d00b      	beq.n	800209a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a2c      	ldr	r2, [pc, #176]	; (800213c <UART_AdvFeatureConfig+0x154>)
 800208a:	4013      	ands	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	2220      	movs	r2, #32
 80020a0:	4013      	ands	r3, r2
 80020a2:	d00b      	beq.n	80020bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4a25      	ldr	r2, [pc, #148]	; (8002140 <UART_AdvFeatureConfig+0x158>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2240      	movs	r2, #64	; 0x40
 80020c2:	4013      	ands	r3, r2
 80020c4:	d01d      	beq.n	8002102 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <UART_AdvFeatureConfig+0x15c>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	035b      	lsls	r3, r3, #13
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d10b      	bne.n	8002102 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a15      	ldr	r2, [pc, #84]	; (8002148 <UART_AdvFeatureConfig+0x160>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	4013      	ands	r3, r2
 800210a:	d00b      	beq.n	8002124 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a0e      	ldr	r2, [pc, #56]	; (800214c <UART_AdvFeatureConfig+0x164>)
 8002114:	4013      	ands	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]
  }
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	b002      	add	sp, #8
 800212a:	bd80      	pop	{r7, pc}
 800212c:	fffdffff 	.word	0xfffdffff
 8002130:	fffeffff 	.word	0xfffeffff
 8002134:	fffbffff 	.word	0xfffbffff
 8002138:	ffff7fff 	.word	0xffff7fff
 800213c:	ffffefff 	.word	0xffffefff
 8002140:	ffffdfff 	.word	0xffffdfff
 8002144:	ffefffff 	.word	0xffefffff
 8002148:	ff9fffff 	.word	0xff9fffff
 800214c:	fff7ffff 	.word	0xfff7ffff

08002150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af02      	add	r7, sp, #8
 8002156:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002162:	f7fe f899 	bl	8000298 <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a21      	ldr	r2, [pc, #132]	; (80021f4 <UART_CheckIdleState+0xa4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <UART_CheckIdleState+0x2e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <UART_CheckIdleState+0xa8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d129      	bne.n	80021d2 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2208      	movs	r2, #8
 8002186:	4013      	ands	r3, r2
 8002188:	2b08      	cmp	r3, #8
 800218a:	d10d      	bne.n	80021a8 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	0399      	lsls	r1, r3, #14
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <UART_CheckIdleState+0xac>)
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	0013      	movs	r3, r2
 800219a:	2200      	movs	r2, #0
 800219c:	f000 f830 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 80021a0:	1e03      	subs	r3, r0, #0
 80021a2:	d001      	beq.n	80021a8 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e021      	b.n	80021ec <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2204      	movs	r2, #4
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d10d      	bne.n	80021d2 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	03d9      	lsls	r1, r3, #15
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <UART_CheckIdleState+0xac>)
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	0013      	movs	r3, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	f000 f81b 	bl	8002200 <UART_WaitOnFlagUntilTimeout>
 80021ca:	1e03      	subs	r3, r0, #0
 80021cc:	d001      	beq.n	80021d2 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e00c      	b.n	80021ec <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2269      	movs	r2, #105	; 0x69
 80021d6:	2120      	movs	r1, #32
 80021d8:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	226a      	movs	r2, #106	; 0x6a
 80021de:	2120      	movs	r1, #32
 80021e0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2268      	movs	r2, #104	; 0x68
 80021e6:	2100      	movs	r1, #0
 80021e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b004      	add	sp, #16
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40013800 	.word	0x40013800
 80021f8:	40004400 	.word	0x40004400
 80021fc:	01ffffff 	.word	0x01ffffff

08002200 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	1dfb      	adds	r3, r7, #7
 800220e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002210:	e02b      	b.n	800226a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	3301      	adds	r3, #1
 8002216:	d028      	beq.n	800226a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <UART_WaitOnFlagUntilTimeout+0x2e>
 800221e:	f7fe f83b 	bl	8000298 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	429a      	cmp	r2, r3
 800222c:	d21d      	bcs.n	800226a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4916      	ldr	r1, [pc, #88]	; (8002294 <UART_WaitOnFlagUntilTimeout+0x94>)
 800223a:	400a      	ands	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	438a      	bics	r2, r1
 800224c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2269      	movs	r2, #105	; 0x69
 8002252:	2120      	movs	r1, #32
 8002254:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	226a      	movs	r2, #106	; 0x6a
 800225a:	2120      	movs	r1, #32
 800225c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2268      	movs	r2, #104	; 0x68
 8002262:	2100      	movs	r1, #0
 8002264:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e00f      	b.n	800228a <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4013      	ands	r3, r2
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	425a      	negs	r2, r3
 800227a:	4153      	adcs	r3, r2
 800227c:	b2db      	uxtb	r3, r3
 800227e:	001a      	movs	r2, r3
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d0c4      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b004      	add	sp, #16
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	fffffe5f 	.word	0xfffffe5f

08002298 <_write>:
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len)
{
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d00a      	beq.n	80022c0 <_write+0x28>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d007      	beq.n	80022c0 <_write+0x28>
   {
      errno = EBADF;
 80022b0:	f000 fb26 	bl	8002900 <__errno>
 80022b4:	0003      	movs	r3, r0
 80022b6:	2209      	movs	r2, #9
 80022b8:	601a      	str	r2, [r3, #0]
      return -1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	425b      	negs	r3, r3
 80022be:	e011      	b.n	80022e4 <_write+0x4c>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 0xFFFF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	b29a      	uxth	r2, r3
   HAL_StatusTypeDef status =
 80022c4:	2517      	movs	r5, #23
 80022c6:	197c      	adds	r4, r7, r5
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <_write+0x54>)
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	4808      	ldr	r0, [pc, #32]	; (80022f0 <_write+0x58>)
 80022ce:	f7ff fc2b 	bl	8001b28 <HAL_UART_Transmit>
 80022d2:	0003      	movs	r3, r0
 80022d4:	7023      	strb	r3, [r4, #0]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80022d6:	197b      	adds	r3, r7, r5
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <_write+0x4a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	e000      	b.n	80022e4 <_write+0x4c>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b006      	add	sp, #24
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	0000ffff 	.word	0x0000ffff
 80022f0:	200000e0 	.word	0x200000e0

080022f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022fa:	f7fd ff91 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022fe:	f000 f839 	bl	8002374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002302:	f000 f8fb 	bl	80024fc <MX_GPIO_Init>
  MX_I2C2_Init();
 8002306:	f000 f889 	bl	800241c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800230a:	f000 f8c7 	bl	800249c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n");
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <main+0x6c>)
 8002310:	0018      	movs	r0, r3
 8002312:	f000 fba1 	bl	8002a58 <puts>
  printf("Printing this for debug's sake\r\n");
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <main+0x70>)
 8002318:	0018      	movs	r0, r3
 800231a:	f000 fb9d 	bl	8002a58 <puts>
  printf("Starting...\r\n");
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <main+0x74>)
 8002320:	0018      	movs	r0, r3
 8002322:	f000 fb99 	bl	8002a58 <puts>
  for(int i = 0; i < 128; i++) {
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	e015      	b.n	8002358 <main+0x64>
	  if(HAL_I2C_Master_Transmit(&hi2c2, i<<1, NULL, 0, 1) == HAL_OK) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	b29b      	uxth	r3, r3
 8002330:	18db      	adds	r3, r3, r3
 8002332:	b299      	uxth	r1, r3
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <main+0x78>)
 8002336:	2301      	movs	r3, #1
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2300      	movs	r3, #0
 800233c:	2200      	movs	r2, #0
 800233e:	f7fe fa7b 	bl	8000838 <HAL_I2C_Master_Transmit>
 8002342:	1e03      	subs	r3, r0, #0
 8002344:	d105      	bne.n	8002352 <main+0x5e>
		  printf("ACK from address 0x%x\n\r", i);
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <main+0x7c>)
 800234a:	0011      	movs	r1, r2
 800234c:	0018      	movs	r0, r3
 800234e:	f000 fb09 	bl	8002964 <iprintf>
  for(int i = 0; i < 128; i++) {
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3301      	adds	r3, #1
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b7f      	cmp	r3, #127	; 0x7f
 800235c:	dde6      	ble.n	800232c <main+0x38>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800235e:	e7fe      	b.n	800235e <main+0x6a>
 8002360:	080038a0 	.word	0x080038a0
 8002364:	080038a4 	.word	0x080038a4
 8002368:	080038c4 	.word	0x080038c4
 800236c:	20000094 	.word	0x20000094
 8002370:	080038d4 	.word	0x080038d4

08002374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b099      	sub	sp, #100	; 0x64
 8002378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800237a:	242c      	movs	r4, #44	; 0x2c
 800237c:	193b      	adds	r3, r7, r4
 800237e:	0018      	movs	r0, r3
 8002380:	2334      	movs	r3, #52	; 0x34
 8002382:	001a      	movs	r2, r3
 8002384:	2100      	movs	r1, #0
 8002386:	f000 fae5 	bl	8002954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800238a:	231c      	movs	r3, #28
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	0018      	movs	r0, r3
 8002390:	2310      	movs	r3, #16
 8002392:	001a      	movs	r2, r3
 8002394:	2100      	movs	r1, #0
 8002396:	f000 fadd 	bl	8002954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800239a:	003b      	movs	r3, r7
 800239c:	0018      	movs	r0, r3
 800239e:	231c      	movs	r3, #28
 80023a0:	001a      	movs	r2, r3
 80023a2:	2100      	movs	r1, #0
 80023a4:	f000 fad6 	bl	8002954 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80023a8:	193b      	adds	r3, r7, r4
 80023aa:	2220      	movs	r2, #32
 80023ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	2201      	movs	r2, #1
 80023b2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	2200      	movs	r2, #0
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ba:	193b      	adds	r3, r7, r4
 80023bc:	0018      	movs	r0, r3
 80023be:	f7fe fd53 	bl	8000e68 <HAL_RCC_OscConfig>
 80023c2:	1e03      	subs	r3, r0, #0
 80023c4:	d001      	beq.n	80023ca <SystemClock_Config+0x56>
  {
    Error_Handler();
 80023c6:	f000 f8db 	bl	8002580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ca:	211c      	movs	r1, #28
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	2207      	movs	r2, #7
 80023d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2203      	movs	r2, #3
 80023d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2101      	movs	r1, #1
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7ff f89d 	bl	8001528 <HAL_RCC_ClockConfig>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d001      	beq.n	80023f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80023f2:	f000 f8c5 	bl	8002580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023f6:	003b      	movs	r3, r7
 80023f8:	2202      	movs	r2, #2
 80023fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023fc:	003b      	movs	r3, r7
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002402:	003b      	movs	r3, r7
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff fa37 	bl	8001878 <HAL_RCCEx_PeriphCLKConfig>
 800240a:	1e03      	subs	r3, r0, #0
 800240c:	d001      	beq.n	8002412 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800240e:	f000 f8b7 	bl	8002580 <Error_Handler>
  }
}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b019      	add	sp, #100	; 0x64
 8002418:	bd90      	pop	{r4, r7, pc}
	...

0800241c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <MX_I2C2_Init+0x74>)
 8002422:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <MX_I2C2_Init+0x78>)
 8002424:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <MX_I2C2_Init+0x74>)
 8002428:	4a1b      	ldr	r2, [pc, #108]	; (8002498 <MX_I2C2_Init+0x7c>)
 800242a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <MX_I2C2_Init+0x74>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <MX_I2C2_Init+0x74>)
 8002434:	2201      	movs	r2, #1
 8002436:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <MX_I2C2_Init+0x74>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <MX_I2C2_Init+0x74>)
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <MX_I2C2_Init+0x74>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <MX_I2C2_Init+0x74>)
 800244c:	2200      	movs	r2, #0
 800244e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <MX_I2C2_Init+0x74>)
 8002452:	2200      	movs	r2, #0
 8002454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <MX_I2C2_Init+0x74>)
 8002458:	0018      	movs	r0, r3
 800245a:	f7fe f957 	bl	800070c <HAL_I2C_Init>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d001      	beq.n	8002466 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002462:	f000 f88d 	bl	8002580 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <MX_I2C2_Init+0x74>)
 8002468:	2100      	movs	r1, #0
 800246a:	0018      	movs	r0, r3
 800246c:	f7fe fc62 	bl	8000d34 <HAL_I2CEx_ConfigAnalogFilter>
 8002470:	1e03      	subs	r3, r0, #0
 8002472:	d001      	beq.n	8002478 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002474:	f000 f884 	bl	8002580 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <MX_I2C2_Init+0x74>)
 800247a:	2100      	movs	r1, #0
 800247c:	0018      	movs	r0, r3
 800247e:	f7fe fca5 	bl	8000dcc <HAL_I2CEx_ConfigDigitalFilter>
 8002482:	1e03      	subs	r3, r0, #0
 8002484:	d001      	beq.n	800248a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002486:	f000 f87b 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000094 	.word	0x20000094
 8002494:	40005800 	.word	0x40005800
 8002498:	20303e5d 	.word	0x20303e5d

0800249c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024a2:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <MX_USART2_UART_Init+0x5c>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024a8:	22e1      	movs	r2, #225	; 0xe1
 80024aa:	0252      	lsls	r2, r2, #9
 80024ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <MX_USART2_UART_Init+0x58>)
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7ff fac9 	bl	8001a78 <HAL_UART_Init>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d001      	beq.n	80024ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80024ea:	f000 f849 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200000e0 	.word	0x200000e0
 80024f8:	40004400 	.word	0x40004400

080024fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002502:	240c      	movs	r4, #12
 8002504:	193b      	adds	r3, r7, r4
 8002506:	0018      	movs	r0, r3
 8002508:	2314      	movs	r3, #20
 800250a:	001a      	movs	r2, r3
 800250c:	2100      	movs	r1, #0
 800250e:	f000 fa21 	bl	8002954 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <MX_GPIO_Init+0x78>)
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <MX_GPIO_Init+0x78>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0289      	lsls	r1, r1, #10
 800251c:	430a      	orrs	r2, r1
 800251e:	615a      	str	r2, [r3, #20]
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <MX_GPIO_Init+0x78>)
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <MX_GPIO_Init+0x78>)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <MX_GPIO_Init+0x78>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	02c9      	lsls	r1, r1, #11
 8002538:	430a      	orrs	r2, r1
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <MX_GPIO_Init+0x78>)
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	02db      	lsls	r3, r3, #11
 8002544:	4013      	ands	r3, r2
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : USB_ALT_Pin */
  GPIO_InitStruct.Pin = USB_ALT_Pin;
 800254a:	193b      	adds	r3, r7, r4
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	0212      	lsls	r2, r2, #8
 8002550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002552:	193b      	adds	r3, r7, r4
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <MX_GPIO_Init+0x7c>)
 8002556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002558:	193b      	adds	r3, r7, r4
 800255a:	2201      	movs	r2, #1
 800255c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_ALT_GPIO_Port, &GPIO_InitStruct);
 800255e:	193b      	adds	r3, r7, r4
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <MX_GPIO_Init+0x80>)
 8002562:	0019      	movs	r1, r3
 8002564:	0010      	movs	r0, r2
 8002566:	f7fd ff55 	bl	8000414 <HAL_GPIO_Init>

}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b009      	add	sp, #36	; 0x24
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	40021000 	.word	0x40021000
 8002578:	10210000 	.word	0x10210000
 800257c:	48000400 	.word	0x48000400

08002580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_MspInit+0x44>)
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <HAL_MspInit+0x44>)
 8002598:	2101      	movs	r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	619a      	str	r2, [r3, #24]
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_MspInit+0x44>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_MspInit+0x44>)
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_MspInit+0x44>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0549      	lsls	r1, r1, #21
 80025b4:	430a      	orrs	r2, r1
 80025b6:	61da      	str	r2, [r3, #28]
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_MspInit+0x44>)
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	4013      	ands	r3, r2
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	2314      	movs	r3, #20
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	0018      	movs	r0, r3
 80025e2:	2314      	movs	r3, #20
 80025e4:	001a      	movs	r2, r3
 80025e6:	2100      	movs	r1, #0
 80025e8:	f000 f9b4 	bl	8002954 <memset>
  if(hi2c->Instance==I2C2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <HAL_I2C_MspInit+0x90>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d132      	bne.n	800265c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_I2C_MspInit+0x94>)
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_I2C_MspInit+0x94>)
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	02c9      	lsls	r1, r1, #11
 8002600:	430a      	orrs	r2, r1
 8002602:	615a      	str	r2, [r3, #20]
 8002604:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_I2C_MspInit+0x94>)
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	02db      	lsls	r3, r3, #11
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = SCL_PIN_Pin|SDA_PIN_Pin;
 8002612:	2114      	movs	r1, #20
 8002614:	187b      	adds	r3, r7, r1
 8002616:	22c0      	movs	r2, #192	; 0xc0
 8002618:	01d2      	lsls	r2, r2, #7
 800261a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261c:	187b      	adds	r3, r7, r1
 800261e:	2212      	movs	r2, #18
 8002620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002622:	187b      	adds	r3, r7, r1
 8002624:	2201      	movs	r2, #1
 8002626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002628:	187b      	adds	r3, r7, r1
 800262a:	2203      	movs	r2, #3
 800262c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800262e:	187b      	adds	r3, r7, r1
 8002630:	2205      	movs	r2, #5
 8002632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	187b      	adds	r3, r7, r1
 8002636:	4a0d      	ldr	r2, [pc, #52]	; (800266c <HAL_I2C_MspInit+0x98>)
 8002638:	0019      	movs	r1, r3
 800263a:	0010      	movs	r0, r2
 800263c:	f7fd feea 	bl	8000414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_I2C_MspInit+0x94>)
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_I2C_MspInit+0x94>)
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	03c9      	lsls	r1, r1, #15
 800264a:	430a      	orrs	r2, r1
 800264c:	61da      	str	r2, [r3, #28]
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_I2C_MspInit+0x94>)
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	03db      	lsls	r3, r3, #15
 8002656:	4013      	ands	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b00a      	add	sp, #40	; 0x28
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40005800 	.word	0x40005800
 8002668:	40021000 	.word	0x40021000
 800266c:	48000400 	.word	0x48000400

08002670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	2314      	movs	r3, #20
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	0018      	movs	r0, r3
 800267e:	2314      	movs	r3, #20
 8002680:	001a      	movs	r2, r3
 8002682:	2100      	movs	r1, #0
 8002684:	f000 f966 	bl	8002954 <memset>
  if(huart->Instance==USART2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_UART_MspInit+0x90>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d132      	bne.n	80026f8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_UART_MspInit+0x94>)
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_UART_MspInit+0x94>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0289      	lsls	r1, r1, #10
 800269c:	430a      	orrs	r2, r1
 800269e:	61da      	str	r2, [r3, #28]
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_UART_MspInit+0x94>)
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	029b      	lsls	r3, r3, #10
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_UART_MspInit+0x94>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <HAL_UART_MspInit+0x94>)
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	0289      	lsls	r1, r1, #10
 80026b8:	430a      	orrs	r2, r1
 80026ba:	615a      	str	r2, [r3, #20]
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_UART_MspInit+0x94>)
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026ca:	2114      	movs	r1, #20
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	220c      	movs	r2, #12
 80026d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	2202      	movs	r2, #2
 80026d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	2203      	movs	r2, #3
 80026e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	2201      	movs	r2, #1
 80026e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	187a      	adds	r2, r7, r1
 80026ec:	2390      	movs	r3, #144	; 0x90
 80026ee:	05db      	lsls	r3, r3, #23
 80026f0:	0011      	movs	r1, r2
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7fd fe8e 	bl	8000414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b00a      	add	sp, #40	; 0x28
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40004400 	.word	0x40004400
 8002704:	40021000 	.word	0x40021000

08002708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <HardFault_Handler+0x4>

08002718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002730:	f7fd fda6 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e00a      	b.n	8002762 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800274c:	e000      	b.n	8002750 <_read+0x16>
 800274e:	bf00      	nop
 8002750:	0001      	movs	r1, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	60ba      	str	r2, [r7, #8]
 8002758:	b2ca      	uxtb	r2, r1
 800275a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3301      	adds	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	dbf0      	blt.n	800274c <_read+0x12>
	}

return len;
 800276a:	687b      	ldr	r3, [r7, #4]
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b006      	add	sp, #24
 8002772:	bd80      	pop	{r7, pc}

08002774 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	return -1;
 800277c:	2301      	movs	r3, #1
 800277e:	425b      	negs	r3, r3
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	0192      	lsls	r2, r2, #6
 8002798:	605a      	str	r2, [r3, #4]
	return 0;
 800279a:	2300      	movs	r3, #0
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b002      	add	sp, #8
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_isatty>:

int _isatty(int file)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	return 1;
 80027ac:	2301      	movs	r3, #1
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b002      	add	sp, #8
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
	return 0;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b004      	add	sp, #16
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <_sbrk+0x50>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <_sbrk+0x16>
		heap_end = &end;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <_sbrk+0x50>)
 80027de:	4a10      	ldr	r2, [pc, #64]	; (8002820 <_sbrk+0x54>)
 80027e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <_sbrk+0x50>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <_sbrk+0x50>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	18d3      	adds	r3, r2, r3
 80027f0:	466a      	mov	r2, sp
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d907      	bls.n	8002806 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80027f6:	f000 f883 	bl	8002900 <__errno>
 80027fa:	0003      	movs	r3, r0
 80027fc:	220c      	movs	r2, #12
 80027fe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002800:	2301      	movs	r3, #1
 8002802:	425b      	negs	r3, r3
 8002804:	e006      	b.n	8002814 <_sbrk+0x48>
	}

	heap_end += incr;
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <_sbrk+0x50>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	18d2      	adds	r2, r2, r3
 800280e:	4b03      	ldr	r3, [pc, #12]	; (800281c <_sbrk+0x50>)
 8002810:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b004      	add	sp, #16
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000084 	.word	0x20000084
 8002820:	20000158 	.word	0x20000158

08002824 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <SystemInit+0x70>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <SystemInit+0x70>)
 800282e:	2101      	movs	r1, #1
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <SystemInit+0x70>)
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <SystemInit+0x70>)
 800283a:	4917      	ldr	r1, [pc, #92]	; (8002898 <SystemInit+0x74>)
 800283c:	400a      	ands	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <SystemInit+0x70>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <SystemInit+0x70>)
 8002846:	4915      	ldr	r1, [pc, #84]	; (800289c <SystemInit+0x78>)
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <SystemInit+0x70>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b10      	ldr	r3, [pc, #64]	; (8002894 <SystemInit+0x70>)
 8002852:	4913      	ldr	r1, [pc, #76]	; (80028a0 <SystemInit+0x7c>)
 8002854:	400a      	ands	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <SystemInit+0x70>)
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <SystemInit+0x70>)
 800285e:	4911      	ldr	r1, [pc, #68]	; (80028a4 <SystemInit+0x80>)
 8002860:	400a      	ands	r2, r1
 8002862:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <SystemInit+0x70>)
 8002866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <SystemInit+0x70>)
 800286a:	210f      	movs	r1, #15
 800286c:	438a      	bics	r2, r1
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <SystemInit+0x70>)
 8002872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <SystemInit+0x70>)
 8002876:	490c      	ldr	r1, [pc, #48]	; (80028a8 <SystemInit+0x84>)
 8002878:	400a      	ands	r2, r1
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <SystemInit+0x70>)
 800287e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <SystemInit+0x70>)
 8002882:	2101      	movs	r1, #1
 8002884:	438a      	bics	r2, r1
 8002886:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002888:	4b02      	ldr	r3, [pc, #8]	; (8002894 <SystemInit+0x70>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]

}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	08ffb80c 	.word	0x08ffb80c
 800289c:	fef6ffff 	.word	0xfef6ffff
 80028a0:	fffbffff 	.word	0xfffbffff
 80028a4:	ffc0ffff 	.word	0xffc0ffff
 80028a8:	fffcfe2c 	.word	0xfffcfe2c

080028ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028ac:	480d      	ldr	r0, [pc, #52]	; (80028e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b0:	480d      	ldr	r0, [pc, #52]	; (80028e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80028b2:	490e      	ldr	r1, [pc, #56]	; (80028ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <LoopForever+0xe>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028c8:	4c0b      	ldr	r4, [pc, #44]	; (80028f8 <LoopForever+0x16>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80028d6:	f7ff ffa5 	bl	8002824 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80028da:	f000 f817 	bl	800290c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028de:	f7ff fd09 	bl	80022f4 <main>

080028e2 <LoopForever>:

LoopForever:
    b LoopForever
 80028e2:	e7fe      	b.n	80028e2 <LoopForever>
  ldr   r0, =_estack
 80028e4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80028f0:	080039a4 	.word	0x080039a4
  ldr r2, =_sbss
 80028f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80028f8:	20000154 	.word	0x20000154

080028fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028fc:	e7fe      	b.n	80028fc <ADC1_COMP_IRQHandler>
	...

08002900 <__errno>:
 8002900:	4b01      	ldr	r3, [pc, #4]	; (8002908 <__errno+0x8>)
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	4770      	bx	lr
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20000004 	.word	0x20000004

0800290c <__libc_init_array>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	2600      	movs	r6, #0
 8002910:	4d0c      	ldr	r5, [pc, #48]	; (8002944 <__libc_init_array+0x38>)
 8002912:	4c0d      	ldr	r4, [pc, #52]	; (8002948 <__libc_init_array+0x3c>)
 8002914:	1b64      	subs	r4, r4, r5
 8002916:	10a4      	asrs	r4, r4, #2
 8002918:	42a6      	cmp	r6, r4
 800291a:	d109      	bne.n	8002930 <__libc_init_array+0x24>
 800291c:	2600      	movs	r6, #0
 800291e:	f000 ffa3 	bl	8003868 <_init>
 8002922:	4d0a      	ldr	r5, [pc, #40]	; (800294c <__libc_init_array+0x40>)
 8002924:	4c0a      	ldr	r4, [pc, #40]	; (8002950 <__libc_init_array+0x44>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	42a6      	cmp	r6, r4
 800292c:	d105      	bne.n	800293a <__libc_init_array+0x2e>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	00b3      	lsls	r3, r6, #2
 8002932:	58eb      	ldr	r3, [r5, r3]
 8002934:	4798      	blx	r3
 8002936:	3601      	adds	r6, #1
 8002938:	e7ee      	b.n	8002918 <__libc_init_array+0xc>
 800293a:	00b3      	lsls	r3, r6, #2
 800293c:	58eb      	ldr	r3, [r5, r3]
 800293e:	4798      	blx	r3
 8002940:	3601      	adds	r6, #1
 8002942:	e7f2      	b.n	800292a <__libc_init_array+0x1e>
 8002944:	0800399c 	.word	0x0800399c
 8002948:	0800399c 	.word	0x0800399c
 800294c:	0800399c 	.word	0x0800399c
 8002950:	080039a0 	.word	0x080039a0

08002954 <memset>:
 8002954:	0003      	movs	r3, r0
 8002956:	1812      	adds	r2, r2, r0
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	7019      	strb	r1, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <iprintf>:
 8002964:	b40f      	push	{r0, r1, r2, r3}
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <iprintf+0x30>)
 8002968:	b513      	push	{r0, r1, r4, lr}
 800296a:	681c      	ldr	r4, [r3, #0]
 800296c:	2c00      	cmp	r4, #0
 800296e:	d005      	beq.n	800297c <iprintf+0x18>
 8002970:	69a3      	ldr	r3, [r4, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <iprintf+0x18>
 8002976:	0020      	movs	r0, r4
 8002978:	f000 fa3c 	bl	8002df4 <__sinit>
 800297c:	ab05      	add	r3, sp, #20
 800297e:	9a04      	ldr	r2, [sp, #16]
 8002980:	68a1      	ldr	r1, [r4, #8]
 8002982:	0020      	movs	r0, r4
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	f000 fc05 	bl	8003194 <_vfiprintf_r>
 800298a:	bc16      	pop	{r1, r2, r4}
 800298c:	bc08      	pop	{r3}
 800298e:	b004      	add	sp, #16
 8002990:	4718      	bx	r3
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	20000004 	.word	0x20000004

08002998 <_puts_r>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	0005      	movs	r5, r0
 800299c:	000e      	movs	r6, r1
 800299e:	2800      	cmp	r0, #0
 80029a0:	d004      	beq.n	80029ac <_puts_r+0x14>
 80029a2:	6983      	ldr	r3, [r0, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <_puts_r+0x14>
 80029a8:	f000 fa24 	bl	8002df4 <__sinit>
 80029ac:	69ab      	ldr	r3, [r5, #24]
 80029ae:	68ac      	ldr	r4, [r5, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <_puts_r+0x22>
 80029b4:	0028      	movs	r0, r5
 80029b6:	f000 fa1d 	bl	8002df4 <__sinit>
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <_puts_r+0xb4>)
 80029bc:	429c      	cmp	r4, r3
 80029be:	d10f      	bne.n	80029e0 <_puts_r+0x48>
 80029c0:	686c      	ldr	r4, [r5, #4]
 80029c2:	89a3      	ldrh	r3, [r4, #12]
 80029c4:	071b      	lsls	r3, r3, #28
 80029c6:	d502      	bpl.n	80029ce <_puts_r+0x36>
 80029c8:	6923      	ldr	r3, [r4, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d11f      	bne.n	8002a0e <_puts_r+0x76>
 80029ce:	0021      	movs	r1, r4
 80029d0:	0028      	movs	r0, r5
 80029d2:	f000 f8a1 	bl	8002b18 <__swsetup_r>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d019      	beq.n	8002a0e <_puts_r+0x76>
 80029da:	2001      	movs	r0, #1
 80029dc:	4240      	negs	r0, r0
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <_puts_r+0xb8>)
 80029e2:	429c      	cmp	r4, r3
 80029e4:	d101      	bne.n	80029ea <_puts_r+0x52>
 80029e6:	68ac      	ldr	r4, [r5, #8]
 80029e8:	e7eb      	b.n	80029c2 <_puts_r+0x2a>
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <_puts_r+0xbc>)
 80029ec:	429c      	cmp	r4, r3
 80029ee:	d1e8      	bne.n	80029c2 <_puts_r+0x2a>
 80029f0:	68ec      	ldr	r4, [r5, #12]
 80029f2:	e7e6      	b.n	80029c2 <_puts_r+0x2a>
 80029f4:	3601      	adds	r6, #1
 80029f6:	60a3      	str	r3, [r4, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da04      	bge.n	8002a06 <_puts_r+0x6e>
 80029fc:	69a2      	ldr	r2, [r4, #24]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	dc16      	bgt.n	8002a30 <_puts_r+0x98>
 8002a02:	290a      	cmp	r1, #10
 8002a04:	d014      	beq.n	8002a30 <_puts_r+0x98>
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	6022      	str	r2, [r4, #0]
 8002a0c:	7019      	strb	r1, [r3, #0]
 8002a0e:	68a3      	ldr	r3, [r4, #8]
 8002a10:	7831      	ldrb	r1, [r6, #0]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	2900      	cmp	r1, #0
 8002a16:	d1ed      	bne.n	80029f4 <_puts_r+0x5c>
 8002a18:	60a3      	str	r3, [r4, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	da0f      	bge.n	8002a3e <_puts_r+0xa6>
 8002a1e:	0022      	movs	r2, r4
 8002a20:	310a      	adds	r1, #10
 8002a22:	0028      	movs	r0, r5
 8002a24:	f000 f822 	bl	8002a6c <__swbuf_r>
 8002a28:	1c43      	adds	r3, r0, #1
 8002a2a:	d0d6      	beq.n	80029da <_puts_r+0x42>
 8002a2c:	200a      	movs	r0, #10
 8002a2e:	e7d6      	b.n	80029de <_puts_r+0x46>
 8002a30:	0022      	movs	r2, r4
 8002a32:	0028      	movs	r0, r5
 8002a34:	f000 f81a 	bl	8002a6c <__swbuf_r>
 8002a38:	1c43      	adds	r3, r0, #1
 8002a3a:	d1e8      	bne.n	8002a0e <_puts_r+0x76>
 8002a3c:	e7cd      	b.n	80029da <_puts_r+0x42>
 8002a3e:	200a      	movs	r0, #10
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	6022      	str	r2, [r4, #0]
 8002a46:	7018      	strb	r0, [r3, #0]
 8002a48:	e7c9      	b.n	80029de <_puts_r+0x46>
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	08003928 	.word	0x08003928
 8002a50:	08003948 	.word	0x08003948
 8002a54:	08003908 	.word	0x08003908

08002a58 <puts>:
 8002a58:	b510      	push	{r4, lr}
 8002a5a:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <puts+0x10>)
 8002a5c:	0001      	movs	r1, r0
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	f7ff ff9a 	bl	8002998 <_puts_r>
 8002a64:	bd10      	pop	{r4, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	20000004 	.word	0x20000004

08002a6c <__swbuf_r>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	0005      	movs	r5, r0
 8002a70:	000e      	movs	r6, r1
 8002a72:	0014      	movs	r4, r2
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d004      	beq.n	8002a82 <__swbuf_r+0x16>
 8002a78:	6983      	ldr	r3, [r0, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <__swbuf_r+0x16>
 8002a7e:	f000 f9b9 	bl	8002df4 <__sinit>
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <__swbuf_r+0xa0>)
 8002a84:	429c      	cmp	r4, r3
 8002a86:	d12d      	bne.n	8002ae4 <__swbuf_r+0x78>
 8002a88:	686c      	ldr	r4, [r5, #4]
 8002a8a:	69a3      	ldr	r3, [r4, #24]
 8002a8c:	60a3      	str	r3, [r4, #8]
 8002a8e:	89a3      	ldrh	r3, [r4, #12]
 8002a90:	071b      	lsls	r3, r3, #28
 8002a92:	d531      	bpl.n	8002af8 <__swbuf_r+0x8c>
 8002a94:	6923      	ldr	r3, [r4, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d02e      	beq.n	8002af8 <__swbuf_r+0x8c>
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	6922      	ldr	r2, [r4, #16]
 8002a9e:	b2f7      	uxtb	r7, r6
 8002aa0:	1a98      	subs	r0, r3, r2
 8002aa2:	6963      	ldr	r3, [r4, #20]
 8002aa4:	b2f6      	uxtb	r6, r6
 8002aa6:	4283      	cmp	r3, r0
 8002aa8:	dc05      	bgt.n	8002ab6 <__swbuf_r+0x4a>
 8002aaa:	0021      	movs	r1, r4
 8002aac:	0028      	movs	r0, r5
 8002aae:	f000 f933 	bl	8002d18 <_fflush_r>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d126      	bne.n	8002b04 <__swbuf_r+0x98>
 8002ab6:	68a3      	ldr	r3, [r4, #8]
 8002ab8:	3001      	adds	r0, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	60a3      	str	r3, [r4, #8]
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	6022      	str	r2, [r4, #0]
 8002ac4:	701f      	strb	r7, [r3, #0]
 8002ac6:	6963      	ldr	r3, [r4, #20]
 8002ac8:	4283      	cmp	r3, r0
 8002aca:	d004      	beq.n	8002ad6 <__swbuf_r+0x6a>
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	07db      	lsls	r3, r3, #31
 8002ad0:	d51a      	bpl.n	8002b08 <__swbuf_r+0x9c>
 8002ad2:	2e0a      	cmp	r6, #10
 8002ad4:	d118      	bne.n	8002b08 <__swbuf_r+0x9c>
 8002ad6:	0021      	movs	r1, r4
 8002ad8:	0028      	movs	r0, r5
 8002ada:	f000 f91d 	bl	8002d18 <_fflush_r>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d012      	beq.n	8002b08 <__swbuf_r+0x9c>
 8002ae2:	e00f      	b.n	8002b04 <__swbuf_r+0x98>
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <__swbuf_r+0xa4>)
 8002ae6:	429c      	cmp	r4, r3
 8002ae8:	d101      	bne.n	8002aee <__swbuf_r+0x82>
 8002aea:	68ac      	ldr	r4, [r5, #8]
 8002aec:	e7cd      	b.n	8002a8a <__swbuf_r+0x1e>
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <__swbuf_r+0xa8>)
 8002af0:	429c      	cmp	r4, r3
 8002af2:	d1ca      	bne.n	8002a8a <__swbuf_r+0x1e>
 8002af4:	68ec      	ldr	r4, [r5, #12]
 8002af6:	e7c8      	b.n	8002a8a <__swbuf_r+0x1e>
 8002af8:	0021      	movs	r1, r4
 8002afa:	0028      	movs	r0, r5
 8002afc:	f000 f80c 	bl	8002b18 <__swsetup_r>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d0ca      	beq.n	8002a9a <__swbuf_r+0x2e>
 8002b04:	2601      	movs	r6, #1
 8002b06:	4276      	negs	r6, r6
 8002b08:	0030      	movs	r0, r6
 8002b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b0c:	08003928 	.word	0x08003928
 8002b10:	08003948 	.word	0x08003948
 8002b14:	08003908 	.word	0x08003908

08002b18 <__swsetup_r>:
 8002b18:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <__swsetup_r+0xdc>)
 8002b1a:	b570      	push	{r4, r5, r6, lr}
 8002b1c:	681d      	ldr	r5, [r3, #0]
 8002b1e:	0006      	movs	r6, r0
 8002b20:	000c      	movs	r4, r1
 8002b22:	2d00      	cmp	r5, #0
 8002b24:	d005      	beq.n	8002b32 <__swsetup_r+0x1a>
 8002b26:	69ab      	ldr	r3, [r5, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <__swsetup_r+0x1a>
 8002b2c:	0028      	movs	r0, r5
 8002b2e:	f000 f961 	bl	8002df4 <__sinit>
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <__swsetup_r+0xe0>)
 8002b34:	429c      	cmp	r4, r3
 8002b36:	d10f      	bne.n	8002b58 <__swsetup_r+0x40>
 8002b38:	686c      	ldr	r4, [r5, #4]
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	5ee2      	ldrsh	r2, [r4, r3]
 8002b3e:	b293      	uxth	r3, r2
 8002b40:	0719      	lsls	r1, r3, #28
 8002b42:	d42d      	bmi.n	8002ba0 <__swsetup_r+0x88>
 8002b44:	06d9      	lsls	r1, r3, #27
 8002b46:	d411      	bmi.n	8002b6c <__swsetup_r+0x54>
 8002b48:	2309      	movs	r3, #9
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	6033      	str	r3, [r6, #0]
 8002b4e:	3337      	adds	r3, #55	; 0x37
 8002b50:	4313      	orrs	r3, r2
 8002b52:	81a3      	strh	r3, [r4, #12]
 8002b54:	4240      	negs	r0, r0
 8002b56:	bd70      	pop	{r4, r5, r6, pc}
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <__swsetup_r+0xe4>)
 8002b5a:	429c      	cmp	r4, r3
 8002b5c:	d101      	bne.n	8002b62 <__swsetup_r+0x4a>
 8002b5e:	68ac      	ldr	r4, [r5, #8]
 8002b60:	e7eb      	b.n	8002b3a <__swsetup_r+0x22>
 8002b62:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <__swsetup_r+0xe8>)
 8002b64:	429c      	cmp	r4, r3
 8002b66:	d1e8      	bne.n	8002b3a <__swsetup_r+0x22>
 8002b68:	68ec      	ldr	r4, [r5, #12]
 8002b6a:	e7e6      	b.n	8002b3a <__swsetup_r+0x22>
 8002b6c:	075b      	lsls	r3, r3, #29
 8002b6e:	d513      	bpl.n	8002b98 <__swsetup_r+0x80>
 8002b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b72:	2900      	cmp	r1, #0
 8002b74:	d008      	beq.n	8002b88 <__swsetup_r+0x70>
 8002b76:	0023      	movs	r3, r4
 8002b78:	3344      	adds	r3, #68	; 0x44
 8002b7a:	4299      	cmp	r1, r3
 8002b7c:	d002      	beq.n	8002b84 <__swsetup_r+0x6c>
 8002b7e:	0030      	movs	r0, r6
 8002b80:	f000 fa38 	bl	8002ff4 <_free_r>
 8002b84:	2300      	movs	r3, #0
 8002b86:	6363      	str	r3, [r4, #52]	; 0x34
 8002b88:	2224      	movs	r2, #36	; 0x24
 8002b8a:	89a3      	ldrh	r3, [r4, #12]
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	81a3      	strh	r3, [r4, #12]
 8002b90:	2300      	movs	r3, #0
 8002b92:	6063      	str	r3, [r4, #4]
 8002b94:	6923      	ldr	r3, [r4, #16]
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	2308      	movs	r3, #8
 8002b9a:	89a2      	ldrh	r2, [r4, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	81a3      	strh	r3, [r4, #12]
 8002ba0:	6923      	ldr	r3, [r4, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <__swsetup_r+0xa6>
 8002ba6:	21a0      	movs	r1, #160	; 0xa0
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	89a3      	ldrh	r3, [r4, #12]
 8002bac:	0089      	lsls	r1, r1, #2
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	400b      	ands	r3, r1
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d003      	beq.n	8002bbe <__swsetup_r+0xa6>
 8002bb6:	0021      	movs	r1, r4
 8002bb8:	0030      	movs	r0, r6
 8002bba:	f000 f9d7 	bl	8002f6c <__smakebuf_r>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	89a2      	ldrh	r2, [r4, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d011      	beq.n	8002bea <__swsetup_r+0xd2>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60a3      	str	r3, [r4, #8]
 8002bca:	6963      	ldr	r3, [r4, #20]
 8002bcc:	425b      	negs	r3, r3
 8002bce:	61a3      	str	r3, [r4, #24]
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	6923      	ldr	r3, [r4, #16]
 8002bd4:	4283      	cmp	r3, r0
 8002bd6:	d1be      	bne.n	8002b56 <__swsetup_r+0x3e>
 8002bd8:	230c      	movs	r3, #12
 8002bda:	5ee2      	ldrsh	r2, [r4, r3]
 8002bdc:	0613      	lsls	r3, r2, #24
 8002bde:	d5ba      	bpl.n	8002b56 <__swsetup_r+0x3e>
 8002be0:	2340      	movs	r3, #64	; 0x40
 8002be2:	4313      	orrs	r3, r2
 8002be4:	81a3      	strh	r3, [r4, #12]
 8002be6:	3801      	subs	r0, #1
 8002be8:	e7b5      	b.n	8002b56 <__swsetup_r+0x3e>
 8002bea:	0792      	lsls	r2, r2, #30
 8002bec:	d400      	bmi.n	8002bf0 <__swsetup_r+0xd8>
 8002bee:	6963      	ldr	r3, [r4, #20]
 8002bf0:	60a3      	str	r3, [r4, #8]
 8002bf2:	e7ed      	b.n	8002bd0 <__swsetup_r+0xb8>
 8002bf4:	20000004 	.word	0x20000004
 8002bf8:	08003928 	.word	0x08003928
 8002bfc:	08003948 	.word	0x08003948
 8002c00:	08003908 	.word	0x08003908

08002c04 <__sflush_r>:
 8002c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c06:	898a      	ldrh	r2, [r1, #12]
 8002c08:	0005      	movs	r5, r0
 8002c0a:	000c      	movs	r4, r1
 8002c0c:	0713      	lsls	r3, r2, #28
 8002c0e:	d460      	bmi.n	8002cd2 <__sflush_r+0xce>
 8002c10:	684b      	ldr	r3, [r1, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	dc04      	bgt.n	8002c20 <__sflush_r+0x1c>
 8002c16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	dc01      	bgt.n	8002c20 <__sflush_r+0x1c>
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c22:	2f00      	cmp	r7, #0
 8002c24:	d0fa      	beq.n	8002c1c <__sflush_r+0x18>
 8002c26:	2300      	movs	r3, #0
 8002c28:	682e      	ldr	r6, [r5, #0]
 8002c2a:	602b      	str	r3, [r5, #0]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	015b      	lsls	r3, r3, #5
 8002c30:	6a21      	ldr	r1, [r4, #32]
 8002c32:	401a      	ands	r2, r3
 8002c34:	d034      	beq.n	8002ca0 <__sflush_r+0x9c>
 8002c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	075b      	lsls	r3, r3, #29
 8002c3c:	d506      	bpl.n	8002c4c <__sflush_r+0x48>
 8002c3e:	6863      	ldr	r3, [r4, #4]
 8002c40:	1ac0      	subs	r0, r0, r3
 8002c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <__sflush_r+0x48>
 8002c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c4a:	1ac0      	subs	r0, r0, r3
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	6a21      	ldr	r1, [r4, #32]
 8002c50:	2300      	movs	r3, #0
 8002c52:	0028      	movs	r0, r5
 8002c54:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c56:	47b8      	blx	r7
 8002c58:	89a1      	ldrh	r1, [r4, #12]
 8002c5a:	1c43      	adds	r3, r0, #1
 8002c5c:	d106      	bne.n	8002c6c <__sflush_r+0x68>
 8002c5e:	682b      	ldr	r3, [r5, #0]
 8002c60:	2b1d      	cmp	r3, #29
 8002c62:	d830      	bhi.n	8002cc6 <__sflush_r+0xc2>
 8002c64:	4a2b      	ldr	r2, [pc, #172]	; (8002d14 <__sflush_r+0x110>)
 8002c66:	40da      	lsrs	r2, r3
 8002c68:	07d3      	lsls	r3, r2, #31
 8002c6a:	d52c      	bpl.n	8002cc6 <__sflush_r+0xc2>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	6063      	str	r3, [r4, #4]
 8002c70:	6923      	ldr	r3, [r4, #16]
 8002c72:	6023      	str	r3, [r4, #0]
 8002c74:	04cb      	lsls	r3, r1, #19
 8002c76:	d505      	bpl.n	8002c84 <__sflush_r+0x80>
 8002c78:	1c43      	adds	r3, r0, #1
 8002c7a:	d102      	bne.n	8002c82 <__sflush_r+0x7e>
 8002c7c:	682b      	ldr	r3, [r5, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d100      	bne.n	8002c84 <__sflush_r+0x80>
 8002c82:	6560      	str	r0, [r4, #84]	; 0x54
 8002c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c86:	602e      	str	r6, [r5, #0]
 8002c88:	2900      	cmp	r1, #0
 8002c8a:	d0c7      	beq.n	8002c1c <__sflush_r+0x18>
 8002c8c:	0023      	movs	r3, r4
 8002c8e:	3344      	adds	r3, #68	; 0x44
 8002c90:	4299      	cmp	r1, r3
 8002c92:	d002      	beq.n	8002c9a <__sflush_r+0x96>
 8002c94:	0028      	movs	r0, r5
 8002c96:	f000 f9ad 	bl	8002ff4 <_free_r>
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	6360      	str	r0, [r4, #52]	; 0x34
 8002c9e:	e7be      	b.n	8002c1e <__sflush_r+0x1a>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	0028      	movs	r0, r5
 8002ca4:	47b8      	blx	r7
 8002ca6:	1c43      	adds	r3, r0, #1
 8002ca8:	d1c6      	bne.n	8002c38 <__sflush_r+0x34>
 8002caa:	682b      	ldr	r3, [r5, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0c3      	beq.n	8002c38 <__sflush_r+0x34>
 8002cb0:	2b1d      	cmp	r3, #29
 8002cb2:	d001      	beq.n	8002cb8 <__sflush_r+0xb4>
 8002cb4:	2b16      	cmp	r3, #22
 8002cb6:	d101      	bne.n	8002cbc <__sflush_r+0xb8>
 8002cb8:	602e      	str	r6, [r5, #0]
 8002cba:	e7af      	b.n	8002c1c <__sflush_r+0x18>
 8002cbc:	2340      	movs	r3, #64	; 0x40
 8002cbe:	89a2      	ldrh	r2, [r4, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	81a3      	strh	r3, [r4, #12]
 8002cc4:	e7ab      	b.n	8002c1e <__sflush_r+0x1a>
 8002cc6:	2340      	movs	r3, #64	; 0x40
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	2001      	movs	r0, #1
 8002ccc:	81a3      	strh	r3, [r4, #12]
 8002cce:	4240      	negs	r0, r0
 8002cd0:	e7a5      	b.n	8002c1e <__sflush_r+0x1a>
 8002cd2:	690f      	ldr	r7, [r1, #16]
 8002cd4:	2f00      	cmp	r7, #0
 8002cd6:	d0a1      	beq.n	8002c1c <__sflush_r+0x18>
 8002cd8:	680b      	ldr	r3, [r1, #0]
 8002cda:	600f      	str	r7, [r1, #0]
 8002cdc:	1bdb      	subs	r3, r3, r7
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	0792      	lsls	r2, r2, #30
 8002ce4:	d100      	bne.n	8002ce8 <__sflush_r+0xe4>
 8002ce6:	694b      	ldr	r3, [r1, #20]
 8002ce8:	60a3      	str	r3, [r4, #8]
 8002cea:	9b01      	ldr	r3, [sp, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	dc00      	bgt.n	8002cf2 <__sflush_r+0xee>
 8002cf0:	e794      	b.n	8002c1c <__sflush_r+0x18>
 8002cf2:	9b01      	ldr	r3, [sp, #4]
 8002cf4:	003a      	movs	r2, r7
 8002cf6:	6a21      	ldr	r1, [r4, #32]
 8002cf8:	0028      	movs	r0, r5
 8002cfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002cfc:	47b0      	blx	r6
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	dc03      	bgt.n	8002d0a <__sflush_r+0x106>
 8002d02:	2340      	movs	r3, #64	; 0x40
 8002d04:	89a2      	ldrh	r2, [r4, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	e7df      	b.n	8002cca <__sflush_r+0xc6>
 8002d0a:	9b01      	ldr	r3, [sp, #4]
 8002d0c:	183f      	adds	r7, r7, r0
 8002d0e:	1a1b      	subs	r3, r3, r0
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	e7ea      	b.n	8002cea <__sflush_r+0xe6>
 8002d14:	20400001 	.word	0x20400001

08002d18 <_fflush_r>:
 8002d18:	690b      	ldr	r3, [r1, #16]
 8002d1a:	b570      	push	{r4, r5, r6, lr}
 8002d1c:	0005      	movs	r5, r0
 8002d1e:	000c      	movs	r4, r1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <_fflush_r+0x10>
 8002d24:	2000      	movs	r0, #0
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d004      	beq.n	8002d36 <_fflush_r+0x1e>
 8002d2c:	6983      	ldr	r3, [r0, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <_fflush_r+0x1e>
 8002d32:	f000 f85f 	bl	8002df4 <__sinit>
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <_fflush_r+0x4c>)
 8002d38:	429c      	cmp	r4, r3
 8002d3a:	d109      	bne.n	8002d50 <_fflush_r+0x38>
 8002d3c:	686c      	ldr	r4, [r5, #4]
 8002d3e:	220c      	movs	r2, #12
 8002d40:	5ea3      	ldrsh	r3, [r4, r2]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ee      	beq.n	8002d24 <_fflush_r+0xc>
 8002d46:	0021      	movs	r1, r4
 8002d48:	0028      	movs	r0, r5
 8002d4a:	f7ff ff5b 	bl	8002c04 <__sflush_r>
 8002d4e:	e7ea      	b.n	8002d26 <_fflush_r+0xe>
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <_fflush_r+0x50>)
 8002d52:	429c      	cmp	r4, r3
 8002d54:	d101      	bne.n	8002d5a <_fflush_r+0x42>
 8002d56:	68ac      	ldr	r4, [r5, #8]
 8002d58:	e7f1      	b.n	8002d3e <_fflush_r+0x26>
 8002d5a:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <_fflush_r+0x54>)
 8002d5c:	429c      	cmp	r4, r3
 8002d5e:	d1ee      	bne.n	8002d3e <_fflush_r+0x26>
 8002d60:	68ec      	ldr	r4, [r5, #12]
 8002d62:	e7ec      	b.n	8002d3e <_fflush_r+0x26>
 8002d64:	08003928 	.word	0x08003928
 8002d68:	08003948 	.word	0x08003948
 8002d6c:	08003908 	.word	0x08003908

08002d70 <std>:
 8002d70:	2300      	movs	r3, #0
 8002d72:	b510      	push	{r4, lr}
 8002d74:	0004      	movs	r4, r0
 8002d76:	6003      	str	r3, [r0, #0]
 8002d78:	6043      	str	r3, [r0, #4]
 8002d7a:	6083      	str	r3, [r0, #8]
 8002d7c:	8181      	strh	r1, [r0, #12]
 8002d7e:	6643      	str	r3, [r0, #100]	; 0x64
 8002d80:	81c2      	strh	r2, [r0, #14]
 8002d82:	6103      	str	r3, [r0, #16]
 8002d84:	6143      	str	r3, [r0, #20]
 8002d86:	6183      	str	r3, [r0, #24]
 8002d88:	0019      	movs	r1, r3
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	305c      	adds	r0, #92	; 0x5c
 8002d8e:	f7ff fde1 	bl	8002954 <memset>
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <std+0x38>)
 8002d94:	6224      	str	r4, [r4, #32]
 8002d96:	6263      	str	r3, [r4, #36]	; 0x24
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <std+0x3c>)
 8002d9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <std+0x40>)
 8002d9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <std+0x44>)
 8002da2:	6323      	str	r3, [r4, #48]	; 0x30
 8002da4:	bd10      	pop	{r4, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	080036d1 	.word	0x080036d1
 8002dac:	080036f9 	.word	0x080036f9
 8002db0:	08003731 	.word	0x08003731
 8002db4:	0800375d 	.word	0x0800375d

08002db8 <_cleanup_r>:
 8002db8:	b510      	push	{r4, lr}
 8002dba:	4902      	ldr	r1, [pc, #8]	; (8002dc4 <_cleanup_r+0xc>)
 8002dbc:	f000 f88c 	bl	8002ed8 <_fwalk_reent>
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	08002d19 	.word	0x08002d19

08002dc8 <__sfmoreglue>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	2568      	movs	r5, #104	; 0x68
 8002dcc:	1e4a      	subs	r2, r1, #1
 8002dce:	4355      	muls	r5, r2
 8002dd0:	000e      	movs	r6, r1
 8002dd2:	0029      	movs	r1, r5
 8002dd4:	3174      	adds	r1, #116	; 0x74
 8002dd6:	f000 f957 	bl	8003088 <_malloc_r>
 8002dda:	1e04      	subs	r4, r0, #0
 8002ddc:	d008      	beq.n	8002df0 <__sfmoreglue+0x28>
 8002dde:	2100      	movs	r1, #0
 8002de0:	002a      	movs	r2, r5
 8002de2:	6001      	str	r1, [r0, #0]
 8002de4:	6046      	str	r6, [r0, #4]
 8002de6:	300c      	adds	r0, #12
 8002de8:	60a0      	str	r0, [r4, #8]
 8002dea:	3268      	adds	r2, #104	; 0x68
 8002dec:	f7ff fdb2 	bl	8002954 <memset>
 8002df0:	0020      	movs	r0, r4
 8002df2:	bd70      	pop	{r4, r5, r6, pc}

08002df4 <__sinit>:
 8002df4:	6983      	ldr	r3, [r0, #24]
 8002df6:	b513      	push	{r0, r1, r4, lr}
 8002df8:	0004      	movs	r4, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d128      	bne.n	8002e50 <__sinit+0x5c>
 8002dfe:	6483      	str	r3, [r0, #72]	; 0x48
 8002e00:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002e02:	6503      	str	r3, [r0, #80]	; 0x50
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <__sinit+0x60>)
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <__sinit+0x64>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6282      	str	r2, [r0, #40]	; 0x28
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	4298      	cmp	r0, r3
 8002e10:	d101      	bne.n	8002e16 <__sinit+0x22>
 8002e12:	2301      	movs	r3, #1
 8002e14:	6183      	str	r3, [r0, #24]
 8002e16:	0020      	movs	r0, r4
 8002e18:	f000 f820 	bl	8002e5c <__sfp>
 8002e1c:	6060      	str	r0, [r4, #4]
 8002e1e:	0020      	movs	r0, r4
 8002e20:	f000 f81c 	bl	8002e5c <__sfp>
 8002e24:	60a0      	str	r0, [r4, #8]
 8002e26:	0020      	movs	r0, r4
 8002e28:	f000 f818 	bl	8002e5c <__sfp>
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	60e0      	str	r0, [r4, #12]
 8002e30:	2104      	movs	r1, #4
 8002e32:	6860      	ldr	r0, [r4, #4]
 8002e34:	f7ff ff9c 	bl	8002d70 <std>
 8002e38:	2201      	movs	r2, #1
 8002e3a:	2109      	movs	r1, #9
 8002e3c:	68a0      	ldr	r0, [r4, #8]
 8002e3e:	f7ff ff97 	bl	8002d70 <std>
 8002e42:	2202      	movs	r2, #2
 8002e44:	2112      	movs	r1, #18
 8002e46:	68e0      	ldr	r0, [r4, #12]
 8002e48:	f7ff ff92 	bl	8002d70 <std>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	61a3      	str	r3, [r4, #24]
 8002e50:	bd13      	pop	{r0, r1, r4, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	08003904 	.word	0x08003904
 8002e58:	08002db9 	.word	0x08002db9

08002e5c <__sfp>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <__sfp+0x74>)
 8002e60:	0007      	movs	r7, r0
 8002e62:	681e      	ldr	r6, [r3, #0]
 8002e64:	69b3      	ldr	r3, [r6, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <__sfp+0x14>
 8002e6a:	0030      	movs	r0, r6
 8002e6c:	f7ff ffc2 	bl	8002df4 <__sinit>
 8002e70:	3648      	adds	r6, #72	; 0x48
 8002e72:	68b4      	ldr	r4, [r6, #8]
 8002e74:	6873      	ldr	r3, [r6, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	d504      	bpl.n	8002e84 <__sfp+0x28>
 8002e7a:	6833      	ldr	r3, [r6, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <__sfp+0x34>
 8002e80:	6836      	ldr	r6, [r6, #0]
 8002e82:	e7f6      	b.n	8002e72 <__sfp+0x16>
 8002e84:	220c      	movs	r2, #12
 8002e86:	5ea5      	ldrsh	r5, [r4, r2]
 8002e88:	2d00      	cmp	r5, #0
 8002e8a:	d00d      	beq.n	8002ea8 <__sfp+0x4c>
 8002e8c:	3468      	adds	r4, #104	; 0x68
 8002e8e:	e7f2      	b.n	8002e76 <__sfp+0x1a>
 8002e90:	2104      	movs	r1, #4
 8002e92:	0038      	movs	r0, r7
 8002e94:	f7ff ff98 	bl	8002dc8 <__sfmoreglue>
 8002e98:	6030      	str	r0, [r6, #0]
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d1f0      	bne.n	8002e80 <__sfp+0x24>
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	0004      	movs	r4, r0
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	0020      	movs	r0, r4
 8002ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea8:	0020      	movs	r0, r4
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <__sfp+0x78>)
 8002eac:	6665      	str	r5, [r4, #100]	; 0x64
 8002eae:	6025      	str	r5, [r4, #0]
 8002eb0:	6065      	str	r5, [r4, #4]
 8002eb2:	60a5      	str	r5, [r4, #8]
 8002eb4:	60e3      	str	r3, [r4, #12]
 8002eb6:	6125      	str	r5, [r4, #16]
 8002eb8:	6165      	str	r5, [r4, #20]
 8002eba:	61a5      	str	r5, [r4, #24]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	0029      	movs	r1, r5
 8002ec0:	305c      	adds	r0, #92	; 0x5c
 8002ec2:	f7ff fd47 	bl	8002954 <memset>
 8002ec6:	6365      	str	r5, [r4, #52]	; 0x34
 8002ec8:	63a5      	str	r5, [r4, #56]	; 0x38
 8002eca:	64a5      	str	r5, [r4, #72]	; 0x48
 8002ecc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002ece:	e7e9      	b.n	8002ea4 <__sfp+0x48>
 8002ed0:	08003904 	.word	0x08003904
 8002ed4:	ffff0001 	.word	0xffff0001

08002ed8 <_fwalk_reent>:
 8002ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eda:	0004      	movs	r4, r0
 8002edc:	0007      	movs	r7, r0
 8002ede:	2600      	movs	r6, #0
 8002ee0:	9101      	str	r1, [sp, #4]
 8002ee2:	3448      	adds	r4, #72	; 0x48
 8002ee4:	2c00      	cmp	r4, #0
 8002ee6:	d101      	bne.n	8002eec <_fwalk_reent+0x14>
 8002ee8:	0030      	movs	r0, r6
 8002eea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002eec:	6863      	ldr	r3, [r4, #4]
 8002eee:	68a5      	ldr	r5, [r4, #8]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	9b00      	ldr	r3, [sp, #0]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	d501      	bpl.n	8002efe <_fwalk_reent+0x26>
 8002efa:	6824      	ldr	r4, [r4, #0]
 8002efc:	e7f2      	b.n	8002ee4 <_fwalk_reent+0xc>
 8002efe:	89ab      	ldrh	r3, [r5, #12]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d908      	bls.n	8002f16 <_fwalk_reent+0x3e>
 8002f04:	220e      	movs	r2, #14
 8002f06:	5eab      	ldrsh	r3, [r5, r2]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	d004      	beq.n	8002f16 <_fwalk_reent+0x3e>
 8002f0c:	0029      	movs	r1, r5
 8002f0e:	0038      	movs	r0, r7
 8002f10:	9b01      	ldr	r3, [sp, #4]
 8002f12:	4798      	blx	r3
 8002f14:	4306      	orrs	r6, r0
 8002f16:	3568      	adds	r5, #104	; 0x68
 8002f18:	e7eb      	b.n	8002ef2 <_fwalk_reent+0x1a>
	...

08002f1c <__swhatbuf_r>:
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	000e      	movs	r6, r1
 8002f20:	001d      	movs	r5, r3
 8002f22:	230e      	movs	r3, #14
 8002f24:	5ec9      	ldrsh	r1, [r1, r3]
 8002f26:	b096      	sub	sp, #88	; 0x58
 8002f28:	0014      	movs	r4, r2
 8002f2a:	2900      	cmp	r1, #0
 8002f2c:	da07      	bge.n	8002f3e <__swhatbuf_r+0x22>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	602b      	str	r3, [r5, #0]
 8002f32:	89b3      	ldrh	r3, [r6, #12]
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	d411      	bmi.n	8002f5c <__swhatbuf_r+0x40>
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	e00f      	b.n	8002f5e <__swhatbuf_r+0x42>
 8002f3e:	466a      	mov	r2, sp
 8002f40:	f000 fc38 	bl	80037b4 <_fstat_r>
 8002f44:	2800      	cmp	r0, #0
 8002f46:	dbf2      	blt.n	8002f2e <__swhatbuf_r+0x12>
 8002f48:	22f0      	movs	r2, #240	; 0xf0
 8002f4a:	9b01      	ldr	r3, [sp, #4]
 8002f4c:	0212      	lsls	r2, r2, #8
 8002f4e:	4013      	ands	r3, r2
 8002f50:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <__swhatbuf_r+0x4c>)
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	425a      	negs	r2, r3
 8002f56:	4153      	adcs	r3, r2
 8002f58:	602b      	str	r3, [r5, #0]
 8002f5a:	e7ed      	b.n	8002f38 <__swhatbuf_r+0x1c>
 8002f5c:	2340      	movs	r3, #64	; 0x40
 8002f5e:	2000      	movs	r0, #0
 8002f60:	6023      	str	r3, [r4, #0]
 8002f62:	b016      	add	sp, #88	; 0x58
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	ffffe000 	.word	0xffffe000

08002f6c <__smakebuf_r>:
 8002f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f6e:	2602      	movs	r6, #2
 8002f70:	898b      	ldrh	r3, [r1, #12]
 8002f72:	0005      	movs	r5, r0
 8002f74:	000c      	movs	r4, r1
 8002f76:	4233      	tst	r3, r6
 8002f78:	d006      	beq.n	8002f88 <__smakebuf_r+0x1c>
 8002f7a:	0023      	movs	r3, r4
 8002f7c:	3347      	adds	r3, #71	; 0x47
 8002f7e:	6023      	str	r3, [r4, #0]
 8002f80:	6123      	str	r3, [r4, #16]
 8002f82:	2301      	movs	r3, #1
 8002f84:	6163      	str	r3, [r4, #20]
 8002f86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002f88:	ab01      	add	r3, sp, #4
 8002f8a:	466a      	mov	r2, sp
 8002f8c:	f7ff ffc6 	bl	8002f1c <__swhatbuf_r>
 8002f90:	9900      	ldr	r1, [sp, #0]
 8002f92:	0007      	movs	r7, r0
 8002f94:	0028      	movs	r0, r5
 8002f96:	f000 f877 	bl	8003088 <_malloc_r>
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d108      	bne.n	8002fb0 <__smakebuf_r+0x44>
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	5ea3      	ldrsh	r3, [r4, r2]
 8002fa2:	059a      	lsls	r2, r3, #22
 8002fa4:	d4ef      	bmi.n	8002f86 <__smakebuf_r+0x1a>
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	4393      	bics	r3, r2
 8002faa:	431e      	orrs	r6, r3
 8002fac:	81a6      	strh	r6, [r4, #12]
 8002fae:	e7e4      	b.n	8002f7a <__smakebuf_r+0xe>
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <__smakebuf_r+0x84>)
 8002fb2:	62ab      	str	r3, [r5, #40]	; 0x28
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	89a2      	ldrh	r2, [r4, #12]
 8002fb8:	6020      	str	r0, [r4, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	81a3      	strh	r3, [r4, #12]
 8002fbe:	9b00      	ldr	r3, [sp, #0]
 8002fc0:	6120      	str	r0, [r4, #16]
 8002fc2:	6163      	str	r3, [r4, #20]
 8002fc4:	9b01      	ldr	r3, [sp, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <__smakebuf_r+0x7a>
 8002fca:	230e      	movs	r3, #14
 8002fcc:	5ee1      	ldrsh	r1, [r4, r3]
 8002fce:	0028      	movs	r0, r5
 8002fd0:	f000 fc02 	bl	80037d8 <_isatty_r>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d006      	beq.n	8002fe6 <__smakebuf_r+0x7a>
 8002fd8:	2203      	movs	r2, #3
 8002fda:	89a3      	ldrh	r3, [r4, #12]
 8002fdc:	4393      	bics	r3, r2
 8002fde:	001a      	movs	r2, r3
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	81a3      	strh	r3, [r4, #12]
 8002fe6:	89a0      	ldrh	r0, [r4, #12]
 8002fe8:	4338      	orrs	r0, r7
 8002fea:	81a0      	strh	r0, [r4, #12]
 8002fec:	e7cb      	b.n	8002f86 <__smakebuf_r+0x1a>
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	08002db9 	.word	0x08002db9

08002ff4 <_free_r>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	0005      	movs	r5, r0
 8002ff8:	2900      	cmp	r1, #0
 8002ffa:	d010      	beq.n	800301e <_free_r+0x2a>
 8002ffc:	1f0c      	subs	r4, r1, #4
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	da00      	bge.n	8003006 <_free_r+0x12>
 8003004:	18e4      	adds	r4, r4, r3
 8003006:	0028      	movs	r0, r5
 8003008:	f000 fc17 	bl	800383a <__malloc_lock>
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <_free_r+0x90>)
 800300e:	6813      	ldr	r3, [r2, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <_free_r+0x2c>
 8003014:	6063      	str	r3, [r4, #4]
 8003016:	6014      	str	r4, [r2, #0]
 8003018:	0028      	movs	r0, r5
 800301a:	f000 fc0f 	bl	800383c <__malloc_unlock>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	42a3      	cmp	r3, r4
 8003022:	d909      	bls.n	8003038 <_free_r+0x44>
 8003024:	6821      	ldr	r1, [r4, #0]
 8003026:	1860      	adds	r0, r4, r1
 8003028:	4283      	cmp	r3, r0
 800302a:	d1f3      	bne.n	8003014 <_free_r+0x20>
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	1841      	adds	r1, r0, r1
 8003032:	6021      	str	r1, [r4, #0]
 8003034:	e7ee      	b.n	8003014 <_free_r+0x20>
 8003036:	0013      	movs	r3, r2
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	2a00      	cmp	r2, #0
 800303c:	d001      	beq.n	8003042 <_free_r+0x4e>
 800303e:	42a2      	cmp	r2, r4
 8003040:	d9f9      	bls.n	8003036 <_free_r+0x42>
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	1858      	adds	r0, r3, r1
 8003046:	42a0      	cmp	r0, r4
 8003048:	d10b      	bne.n	8003062 <_free_r+0x6e>
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	1809      	adds	r1, r1, r0
 800304e:	1858      	adds	r0, r3, r1
 8003050:	6019      	str	r1, [r3, #0]
 8003052:	4282      	cmp	r2, r0
 8003054:	d1e0      	bne.n	8003018 <_free_r+0x24>
 8003056:	6810      	ldr	r0, [r2, #0]
 8003058:	6852      	ldr	r2, [r2, #4]
 800305a:	1841      	adds	r1, r0, r1
 800305c:	6019      	str	r1, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	e7da      	b.n	8003018 <_free_r+0x24>
 8003062:	42a0      	cmp	r0, r4
 8003064:	d902      	bls.n	800306c <_free_r+0x78>
 8003066:	230c      	movs	r3, #12
 8003068:	602b      	str	r3, [r5, #0]
 800306a:	e7d5      	b.n	8003018 <_free_r+0x24>
 800306c:	6821      	ldr	r1, [r4, #0]
 800306e:	1860      	adds	r0, r4, r1
 8003070:	4282      	cmp	r2, r0
 8003072:	d103      	bne.n	800307c <_free_r+0x88>
 8003074:	6810      	ldr	r0, [r2, #0]
 8003076:	6852      	ldr	r2, [r2, #4]
 8003078:	1841      	adds	r1, r0, r1
 800307a:	6021      	str	r1, [r4, #0]
 800307c:	6062      	str	r2, [r4, #4]
 800307e:	605c      	str	r4, [r3, #4]
 8003080:	e7ca      	b.n	8003018 <_free_r+0x24>
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	20000088 	.word	0x20000088

08003088 <_malloc_r>:
 8003088:	2303      	movs	r3, #3
 800308a:	b570      	push	{r4, r5, r6, lr}
 800308c:	1ccd      	adds	r5, r1, #3
 800308e:	439d      	bics	r5, r3
 8003090:	3508      	adds	r5, #8
 8003092:	0006      	movs	r6, r0
 8003094:	2d0c      	cmp	r5, #12
 8003096:	d21e      	bcs.n	80030d6 <_malloc_r+0x4e>
 8003098:	250c      	movs	r5, #12
 800309a:	42a9      	cmp	r1, r5
 800309c:	d81d      	bhi.n	80030da <_malloc_r+0x52>
 800309e:	0030      	movs	r0, r6
 80030a0:	f000 fbcb 	bl	800383a <__malloc_lock>
 80030a4:	4a25      	ldr	r2, [pc, #148]	; (800313c <_malloc_r+0xb4>)
 80030a6:	6814      	ldr	r4, [r2, #0]
 80030a8:	0021      	movs	r1, r4
 80030aa:	2900      	cmp	r1, #0
 80030ac:	d119      	bne.n	80030e2 <_malloc_r+0x5a>
 80030ae:	4c24      	ldr	r4, [pc, #144]	; (8003140 <_malloc_r+0xb8>)
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <_malloc_r+0x36>
 80030b6:	0030      	movs	r0, r6
 80030b8:	f000 faf8 	bl	80036ac <_sbrk_r>
 80030bc:	6020      	str	r0, [r4, #0]
 80030be:	0029      	movs	r1, r5
 80030c0:	0030      	movs	r0, r6
 80030c2:	f000 faf3 	bl	80036ac <_sbrk_r>
 80030c6:	1c43      	adds	r3, r0, #1
 80030c8:	d12b      	bne.n	8003122 <_malloc_r+0x9a>
 80030ca:	230c      	movs	r3, #12
 80030cc:	0030      	movs	r0, r6
 80030ce:	6033      	str	r3, [r6, #0]
 80030d0:	f000 fbb4 	bl	800383c <__malloc_unlock>
 80030d4:	e003      	b.n	80030de <_malloc_r+0x56>
 80030d6:	2d00      	cmp	r5, #0
 80030d8:	dadf      	bge.n	800309a <_malloc_r+0x12>
 80030da:	230c      	movs	r3, #12
 80030dc:	6033      	str	r3, [r6, #0]
 80030de:	2000      	movs	r0, #0
 80030e0:	bd70      	pop	{r4, r5, r6, pc}
 80030e2:	680b      	ldr	r3, [r1, #0]
 80030e4:	1b5b      	subs	r3, r3, r5
 80030e6:	d419      	bmi.n	800311c <_malloc_r+0x94>
 80030e8:	2b0b      	cmp	r3, #11
 80030ea:	d903      	bls.n	80030f4 <_malloc_r+0x6c>
 80030ec:	600b      	str	r3, [r1, #0]
 80030ee:	18cc      	adds	r4, r1, r3
 80030f0:	6025      	str	r5, [r4, #0]
 80030f2:	e003      	b.n	80030fc <_malloc_r+0x74>
 80030f4:	684b      	ldr	r3, [r1, #4]
 80030f6:	428c      	cmp	r4, r1
 80030f8:	d10d      	bne.n	8003116 <_malloc_r+0x8e>
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	0030      	movs	r0, r6
 80030fe:	f000 fb9d 	bl	800383c <__malloc_unlock>
 8003102:	0020      	movs	r0, r4
 8003104:	2207      	movs	r2, #7
 8003106:	300b      	adds	r0, #11
 8003108:	1d23      	adds	r3, r4, #4
 800310a:	4390      	bics	r0, r2
 800310c:	1ac3      	subs	r3, r0, r3
 800310e:	d0e7      	beq.n	80030e0 <_malloc_r+0x58>
 8003110:	425a      	negs	r2, r3
 8003112:	50e2      	str	r2, [r4, r3]
 8003114:	e7e4      	b.n	80030e0 <_malloc_r+0x58>
 8003116:	6063      	str	r3, [r4, #4]
 8003118:	000c      	movs	r4, r1
 800311a:	e7ef      	b.n	80030fc <_malloc_r+0x74>
 800311c:	000c      	movs	r4, r1
 800311e:	6849      	ldr	r1, [r1, #4]
 8003120:	e7c3      	b.n	80030aa <_malloc_r+0x22>
 8003122:	2303      	movs	r3, #3
 8003124:	1cc4      	adds	r4, r0, #3
 8003126:	439c      	bics	r4, r3
 8003128:	42a0      	cmp	r0, r4
 800312a:	d0e1      	beq.n	80030f0 <_malloc_r+0x68>
 800312c:	1a21      	subs	r1, r4, r0
 800312e:	0030      	movs	r0, r6
 8003130:	f000 fabc 	bl	80036ac <_sbrk_r>
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	d1db      	bne.n	80030f0 <_malloc_r+0x68>
 8003138:	e7c7      	b.n	80030ca <_malloc_r+0x42>
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	20000088 	.word	0x20000088
 8003140:	2000008c 	.word	0x2000008c

08003144 <__sfputc_r>:
 8003144:	6893      	ldr	r3, [r2, #8]
 8003146:	b510      	push	{r4, lr}
 8003148:	3b01      	subs	r3, #1
 800314a:	6093      	str	r3, [r2, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	da04      	bge.n	800315a <__sfputc_r+0x16>
 8003150:	6994      	ldr	r4, [r2, #24]
 8003152:	42a3      	cmp	r3, r4
 8003154:	db07      	blt.n	8003166 <__sfputc_r+0x22>
 8003156:	290a      	cmp	r1, #10
 8003158:	d005      	beq.n	8003166 <__sfputc_r+0x22>
 800315a:	6813      	ldr	r3, [r2, #0]
 800315c:	1c58      	adds	r0, r3, #1
 800315e:	6010      	str	r0, [r2, #0]
 8003160:	7019      	strb	r1, [r3, #0]
 8003162:	0008      	movs	r0, r1
 8003164:	bd10      	pop	{r4, pc}
 8003166:	f7ff fc81 	bl	8002a6c <__swbuf_r>
 800316a:	0001      	movs	r1, r0
 800316c:	e7f9      	b.n	8003162 <__sfputc_r+0x1e>

0800316e <__sfputs_r>:
 800316e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003170:	0006      	movs	r6, r0
 8003172:	000f      	movs	r7, r1
 8003174:	0014      	movs	r4, r2
 8003176:	18d5      	adds	r5, r2, r3
 8003178:	42ac      	cmp	r4, r5
 800317a:	d101      	bne.n	8003180 <__sfputs_r+0x12>
 800317c:	2000      	movs	r0, #0
 800317e:	e007      	b.n	8003190 <__sfputs_r+0x22>
 8003180:	7821      	ldrb	r1, [r4, #0]
 8003182:	003a      	movs	r2, r7
 8003184:	0030      	movs	r0, r6
 8003186:	f7ff ffdd 	bl	8003144 <__sfputc_r>
 800318a:	3401      	adds	r4, #1
 800318c:	1c43      	adds	r3, r0, #1
 800318e:	d1f3      	bne.n	8003178 <__sfputs_r+0xa>
 8003190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003194 <_vfiprintf_r>:
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	b0a1      	sub	sp, #132	; 0x84
 8003198:	9003      	str	r0, [sp, #12]
 800319a:	000f      	movs	r7, r1
 800319c:	0016      	movs	r6, r2
 800319e:	001d      	movs	r5, r3
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d005      	beq.n	80031b0 <_vfiprintf_r+0x1c>
 80031a4:	6983      	ldr	r3, [r0, #24]
 80031a6:	9305      	str	r3, [sp, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <_vfiprintf_r+0x1c>
 80031ac:	f7ff fe22 	bl	8002df4 <__sinit>
 80031b0:	4b7b      	ldr	r3, [pc, #492]	; (80033a0 <_vfiprintf_r+0x20c>)
 80031b2:	429f      	cmp	r7, r3
 80031b4:	d15c      	bne.n	8003270 <_vfiprintf_r+0xdc>
 80031b6:	9b03      	ldr	r3, [sp, #12]
 80031b8:	685f      	ldr	r7, [r3, #4]
 80031ba:	89bb      	ldrh	r3, [r7, #12]
 80031bc:	071b      	lsls	r3, r3, #28
 80031be:	d563      	bpl.n	8003288 <_vfiprintf_r+0xf4>
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d060      	beq.n	8003288 <_vfiprintf_r+0xf4>
 80031c6:	2300      	movs	r3, #0
 80031c8:	ac08      	add	r4, sp, #32
 80031ca:	6163      	str	r3, [r4, #20]
 80031cc:	3320      	adds	r3, #32
 80031ce:	7663      	strb	r3, [r4, #25]
 80031d0:	3310      	adds	r3, #16
 80031d2:	76a3      	strb	r3, [r4, #26]
 80031d4:	9507      	str	r5, [sp, #28]
 80031d6:	0035      	movs	r5, r6
 80031d8:	782b      	ldrb	r3, [r5, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <_vfiprintf_r+0x4e>
 80031de:	2b25      	cmp	r3, #37	; 0x25
 80031e0:	d15c      	bne.n	800329c <_vfiprintf_r+0x108>
 80031e2:	1bab      	subs	r3, r5, r6
 80031e4:	9305      	str	r3, [sp, #20]
 80031e6:	d00c      	beq.n	8003202 <_vfiprintf_r+0x6e>
 80031e8:	0032      	movs	r2, r6
 80031ea:	0039      	movs	r1, r7
 80031ec:	9803      	ldr	r0, [sp, #12]
 80031ee:	f7ff ffbe 	bl	800316e <__sfputs_r>
 80031f2:	1c43      	adds	r3, r0, #1
 80031f4:	d100      	bne.n	80031f8 <_vfiprintf_r+0x64>
 80031f6:	e0c4      	b.n	8003382 <_vfiprintf_r+0x1ee>
 80031f8:	6962      	ldr	r2, [r4, #20]
 80031fa:	9b05      	ldr	r3, [sp, #20]
 80031fc:	4694      	mov	ip, r2
 80031fe:	4463      	add	r3, ip
 8003200:	6163      	str	r3, [r4, #20]
 8003202:	782b      	ldrb	r3, [r5, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d100      	bne.n	800320a <_vfiprintf_r+0x76>
 8003208:	e0bb      	b.n	8003382 <_vfiprintf_r+0x1ee>
 800320a:	2201      	movs	r2, #1
 800320c:	2300      	movs	r3, #0
 800320e:	4252      	negs	r2, r2
 8003210:	6062      	str	r2, [r4, #4]
 8003212:	a904      	add	r1, sp, #16
 8003214:	3254      	adds	r2, #84	; 0x54
 8003216:	1852      	adds	r2, r2, r1
 8003218:	1c6e      	adds	r6, r5, #1
 800321a:	6023      	str	r3, [r4, #0]
 800321c:	60e3      	str	r3, [r4, #12]
 800321e:	60a3      	str	r3, [r4, #8]
 8003220:	7013      	strb	r3, [r2, #0]
 8003222:	65a3      	str	r3, [r4, #88]	; 0x58
 8003224:	7831      	ldrb	r1, [r6, #0]
 8003226:	2205      	movs	r2, #5
 8003228:	485e      	ldr	r0, [pc, #376]	; (80033a4 <_vfiprintf_r+0x210>)
 800322a:	f000 fafb 	bl	8003824 <memchr>
 800322e:	1c75      	adds	r5, r6, #1
 8003230:	2800      	cmp	r0, #0
 8003232:	d135      	bne.n	80032a0 <_vfiprintf_r+0x10c>
 8003234:	6822      	ldr	r2, [r4, #0]
 8003236:	06d3      	lsls	r3, r2, #27
 8003238:	d504      	bpl.n	8003244 <_vfiprintf_r+0xb0>
 800323a:	2353      	movs	r3, #83	; 0x53
 800323c:	a904      	add	r1, sp, #16
 800323e:	185b      	adds	r3, r3, r1
 8003240:	2120      	movs	r1, #32
 8003242:	7019      	strb	r1, [r3, #0]
 8003244:	0713      	lsls	r3, r2, #28
 8003246:	d504      	bpl.n	8003252 <_vfiprintf_r+0xbe>
 8003248:	2353      	movs	r3, #83	; 0x53
 800324a:	a904      	add	r1, sp, #16
 800324c:	185b      	adds	r3, r3, r1
 800324e:	212b      	movs	r1, #43	; 0x2b
 8003250:	7019      	strb	r1, [r3, #0]
 8003252:	7833      	ldrb	r3, [r6, #0]
 8003254:	2b2a      	cmp	r3, #42	; 0x2a
 8003256:	d02c      	beq.n	80032b2 <_vfiprintf_r+0x11e>
 8003258:	0035      	movs	r5, r6
 800325a:	2100      	movs	r1, #0
 800325c:	200a      	movs	r0, #10
 800325e:	68e3      	ldr	r3, [r4, #12]
 8003260:	782a      	ldrb	r2, [r5, #0]
 8003262:	1c6e      	adds	r6, r5, #1
 8003264:	3a30      	subs	r2, #48	; 0x30
 8003266:	2a09      	cmp	r2, #9
 8003268:	d964      	bls.n	8003334 <_vfiprintf_r+0x1a0>
 800326a:	2900      	cmp	r1, #0
 800326c:	d02e      	beq.n	80032cc <_vfiprintf_r+0x138>
 800326e:	e026      	b.n	80032be <_vfiprintf_r+0x12a>
 8003270:	4b4d      	ldr	r3, [pc, #308]	; (80033a8 <_vfiprintf_r+0x214>)
 8003272:	429f      	cmp	r7, r3
 8003274:	d102      	bne.n	800327c <_vfiprintf_r+0xe8>
 8003276:	9b03      	ldr	r3, [sp, #12]
 8003278:	689f      	ldr	r7, [r3, #8]
 800327a:	e79e      	b.n	80031ba <_vfiprintf_r+0x26>
 800327c:	4b4b      	ldr	r3, [pc, #300]	; (80033ac <_vfiprintf_r+0x218>)
 800327e:	429f      	cmp	r7, r3
 8003280:	d19b      	bne.n	80031ba <_vfiprintf_r+0x26>
 8003282:	9b03      	ldr	r3, [sp, #12]
 8003284:	68df      	ldr	r7, [r3, #12]
 8003286:	e798      	b.n	80031ba <_vfiprintf_r+0x26>
 8003288:	0039      	movs	r1, r7
 800328a:	9803      	ldr	r0, [sp, #12]
 800328c:	f7ff fc44 	bl	8002b18 <__swsetup_r>
 8003290:	2800      	cmp	r0, #0
 8003292:	d098      	beq.n	80031c6 <_vfiprintf_r+0x32>
 8003294:	2001      	movs	r0, #1
 8003296:	4240      	negs	r0, r0
 8003298:	b021      	add	sp, #132	; 0x84
 800329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329c:	3501      	adds	r5, #1
 800329e:	e79b      	b.n	80031d8 <_vfiprintf_r+0x44>
 80032a0:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <_vfiprintf_r+0x210>)
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	1ac0      	subs	r0, r0, r3
 80032a6:	2301      	movs	r3, #1
 80032a8:	4083      	lsls	r3, r0
 80032aa:	4313      	orrs	r3, r2
 80032ac:	6023      	str	r3, [r4, #0]
 80032ae:	002e      	movs	r6, r5
 80032b0:	e7b8      	b.n	8003224 <_vfiprintf_r+0x90>
 80032b2:	9b07      	ldr	r3, [sp, #28]
 80032b4:	1d19      	adds	r1, r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	9107      	str	r1, [sp, #28]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db01      	blt.n	80032c2 <_vfiprintf_r+0x12e>
 80032be:	930b      	str	r3, [sp, #44]	; 0x2c
 80032c0:	e004      	b.n	80032cc <_vfiprintf_r+0x138>
 80032c2:	425b      	negs	r3, r3
 80032c4:	60e3      	str	r3, [r4, #12]
 80032c6:	2302      	movs	r3, #2
 80032c8:	4313      	orrs	r3, r2
 80032ca:	6023      	str	r3, [r4, #0]
 80032cc:	782b      	ldrb	r3, [r5, #0]
 80032ce:	2b2e      	cmp	r3, #46	; 0x2e
 80032d0:	d10a      	bne.n	80032e8 <_vfiprintf_r+0x154>
 80032d2:	786b      	ldrb	r3, [r5, #1]
 80032d4:	2b2a      	cmp	r3, #42	; 0x2a
 80032d6:	d135      	bne.n	8003344 <_vfiprintf_r+0x1b0>
 80032d8:	9b07      	ldr	r3, [sp, #28]
 80032da:	3502      	adds	r5, #2
 80032dc:	1d1a      	adds	r2, r3, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	9207      	str	r2, [sp, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	db2b      	blt.n	800333e <_vfiprintf_r+0x1aa>
 80032e6:	9309      	str	r3, [sp, #36]	; 0x24
 80032e8:	4e31      	ldr	r6, [pc, #196]	; (80033b0 <_vfiprintf_r+0x21c>)
 80032ea:	7829      	ldrb	r1, [r5, #0]
 80032ec:	2203      	movs	r2, #3
 80032ee:	0030      	movs	r0, r6
 80032f0:	f000 fa98 	bl	8003824 <memchr>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d006      	beq.n	8003306 <_vfiprintf_r+0x172>
 80032f8:	2340      	movs	r3, #64	; 0x40
 80032fa:	1b80      	subs	r0, r0, r6
 80032fc:	4083      	lsls	r3, r0
 80032fe:	6822      	ldr	r2, [r4, #0]
 8003300:	3501      	adds	r5, #1
 8003302:	4313      	orrs	r3, r2
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	7829      	ldrb	r1, [r5, #0]
 8003308:	2206      	movs	r2, #6
 800330a:	482a      	ldr	r0, [pc, #168]	; (80033b4 <_vfiprintf_r+0x220>)
 800330c:	1c6e      	adds	r6, r5, #1
 800330e:	7621      	strb	r1, [r4, #24]
 8003310:	f000 fa88 	bl	8003824 <memchr>
 8003314:	2800      	cmp	r0, #0
 8003316:	d03a      	beq.n	800338e <_vfiprintf_r+0x1fa>
 8003318:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <_vfiprintf_r+0x224>)
 800331a:	2b00      	cmp	r3, #0
 800331c:	d125      	bne.n	800336a <_vfiprintf_r+0x1d6>
 800331e:	2207      	movs	r2, #7
 8003320:	9b07      	ldr	r3, [sp, #28]
 8003322:	3307      	adds	r3, #7
 8003324:	4393      	bics	r3, r2
 8003326:	3308      	adds	r3, #8
 8003328:	9307      	str	r3, [sp, #28]
 800332a:	6963      	ldr	r3, [r4, #20]
 800332c:	9a04      	ldr	r2, [sp, #16]
 800332e:	189b      	adds	r3, r3, r2
 8003330:	6163      	str	r3, [r4, #20]
 8003332:	e750      	b.n	80031d6 <_vfiprintf_r+0x42>
 8003334:	4343      	muls	r3, r0
 8003336:	2101      	movs	r1, #1
 8003338:	189b      	adds	r3, r3, r2
 800333a:	0035      	movs	r5, r6
 800333c:	e790      	b.n	8003260 <_vfiprintf_r+0xcc>
 800333e:	2301      	movs	r3, #1
 8003340:	425b      	negs	r3, r3
 8003342:	e7d0      	b.n	80032e6 <_vfiprintf_r+0x152>
 8003344:	2300      	movs	r3, #0
 8003346:	200a      	movs	r0, #10
 8003348:	001a      	movs	r2, r3
 800334a:	3501      	adds	r5, #1
 800334c:	6063      	str	r3, [r4, #4]
 800334e:	7829      	ldrb	r1, [r5, #0]
 8003350:	1c6e      	adds	r6, r5, #1
 8003352:	3930      	subs	r1, #48	; 0x30
 8003354:	2909      	cmp	r1, #9
 8003356:	d903      	bls.n	8003360 <_vfiprintf_r+0x1cc>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0c5      	beq.n	80032e8 <_vfiprintf_r+0x154>
 800335c:	9209      	str	r2, [sp, #36]	; 0x24
 800335e:	e7c3      	b.n	80032e8 <_vfiprintf_r+0x154>
 8003360:	4342      	muls	r2, r0
 8003362:	2301      	movs	r3, #1
 8003364:	1852      	adds	r2, r2, r1
 8003366:	0035      	movs	r5, r6
 8003368:	e7f1      	b.n	800334e <_vfiprintf_r+0x1ba>
 800336a:	ab07      	add	r3, sp, #28
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	003a      	movs	r2, r7
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <_vfiprintf_r+0x228>)
 8003372:	0021      	movs	r1, r4
 8003374:	9803      	ldr	r0, [sp, #12]
 8003376:	e000      	b.n	800337a <_vfiprintf_r+0x1e6>
 8003378:	bf00      	nop
 800337a:	9004      	str	r0, [sp, #16]
 800337c:	9b04      	ldr	r3, [sp, #16]
 800337e:	3301      	adds	r3, #1
 8003380:	d1d3      	bne.n	800332a <_vfiprintf_r+0x196>
 8003382:	89bb      	ldrh	r3, [r7, #12]
 8003384:	065b      	lsls	r3, r3, #25
 8003386:	d500      	bpl.n	800338a <_vfiprintf_r+0x1f6>
 8003388:	e784      	b.n	8003294 <_vfiprintf_r+0x100>
 800338a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800338c:	e784      	b.n	8003298 <_vfiprintf_r+0x104>
 800338e:	ab07      	add	r3, sp, #28
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	003a      	movs	r2, r7
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <_vfiprintf_r+0x228>)
 8003396:	0021      	movs	r1, r4
 8003398:	9803      	ldr	r0, [sp, #12]
 800339a:	f000 f87f 	bl	800349c <_printf_i>
 800339e:	e7ec      	b.n	800337a <_vfiprintf_r+0x1e6>
 80033a0:	08003928 	.word	0x08003928
 80033a4:	08003968 	.word	0x08003968
 80033a8:	08003948 	.word	0x08003948
 80033ac:	08003908 	.word	0x08003908
 80033b0:	0800396e 	.word	0x0800396e
 80033b4:	08003972 	.word	0x08003972
 80033b8:	00000000 	.word	0x00000000
 80033bc:	0800316f 	.word	0x0800316f

080033c0 <_printf_common>:
 80033c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033c2:	0015      	movs	r5, r2
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	688a      	ldr	r2, [r1, #8]
 80033c8:	690b      	ldr	r3, [r1, #16]
 80033ca:	9000      	str	r0, [sp, #0]
 80033cc:	000c      	movs	r4, r1
 80033ce:	4293      	cmp	r3, r2
 80033d0:	da00      	bge.n	80033d4 <_printf_common+0x14>
 80033d2:	0013      	movs	r3, r2
 80033d4:	0022      	movs	r2, r4
 80033d6:	602b      	str	r3, [r5, #0]
 80033d8:	3243      	adds	r2, #67	; 0x43
 80033da:	7812      	ldrb	r2, [r2, #0]
 80033dc:	2a00      	cmp	r2, #0
 80033de:	d001      	beq.n	80033e4 <_printf_common+0x24>
 80033e0:	3301      	adds	r3, #1
 80033e2:	602b      	str	r3, [r5, #0]
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	069b      	lsls	r3, r3, #26
 80033e8:	d502      	bpl.n	80033f0 <_printf_common+0x30>
 80033ea:	682b      	ldr	r3, [r5, #0]
 80033ec:	3302      	adds	r3, #2
 80033ee:	602b      	str	r3, [r5, #0]
 80033f0:	2706      	movs	r7, #6
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	401f      	ands	r7, r3
 80033f6:	d027      	beq.n	8003448 <_printf_common+0x88>
 80033f8:	0023      	movs	r3, r4
 80033fa:	3343      	adds	r3, #67	; 0x43
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	4193      	sbcs	r3, r2
 8003402:	6822      	ldr	r2, [r4, #0]
 8003404:	0692      	lsls	r2, r2, #26
 8003406:	d430      	bmi.n	800346a <_printf_common+0xaa>
 8003408:	0022      	movs	r2, r4
 800340a:	9901      	ldr	r1, [sp, #4]
 800340c:	3243      	adds	r2, #67	; 0x43
 800340e:	9800      	ldr	r0, [sp, #0]
 8003410:	9e08      	ldr	r6, [sp, #32]
 8003412:	47b0      	blx	r6
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d025      	beq.n	8003464 <_printf_common+0xa4>
 8003418:	2306      	movs	r3, #6
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	682a      	ldr	r2, [r5, #0]
 800341e:	68e1      	ldr	r1, [r4, #12]
 8003420:	4003      	ands	r3, r0
 8003422:	2500      	movs	r5, #0
 8003424:	2b04      	cmp	r3, #4
 8003426:	d103      	bne.n	8003430 <_printf_common+0x70>
 8003428:	1a8d      	subs	r5, r1, r2
 800342a:	43eb      	mvns	r3, r5
 800342c:	17db      	asrs	r3, r3, #31
 800342e:	401d      	ands	r5, r3
 8003430:	68a3      	ldr	r3, [r4, #8]
 8003432:	6922      	ldr	r2, [r4, #16]
 8003434:	4293      	cmp	r3, r2
 8003436:	dd01      	ble.n	800343c <_printf_common+0x7c>
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	18ed      	adds	r5, r5, r3
 800343c:	2700      	movs	r7, #0
 800343e:	42bd      	cmp	r5, r7
 8003440:	d120      	bne.n	8003484 <_printf_common+0xc4>
 8003442:	2000      	movs	r0, #0
 8003444:	e010      	b.n	8003468 <_printf_common+0xa8>
 8003446:	3701      	adds	r7, #1
 8003448:	68e3      	ldr	r3, [r4, #12]
 800344a:	682a      	ldr	r2, [r5, #0]
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	42bb      	cmp	r3, r7
 8003450:	ddd2      	ble.n	80033f8 <_printf_common+0x38>
 8003452:	0022      	movs	r2, r4
 8003454:	2301      	movs	r3, #1
 8003456:	3219      	adds	r2, #25
 8003458:	9901      	ldr	r1, [sp, #4]
 800345a:	9800      	ldr	r0, [sp, #0]
 800345c:	9e08      	ldr	r6, [sp, #32]
 800345e:	47b0      	blx	r6
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d1f0      	bne.n	8003446 <_printf_common+0x86>
 8003464:	2001      	movs	r0, #1
 8003466:	4240      	negs	r0, r0
 8003468:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800346a:	2030      	movs	r0, #48	; 0x30
 800346c:	18e1      	adds	r1, r4, r3
 800346e:	3143      	adds	r1, #67	; 0x43
 8003470:	7008      	strb	r0, [r1, #0]
 8003472:	0021      	movs	r1, r4
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	3145      	adds	r1, #69	; 0x45
 8003478:	7809      	ldrb	r1, [r1, #0]
 800347a:	18a2      	adds	r2, r4, r2
 800347c:	3243      	adds	r2, #67	; 0x43
 800347e:	3302      	adds	r3, #2
 8003480:	7011      	strb	r1, [r2, #0]
 8003482:	e7c1      	b.n	8003408 <_printf_common+0x48>
 8003484:	0022      	movs	r2, r4
 8003486:	2301      	movs	r3, #1
 8003488:	321a      	adds	r2, #26
 800348a:	9901      	ldr	r1, [sp, #4]
 800348c:	9800      	ldr	r0, [sp, #0]
 800348e:	9e08      	ldr	r6, [sp, #32]
 8003490:	47b0      	blx	r6
 8003492:	1c43      	adds	r3, r0, #1
 8003494:	d0e6      	beq.n	8003464 <_printf_common+0xa4>
 8003496:	3701      	adds	r7, #1
 8003498:	e7d1      	b.n	800343e <_printf_common+0x7e>
	...

0800349c <_printf_i>:
 800349c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	9204      	str	r2, [sp, #16]
 80034a2:	000a      	movs	r2, r1
 80034a4:	3243      	adds	r2, #67	; 0x43
 80034a6:	9305      	str	r3, [sp, #20]
 80034a8:	9003      	str	r0, [sp, #12]
 80034aa:	9202      	str	r2, [sp, #8]
 80034ac:	7e0a      	ldrb	r2, [r1, #24]
 80034ae:	000c      	movs	r4, r1
 80034b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034b2:	2a6e      	cmp	r2, #110	; 0x6e
 80034b4:	d100      	bne.n	80034b8 <_printf_i+0x1c>
 80034b6:	e086      	b.n	80035c6 <_printf_i+0x12a>
 80034b8:	d81f      	bhi.n	80034fa <_printf_i+0x5e>
 80034ba:	2a63      	cmp	r2, #99	; 0x63
 80034bc:	d033      	beq.n	8003526 <_printf_i+0x8a>
 80034be:	d808      	bhi.n	80034d2 <_printf_i+0x36>
 80034c0:	2a00      	cmp	r2, #0
 80034c2:	d100      	bne.n	80034c6 <_printf_i+0x2a>
 80034c4:	e08c      	b.n	80035e0 <_printf_i+0x144>
 80034c6:	2a58      	cmp	r2, #88	; 0x58
 80034c8:	d04d      	beq.n	8003566 <_printf_i+0xca>
 80034ca:	0025      	movs	r5, r4
 80034cc:	3542      	adds	r5, #66	; 0x42
 80034ce:	702a      	strb	r2, [r5, #0]
 80034d0:	e030      	b.n	8003534 <_printf_i+0x98>
 80034d2:	2a64      	cmp	r2, #100	; 0x64
 80034d4:	d001      	beq.n	80034da <_printf_i+0x3e>
 80034d6:	2a69      	cmp	r2, #105	; 0x69
 80034d8:	d1f7      	bne.n	80034ca <_printf_i+0x2e>
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	6825      	ldr	r5, [r4, #0]
 80034de:	1d0a      	adds	r2, r1, #4
 80034e0:	0628      	lsls	r0, r5, #24
 80034e2:	d529      	bpl.n	8003538 <_printf_i+0x9c>
 80034e4:	6808      	ldr	r0, [r1, #0]
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	2800      	cmp	r0, #0
 80034ea:	da03      	bge.n	80034f4 <_printf_i+0x58>
 80034ec:	232d      	movs	r3, #45	; 0x2d
 80034ee:	9a02      	ldr	r2, [sp, #8]
 80034f0:	4240      	negs	r0, r0
 80034f2:	7013      	strb	r3, [r2, #0]
 80034f4:	4e6b      	ldr	r6, [pc, #428]	; (80036a4 <_printf_i+0x208>)
 80034f6:	270a      	movs	r7, #10
 80034f8:	e04f      	b.n	800359a <_printf_i+0xfe>
 80034fa:	2a73      	cmp	r2, #115	; 0x73
 80034fc:	d074      	beq.n	80035e8 <_printf_i+0x14c>
 80034fe:	d808      	bhi.n	8003512 <_printf_i+0x76>
 8003500:	2a6f      	cmp	r2, #111	; 0x6f
 8003502:	d01f      	beq.n	8003544 <_printf_i+0xa8>
 8003504:	2a70      	cmp	r2, #112	; 0x70
 8003506:	d1e0      	bne.n	80034ca <_printf_i+0x2e>
 8003508:	2220      	movs	r2, #32
 800350a:	6809      	ldr	r1, [r1, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	6022      	str	r2, [r4, #0]
 8003510:	e003      	b.n	800351a <_printf_i+0x7e>
 8003512:	2a75      	cmp	r2, #117	; 0x75
 8003514:	d016      	beq.n	8003544 <_printf_i+0xa8>
 8003516:	2a78      	cmp	r2, #120	; 0x78
 8003518:	d1d7      	bne.n	80034ca <_printf_i+0x2e>
 800351a:	0022      	movs	r2, r4
 800351c:	2178      	movs	r1, #120	; 0x78
 800351e:	3245      	adds	r2, #69	; 0x45
 8003520:	7011      	strb	r1, [r2, #0]
 8003522:	4e61      	ldr	r6, [pc, #388]	; (80036a8 <_printf_i+0x20c>)
 8003524:	e022      	b.n	800356c <_printf_i+0xd0>
 8003526:	0025      	movs	r5, r4
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	3542      	adds	r5, #66	; 0x42
 800352c:	1d11      	adds	r1, r2, #4
 800352e:	6019      	str	r1, [r3, #0]
 8003530:	6813      	ldr	r3, [r2, #0]
 8003532:	702b      	strb	r3, [r5, #0]
 8003534:	2301      	movs	r3, #1
 8003536:	e065      	b.n	8003604 <_printf_i+0x168>
 8003538:	6808      	ldr	r0, [r1, #0]
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	0669      	lsls	r1, r5, #25
 800353e:	d5d3      	bpl.n	80034e8 <_printf_i+0x4c>
 8003540:	b200      	sxth	r0, r0
 8003542:	e7d1      	b.n	80034e8 <_printf_i+0x4c>
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	6825      	ldr	r5, [r4, #0]
 8003548:	1d08      	adds	r0, r1, #4
 800354a:	6018      	str	r0, [r3, #0]
 800354c:	6808      	ldr	r0, [r1, #0]
 800354e:	062e      	lsls	r6, r5, #24
 8003550:	d505      	bpl.n	800355e <_printf_i+0xc2>
 8003552:	4e54      	ldr	r6, [pc, #336]	; (80036a4 <_printf_i+0x208>)
 8003554:	2708      	movs	r7, #8
 8003556:	2a6f      	cmp	r2, #111	; 0x6f
 8003558:	d01b      	beq.n	8003592 <_printf_i+0xf6>
 800355a:	270a      	movs	r7, #10
 800355c:	e019      	b.n	8003592 <_printf_i+0xf6>
 800355e:	066d      	lsls	r5, r5, #25
 8003560:	d5f7      	bpl.n	8003552 <_printf_i+0xb6>
 8003562:	b280      	uxth	r0, r0
 8003564:	e7f5      	b.n	8003552 <_printf_i+0xb6>
 8003566:	3145      	adds	r1, #69	; 0x45
 8003568:	4e4e      	ldr	r6, [pc, #312]	; (80036a4 <_printf_i+0x208>)
 800356a:	700a      	strb	r2, [r1, #0]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	6822      	ldr	r2, [r4, #0]
 8003570:	1d01      	adds	r1, r0, #4
 8003572:	6800      	ldr	r0, [r0, #0]
 8003574:	6019      	str	r1, [r3, #0]
 8003576:	0615      	lsls	r5, r2, #24
 8003578:	d521      	bpl.n	80035be <_printf_i+0x122>
 800357a:	07d3      	lsls	r3, r2, #31
 800357c:	d502      	bpl.n	8003584 <_printf_i+0xe8>
 800357e:	2320      	movs	r3, #32
 8003580:	431a      	orrs	r2, r3
 8003582:	6022      	str	r2, [r4, #0]
 8003584:	2710      	movs	r7, #16
 8003586:	2800      	cmp	r0, #0
 8003588:	d103      	bne.n	8003592 <_printf_i+0xf6>
 800358a:	2320      	movs	r3, #32
 800358c:	6822      	ldr	r2, [r4, #0]
 800358e:	439a      	bics	r2, r3
 8003590:	6022      	str	r2, [r4, #0]
 8003592:	0023      	movs	r3, r4
 8003594:	2200      	movs	r2, #0
 8003596:	3343      	adds	r3, #67	; 0x43
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	6863      	ldr	r3, [r4, #4]
 800359c:	60a3      	str	r3, [r4, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	db58      	blt.n	8003654 <_printf_i+0x1b8>
 80035a2:	2204      	movs	r2, #4
 80035a4:	6821      	ldr	r1, [r4, #0]
 80035a6:	4391      	bics	r1, r2
 80035a8:	6021      	str	r1, [r4, #0]
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d154      	bne.n	8003658 <_printf_i+0x1bc>
 80035ae:	9d02      	ldr	r5, [sp, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d05a      	beq.n	800366a <_printf_i+0x1ce>
 80035b4:	0025      	movs	r5, r4
 80035b6:	7833      	ldrb	r3, [r6, #0]
 80035b8:	3542      	adds	r5, #66	; 0x42
 80035ba:	702b      	strb	r3, [r5, #0]
 80035bc:	e055      	b.n	800366a <_printf_i+0x1ce>
 80035be:	0655      	lsls	r5, r2, #25
 80035c0:	d5db      	bpl.n	800357a <_printf_i+0xde>
 80035c2:	b280      	uxth	r0, r0
 80035c4:	e7d9      	b.n	800357a <_printf_i+0xde>
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	680d      	ldr	r5, [r1, #0]
 80035ca:	1d10      	adds	r0, r2, #4
 80035cc:	6949      	ldr	r1, [r1, #20]
 80035ce:	6018      	str	r0, [r3, #0]
 80035d0:	6813      	ldr	r3, [r2, #0]
 80035d2:	062e      	lsls	r6, r5, #24
 80035d4:	d501      	bpl.n	80035da <_printf_i+0x13e>
 80035d6:	6019      	str	r1, [r3, #0]
 80035d8:	e002      	b.n	80035e0 <_printf_i+0x144>
 80035da:	066d      	lsls	r5, r5, #25
 80035dc:	d5fb      	bpl.n	80035d6 <_printf_i+0x13a>
 80035de:	8019      	strh	r1, [r3, #0]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9d02      	ldr	r5, [sp, #8]
 80035e4:	6123      	str	r3, [r4, #16]
 80035e6:	e04f      	b.n	8003688 <_printf_i+0x1ec>
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	1d11      	adds	r1, r2, #4
 80035ec:	6019      	str	r1, [r3, #0]
 80035ee:	6815      	ldr	r5, [r2, #0]
 80035f0:	2100      	movs	r1, #0
 80035f2:	6862      	ldr	r2, [r4, #4]
 80035f4:	0028      	movs	r0, r5
 80035f6:	f000 f915 	bl	8003824 <memchr>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d001      	beq.n	8003602 <_printf_i+0x166>
 80035fe:	1b40      	subs	r0, r0, r5
 8003600:	6060      	str	r0, [r4, #4]
 8003602:	6863      	ldr	r3, [r4, #4]
 8003604:	6123      	str	r3, [r4, #16]
 8003606:	2300      	movs	r3, #0
 8003608:	9a02      	ldr	r2, [sp, #8]
 800360a:	7013      	strb	r3, [r2, #0]
 800360c:	e03c      	b.n	8003688 <_printf_i+0x1ec>
 800360e:	6923      	ldr	r3, [r4, #16]
 8003610:	002a      	movs	r2, r5
 8003612:	9904      	ldr	r1, [sp, #16]
 8003614:	9803      	ldr	r0, [sp, #12]
 8003616:	9d05      	ldr	r5, [sp, #20]
 8003618:	47a8      	blx	r5
 800361a:	1c43      	adds	r3, r0, #1
 800361c:	d03e      	beq.n	800369c <_printf_i+0x200>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	079b      	lsls	r3, r3, #30
 8003622:	d415      	bmi.n	8003650 <_printf_i+0x1b4>
 8003624:	9b07      	ldr	r3, [sp, #28]
 8003626:	68e0      	ldr	r0, [r4, #12]
 8003628:	4298      	cmp	r0, r3
 800362a:	da39      	bge.n	80036a0 <_printf_i+0x204>
 800362c:	0018      	movs	r0, r3
 800362e:	e037      	b.n	80036a0 <_printf_i+0x204>
 8003630:	0022      	movs	r2, r4
 8003632:	2301      	movs	r3, #1
 8003634:	3219      	adds	r2, #25
 8003636:	9904      	ldr	r1, [sp, #16]
 8003638:	9803      	ldr	r0, [sp, #12]
 800363a:	9e05      	ldr	r6, [sp, #20]
 800363c:	47b0      	blx	r6
 800363e:	1c43      	adds	r3, r0, #1
 8003640:	d02c      	beq.n	800369c <_printf_i+0x200>
 8003642:	3501      	adds	r5, #1
 8003644:	68e3      	ldr	r3, [r4, #12]
 8003646:	9a07      	ldr	r2, [sp, #28]
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	42ab      	cmp	r3, r5
 800364c:	dcf0      	bgt.n	8003630 <_printf_i+0x194>
 800364e:	e7e9      	b.n	8003624 <_printf_i+0x188>
 8003650:	2500      	movs	r5, #0
 8003652:	e7f7      	b.n	8003644 <_printf_i+0x1a8>
 8003654:	2800      	cmp	r0, #0
 8003656:	d0ad      	beq.n	80035b4 <_printf_i+0x118>
 8003658:	9d02      	ldr	r5, [sp, #8]
 800365a:	0039      	movs	r1, r7
 800365c:	f7fc fdda 	bl	8000214 <__aeabi_uidivmod>
 8003660:	5c73      	ldrb	r3, [r6, r1]
 8003662:	3d01      	subs	r5, #1
 8003664:	702b      	strb	r3, [r5, #0]
 8003666:	2800      	cmp	r0, #0
 8003668:	d1f7      	bne.n	800365a <_printf_i+0x1be>
 800366a:	2f08      	cmp	r7, #8
 800366c:	d109      	bne.n	8003682 <_printf_i+0x1e6>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	07db      	lsls	r3, r3, #31
 8003672:	d506      	bpl.n	8003682 <_printf_i+0x1e6>
 8003674:	6863      	ldr	r3, [r4, #4]
 8003676:	6922      	ldr	r2, [r4, #16]
 8003678:	4293      	cmp	r3, r2
 800367a:	dc02      	bgt.n	8003682 <_printf_i+0x1e6>
 800367c:	2330      	movs	r3, #48	; 0x30
 800367e:	3d01      	subs	r5, #1
 8003680:	702b      	strb	r3, [r5, #0]
 8003682:	9b02      	ldr	r3, [sp, #8]
 8003684:	1b5b      	subs	r3, r3, r5
 8003686:	6123      	str	r3, [r4, #16]
 8003688:	9b05      	ldr	r3, [sp, #20]
 800368a:	aa07      	add	r2, sp, #28
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	0021      	movs	r1, r4
 8003690:	9b04      	ldr	r3, [sp, #16]
 8003692:	9803      	ldr	r0, [sp, #12]
 8003694:	f7ff fe94 	bl	80033c0 <_printf_common>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d1b8      	bne.n	800360e <_printf_i+0x172>
 800369c:	2001      	movs	r0, #1
 800369e:	4240      	negs	r0, r0
 80036a0:	b009      	add	sp, #36	; 0x24
 80036a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a4:	08003979 	.word	0x08003979
 80036a8:	0800398a 	.word	0x0800398a

080036ac <_sbrk_r>:
 80036ac:	2300      	movs	r3, #0
 80036ae:	b570      	push	{r4, r5, r6, lr}
 80036b0:	4c06      	ldr	r4, [pc, #24]	; (80036cc <_sbrk_r+0x20>)
 80036b2:	0005      	movs	r5, r0
 80036b4:	0008      	movs	r0, r1
 80036b6:	6023      	str	r3, [r4, #0]
 80036b8:	f7ff f888 	bl	80027cc <_sbrk>
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	d103      	bne.n	80036c8 <_sbrk_r+0x1c>
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d000      	beq.n	80036c8 <_sbrk_r+0x1c>
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	bd70      	pop	{r4, r5, r6, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	20000150 	.word	0x20000150

080036d0 <__sread>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	000c      	movs	r4, r1
 80036d4:	250e      	movs	r5, #14
 80036d6:	5f49      	ldrsh	r1, [r1, r5]
 80036d8:	f000 f8b2 	bl	8003840 <_read_r>
 80036dc:	2800      	cmp	r0, #0
 80036de:	db03      	blt.n	80036e8 <__sread+0x18>
 80036e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036e2:	181b      	adds	r3, r3, r0
 80036e4:	6563      	str	r3, [r4, #84]	; 0x54
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	4a02      	ldr	r2, [pc, #8]	; (80036f4 <__sread+0x24>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	e7f9      	b.n	80036e6 <__sread+0x16>
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	ffffefff 	.word	0xffffefff

080036f8 <__swrite>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	001f      	movs	r7, r3
 80036fc:	898b      	ldrh	r3, [r1, #12]
 80036fe:	0005      	movs	r5, r0
 8003700:	000c      	movs	r4, r1
 8003702:	0016      	movs	r6, r2
 8003704:	05db      	lsls	r3, r3, #23
 8003706:	d505      	bpl.n	8003714 <__swrite+0x1c>
 8003708:	230e      	movs	r3, #14
 800370a:	5ec9      	ldrsh	r1, [r1, r3]
 800370c:	2200      	movs	r2, #0
 800370e:	2302      	movs	r3, #2
 8003710:	f000 f874 	bl	80037fc <_lseek_r>
 8003714:	89a3      	ldrh	r3, [r4, #12]
 8003716:	4a05      	ldr	r2, [pc, #20]	; (800372c <__swrite+0x34>)
 8003718:	0028      	movs	r0, r5
 800371a:	4013      	ands	r3, r2
 800371c:	81a3      	strh	r3, [r4, #12]
 800371e:	0032      	movs	r2, r6
 8003720:	230e      	movs	r3, #14
 8003722:	5ee1      	ldrsh	r1, [r4, r3]
 8003724:	003b      	movs	r3, r7
 8003726:	f000 f81f 	bl	8003768 <_write_r>
 800372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800372c:	ffffefff 	.word	0xffffefff

08003730 <__sseek>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	000c      	movs	r4, r1
 8003734:	250e      	movs	r5, #14
 8003736:	5f49      	ldrsh	r1, [r1, r5]
 8003738:	f000 f860 	bl	80037fc <_lseek_r>
 800373c:	89a3      	ldrh	r3, [r4, #12]
 800373e:	1c42      	adds	r2, r0, #1
 8003740:	d103      	bne.n	800374a <__sseek+0x1a>
 8003742:	4a05      	ldr	r2, [pc, #20]	; (8003758 <__sseek+0x28>)
 8003744:	4013      	ands	r3, r2
 8003746:	81a3      	strh	r3, [r4, #12]
 8003748:	bd70      	pop	{r4, r5, r6, pc}
 800374a:	2280      	movs	r2, #128	; 0x80
 800374c:	0152      	lsls	r2, r2, #5
 800374e:	4313      	orrs	r3, r2
 8003750:	81a3      	strh	r3, [r4, #12]
 8003752:	6560      	str	r0, [r4, #84]	; 0x54
 8003754:	e7f8      	b.n	8003748 <__sseek+0x18>
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	ffffefff 	.word	0xffffefff

0800375c <__sclose>:
 800375c:	b510      	push	{r4, lr}
 800375e:	230e      	movs	r3, #14
 8003760:	5ec9      	ldrsh	r1, [r1, r3]
 8003762:	f000 f815 	bl	8003790 <_close_r>
 8003766:	bd10      	pop	{r4, pc}

08003768 <_write_r>:
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	0005      	movs	r5, r0
 800376c:	0008      	movs	r0, r1
 800376e:	0011      	movs	r1, r2
 8003770:	2200      	movs	r2, #0
 8003772:	4c06      	ldr	r4, [pc, #24]	; (800378c <_write_r+0x24>)
 8003774:	6022      	str	r2, [r4, #0]
 8003776:	001a      	movs	r2, r3
 8003778:	f7fe fd8e 	bl	8002298 <_write>
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	d103      	bne.n	8003788 <_write_r+0x20>
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d000      	beq.n	8003788 <_write_r+0x20>
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	bd70      	pop	{r4, r5, r6, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	20000150 	.word	0x20000150

08003790 <_close_r>:
 8003790:	2300      	movs	r3, #0
 8003792:	b570      	push	{r4, r5, r6, lr}
 8003794:	4c06      	ldr	r4, [pc, #24]	; (80037b0 <_close_r+0x20>)
 8003796:	0005      	movs	r5, r0
 8003798:	0008      	movs	r0, r1
 800379a:	6023      	str	r3, [r4, #0]
 800379c:	f7fe ffea 	bl	8002774 <_close>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d103      	bne.n	80037ac <_close_r+0x1c>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d000      	beq.n	80037ac <_close_r+0x1c>
 80037aa:	602b      	str	r3, [r5, #0]
 80037ac:	bd70      	pop	{r4, r5, r6, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	20000150 	.word	0x20000150

080037b4 <_fstat_r>:
 80037b4:	2300      	movs	r3, #0
 80037b6:	b570      	push	{r4, r5, r6, lr}
 80037b8:	4c06      	ldr	r4, [pc, #24]	; (80037d4 <_fstat_r+0x20>)
 80037ba:	0005      	movs	r5, r0
 80037bc:	0008      	movs	r0, r1
 80037be:	0011      	movs	r1, r2
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	f7fe ffe1 	bl	8002788 <_fstat>
 80037c6:	1c43      	adds	r3, r0, #1
 80037c8:	d103      	bne.n	80037d2 <_fstat_r+0x1e>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d000      	beq.n	80037d2 <_fstat_r+0x1e>
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	20000150 	.word	0x20000150

080037d8 <_isatty_r>:
 80037d8:	2300      	movs	r3, #0
 80037da:	b570      	push	{r4, r5, r6, lr}
 80037dc:	4c06      	ldr	r4, [pc, #24]	; (80037f8 <_isatty_r+0x20>)
 80037de:	0005      	movs	r5, r0
 80037e0:	0008      	movs	r0, r1
 80037e2:	6023      	str	r3, [r4, #0]
 80037e4:	f7fe ffde 	bl	80027a4 <_isatty>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d103      	bne.n	80037f4 <_isatty_r+0x1c>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d000      	beq.n	80037f4 <_isatty_r+0x1c>
 80037f2:	602b      	str	r3, [r5, #0]
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	20000150 	.word	0x20000150

080037fc <_lseek_r>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	0005      	movs	r5, r0
 8003800:	0008      	movs	r0, r1
 8003802:	0011      	movs	r1, r2
 8003804:	2200      	movs	r2, #0
 8003806:	4c06      	ldr	r4, [pc, #24]	; (8003820 <_lseek_r+0x24>)
 8003808:	6022      	str	r2, [r4, #0]
 800380a:	001a      	movs	r2, r3
 800380c:	f7fe ffd3 	bl	80027b6 <_lseek>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d103      	bne.n	800381c <_lseek_r+0x20>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d000      	beq.n	800381c <_lseek_r+0x20>
 800381a:	602b      	str	r3, [r5, #0]
 800381c:	bd70      	pop	{r4, r5, r6, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	20000150 	.word	0x20000150

08003824 <memchr>:
 8003824:	b2c9      	uxtb	r1, r1
 8003826:	1882      	adds	r2, r0, r2
 8003828:	4290      	cmp	r0, r2
 800382a:	d101      	bne.n	8003830 <memchr+0xc>
 800382c:	2000      	movs	r0, #0
 800382e:	4770      	bx	lr
 8003830:	7803      	ldrb	r3, [r0, #0]
 8003832:	428b      	cmp	r3, r1
 8003834:	d0fb      	beq.n	800382e <memchr+0xa>
 8003836:	3001      	adds	r0, #1
 8003838:	e7f6      	b.n	8003828 <memchr+0x4>

0800383a <__malloc_lock>:
 800383a:	4770      	bx	lr

0800383c <__malloc_unlock>:
 800383c:	4770      	bx	lr
	...

08003840 <_read_r>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	0005      	movs	r5, r0
 8003844:	0008      	movs	r0, r1
 8003846:	0011      	movs	r1, r2
 8003848:	2200      	movs	r2, #0
 800384a:	4c06      	ldr	r4, [pc, #24]	; (8003864 <_read_r+0x24>)
 800384c:	6022      	str	r2, [r4, #0]
 800384e:	001a      	movs	r2, r3
 8003850:	f7fe ff73 	bl	800273a <_read>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d103      	bne.n	8003860 <_read_r+0x20>
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d000      	beq.n	8003860 <_read_r+0x20>
 800385e:	602b      	str	r3, [r5, #0]
 8003860:	bd70      	pop	{r4, r5, r6, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	20000150 	.word	0x20000150

08003868 <_init>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

08003874 <_fini>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr
