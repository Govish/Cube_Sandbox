
usb_pd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004028  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c8  080042c8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080042c8  080042c8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042c8  080042c8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080042d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000068  08004338  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004338  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011510  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025b0  00000000  00000000  000315a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b8  00000000  00000000  00033b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a0  00000000  00000000  00034508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184a3  00000000  00000000  00034da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c404  00000000  00000000  0004d24b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078e7c  00000000  00000000  0005964f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d24cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002874  00000000  00000000  000d2548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080040d0 	.word	0x080040d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080040d0 	.word	0x080040d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 fda9 	bl	8002d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 fcfe 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f90d 	bl	8000482 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8e1 	bl	8000438 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000094 	.word	0x20000094

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000094 	.word	0x20000094

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	231f      	movs	r3, #31
 80002fc:	401a      	ands	r2, r3
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <NVIC_EnableIRQ+0x28>)
 8000300:	2101      	movs	r1, #1
 8000302:	4091      	lsls	r1, r2
 8000304:	000a      	movs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b7f      	cmp	r3, #127	; 0x7f
 8000328:	d932      	bls.n	8000390 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	4a2f      	ldr	r2, [pc, #188]	; (80003e8 <NVIC_SetPriority+0xd4>)
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	0019      	movs	r1, r3
 8000332:	230f      	movs	r3, #15
 8000334:	400b      	ands	r3, r1
 8000336:	3b08      	subs	r3, #8
 8000338:	089b      	lsrs	r3, r3, #2
 800033a:	3306      	adds	r3, #6
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	3304      	adds	r3, #4
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1dfa      	adds	r2, r7, #7
 8000346:	7812      	ldrb	r2, [r2, #0]
 8000348:	0011      	movs	r1, r2
 800034a:	2203      	movs	r2, #3
 800034c:	400a      	ands	r2, r1
 800034e:	00d2      	lsls	r2, r2, #3
 8000350:	21ff      	movs	r1, #255	; 0xff
 8000352:	4091      	lsls	r1, r2
 8000354:	000a      	movs	r2, r1
 8000356:	43d2      	mvns	r2, r2
 8000358:	401a      	ands	r2, r3
 800035a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	019b      	lsls	r3, r3, #6
 8000360:	22ff      	movs	r2, #255	; 0xff
 8000362:	401a      	ands	r2, r3
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0018      	movs	r0, r3
 800036a:	2303      	movs	r3, #3
 800036c:	4003      	ands	r3, r0
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <NVIC_SetPriority+0xd4>)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	001c      	movs	r4, r3
 800037a:	230f      	movs	r3, #15
 800037c:	4023      	ands	r3, r4
 800037e:	3b08      	subs	r3, #8
 8000380:	089b      	lsrs	r3, r3, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	3306      	adds	r3, #6
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	18c3      	adds	r3, r0, r3
 800038a:	3304      	adds	r3, #4
 800038c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800038e:	e027      	b.n	80003e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <NVIC_SetPriority+0xd8>)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	33c0      	adds	r3, #192	; 0xc0
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	589b      	ldr	r3, [r3, r2]
 80003a0:	1dfa      	adds	r2, r7, #7
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	0011      	movs	r1, r2
 80003a6:	2203      	movs	r2, #3
 80003a8:	400a      	ands	r2, r1
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	21ff      	movs	r1, #255	; 0xff
 80003ae:	4091      	lsls	r1, r2
 80003b0:	000a      	movs	r2, r1
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	019b      	lsls	r3, r3, #6
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	401a      	ands	r2, r3
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	2303      	movs	r3, #3
 80003c8:	4003      	ands	r3, r0
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <NVIC_SetPriority+0xd8>)
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	430a      	orrs	r2, r1
 80003da:	33c0      	adds	r3, #192	; 0xc0
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	501a      	str	r2, [r3, r0]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b003      	add	sp, #12
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <SysTick_Config+0x40>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d901      	bls.n	8000406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000402:	2301      	movs	r3, #1
 8000404:	e010      	b.n	8000428 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <SysTick_Config+0x44>)
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	3a01      	subs	r2, #1
 800040c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	2103      	movs	r1, #3
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff7d 	bl	8000314 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <SysTick_Config+0x44>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <SysTick_Config+0x44>)
 8000422:	2207      	movs	r2, #7
 8000424:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000426:	2300      	movs	r3, #0
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}
 8000430:	00ffffff 	.word	0x00ffffff
 8000434:	e000e010 	.word	0xe000e010

08000438 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	210f      	movs	r1, #15
 8000444:	187b      	adds	r3, r7, r1
 8000446:	1c02      	adds	r2, r0, #0
 8000448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	187b      	adds	r3, r7, r1
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b25b      	sxtb	r3, r3
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f7ff ff5d 	bl	8000314 <NVIC_SetPriority>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	0002      	movs	r2, r0
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b25b      	sxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ff37 	bl	80002e8 <NVIC_EnableIRQ>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}

08000482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ffaf 	bl	80003f0 <SysTick_Config>
 8000492:	0003      	movs	r3, r0
}
 8000494:	0018      	movs	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}

0800049c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004b2:	e155      	b.n	8000760 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2101      	movs	r1, #1
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	4091      	lsls	r1, r2
 80004be:	000a      	movs	r2, r1
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d100      	bne.n	80004cc <HAL_GPIO_Init+0x30>
 80004ca:	e146      	b.n	800075a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d003      	beq.n	80004dc <HAL_GPIO_Init+0x40>
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b12      	cmp	r3, #18
 80004da:	d123      	bne.n	8000524 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	08da      	lsrs	r2, r3, #3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3208      	adds	r2, #8
 80004e4:	0092      	lsls	r2, r2, #2
 80004e6:	58d3      	ldr	r3, [r2, r3]
 80004e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2207      	movs	r2, #7
 80004ee:	4013      	ands	r3, r2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	220f      	movs	r2, #15
 80004f4:	409a      	lsls	r2, r3
 80004f6:	0013      	movs	r3, r2
 80004f8:	43da      	mvns	r2, r3
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	691a      	ldr	r2, [r3, #16]
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	2107      	movs	r1, #7
 8000508:	400b      	ands	r3, r1
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	409a      	lsls	r2, r3
 800050e:	0013      	movs	r3, r2
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4313      	orrs	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	08da      	lsrs	r2, r3, #3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3208      	adds	r2, #8
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	6939      	ldr	r1, [r7, #16]
 8000522:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2203      	movs	r2, #3
 8000530:	409a      	lsls	r2, r3
 8000532:	0013      	movs	r3, r2
 8000534:	43da      	mvns	r2, r3
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	4013      	ands	r3, r2
 800053a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2203      	movs	r2, #3
 8000542:	401a      	ands	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	409a      	lsls	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	4313      	orrs	r3, r2
 8000550:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00b      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d007      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800056c:	2b11      	cmp	r3, #17
 800056e:	d003      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b12      	cmp	r3, #18
 8000576:	d130      	bne.n	80005da <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	2203      	movs	r2, #3
 8000584:	409a      	lsls	r2, r3
 8000586:	0013      	movs	r3, r2
 8000588:	43da      	mvns	r2, r3
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	409a      	lsls	r2, r3
 800059a:	0013      	movs	r3, r2
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	4313      	orrs	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005ae:	2201      	movs	r2, #1
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	409a      	lsls	r2, r3
 80005b4:	0013      	movs	r3, r2
 80005b6:	43da      	mvns	r2, r3
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	4013      	ands	r3, r2
 80005bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	091b      	lsrs	r3, r3, #4
 80005c4:	2201      	movs	r2, #1
 80005c6:	401a      	ands	r2, r3
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	409a      	lsls	r2, r3
 80005cc:	0013      	movs	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2203      	movs	r2, #3
 80005e6:	409a      	lsls	r2, r3
 80005e8:	0013      	movs	r3, r2
 80005ea:	43da      	mvns	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4013      	ands	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0013      	movs	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	4313      	orrs	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	055b      	lsls	r3, r3, #21
 8000612:	4013      	ands	r3, r2
 8000614:	d100      	bne.n	8000618 <HAL_GPIO_Init+0x17c>
 8000616:	e0a0      	b.n	800075a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000618:	4b57      	ldr	r3, [pc, #348]	; (8000778 <HAL_GPIO_Init+0x2dc>)
 800061a:	699a      	ldr	r2, [r3, #24]
 800061c:	4b56      	ldr	r3, [pc, #344]	; (8000778 <HAL_GPIO_Init+0x2dc>)
 800061e:	2101      	movs	r1, #1
 8000620:	430a      	orrs	r2, r1
 8000622:	619a      	str	r2, [r3, #24]
 8000624:	4b54      	ldr	r3, [pc, #336]	; (8000778 <HAL_GPIO_Init+0x2dc>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	2201      	movs	r2, #1
 800062a:	4013      	ands	r3, r2
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000630:	4a52      	ldr	r2, [pc, #328]	; (800077c <HAL_GPIO_Init+0x2e0>)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	3302      	adds	r3, #2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	589b      	ldr	r3, [r3, r2]
 800063c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2203      	movs	r2, #3
 8000642:	4013      	ands	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	220f      	movs	r2, #15
 8000648:	409a      	lsls	r2, r3
 800064a:	0013      	movs	r3, r2
 800064c:	43da      	mvns	r2, r3
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4013      	ands	r3, r2
 8000652:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	2390      	movs	r3, #144	; 0x90
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	429a      	cmp	r2, r3
 800065c:	d019      	beq.n	8000692 <HAL_GPIO_Init+0x1f6>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a47      	ldr	r2, [pc, #284]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d013      	beq.n	800068e <HAL_GPIO_Init+0x1f2>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a46      	ldr	r2, [pc, #280]	; (8000784 <HAL_GPIO_Init+0x2e8>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d00d      	beq.n	800068a <HAL_GPIO_Init+0x1ee>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a45      	ldr	r2, [pc, #276]	; (8000788 <HAL_GPIO_Init+0x2ec>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d007      	beq.n	8000686 <HAL_GPIO_Init+0x1ea>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a44      	ldr	r2, [pc, #272]	; (800078c <HAL_GPIO_Init+0x2f0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d101      	bne.n	8000682 <HAL_GPIO_Init+0x1e6>
 800067e:	2304      	movs	r3, #4
 8000680:	e008      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 8000682:	2305      	movs	r3, #5
 8000684:	e006      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 8000686:	2303      	movs	r3, #3
 8000688:	e004      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 800068a:	2302      	movs	r3, #2
 800068c:	e002      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 8000692:	2300      	movs	r3, #0
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	2103      	movs	r1, #3
 8000698:	400a      	ands	r2, r1
 800069a:	0092      	lsls	r2, r2, #2
 800069c:	4093      	lsls	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006a4:	4935      	ldr	r1, [pc, #212]	; (800077c <HAL_GPIO_Init+0x2e0>)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	3302      	adds	r3, #2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	43da      	mvns	r2, r3
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	4013      	ands	r3, r2
 80006c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685a      	ldr	r2, [r3, #4]
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	025b      	lsls	r3, r3, #9
 80006ca:	4013      	ands	r3, r2
 80006cc:	d003      	beq.n	80006d6 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	43da      	mvns	r2, r3
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	4013      	ands	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	029b      	lsls	r3, r3, #10
 80006f4:	4013      	ands	r3, r2
 80006f6:	d003      	beq.n	8000700 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	43da      	mvns	r2, r3
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	4013      	ands	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	035b      	lsls	r3, r3, #13
 800071e:	4013      	ands	r3, r2
 8000720:	d003      	beq.n	800072a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4313      	orrs	r3, r2
 8000728:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	43da      	mvns	r2, r3
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	4013      	ands	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	039b      	lsls	r3, r3, #14
 8000748:	4013      	ands	r3, r2
 800074a:	d003      	beq.n	8000754 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4313      	orrs	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	40da      	lsrs	r2, r3
 8000768:	1e13      	subs	r3, r2, #0
 800076a:	d000      	beq.n	800076e <HAL_GPIO_Init+0x2d2>
 800076c:	e6a2      	b.n	80004b4 <HAL_GPIO_Init+0x18>
  } 
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b006      	add	sp, #24
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000
 8000780:	48000400 	.word	0x48000400
 8000784:	48000800 	.word	0x48000800
 8000788:	48000c00 	.word	0x48000c00
 800078c:	48001000 	.word	0x48001000
 8000790:	40010400 	.word	0x40010400

08000794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	000a      	movs	r2, r1
 800079e:	1cbb      	adds	r3, r7, #2
 80007a0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	1cba      	adds	r2, r7, #2
 80007a8:	8812      	ldrh	r2, [r2, #0]
 80007aa:	4013      	ands	r3, r2
 80007ac:	d004      	beq.n	80007b8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80007ae:	230f      	movs	r3, #15
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e003      	b.n	80007c0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007b8:	230f      	movs	r3, #15
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80007c0:	230f      	movs	r3, #15
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	781b      	ldrb	r3, [r3, #0]
  }
 80007c6:	0018      	movs	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b004      	add	sp, #16
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	0008      	movs	r0, r1
 80007d8:	0011      	movs	r1, r2
 80007da:	1cbb      	adds	r3, r7, #2
 80007dc:	1c02      	adds	r2, r0, #0
 80007de:	801a      	strh	r2, [r3, #0]
 80007e0:	1c7b      	adds	r3, r7, #1
 80007e2:	1c0a      	adds	r2, r1, #0
 80007e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007e6:	1c7b      	adds	r3, r7, #1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007ee:	1cbb      	adds	r3, r7, #2
 80007f0:	881a      	ldrh	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007f6:	e003      	b.n	8000800 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007f8:	1cbb      	adds	r3, r7, #2
 80007fa:	881a      	ldrh	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}

08000808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dbb      	adds	r3, r7, #6
 8000812:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	1dba      	adds	r2, r7, #6
 800081a:	8812      	ldrh	r2, [r2, #0]
 800081c:	4013      	ands	r3, r2
 800081e:	d008      	beq.n	8000832 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000822:	1dba      	adds	r2, r7, #6
 8000824:	8812      	ldrh	r2, [r2, #0]
 8000826:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000828:	1dbb      	adds	r3, r7, #6
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	0018      	movs	r0, r3
 800082e:	f002 fa13 	bl	8002c58 <HAL_GPIO_EXTI_Callback>
  }
}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40010400 	.word	0x40010400

08000840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e082      	b.n	8000958 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2241      	movs	r2, #65	; 0x41
 8000856:	5c9b      	ldrb	r3, [r3, r2]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d107      	bne.n	800086e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2240      	movs	r2, #64	; 0x40
 8000862:	2100      	movs	r1, #0
 8000864:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	0018      	movs	r0, r3
 800086a:	f001 ffe5 	bl	8002838 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2241      	movs	r2, #65	; 0x41
 8000872:	2124      	movs	r1, #36	; 0x24
 8000874:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2101      	movs	r1, #1
 8000882:	438a      	bics	r2, r1
 8000884:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4934      	ldr	r1, [pc, #208]	; (8000960 <HAL_I2C_Init+0x120>)
 8000890:	400a      	ands	r2, r1
 8000892:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4931      	ldr	r1, [pc, #196]	; (8000964 <HAL_I2C_Init+0x124>)
 80008a0:	400a      	ands	r2, r1
 80008a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d108      	bne.n	80008be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0209      	lsls	r1, r1, #8
 80008b8:	430a      	orrs	r2, r1
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	e007      	b.n	80008ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2184      	movs	r1, #132	; 0x84
 80008c8:	0209      	lsls	r1, r1, #8
 80008ca:	430a      	orrs	r2, r1
 80008cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d104      	bne.n	80008e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	491f      	ldr	r1, [pc, #124]	; (8000968 <HAL_I2C_Init+0x128>)
 80008ec:	430a      	orrs	r2, r1
 80008ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	68da      	ldr	r2, [r3, #12]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	491a      	ldr	r1, [pc, #104]	; (8000964 <HAL_I2C_Init+0x124>)
 80008fc:	400a      	ands	r2, r1
 80008fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	691a      	ldr	r2, [r3, #16]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	431a      	orrs	r2, r3
 800090a:	0011      	movs	r1, r2
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	021a      	lsls	r2, r3, #8
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	430a      	orrs	r2, r1
 8000918:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	69d9      	ldr	r1, [r3, #28]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6a1a      	ldr	r2, [r3, #32]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	430a      	orrs	r2, r1
 8000928:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2101      	movs	r1, #1
 8000936:	430a      	orrs	r2, r1
 8000938:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2241      	movs	r2, #65	; 0x41
 8000944:	2120      	movs	r1, #32
 8000946:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2242      	movs	r2, #66	; 0x42
 8000952:	2100      	movs	r1, #0
 8000954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}
 8000960:	f0ffffff 	.word	0xf0ffffff
 8000964:	ffff7fff 	.word	0xffff7fff
 8000968:	02008000 	.word	0x02008000

0800096c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b089      	sub	sp, #36	; 0x24
 8000970:	af02      	add	r7, sp, #8
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	0008      	movs	r0, r1
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	0019      	movs	r1, r3
 800097a:	230a      	movs	r3, #10
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	1c02      	adds	r2, r0, #0
 8000980:	801a      	strh	r2, [r3, #0]
 8000982:	2308      	movs	r3, #8
 8000984:	18fb      	adds	r3, r7, r3
 8000986:	1c0a      	adds	r2, r1, #0
 8000988:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2241      	movs	r2, #65	; 0x41
 8000992:	5c9b      	ldrb	r3, [r3, r2]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b20      	cmp	r3, #32
 8000998:	d000      	beq.n	800099c <HAL_I2C_Master_Transmit+0x30>
 800099a:	e0f3      	b.n	8000b84 <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2240      	movs	r2, #64	; 0x40
 80009a0:	5c9b      	ldrb	r3, [r3, r2]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d101      	bne.n	80009aa <HAL_I2C_Master_Transmit+0x3e>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e0ed      	b.n	8000b86 <HAL_I2C_Master_Transmit+0x21a>
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	2101      	movs	r1, #1
 80009b0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80009b2:	f7ff fc71 	bl	8000298 <HAL_GetTick>
 80009b6:	0003      	movs	r3, r0
 80009b8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	0219      	lsls	r1, r3, #8
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2319      	movs	r3, #25
 80009c6:	2201      	movs	r2, #1
 80009c8:	f000 fa1a 	bl	8000e00 <I2C_WaitOnFlagUntilTimeout>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 80009d0:	2303      	movs	r3, #3
 80009d2:	e0d8      	b.n	8000b86 <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2241      	movs	r2, #65	; 0x41
 80009d8:	2121      	movs	r1, #33	; 0x21
 80009da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2242      	movs	r2, #66	; 0x42
 80009e0:	2110      	movs	r1, #16
 80009e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2200      	movs	r2, #0
 80009e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2208      	movs	r2, #8
 80009f4:	18ba      	adds	r2, r7, r2
 80009f6:	8812      	ldrh	r2, [r2, #0]
 80009f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	2bff      	cmp	r3, #255	; 0xff
 8000a08:	d912      	bls.n	8000a30 <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	22ff      	movs	r2, #255	; 0xff
 8000a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	045c      	lsls	r4, r3, #17
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	8819      	ldrh	r1, [r3, #0]
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	019b      	lsls	r3, r3, #6
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	0023      	movs	r3, r4
 8000a2a:	f000 fb59 	bl	80010e0 <I2C_TransferConfig>
 8000a2e:	e07a      	b.n	8000b26 <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	049c      	lsls	r4, r3, #18
 8000a44:	230a      	movs	r3, #10
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	8819      	ldrh	r1, [r3, #0]
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	019b      	lsls	r3, r3, #6
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	0023      	movs	r3, r4
 8000a54:	f000 fb44 	bl	80010e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000a58:	e065      	b.n	8000b26 <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 fa06 	bl	8000e72 <I2C_WaitOnTXISFlagUntilTimeout>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d007      	beq.n	8000a7a <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d101      	bne.n	8000a76 <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e087      	b.n	8000b86 <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	e085      	b.n	8000b86 <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7e:	1c59      	adds	r1, r3, #1
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	6251      	str	r1, [r2, #36]	; 0x24
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	3b01      	subs	r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d13b      	bne.n	8000b26 <HAL_I2C_Master_Transmit+0x1ba>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d036      	beq.n	8000b26 <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	f000 f99b 	bl	8000e00 <I2C_WaitOnFlagUntilTimeout>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e059      	b.n	8000b86 <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	2bff      	cmp	r3, #255	; 0xff
 8000ada:	d911      	bls.n	8000b00 <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	045c      	lsls	r4, r3, #17
 8000aec:	230a      	movs	r3, #10
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	8819      	ldrh	r1, [r3, #0]
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	2300      	movs	r3, #0
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	0023      	movs	r3, r4
 8000afa:	f000 faf1 	bl	80010e0 <I2C_TransferConfig>
 8000afe:	e012      	b.n	8000b26 <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	049c      	lsls	r4, r3, #18
 8000b14:	230a      	movs	r3, #10
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	8819      	ldrh	r1, [r3, #0]
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	0023      	movs	r3, r4
 8000b22:	f000 fadd 	bl	80010e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d194      	bne.n	8000a5a <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 f9da 	bl	8000ef0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d007      	beq.n	8000b50 <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d101      	bne.n	8000b4c <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e01c      	b.n	8000b86 <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e01a      	b.n	8000b86 <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2220      	movs	r2, #32
 8000b56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	490b      	ldr	r1, [pc, #44]	; (8000b90 <HAL_I2C_Master_Transmit+0x224>)
 8000b64:	400a      	ands	r2, r1
 8000b66:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2241      	movs	r2, #65	; 0x41
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2242      	movs	r2, #66	; 0x42
 8000b74:	2100      	movs	r1, #0
 8000b76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2240      	movs	r2, #64	; 0x40
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	e000      	b.n	8000b86 <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8000b84:	2302      	movs	r3, #2
  }
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b007      	add	sp, #28
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	fe00e800 	.word	0xfe00e800

08000b94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	0008      	movs	r0, r1
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	1c02      	adds	r2, r0, #0
 8000ba8:	801a      	strh	r2, [r3, #0]
 8000baa:	2308      	movs	r3, #8
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	1c0a      	adds	r2, r1, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2241      	movs	r2, #65	; 0x41
 8000bba:	5c9b      	ldrb	r3, [r3, r2]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b20      	cmp	r3, #32
 8000bc0:	d000      	beq.n	8000bc4 <HAL_I2C_Master_Receive+0x30>
 8000bc2:	e0f4      	b.n	8000dae <HAL_I2C_Master_Receive+0x21a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2240      	movs	r2, #64	; 0x40
 8000bc8:	5c9b      	ldrb	r3, [r3, r2]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d101      	bne.n	8000bd2 <HAL_I2C_Master_Receive+0x3e>
 8000bce:	2302      	movs	r3, #2
 8000bd0:	e0ee      	b.n	8000db0 <HAL_I2C_Master_Receive+0x21c>
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2240      	movs	r2, #64	; 0x40
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000bda:	f7ff fb5d 	bl	8000298 <HAL_GetTick>
 8000bde:	0003      	movs	r3, r0
 8000be0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	0219      	lsls	r1, r3, #8
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2319      	movs	r3, #25
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f000 f906 	bl	8000e00 <I2C_WaitOnFlagUntilTimeout>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_I2C_Master_Receive+0x68>
    {
      return HAL_TIMEOUT;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e0d9      	b.n	8000db0 <HAL_I2C_Master_Receive+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2241      	movs	r2, #65	; 0x41
 8000c00:	2122      	movs	r1, #34	; 0x22
 8000c02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2242      	movs	r2, #66	; 0x42
 8000c08:	2110      	movs	r1, #16
 8000c0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	18ba      	adds	r2, r7, r2
 8000c1e:	8812      	ldrh	r2, [r2, #0]
 8000c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2200      	movs	r2, #0
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	2bff      	cmp	r3, #255	; 0xff
 8000c30:	d912      	bls.n	8000c58 <HAL_I2C_Master_Receive+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	22ff      	movs	r2, #255	; 0xff
 8000c36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	045c      	lsls	r4, r3, #17
 8000c42:	230a      	movs	r3, #10
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	8819      	ldrh	r1, [r3, #0]
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	2390      	movs	r3, #144	; 0x90
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	0023      	movs	r3, r4
 8000c52:	f000 fa45 	bl	80010e0 <I2C_TransferConfig>
 8000c56:	e07b      	b.n	8000d50 <HAL_I2C_Master_Receive+0x1bc>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	049c      	lsls	r4, r3, #18
 8000c6c:	230a      	movs	r3, #10
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	8819      	ldrh	r1, [r3, #0]
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	2390      	movs	r3, #144	; 0x90
 8000c76:	019b      	lsls	r3, r3, #6
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	0023      	movs	r3, r4
 8000c7c:	f000 fa30 	bl	80010e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000c80:	e066      	b.n	8000d50 <HAL_I2C_Master_Receive+0x1bc>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 f96d 	bl	8000f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d007      	beq.n	8000ca2 <HAL_I2C_Master_Receive+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d101      	bne.n	8000c9e <HAL_I2C_Master_Receive+0x10a>
        {
          return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e088      	b.n	8000db0 <HAL_I2C_Master_Receive+0x21c>
        }
        else
        {
          return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e086      	b.n	8000db0 <HAL_I2C_Master_Receive+0x21c>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	1c59      	adds	r1, r3, #1
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	6251      	str	r1, [r2, #36]	; 0x24
 8000cb2:	b2c2      	uxtb	r2, r0
 8000cb4:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d13b      	bne.n	8000d50 <HAL_I2C_Master_Receive+0x1bc>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d036      	beq.n	8000d50 <HAL_I2C_Master_Receive+0x1bc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	0013      	movs	r3, r2
 8000cec:	2200      	movs	r2, #0
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	f000 f886 	bl	8000e00 <I2C_WaitOnFlagUntilTimeout>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_I2C_Master_Receive+0x168>
        {
          return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e059      	b.n	8000db0 <HAL_I2C_Master_Receive+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	2bff      	cmp	r3, #255	; 0xff
 8000d04:	d911      	bls.n	8000d2a <HAL_I2C_Master_Receive+0x196>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	22ff      	movs	r2, #255	; 0xff
 8000d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	045c      	lsls	r4, r3, #17
 8000d16:	230a      	movs	r3, #10
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	8819      	ldrh	r1, [r3, #0]
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	0023      	movs	r3, r4
 8000d24:	f000 f9dc 	bl	80010e0 <I2C_TransferConfig>
 8000d28:	e012      	b.n	8000d50 <HAL_I2C_Master_Receive+0x1bc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	049c      	lsls	r4, r3, #18
 8000d3e:	230a      	movs	r3, #10
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	8819      	ldrh	r1, [r3, #0]
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	2300      	movs	r3, #0
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	0023      	movs	r3, r4
 8000d4c:	f000 f9c8 	bl	80010e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d193      	bne.n	8000c82 <HAL_I2C_Master_Receive+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 f8c5 	bl	8000ef0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d007      	beq.n	8000d7a <HAL_I2C_Master_Receive+0x1e6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d101      	bne.n	8000d76 <HAL_I2C_Master_Receive+0x1e2>
      {
        return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e01c      	b.n	8000db0 <HAL_I2C_Master_Receive+0x21c>
      }
      else
      {
        return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e01a      	b.n	8000db0 <HAL_I2C_Master_Receive+0x21c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2220      	movs	r2, #32
 8000d80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	490a      	ldr	r1, [pc, #40]	; (8000db8 <HAL_I2C_Master_Receive+0x224>)
 8000d8e:	400a      	ands	r2, r1
 8000d90:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2241      	movs	r2, #65	; 0x41
 8000d96:	2120      	movs	r1, #32
 8000d98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2242      	movs	r2, #66	; 0x42
 8000d9e:	2100      	movs	r1, #0
 8000da0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2240      	movs	r2, #64	; 0x40
 8000da6:	2100      	movs	r1, #0
 8000da8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_I2C_Master_Receive+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8000dae:	2302      	movs	r3, #2
  }
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b007      	add	sp, #28
 8000db6:	bd90      	pop	{r4, r7, pc}
 8000db8:	fe00e800 	.word	0xfe00e800

08000dbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4013      	ands	r3, r2
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d103      	bne.n	8000dda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	2201      	movs	r2, #1
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d007      	beq.n	8000df8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	699a      	ldr	r2, [r3, #24]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2101      	movs	r1, #1
 8000df4:	430a      	orrs	r2, r1
 8000df6:	619a      	str	r2, [r3, #24]
  }
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e10:	e01b      	b.n	8000e4a <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	d018      	beq.n	8000e4a <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000e1e:	f7ff fa3b 	bl	8000298 <HAL_GetTick>
 8000e22:	0002      	movs	r2, r0
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d20d      	bcs.n	8000e4a <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2241      	movs	r2, #65	; 0x41
 8000e32:	2120      	movs	r1, #32
 8000e34:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2242      	movs	r2, #66	; 0x42
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2240      	movs	r2, #64	; 0x40
 8000e42:	2100      	movs	r1, #0
 8000e44:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e00f      	b.n	8000e6a <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	4013      	ands	r3, r2
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	425a      	negs	r2, r3
 8000e5a:	4153      	adcs	r3, r2
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	001a      	movs	r2, r3
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d0d4      	beq.n	8000e12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b004      	add	sp, #16
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e7e:	e02b      	b.n	8000ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 f8cc 	bl	8001024 <I2C_IsAcknowledgeFailed>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d001      	beq.n	8000e94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e029      	b.n	8000ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3301      	adds	r3, #1
 8000e98:	d01e      	beq.n	8000ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d007      	beq.n	8000eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8000ea0:	f7ff f9fa 	bl	8000298 <HAL_GetTick>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d213      	bcs.n	8000ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2241      	movs	r2, #65	; 0x41
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2242      	movs	r2, #66	; 0x42
 8000ec8:	2100      	movs	r1, #0
 8000eca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2240      	movs	r2, #64	; 0x40
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e007      	b.n	8000ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d1cc      	bne.n	8000e80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000efc:	e028      	b.n	8000f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 f88d 	bl	8001024 <I2C_IsAcknowledgeFailed>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d001      	beq.n	8000f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e026      	b.n	8000f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000f18:	f7ff f9be 	bl	8000298 <HAL_GetTick>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d213      	bcs.n	8000f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2241      	movs	r2, #65	; 0x41
 8000f38:	2120      	movs	r1, #32
 8000f3a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2242      	movs	r2, #66	; 0x42
 8000f40:	2100      	movs	r1, #0
 8000f42:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2240      	movs	r2, #64	; 0x40
 8000f48:	2100      	movs	r1, #0
 8000f4a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e007      	b.n	8000f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2220      	movs	r2, #32
 8000f58:	4013      	ands	r3, r2
 8000f5a:	2b20      	cmp	r3, #32
 8000f5c:	d1cf      	bne.n	8000efe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000f74:	e048      	b.n	8001008 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 f851 	bl	8001024 <I2C_IsAcknowledgeFailed>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e046      	b.n	8001018 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	2220      	movs	r2, #32
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b20      	cmp	r3, #32
 8000f96:	d11c      	bne.n	8000fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	491d      	ldr	r1, [pc, #116]	; (8001020 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8000fac:	400a      	ands	r2, r1
 8000fae:	605a      	str	r2, [r3, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2241      	movs	r2, #65	; 0x41
 8000fba:	2120      	movs	r1, #32
 8000fbc:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2242      	movs	r2, #66	; 0x42
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2240      	movs	r2, #64	; 0x40
 8000fca:	2100      	movs	r1, #0
 8000fcc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e022      	b.n	8001018 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d007      	beq.n	8000fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8000fd8:	f7ff f95e 	bl	8000298 <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d20f      	bcs.n	8001008 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fec:	2220      	movs	r2, #32
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2241      	movs	r2, #65	; 0x41
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	2100      	movs	r1, #0
 8001002:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e007      	b.n	8001018 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	2204      	movs	r2, #4
 8001010:	4013      	ands	r3, r2
 8001012:	2b04      	cmp	r3, #4
 8001014:	d1af      	bne.n	8000f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b004      	add	sp, #16
 800101e:	bd80      	pop	{r7, pc}
 8001020:	fe00e800 	.word	0xfe00e800

08001024 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	2210      	movs	r2, #16
 8001038:	4013      	ands	r3, r2
 800103a:	2b10      	cmp	r3, #16
 800103c:	d148      	bne.n	80010d0 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800103e:	e01b      	b.n	8001078 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3301      	adds	r3, #1
 8001044:	d018      	beq.n	8001078 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d007      	beq.n	800105c <I2C_IsAcknowledgeFailed+0x38>
 800104c:	f7ff f924 	bl	8000298 <HAL_GetTick>
 8001050:	0002      	movs	r2, r0
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	429a      	cmp	r2, r3
 800105a:	d20d      	bcs.n	8001078 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2241      	movs	r2, #65	; 0x41
 8001060:	2120      	movs	r1, #32
 8001062:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2242      	movs	r2, #66	; 0x42
 8001068:	2100      	movs	r1, #0
 800106a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	2100      	movs	r1, #0
 8001072:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e02c      	b.n	80010d2 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	2220      	movs	r2, #32
 8001080:	4013      	ands	r3, r2
 8001082:	2b20      	cmp	r3, #32
 8001084:	d1dc      	bne.n	8001040 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2210      	movs	r2, #16
 800108c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2220      	movs	r2, #32
 8001094:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff fe8f 	bl	8000dbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <I2C_IsAcknowledgeFailed+0xb8>)
 80010aa:	400a      	ands	r2, r1
 80010ac:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2204      	movs	r2, #4
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2241      	movs	r2, #65	; 0x41
 80010b8:	2120      	movs	r1, #32
 80010ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2242      	movs	r2, #66	; 0x42
 80010c0:	2100      	movs	r1, #0
 80010c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2240      	movs	r2, #64	; 0x40
 80010c8:	2100      	movs	r1, #0
 80010ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	fe00e800 	.word	0xfe00e800

080010e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	0008      	movs	r0, r1
 80010ea:	0011      	movs	r1, r2
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	240a      	movs	r4, #10
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	1c02      	adds	r2, r0, #0
 80010f4:	801a      	strh	r2, [r3, #0]
 80010f6:	2009      	movs	r0, #9
 80010f8:	183b      	adds	r3, r7, r0
 80010fa:	1c0a      	adds	r2, r1, #0
 80010fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <I2C_TransferConfig+0x68>)
 800110e:	4013      	ands	r3, r2
 8001110:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001112:	193b      	adds	r3, r7, r4
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	059b      	lsls	r3, r3, #22
 8001118:	0d9a      	lsrs	r2, r3, #22
 800111a:	183b      	adds	r3, r7, r0
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	0419      	lsls	r1, r3, #16
 8001120:	23ff      	movs	r3, #255	; 0xff
 8001122:	041b      	lsls	r3, r3, #16
 8001124:	400b      	ands	r3, r1
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	431a      	orrs	r2, r3
 800112c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112e:	4313      	orrs	r3, r2
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	605a      	str	r2, [r3, #4]
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b007      	add	sp, #28
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	fc009800 	.word	0xfc009800

0800114c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2241      	movs	r2, #65	; 0x41
 800115a:	5c9b      	ldrb	r3, [r3, r2]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b20      	cmp	r3, #32
 8001160:	d138      	bne.n	80011d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2240      	movs	r2, #64	; 0x40
 8001166:	5c9b      	ldrb	r3, [r3, r2]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800116c:	2302      	movs	r3, #2
 800116e:	e032      	b.n	80011d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2240      	movs	r2, #64	; 0x40
 8001174:	2101      	movs	r1, #1
 8001176:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2241      	movs	r2, #65	; 0x41
 800117c:	2124      	movs	r1, #36	; 0x24
 800117e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2101      	movs	r1, #1
 800118c:	438a      	bics	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4911      	ldr	r1, [pc, #68]	; (80011e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800119c:	400a      	ands	r2, r1
 800119e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6819      	ldr	r1, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2101      	movs	r1, #1
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2241      	movs	r2, #65	; 0x41
 80011c4:	2120      	movs	r1, #32
 80011c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2240      	movs	r2, #64	; 0x40
 80011cc:	2100      	movs	r1, #0
 80011ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	e000      	b.n	80011d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80011d4:	2302      	movs	r3, #2
  }
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	ffffefff 	.word	0xffffefff

080011e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2241      	movs	r2, #65	; 0x41
 80011f6:	5c9b      	ldrb	r3, [r3, r2]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b20      	cmp	r3, #32
 80011fc:	d139      	bne.n	8001272 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2240      	movs	r2, #64	; 0x40
 8001202:	5c9b      	ldrb	r3, [r3, r2]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001208:	2302      	movs	r3, #2
 800120a:	e033      	b.n	8001274 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2240      	movs	r2, #64	; 0x40
 8001210:	2101      	movs	r1, #1
 8001212:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2241      	movs	r2, #65	; 0x41
 8001218:	2124      	movs	r1, #36	; 0x24
 800121a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2101      	movs	r1, #1
 8001228:	438a      	bics	r2, r1
 800122a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2101      	movs	r1, #1
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2241      	movs	r2, #65	; 0x41
 8001262:	2120      	movs	r1, #32
 8001264:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	2100      	movs	r1, #0
 800126c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001272:	2302      	movs	r3, #2
  }
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b004      	add	sp, #16
 800127a:	bd80      	pop	{r7, pc}
 800127c:	fffff0ff 	.word	0xfffff0ff

08001280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	d100      	bne.n	8001298 <HAL_RCC_OscConfig+0x18>
 8001296:	e08d      	b.n	80013b4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001298:	4bc5      	ldr	r3, [pc, #788]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	220c      	movs	r2, #12
 800129e:	4013      	ands	r3, r2
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d00e      	beq.n	80012c2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a4:	4bc2      	ldr	r3, [pc, #776]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	220c      	movs	r2, #12
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d116      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
 80012b0:	4bbf      	ldr	r3, [pc, #764]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	23c0      	movs	r3, #192	; 0xc0
 80012b6:	025b      	lsls	r3, r3, #9
 80012b8:	401a      	ands	r2, r3
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	025b      	lsls	r3, r3, #9
 80012be:	429a      	cmp	r2, r3
 80012c0:	d10d      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c2:	4bbb      	ldr	r3, [pc, #748]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	029b      	lsls	r3, r3, #10
 80012ca:	4013      	ands	r3, r2
 80012cc:	d100      	bne.n	80012d0 <HAL_RCC_OscConfig+0x50>
 80012ce:	e070      	b.n	80013b2 <HAL_RCC_OscConfig+0x132>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d000      	beq.n	80012da <HAL_RCC_OscConfig+0x5a>
 80012d8:	e06b      	b.n	80013b2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e329      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_OscConfig+0x76>
 80012e6:	4bb2      	ldr	r3, [pc, #712]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4bb1      	ldr	r3, [pc, #708]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	0249      	lsls	r1, r1, #9
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e02f      	b.n	8001356 <HAL_RCC_OscConfig+0xd6>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x98>
 80012fe:	4bac      	ldr	r3, [pc, #688]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4bab      	ldr	r3, [pc, #684]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001304:	49ab      	ldr	r1, [pc, #684]	; (80015b4 <HAL_RCC_OscConfig+0x334>)
 8001306:	400a      	ands	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	4ba9      	ldr	r3, [pc, #676]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4ba8      	ldr	r3, [pc, #672]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001310:	49a9      	ldr	r1, [pc, #676]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 8001312:	400a      	ands	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e01e      	b.n	8001356 <HAL_RCC_OscConfig+0xd6>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b05      	cmp	r3, #5
 800131e:	d10e      	bne.n	800133e <HAL_RCC_OscConfig+0xbe>
 8001320:	4ba3      	ldr	r3, [pc, #652]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4ba2      	ldr	r3, [pc, #648]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001326:	2180      	movs	r1, #128	; 0x80
 8001328:	02c9      	lsls	r1, r1, #11
 800132a:	430a      	orrs	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	4ba0      	ldr	r3, [pc, #640]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b9f      	ldr	r3, [pc, #636]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0249      	lsls	r1, r1, #9
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e00b      	b.n	8001356 <HAL_RCC_OscConfig+0xd6>
 800133e:	4b9c      	ldr	r3, [pc, #624]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b9b      	ldr	r3, [pc, #620]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001344:	499b      	ldr	r1, [pc, #620]	; (80015b4 <HAL_RCC_OscConfig+0x334>)
 8001346:	400a      	ands	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	4b99      	ldr	r3, [pc, #612]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b98      	ldr	r3, [pc, #608]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001350:	4999      	ldr	r1, [pc, #612]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 8001352:	400a      	ands	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d014      	beq.n	8001388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7fe ff9b 	bl	8000298 <HAL_GetTick>
 8001362:	0003      	movs	r3, r0
 8001364:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7fe ff96 	bl	8000298 <HAL_GetTick>
 800136c:	0002      	movs	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e2db      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b8d      	ldr	r3, [pc, #564]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	029b      	lsls	r3, r3, #10
 8001382:	4013      	ands	r3, r2
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xe8>
 8001386:	e015      	b.n	80013b4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7fe ff86 	bl	8000298 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001392:	f7fe ff81 	bl	8000298 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b64      	cmp	r3, #100	; 0x64
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e2c6      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a4:	4b82      	ldr	r3, [pc, #520]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	029b      	lsls	r3, r3, #10
 80013ac:	4013      	ands	r3, r2
 80013ae:	d1f0      	bne.n	8001392 <HAL_RCC_OscConfig+0x112>
 80013b0:	e000      	b.n	80013b4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2202      	movs	r2, #2
 80013ba:	4013      	ands	r3, r2
 80013bc:	d100      	bne.n	80013c0 <HAL_RCC_OscConfig+0x140>
 80013be:	e06c      	b.n	800149a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013c0:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	220c      	movs	r2, #12
 80013c6:	4013      	ands	r3, r2
 80013c8:	d00e      	beq.n	80013e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013ca:	4b79      	ldr	r3, [pc, #484]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	220c      	movs	r2, #12
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11f      	bne.n	8001416 <HAL_RCC_OscConfig+0x196>
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	23c0      	movs	r3, #192	; 0xc0
 80013dc:	025b      	lsls	r3, r3, #9
 80013de:	401a      	ands	r2, r3
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d116      	bne.n	8001416 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e8:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2202      	movs	r2, #2
 80013ee:	4013      	ands	r3, r2
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_OscConfig+0x17e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e299      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	22f8      	movs	r2, #248	; 0xf8
 8001404:	4393      	bics	r3, r2
 8001406:	0019      	movs	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	00da      	lsls	r2, r3, #3
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001414:	e041      	b.n	800149a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d024      	beq.n	8001468 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141e:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b63      	ldr	r3, [pc, #396]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001424:	2101      	movs	r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7fe ff35 	bl	8000298 <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7fe ff30 	bl	8000298 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e275      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d0f1      	beq.n	8001434 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	22f8      	movs	r2, #248	; 0xf8
 8001456:	4393      	bics	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	00da      	lsls	r2, r3, #3
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001462:	430a      	orrs	r2, r1
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e018      	b.n	800149a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001468:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 800146e:	2101      	movs	r1, #1
 8001470:	438a      	bics	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7fe ff10 	bl	8000298 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147e:	f7fe ff0b 	bl	8000298 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e250      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001490:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d1f1      	bne.n	800147e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2208      	movs	r2, #8
 80014a0:	4013      	ands	r3, r2
 80014a2:	d036      	beq.n	8001512 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d019      	beq.n	80014e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ac:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80014ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b0:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	430a      	orrs	r2, r1
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b8:	f7fe feee 	bl	8000298 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c2:	f7fe fee9 	bl	8000298 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e22e      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	2202      	movs	r2, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d0f1      	beq.n	80014c2 <HAL_RCC_OscConfig+0x242>
 80014de:	e018      	b.n	8001512 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80014e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e4:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	438a      	bics	r2, r1
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7fe fed4 	bl	8000298 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f6:	f7fe fecf 	bl	8000298 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e214      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	2202      	movs	r2, #2
 800150e:	4013      	ands	r3, r2
 8001510:	d1f1      	bne.n	80014f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2204      	movs	r2, #4
 8001518:	4013      	ands	r3, r2
 800151a:	d100      	bne.n	800151e <HAL_RCC_OscConfig+0x29e>
 800151c:	e0b6      	b.n	800168c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2317      	movs	r3, #23
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001528:	69da      	ldr	r2, [r3, #28]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	055b      	lsls	r3, r3, #21
 800152e:	4013      	ands	r3, r2
 8001530:	d111      	bne.n	8001556 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0549      	lsls	r1, r1, #21
 800153c:	430a      	orrs	r2, r1
 800153e:	61da      	str	r2, [r3, #28]
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 8001542:	69da      	ldr	r2, [r3, #28]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	055b      	lsls	r3, r3, #21
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800154e:	2317      	movs	r3, #23
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_OscConfig+0x33c>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4013      	ands	r3, r2
 8001560:	d11a      	bne.n	8001598 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x33c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_RCC_OscConfig+0x33c>)
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001570:	f7fe fe92 	bl	8000298 <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7fe fe8d 	bl	8000298 <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b64      	cmp	r3, #100	; 0x64
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1d2      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_OscConfig+0x33c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4013      	ands	r3, r2
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d10f      	bne.n	80015c0 <HAL_RCC_OscConfig+0x340>
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80015a2:	6a1a      	ldr	r2, [r3, #32]
 80015a4:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <HAL_RCC_OscConfig+0x330>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	621a      	str	r2, [r3, #32]
 80015ac:	e036      	b.n	800161c <HAL_RCC_OscConfig+0x39c>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	fffeffff 	.word	0xfffeffff
 80015b8:	fffbffff 	.word	0xfffbffff
 80015bc:	40007000 	.word	0x40007000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10c      	bne.n	80015e2 <HAL_RCC_OscConfig+0x362>
 80015c8:	4bca      	ldr	r3, [pc, #808]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	4bc9      	ldr	r3, [pc, #804]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80015ce:	2101      	movs	r1, #1
 80015d0:	438a      	bics	r2, r1
 80015d2:	621a      	str	r2, [r3, #32]
 80015d4:	4bc7      	ldr	r3, [pc, #796]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80015d6:	6a1a      	ldr	r2, [r3, #32]
 80015d8:	4bc6      	ldr	r3, [pc, #792]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80015da:	2104      	movs	r1, #4
 80015dc:	438a      	bics	r2, r1
 80015de:	621a      	str	r2, [r3, #32]
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x39c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x384>
 80015ea:	4bc2      	ldr	r3, [pc, #776]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80015ec:	6a1a      	ldr	r2, [r3, #32]
 80015ee:	4bc1      	ldr	r3, [pc, #772]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80015f0:	2104      	movs	r1, #4
 80015f2:	430a      	orrs	r2, r1
 80015f4:	621a      	str	r2, [r3, #32]
 80015f6:	4bbf      	ldr	r3, [pc, #764]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80015f8:	6a1a      	ldr	r2, [r3, #32]
 80015fa:	4bbe      	ldr	r3, [pc, #760]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	430a      	orrs	r2, r1
 8001600:	621a      	str	r2, [r3, #32]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x39c>
 8001604:	4bbb      	ldr	r3, [pc, #748]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001606:	6a1a      	ldr	r2, [r3, #32]
 8001608:	4bba      	ldr	r3, [pc, #744]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 800160a:	2101      	movs	r1, #1
 800160c:	438a      	bics	r2, r1
 800160e:	621a      	str	r2, [r3, #32]
 8001610:	4bb8      	ldr	r3, [pc, #736]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001612:	6a1a      	ldr	r2, [r3, #32]
 8001614:	4bb7      	ldr	r3, [pc, #732]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001616:	2104      	movs	r1, #4
 8001618:	438a      	bics	r2, r1
 800161a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d014      	beq.n	800164e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7fe fe38 	bl	8000298 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	e009      	b.n	8001642 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7fe fe33 	bl	8000298 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	4aaf      	ldr	r2, [pc, #700]	; (80018f8 <HAL_RCC_OscConfig+0x678>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e177      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	4bac      	ldr	r3, [pc, #688]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x3ae>
 800164c:	e013      	b.n	8001676 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7fe fe23 	bl	8000298 <HAL_GetTick>
 8001652:	0003      	movs	r3, r0
 8001654:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001656:	e009      	b.n	800166c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7fe fe1e 	bl	8000298 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4aa5      	ldr	r2, [pc, #660]	; (80018f8 <HAL_RCC_OscConfig+0x678>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e162      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	4ba1      	ldr	r3, [pc, #644]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	2202      	movs	r2, #2
 8001672:	4013      	ands	r3, r2
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001676:	2317      	movs	r3, #23
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001680:	4b9c      	ldr	r3, [pc, #624]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001682:	69da      	ldr	r2, [r3, #28]
 8001684:	4b9b      	ldr	r3, [pc, #620]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001686:	499d      	ldr	r1, [pc, #628]	; (80018fc <HAL_RCC_OscConfig+0x67c>)
 8001688:	400a      	ands	r2, r1
 800168a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2210      	movs	r2, #16
 8001692:	4013      	ands	r3, r2
 8001694:	d063      	beq.n	800175e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d12a      	bne.n	80016f4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800169e:	4b95      	ldr	r3, [pc, #596]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80016a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a2:	4b94      	ldr	r3, [pc, #592]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80016a4:	2104      	movs	r1, #4
 80016a6:	430a      	orrs	r2, r1
 80016a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016aa:	4b92      	ldr	r3, [pc, #584]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80016ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ae:	4b91      	ldr	r3, [pc, #580]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7fe fdef 	bl	8000298 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016c0:	f7fe fdea 	bl	8000298 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e12f      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016d2:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d0f1      	beq.n	80016c0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016dc:	4b85      	ldr	r3, [pc, #532]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80016de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e0:	22f8      	movs	r2, #248	; 0xf8
 80016e2:	4393      	bics	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	00da      	lsls	r2, r3, #3
 80016ec:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34
 80016f2:	e034      	b.n	800175e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	3305      	adds	r3, #5
 80016fa:	d111      	bne.n	8001720 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016fc:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80016fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001700:	4b7c      	ldr	r3, [pc, #496]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001702:	2104      	movs	r1, #4
 8001704:	438a      	bics	r2, r1
 8001706:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001708:	4b7a      	ldr	r3, [pc, #488]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	22f8      	movs	r2, #248	; 0xf8
 800170e:	4393      	bics	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	00da      	lsls	r2, r3, #3
 8001718:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 800171a:	430a      	orrs	r2, r1
 800171c:	635a      	str	r2, [r3, #52]	; 0x34
 800171e:	e01e      	b.n	800175e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001720:	4b74      	ldr	r3, [pc, #464]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001724:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001726:	2104      	movs	r1, #4
 8001728:	430a      	orrs	r2, r1
 800172a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800172c:	4b71      	ldr	r3, [pc, #452]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 800172e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001732:	2101      	movs	r1, #1
 8001734:	438a      	bics	r2, r1
 8001736:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7fe fdae 	bl	8000298 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001742:	f7fe fda9 	bl	8000298 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0ee      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001754:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d1f1      	bne.n	8001742 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2220      	movs	r2, #32
 8001764:	4013      	ands	r3, r2
 8001766:	d05c      	beq.n	8001822 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001768:	4b62      	ldr	r3, [pc, #392]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	220c      	movs	r2, #12
 800176e:	4013      	ands	r3, r2
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d00e      	beq.n	8001792 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	220c      	movs	r2, #12
 800177a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800177c:	2b08      	cmp	r3, #8
 800177e:	d114      	bne.n	80017aa <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001780:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	23c0      	movs	r3, #192	; 0xc0
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	401a      	ands	r2, r3
 800178a:	23c0      	movs	r3, #192	; 0xc0
 800178c:	025b      	lsls	r3, r3, #9
 800178e:	429a      	cmp	r2, r3
 8001790:	d10b      	bne.n	80017aa <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001792:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	025b      	lsls	r3, r3, #9
 800179a:	4013      	ands	r3, r2
 800179c:	d040      	beq.n	8001820 <HAL_RCC_OscConfig+0x5a0>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d03c      	beq.n	8001820 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0c3      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d01b      	beq.n	80017ea <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80017b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b6:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	0249      	lsls	r1, r1, #9
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7fe fd6a 	bl	8000298 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ca:	f7fe fd65 	bl	8000298 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0aa      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017dc:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80017de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	4013      	ands	r3, r2
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x54a>
 80017e8:	e01b      	b.n	8001822 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017ea:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80017ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80017f0:	4943      	ldr	r1, [pc, #268]	; (8001900 <HAL_RCC_OscConfig+0x680>)
 80017f2:	400a      	ands	r2, r1
 80017f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7fe fd4f 	bl	8000298 <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001800:	f7fe fd4a 	bl	8000298 <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e08f      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001812:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	025b      	lsls	r3, r3, #9
 800181a:	4013      	ands	r3, r2
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x580>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001820:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	2b00      	cmp	r3, #0
 8001828:	d100      	bne.n	800182c <HAL_RCC_OscConfig+0x5ac>
 800182a:	e081      	b.n	8001930 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	220c      	movs	r2, #12
 8001832:	4013      	ands	r3, r2
 8001834:	2b08      	cmp	r3, #8
 8001836:	d100      	bne.n	800183a <HAL_RCC_OscConfig+0x5ba>
 8001838:	e078      	b.n	800192c <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	2b02      	cmp	r3, #2
 8001840:	d14c      	bne.n	80018dc <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001848:	492e      	ldr	r1, [pc, #184]	; (8001904 <HAL_RCC_OscConfig+0x684>)
 800184a:	400a      	ands	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7fe fd23 	bl	8000298 <HAL_GetTick>
 8001852:	0003      	movs	r3, r0
 8001854:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001858:	f7fe fd1e 	bl	8000298 <HAL_GetTick>
 800185c:	0002      	movs	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e063      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	049b      	lsls	r3, r3, #18
 8001872:	4013      	ands	r3, r2
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	220f      	movs	r2, #15
 800187c:	4393      	bics	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 8001886:	430a      	orrs	r2, r1
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <HAL_RCC_OscConfig+0x688>)
 8001890:	4013      	ands	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	431a      	orrs	r2, r3
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80018a0:	430a      	orrs	r2, r1
 80018a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	0449      	lsls	r1, r1, #17
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7fe fcf1 	bl	8000298 <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018bc:	f7fe fcec 	bl	8000298 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e031      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	049b      	lsls	r3, r3, #18
 80018d6:	4013      	ands	r3, r2
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x63c>
 80018da:	e029      	b.n	8001930 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <HAL_RCC_OscConfig+0x674>)
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <HAL_RCC_OscConfig+0x684>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7fe fcd6 	bl	8000298 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x69e>
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	40021000 	.word	0x40021000
 80018f8:	00001388 	.word	0x00001388
 80018fc:	efffffff 	.word	0xefffffff
 8001900:	fffeffff 	.word	0xfffeffff
 8001904:	feffffff 	.word	0xfeffffff
 8001908:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7fe fcc4 	bl	8000298 <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e009      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <HAL_RCC_OscConfig+0x6bc>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	049b      	lsls	r3, r3, #18
 8001926:	4013      	ands	r3, r2
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x68c>
 800192a:	e001      	b.n	8001930 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b006      	add	sp, #24
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800194e:	4b7b      	ldr	r3, [pc, #492]	; (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d911      	bls.n	8001980 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195c:	4b77      	ldr	r3, [pc, #476]	; (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	4393      	bics	r3, r2
 8001964:	0019      	movs	r1, r3
 8001966:	4b75      	ldr	r3, [pc, #468]	; (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800196e:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	4013      	ands	r3, r2
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0d8      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d009      	beq.n	800199e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198a:	4b6d      	ldr	r3, [pc, #436]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	22f0      	movs	r2, #240	; 0xf0
 8001990:	4393      	bics	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 800199a:	430a      	orrs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	d100      	bne.n	80019aa <HAL_RCC_ClockConfig+0x6a>
 80019a8:	e089      	b.n	8001abe <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	d120      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0b7      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	049b      	lsls	r3, r3, #18
 80019d2:	4013      	ands	r3, r2
 80019d4:	d114      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0ab      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019e2:	4b57      	ldr	r3, [pc, #348]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 80019e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	025b      	lsls	r3, r3, #9
 80019ea:	4013      	ands	r3, r2
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e09f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e098      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a00:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2203      	movs	r2, #3
 8001a06:	4393      	bics	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7fe fc40 	bl	8000298 <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d111      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a24:	e009      	b.n	8001a3a <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a26:	f7fe fc37 	bl	8000298 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	4a44      	ldr	r2, [pc, #272]	; (8001b44 <HAL_RCC_ClockConfig+0x204>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e07b      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a3a:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	220c      	movs	r2, #12
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d1ef      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xe6>
 8001a46:	e03a      	b.n	8001abe <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d111      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a52:	f7fe fc21 	bl	8000298 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	4a39      	ldr	r2, [pc, #228]	; (8001b44 <HAL_RCC_ClockConfig+0x204>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e065      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a66:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d1ef      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x112>
 8001a72:	e024      	b.n	8001abe <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d11b      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7e:	f7fe fc0b 	bl	8000298 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4a2e      	ldr	r2, [pc, #184]	; (8001b44 <HAL_RCC_ClockConfig+0x204>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e04f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	220c      	movs	r2, #12
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d1ef      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x13e>
 8001a9e:	e00e      	b.n	8001abe <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7fe fbfa 	bl	8000298 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	4a26      	ldr	r2, [pc, #152]	; (8001b44 <HAL_RCC_ClockConfig+0x204>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e03e      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	220c      	movs	r2, #12
 8001aba:	4013      	ands	r3, r2
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d211      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4393      	bics	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e020      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2204      	movs	r2, #4
 8001af6:	4013      	ands	r3, r2
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <HAL_RCC_ClockConfig+0x208>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b0e:	f000 f821 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001b12:	0001      	movs	r1, r0
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_RCC_ClockConfig+0x20c>)
 8001b20:	5cd3      	ldrb	r3, [r2, r3]
 8001b22:	000a      	movs	r2, r1
 8001b24:	40da      	lsrs	r2, r3
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_RCC_ClockConfig+0x210>)
 8001b28:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7fe fb8c 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b004      	add	sp, #16
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	00001388 	.word	0x00001388
 8001b48:	fffff8ff 	.word	0xfffff8ff
 8001b4c:	08004218 	.word	0x08004218
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b08f      	sub	sp, #60	; 0x3c
 8001b58:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b5a:	2314      	movs	r3, #20
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	4a37      	ldr	r2, [pc, #220]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xe8>)
 8001b60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b62:	c313      	stmia	r3!, {r0, r1, r4}
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4a35      	ldr	r2, [pc, #212]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xec>)
 8001b6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b6e:	c313      	stmia	r3!, {r0, r1, r4}
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b88:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	220c      	movs	r2, #12
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d006      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x52>
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d043      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0xd0>
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d144      	bne.n	8001c2a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba0:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ba4:	e044      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	0c9b      	lsrs	r3, r3, #18
 8001baa:	220f      	movs	r2, #15
 8001bac:	4013      	ands	r3, r2
 8001bae:	2214      	movs	r2, #20
 8001bb0:	18ba      	adds	r2, r7, r2
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	220f      	movs	r2, #15
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	1d3a      	adds	r2, r7, #4
 8001bc0:	5cd3      	ldrb	r3, [r2, r3]
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc6:	23c0      	movs	r3, #192	; 0xc0
 8001bc8:	025b      	lsls	r3, r3, #9
 8001bca:	401a      	ands	r2, r3
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	025b      	lsls	r3, r3, #9
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d109      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bd6:	481c      	ldr	r0, [pc, #112]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bd8:	f7fe fa96 	bl	8000108 <__udivsi3>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	001a      	movs	r2, r3
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	4353      	muls	r3, r2
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
 8001be6:	e01a      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bea:	23c0      	movs	r3, #192	; 0xc0
 8001bec:	025b      	lsls	r3, r3, #9
 8001bee:	401a      	ands	r2, r3
 8001bf0:	23c0      	movs	r3, #192	; 0xc0
 8001bf2:	025b      	lsls	r3, r3, #9
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d109      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bfa:	4814      	ldr	r0, [pc, #80]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfc:	f7fe fa84 	bl	8000108 <__udivsi3>
 8001c00:	0003      	movs	r3, r0
 8001c02:	001a      	movs	r2, r3
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	4353      	muls	r3, r2
 8001c08:	637b      	str	r3, [r7, #52]	; 0x34
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c10:	f7fe fa7a 	bl	8000108 <__udivsi3>
 8001c14:	0003      	movs	r3, r0
 8001c16:	001a      	movs	r2, r3
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	4353      	muls	r3, r2
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c22:	e005      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c28:	e002      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c2e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b00f      	add	sp, #60	; 0x3c
 8001c38:	bd90      	pop	{r4, r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	080040e8 	.word	0x080040e8
 8001c40:	080040f8 	.word	0x080040f8
 8001c44:	40021000 	.word	0x40021000
 8001c48:	007a1200 	.word	0x007a1200
 8001c4c:	02dc6c00 	.word	0x02dc6c00

08001c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c68:	f7ff fff2 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c6c:	0001      	movs	r1, r0
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	2207      	movs	r2, #7
 8001c76:	4013      	ands	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	40d9      	lsrs	r1, r3
 8001c7e:	000b      	movs	r3, r1
}    
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08004228 	.word	0x08004228

08001c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	025b      	lsls	r3, r3, #9
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d100      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001cac:	e08f      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001cae:	2317      	movs	r3, #23
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	055b      	lsls	r3, r3, #21
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d111      	bne.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b6c      	ldr	r3, [pc, #432]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	4b6b      	ldr	r3, [pc, #428]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	0549      	lsls	r1, r1, #21
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	61da      	str	r2, [r3, #28]
 8001cd0:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	055b      	lsls	r3, r3, #21
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cde:	2317      	movs	r3, #23
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d11a      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf2:	4b61      	ldr	r3, [pc, #388]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b60      	ldr	r3, [pc, #384]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	0049      	lsls	r1, r1, #1
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d00:	f7fe faca 	bl	8000298 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	e008      	b.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0a:	f7fe fac5 	bl	8000298 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	; 0x64
 8001d16:	d901      	bls.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0a6      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b56      	ldr	r3, [pc, #344]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4013      	ands	r3, r2
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d28:	4b52      	ldr	r3, [pc, #328]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d2a:	6a1a      	ldr	r2, [r3, #32]
 8001d2c:	23c0      	movs	r3, #192	; 0xc0
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d034      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	23c0      	movs	r3, #192	; 0xc0
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d02c      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d4a:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a4b      	ldr	r2, [pc, #300]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d54:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	0249      	lsls	r1, r1, #9
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d62:	4b44      	ldr	r3, [pc, #272]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d64:	6a1a      	ldr	r2, [r3, #32]
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d68:	4945      	ldr	r1, [pc, #276]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7fe fa8c 	bl	8000298 <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	e009      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d86:	f7fe fa87 	bl	8000298 <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	4a3c      	ldr	r2, [pc, #240]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e067      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9a:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001da4:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a34      	ldr	r2, [pc, #208]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db8:	2317      	movs	r3, #23
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d105      	bne.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dc4:	69da      	ldr	r2, [r3, #28]
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dc8:	492f      	ldr	r1, [pc, #188]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dca:	400a      	ands	r2, r1
 8001dcc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d009      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dd8:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	2203      	movs	r2, #3
 8001dde:	4393      	bics	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d009      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	4013      	ands	r3, r2
 8001e12:	d009      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	2210      	movs	r2, #16
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e24:	430a      	orrs	r2, r1
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	029b      	lsls	r3, r3, #10
 8001e30:	4013      	ands	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	4393      	bics	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4013      	ands	r3, r2
 8001e52:	d009      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	2240      	movs	r2, #64	; 0x40
 8001e5a:	4393      	bics	r3, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e64:	430a      	orrs	r2, r1
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b006      	add	sp, #24
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	fffffcff 	.word	0xfffffcff
 8001e80:	fffeffff 	.word	0xfffeffff
 8001e84:	00001388 	.word	0x00001388
 8001e88:	efffffff 	.word	0xefffffff
 8001e8c:	fffcffff 	.word	0xfffcffff

08001e90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e047      	b.n	8001f32 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2269      	movs	r2, #105	; 0x69
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d107      	bne.n	8001ebe <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2268      	movs	r2, #104	; 0x68
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f001 f895 	bl	8002fe8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2269      	movs	r2, #105	; 0x69
 8001ec2:	2124      	movs	r1, #36	; 0x24
 8001ec4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	438a      	bics	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f000 f8d5 	bl	8002088 <UART_SetConfig>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e024      	b.n	8001f32 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 fa84 	bl	8002400 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	490e      	ldr	r1, [pc, #56]	; (8001f3c <HAL_UART_Init+0xac>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	212a      	movs	r1, #42	; 0x2a
 8001f14:	438a      	bics	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2101      	movs	r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 fb1c 	bl	8002568 <UART_CheckIdleState>
 8001f30:	0003      	movs	r3, r0
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b002      	add	sp, #8
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	ffffb7ff 	.word	0xffffb7ff

08001f40 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	1dbb      	adds	r3, r7, #6
 8001f4e:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2269      	movs	r2, #105	; 0x69
 8001f58:	5c9b      	ldrb	r3, [r3, r2]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d000      	beq.n	8001f62 <HAL_UART_Transmit+0x22>
 8001f60:	e08c      	b.n	800207c <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_UART_Transmit+0x30>
 8001f68:	1dbb      	adds	r3, r7, #6
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e084      	b.n	800207e <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	015b      	lsls	r3, r3, #5
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d109      	bne.n	8001f94 <HAL_UART_Transmit+0x54>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e074      	b.n	800207e <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2268      	movs	r2, #104	; 0x68
 8001f98:	5c9b      	ldrb	r3, [r3, r2]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_UART_Transmit+0x62>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e06d      	b.n	800207e <HAL_UART_Transmit+0x13e>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2268      	movs	r2, #104	; 0x68
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2269      	movs	r2, #105	; 0x69
 8001fb4:	2121      	movs	r1, #33	; 0x21
 8001fb6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001fb8:	f7fe f96e 	bl	8000298 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1dba      	adds	r2, r7, #6
 8001fc4:	2150      	movs	r1, #80	; 0x50
 8001fc6:	8812      	ldrh	r2, [r2, #0]
 8001fc8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1dba      	adds	r2, r7, #6
 8001fce:	2152      	movs	r1, #82	; 0x52
 8001fd0:	8812      	ldrh	r2, [r2, #0]
 8001fd2:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001fd4:	e035      	b.n	8002042 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2252      	movs	r2, #82	; 0x52
 8001fda:	5a9b      	ldrh	r3, [r3, r2]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b299      	uxth	r1, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2252      	movs	r2, #82	; 0x52
 8001fe6:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	f000 fb0f 	bl	8002618 <UART_WaitOnFlagUntilTimeout>
 8001ffa:	1e03      	subs	r3, r0, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e03d      	b.n	800207e <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	015b      	lsls	r3, r3, #5
 800200a:	429a      	cmp	r2, r3
 800200c:	d111      	bne.n	8002032 <HAL_UART_Transmit+0xf2>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	881a      	ldrh	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	05d2      	lsls	r2, r2, #23
 8002024:	0dd2      	lsrs	r2, r2, #23
 8002026:	b292      	uxth	r2, r2
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3302      	adds	r3, #2
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	e007      	b.n	8002042 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	60ba      	str	r2, [r7, #8]
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b292      	uxth	r2, r2
 8002040:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2252      	movs	r2, #82	; 0x52
 8002046:	5a9b      	ldrh	r3, [r3, r2]
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1c3      	bne.n	8001fd6 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	0013      	movs	r3, r2
 8002058:	2200      	movs	r2, #0
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	f000 fadc 	bl	8002618 <UART_WaitOnFlagUntilTimeout>
 8002060:	1e03      	subs	r3, r0, #0
 8002062:	d001      	beq.n	8002068 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e00a      	b.n	800207e <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2269      	movs	r2, #105	; 0x69
 800206c:	2120      	movs	r1, #32
 800206e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2268      	movs	r2, #104	; 0x68
 8002074:	2100      	movs	r1, #0
 8002076:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b006      	add	sp, #24
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002094:	2317      	movs	r3, #23
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2210      	movs	r2, #16
 800209a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 800209c:	230a      	movs	r3, #10
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	2200      	movs	r2, #0
 80020a2:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80020a4:	2314      	movs	r3, #20
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80020ac:	2313      	movs	r3, #19
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4ac1      	ldr	r2, [pc, #772]	; (80023d8 <UART_SetConfig+0x350>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4abc      	ldr	r2, [pc, #752]	; (80023dc <UART_SetConfig+0x354>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4313      	orrs	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4ab4      	ldr	r2, [pc, #720]	; (80023e0 <UART_SetConfig+0x358>)
 800210e:	4013      	ands	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	430a      	orrs	r2, r1
 800211a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4ab0      	ldr	r2, [pc, #704]	; (80023e4 <UART_SetConfig+0x35c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d125      	bne.n	8002172 <UART_SetConfig+0xea>
 8002126:	4bb0      	ldr	r3, [pc, #704]	; (80023e8 <UART_SetConfig+0x360>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	2203      	movs	r2, #3
 800212c:	4013      	ands	r3, r2
 800212e:	2b01      	cmp	r3, #1
 8002130:	d00f      	beq.n	8002152 <UART_SetConfig+0xca>
 8002132:	d304      	bcc.n	800213e <UART_SetConfig+0xb6>
 8002134:	2b02      	cmp	r3, #2
 8002136:	d011      	beq.n	800215c <UART_SetConfig+0xd4>
 8002138:	2b03      	cmp	r3, #3
 800213a:	d005      	beq.n	8002148 <UART_SetConfig+0xc0>
 800213c:	e013      	b.n	8002166 <UART_SetConfig+0xde>
 800213e:	2317      	movs	r3, #23
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e064      	b.n	8002212 <UART_SetConfig+0x18a>
 8002148:	2317      	movs	r3, #23
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2202      	movs	r2, #2
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e05f      	b.n	8002212 <UART_SetConfig+0x18a>
 8002152:	2317      	movs	r3, #23
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2204      	movs	r2, #4
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	e05a      	b.n	8002212 <UART_SetConfig+0x18a>
 800215c:	2317      	movs	r3, #23
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	2208      	movs	r2, #8
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e055      	b.n	8002212 <UART_SetConfig+0x18a>
 8002166:	2317      	movs	r3, #23
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	2210      	movs	r2, #16
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	e04f      	b.n	8002212 <UART_SetConfig+0x18a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a9d      	ldr	r2, [pc, #628]	; (80023ec <UART_SetConfig+0x364>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d132      	bne.n	80021e2 <UART_SetConfig+0x15a>
 800217c:	4b9a      	ldr	r3, [pc, #616]	; (80023e8 <UART_SetConfig+0x360>)
 800217e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002180:	23c0      	movs	r3, #192	; 0xc0
 8002182:	029b      	lsls	r3, r3, #10
 8002184:	4013      	ands	r3, r2
 8002186:	2280      	movs	r2, #128	; 0x80
 8002188:	0252      	lsls	r2, r2, #9
 800218a:	4293      	cmp	r3, r2
 800218c:	d019      	beq.n	80021c2 <UART_SetConfig+0x13a>
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	0252      	lsls	r2, r2, #9
 8002192:	4293      	cmp	r3, r2
 8002194:	d802      	bhi.n	800219c <UART_SetConfig+0x114>
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <UART_SetConfig+0x126>
 800219a:	e01c      	b.n	80021d6 <UART_SetConfig+0x14e>
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	0292      	lsls	r2, r2, #10
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <UART_SetConfig+0x144>
 80021a4:	22c0      	movs	r2, #192	; 0xc0
 80021a6:	0292      	lsls	r2, r2, #10
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d005      	beq.n	80021b8 <UART_SetConfig+0x130>
 80021ac:	e013      	b.n	80021d6 <UART_SetConfig+0x14e>
 80021ae:	2317      	movs	r3, #23
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	e02c      	b.n	8002212 <UART_SetConfig+0x18a>
 80021b8:	2317      	movs	r3, #23
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	2202      	movs	r2, #2
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e027      	b.n	8002212 <UART_SetConfig+0x18a>
 80021c2:	2317      	movs	r3, #23
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	2204      	movs	r2, #4
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e022      	b.n	8002212 <UART_SetConfig+0x18a>
 80021cc:	2317      	movs	r3, #23
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2208      	movs	r2, #8
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e01d      	b.n	8002212 <UART_SetConfig+0x18a>
 80021d6:	2317      	movs	r3, #23
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2210      	movs	r2, #16
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	e017      	b.n	8002212 <UART_SetConfig+0x18a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a82      	ldr	r2, [pc, #520]	; (80023f0 <UART_SetConfig+0x368>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d104      	bne.n	80021f6 <UART_SetConfig+0x16e>
 80021ec:	2317      	movs	r3, #23
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
 80021f4:	e00d      	b.n	8002212 <UART_SetConfig+0x18a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7e      	ldr	r2, [pc, #504]	; (80023f4 <UART_SetConfig+0x36c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d104      	bne.n	800220a <UART_SetConfig+0x182>
 8002200:	2317      	movs	r3, #23
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e003      	b.n	8002212 <UART_SetConfig+0x18a>
 800220a:	2317      	movs	r3, #23
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2210      	movs	r2, #16
 8002210:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69da      	ldr	r2, [r3, #28]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	429a      	cmp	r2, r3
 800221c:	d000      	beq.n	8002220 <UART_SetConfig+0x198>
 800221e:	e077      	b.n	8002310 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8002220:	2317      	movs	r3, #23
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d01c      	beq.n	8002264 <UART_SetConfig+0x1dc>
 800222a:	dc02      	bgt.n	8002232 <UART_SetConfig+0x1aa>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <UART_SetConfig+0x1b4>
 8002230:	e04f      	b.n	80022d2 <UART_SetConfig+0x24a>
 8002232:	2b04      	cmp	r3, #4
 8002234:	d027      	beq.n	8002286 <UART_SetConfig+0x1fe>
 8002236:	2b08      	cmp	r3, #8
 8002238:	d039      	beq.n	80022ae <UART_SetConfig+0x226>
 800223a:	e04a      	b.n	80022d2 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800223c:	f7ff fd12 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8002240:	0003      	movs	r3, r0
 8002242:	005a      	lsls	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	18d2      	adds	r2, r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	0019      	movs	r1, r3
 8002252:	0010      	movs	r0, r2
 8002254:	f7fd ff58 	bl	8000108 <__udivsi3>
 8002258:	0003      	movs	r3, r0
 800225a:	001a      	movs	r2, r3
 800225c:	2314      	movs	r3, #20
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	801a      	strh	r2, [r3, #0]
        break;
 8002262:	e03b      	b.n	80022dc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	4a63      	ldr	r2, [pc, #396]	; (80023f8 <UART_SetConfig+0x370>)
 800226c:	189a      	adds	r2, r3, r2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0019      	movs	r1, r3
 8002274:	0010      	movs	r0, r2
 8002276:	f7fd ff47 	bl	8000108 <__udivsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	001a      	movs	r2, r3
 800227e:	2314      	movs	r3, #20
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	801a      	strh	r2, [r3, #0]
        break;
 8002284:	e02a      	b.n	80022dc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002286:	f7ff fc65 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 800228a:	0003      	movs	r3, r0
 800228c:	005a      	lsls	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	18d2      	adds	r2, r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	0019      	movs	r1, r3
 800229c:	0010      	movs	r0, r2
 800229e:	f7fd ff33 	bl	8000108 <__udivsi3>
 80022a2:	0003      	movs	r3, r0
 80022a4:	001a      	movs	r2, r3
 80022a6:	2314      	movs	r3, #20
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	801a      	strh	r2, [r3, #0]
        break;
 80022ac:	e016      	b.n	80022dc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	0252      	lsls	r2, r2, #9
 80022b8:	189a      	adds	r2, r3, r2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0019      	movs	r1, r3
 80022c0:	0010      	movs	r0, r2
 80022c2:	f7fd ff21 	bl	8000108 <__udivsi3>
 80022c6:	0003      	movs	r3, r0
 80022c8:	001a      	movs	r2, r3
 80022ca:	2314      	movs	r3, #20
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	801a      	strh	r2, [r3, #0]
        break;
 80022d0:	e004      	b.n	80022dc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80022d2:	2313      	movs	r3, #19
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
        break;
 80022da:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80022dc:	200a      	movs	r0, #10
 80022de:	183b      	adds	r3, r7, r0
 80022e0:	2414      	movs	r4, #20
 80022e2:	193a      	adds	r2, r7, r4
 80022e4:	8812      	ldrh	r2, [r2, #0]
 80022e6:	210f      	movs	r1, #15
 80022e8:	438a      	bics	r2, r1
 80022ea:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022ec:	193b      	adds	r3, r7, r4
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	105b      	asrs	r3, r3, #1
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2207      	movs	r2, #7
 80022f6:	4013      	ands	r3, r2
 80022f8:	b299      	uxth	r1, r3
 80022fa:	183b      	adds	r3, r7, r0
 80022fc:	183a      	adds	r2, r7, r0
 80022fe:	8812      	ldrh	r2, [r2, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	183a      	adds	r2, r7, r0
 800230a:	8812      	ldrh	r2, [r2, #0]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	e05b      	b.n	80023c8 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8002310:	2317      	movs	r3, #23
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d01b      	beq.n	8002352 <UART_SetConfig+0x2ca>
 800231a:	dc02      	bgt.n	8002322 <UART_SetConfig+0x29a>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <UART_SetConfig+0x2a4>
 8002320:	e04d      	b.n	80023be <UART_SetConfig+0x336>
 8002322:	2b04      	cmp	r3, #4
 8002324:	d026      	beq.n	8002374 <UART_SetConfig+0x2ec>
 8002326:	2b08      	cmp	r3, #8
 8002328:	d037      	beq.n	800239a <UART_SetConfig+0x312>
 800232a:	e048      	b.n	80023be <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800232c:	f7ff fc9a 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8002330:	0002      	movs	r2, r0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	18d2      	adds	r2, r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0019      	movs	r1, r3
 8002340:	0010      	movs	r0, r2
 8002342:	f7fd fee1 	bl	8000108 <__udivsi3>
 8002346:	0003      	movs	r3, r0
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60da      	str	r2, [r3, #12]
        break;
 8002350:	e03a      	b.n	80023c8 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	4a28      	ldr	r2, [pc, #160]	; (80023fc <UART_SetConfig+0x374>)
 800235a:	189a      	adds	r2, r3, r2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	0019      	movs	r1, r3
 8002362:	0010      	movs	r0, r2
 8002364:	f7fd fed0 	bl	8000108 <__udivsi3>
 8002368:	0003      	movs	r3, r0
 800236a:	b29a      	uxth	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60da      	str	r2, [r3, #12]
        break;
 8002372:	e029      	b.n	80023c8 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002374:	f7ff fbee 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8002378:	0002      	movs	r2, r0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	18d2      	adds	r2, r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	0019      	movs	r1, r3
 8002388:	0010      	movs	r0, r2
 800238a:	f7fd febd 	bl	8000108 <__udivsi3>
 800238e:	0003      	movs	r3, r0
 8002390:	b29a      	uxth	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60da      	str	r2, [r3, #12]
        break;
 8002398:	e016      	b.n	80023c8 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	0212      	lsls	r2, r2, #8
 80023a4:	189a      	adds	r2, r3, r2
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0019      	movs	r1, r3
 80023ac:	0010      	movs	r0, r2
 80023ae:	f7fd feab 	bl	8000108 <__udivsi3>
 80023b2:	0003      	movs	r3, r0
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60da      	str	r2, [r3, #12]
        break;
 80023bc:	e004      	b.n	80023c8 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80023be:	2313      	movs	r3, #19
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
        break;
 80023c6:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 80023c8:	2313      	movs	r3, #19
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	781b      	ldrb	r3, [r3, #0]

}
 80023ce:	0018      	movs	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b007      	add	sp, #28
 80023d4:	bd90      	pop	{r4, r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	efff69f3 	.word	0xefff69f3
 80023dc:	ffffcfff 	.word	0xffffcfff
 80023e0:	fffff4ff 	.word	0xfffff4ff
 80023e4:	40013800 	.word	0x40013800
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40004400 	.word	0x40004400
 80023f0:	40004800 	.word	0x40004800
 80023f4:	40004c00 	.word	0x40004c00
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	007a1200 	.word	0x007a1200

08002400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	2201      	movs	r2, #1
 800240e:	4013      	ands	r3, r2
 8002410:	d00b      	beq.n	800242a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a4a      	ldr	r2, [pc, #296]	; (8002544 <UART_AdvFeatureConfig+0x144>)
 800241a:	4013      	ands	r3, r2
 800241c:	0019      	movs	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	2202      	movs	r2, #2
 8002430:	4013      	ands	r3, r2
 8002432:	d00b      	beq.n	800244c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a43      	ldr	r2, [pc, #268]	; (8002548 <UART_AdvFeatureConfig+0x148>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	2204      	movs	r2, #4
 8002452:	4013      	ands	r3, r2
 8002454:	d00b      	beq.n	800246e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <UART_AdvFeatureConfig+0x14c>)
 800245e:	4013      	ands	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	2208      	movs	r2, #8
 8002474:	4013      	ands	r3, r2
 8002476:	d00b      	beq.n	8002490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4a34      	ldr	r2, [pc, #208]	; (8002550 <UART_AdvFeatureConfig+0x150>)
 8002480:	4013      	ands	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	2210      	movs	r2, #16
 8002496:	4013      	ands	r3, r2
 8002498:	d00b      	beq.n	80024b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <UART_AdvFeatureConfig+0x154>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2220      	movs	r2, #32
 80024b8:	4013      	ands	r3, r2
 80024ba:	d00b      	beq.n	80024d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	4a25      	ldr	r2, [pc, #148]	; (8002558 <UART_AdvFeatureConfig+0x158>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2240      	movs	r2, #64	; 0x40
 80024da:	4013      	ands	r3, r2
 80024dc:	d01d      	beq.n	800251a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a1d      	ldr	r2, [pc, #116]	; (800255c <UART_AdvFeatureConfig+0x15c>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	035b      	lsls	r3, r3, #13
 80024fe:	429a      	cmp	r2, r3
 8002500:	d10b      	bne.n	800251a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a15      	ldr	r2, [pc, #84]	; (8002560 <UART_AdvFeatureConfig+0x160>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	4013      	ands	r3, r2
 8002522:	d00b      	beq.n	800253c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <UART_AdvFeatureConfig+0x164>)
 800252c:	4013      	ands	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	605a      	str	r2, [r3, #4]
  }
}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b002      	add	sp, #8
 8002542:	bd80      	pop	{r7, pc}
 8002544:	fffdffff 	.word	0xfffdffff
 8002548:	fffeffff 	.word	0xfffeffff
 800254c:	fffbffff 	.word	0xfffbffff
 8002550:	ffff7fff 	.word	0xffff7fff
 8002554:	ffffefff 	.word	0xffffefff
 8002558:	ffffdfff 	.word	0xffffdfff
 800255c:	ffefffff 	.word	0xffefffff
 8002560:	ff9fffff 	.word	0xff9fffff
 8002564:	fff7ffff 	.word	0xfff7ffff

08002568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af02      	add	r7, sp, #8
 800256e:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800257a:	f7fd fe8d 	bl	8000298 <HAL_GetTick>
 800257e:	0003      	movs	r3, r0
 8002580:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a21      	ldr	r2, [pc, #132]	; (800260c <UART_CheckIdleState+0xa4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d004      	beq.n	8002596 <UART_CheckIdleState+0x2e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <UART_CheckIdleState+0xa8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d129      	bne.n	80025ea <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2208      	movs	r2, #8
 800259e:	4013      	ands	r3, r2
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d10d      	bne.n	80025c0 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	0399      	lsls	r1, r3, #14
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <UART_CheckIdleState+0xac>)
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	0013      	movs	r3, r2
 80025b2:	2200      	movs	r2, #0
 80025b4:	f000 f830 	bl	8002618 <UART_WaitOnFlagUntilTimeout>
 80025b8:	1e03      	subs	r3, r0, #0
 80025ba:	d001      	beq.n	80025c0 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e021      	b.n	8002604 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2204      	movs	r2, #4
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d10d      	bne.n	80025ea <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	03d9      	lsls	r1, r3, #15
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <UART_CheckIdleState+0xac>)
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	0013      	movs	r3, r2
 80025dc:	2200      	movs	r2, #0
 80025de:	f000 f81b 	bl	8002618 <UART_WaitOnFlagUntilTimeout>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d001      	beq.n	80025ea <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e00c      	b.n	8002604 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2269      	movs	r2, #105	; 0x69
 80025ee:	2120      	movs	r1, #32
 80025f0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	226a      	movs	r2, #106	; 0x6a
 80025f6:	2120      	movs	r1, #32
 80025f8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2268      	movs	r2, #104	; 0x68
 80025fe:	2100      	movs	r1, #0
 8002600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b004      	add	sp, #16
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40013800 	.word	0x40013800
 8002610:	40004400 	.word	0x40004400
 8002614:	01ffffff 	.word	0x01ffffff

08002618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	1dfb      	adds	r3, r7, #7
 8002626:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002628:	e02b      	b.n	8002682 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	3301      	adds	r3, #1
 800262e:	d028      	beq.n	8002682 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002636:	f7fd fe2f 	bl	8000298 <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	429a      	cmp	r2, r3
 8002644:	d21d      	bcs.n	8002682 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4916      	ldr	r1, [pc, #88]	; (80026ac <UART_WaitOnFlagUntilTimeout+0x94>)
 8002652:	400a      	ands	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	438a      	bics	r2, r1
 8002664:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2269      	movs	r2, #105	; 0x69
 800266a:	2120      	movs	r1, #32
 800266c:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	226a      	movs	r2, #106	; 0x6a
 8002672:	2120      	movs	r1, #32
 8002674:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2268      	movs	r2, #104	; 0x68
 800267a:	2100      	movs	r1, #0
 800267c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e00f      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	4013      	ands	r3, r2
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	425a      	negs	r2, r3
 8002692:	4153      	adcs	r3, r2
 8002694:	b2db      	uxtb	r3, r3
 8002696:	001a      	movs	r2, r3
 8002698:	1dfb      	adds	r3, r7, #7
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d0c4      	beq.n	800262a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b004      	add	sp, #16
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	fffffe5f 	.word	0xfffffe5f

080026b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b6:	240c      	movs	r4, #12
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	0018      	movs	r0, r3
 80026bc:	2314      	movs	r3, #20
 80026be:	001a      	movs	r2, r3
 80026c0:	2100      	movs	r1, #0
 80026c2:	f000 fd31 	bl	8003128 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c6:	4b37      	ldr	r3, [pc, #220]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	0309      	lsls	r1, r1, #12
 80026d0:	430a      	orrs	r2, r1
 80026d2:	615a      	str	r2, [r3, #20]
 80026d4:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	031b      	lsls	r3, r3, #12
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0289      	lsls	r1, r1, #10
 80026ec:	430a      	orrs	r2, r1
 80026ee:	615a      	str	r2, [r3, #20]
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <MX_GPIO_Init+0xf4>)
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	029b      	lsls	r3, r3, #10
 80026f8:	4013      	ands	r3, r2
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	4b29      	ldr	r3, [pc, #164]	; (80027a4 <MX_GPIO_Init+0xf4>)
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <MX_GPIO_Init+0xf4>)
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	02c9      	lsls	r1, r1, #11
 8002708:	430a      	orrs	r2, r1
 800270a:	615a      	str	r2, [r3, #20]
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <MX_GPIO_Init+0xf4>)
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	02db      	lsls	r3, r3, #11
 8002714:	4013      	ands	r3, r2
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800271a:	2390      	movs	r3, #144	; 0x90
 800271c:	05db      	lsls	r3, r3, #23
 800271e:	2200      	movs	r2, #0
 8002720:	2120      	movs	r1, #32
 8002722:	0018      	movs	r0, r3
 8002724:	f7fe f853 	bl	80007ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002728:	193b      	adds	r3, r7, r4
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	0192      	lsls	r2, r2, #6
 800272e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002730:	193b      	adds	r3, r7, r4
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	193b      	adds	r3, r7, r4
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800273c:	193b      	adds	r3, r7, r4
 800273e:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <MX_GPIO_Init+0xf8>)
 8002740:	0019      	movs	r1, r3
 8002742:	0010      	movs	r0, r2
 8002744:	f7fd feaa 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002748:	193b      	adds	r3, r7, r4
 800274a:	2220      	movs	r2, #32
 800274c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274e:	193b      	adds	r3, r7, r4
 8002750:	2201      	movs	r2, #1
 8002752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	193b      	adds	r3, r7, r4
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	193b      	adds	r3, r7, r4
 800275c:	2200      	movs	r2, #0
 800275e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002760:	193a      	adds	r2, r7, r4
 8002762:	2390      	movs	r3, #144	; 0x90
 8002764:	05db      	lsls	r3, r3, #23
 8002766:	0011      	movs	r1, r2
 8002768:	0018      	movs	r0, r3
 800276a:	f7fd fe97 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ATTACH_Pin|USB_ALT_Pin;
 800276e:	193b      	adds	r3, r7, r4
 8002770:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <MX_GPIO_Init+0xfc>)
 8002772:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002774:	193b      	adds	r3, r7, r4
 8002776:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <MX_GPIO_Init+0x100>)
 8002778:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800277a:	193b      	adds	r3, r7, r4
 800277c:	2201      	movs	r2, #1
 800277e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002780:	193b      	adds	r3, r7, r4
 8002782:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <MX_GPIO_Init+0x104>)
 8002784:	0019      	movs	r1, r3
 8002786:	0010      	movs	r0, r2
 8002788:	f7fd fe88 	bl	800049c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	2101      	movs	r1, #1
 8002790:	2005      	movs	r0, #5
 8002792:	f7fd fe51 	bl	8000438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002796:	2005      	movs	r0, #5
 8002798:	f7fd fe63 	bl	8000462 <HAL_NVIC_EnableIRQ>

}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	b009      	add	sp, #36	; 0x24
 80027a2:	bd90      	pop	{r4, r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	48000800 	.word	0x48000800
 80027ac:	00008002 	.word	0x00008002
 80027b0:	10210000 	.word	0x10210000
 80027b4:	48000400 	.word	0x48000400

080027b8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <MX_I2C2_Init+0x74>)
 80027be:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <MX_I2C2_Init+0x78>)
 80027c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00506682;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <MX_I2C2_Init+0x74>)
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <MX_I2C2_Init+0x7c>)
 80027c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <MX_I2C2_Init+0x74>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027ce:	4b17      	ldr	r3, [pc, #92]	; (800282c <MX_I2C2_Init+0x74>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027d4:	4b15      	ldr	r3, [pc, #84]	; (800282c <MX_I2C2_Init+0x74>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <MX_I2C2_Init+0x74>)
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <MX_I2C2_Init+0x74>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <MX_I2C2_Init+0x74>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <MX_I2C2_Init+0x74>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <MX_I2C2_Init+0x74>)
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7fe f823 	bl	8000840 <HAL_I2C_Init>
 80027fa:	1e03      	subs	r3, r0, #0
 80027fc:	d001      	beq.n	8002802 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80027fe:	f000 fabf 	bl	8002d80 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <MX_I2C2_Init+0x74>)
 8002804:	2100      	movs	r1, #0
 8002806:	0018      	movs	r0, r3
 8002808:	f7fe fca0 	bl	800114c <HAL_I2CEx_ConfigAnalogFilter>
 800280c:	1e03      	subs	r3, r0, #0
 800280e:	d001      	beq.n	8002814 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002810:	f000 fab6 	bl	8002d80 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <MX_I2C2_Init+0x74>)
 8002816:	2100      	movs	r1, #0
 8002818:	0018      	movs	r0, r3
 800281a:	f7fe fce3 	bl	80011e4 <HAL_I2CEx_ConfigDigitalFilter>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d001      	beq.n	8002826 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002822:	f000 faad 	bl	8002d80 <Error_Handler>
  }

}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000098 	.word	0x20000098
 8002830:	40005800 	.word	0x40005800
 8002834:	00506682 	.word	0x00506682

08002838 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	2314      	movs	r3, #20
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	0018      	movs	r0, r3
 8002846:	2314      	movs	r3, #20
 8002848:	001a      	movs	r2, r3
 800284a:	2100      	movs	r1, #0
 800284c:	f000 fc6c 	bl	8003128 <memset>
  if(i2cHandle->Instance==I2C2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_I2C_MspInit+0x90>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d132      	bne.n	80028c0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_I2C_MspInit+0x94>)
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_I2C_MspInit+0x94>)
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	02c9      	lsls	r1, r1, #11
 8002864:	430a      	orrs	r2, r1
 8002866:	615a      	str	r2, [r3, #20]
 8002868:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_I2C_MspInit+0x94>)
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	02db      	lsls	r3, r3, #11
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002876:	2114      	movs	r1, #20
 8002878:	187b      	adds	r3, r7, r1
 800287a:	22c0      	movs	r2, #192	; 0xc0
 800287c:	01d2      	lsls	r2, r2, #7
 800287e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002880:	187b      	adds	r3, r7, r1
 8002882:	2212      	movs	r2, #18
 8002884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002886:	187b      	adds	r3, r7, r1
 8002888:	2201      	movs	r2, #1
 800288a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800288c:	187b      	adds	r3, r7, r1
 800288e:	2203      	movs	r2, #3
 8002890:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8002892:	187b      	adds	r3, r7, r1
 8002894:	2205      	movs	r2, #5
 8002896:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	187b      	adds	r3, r7, r1
 800289a:	4a0d      	ldr	r2, [pc, #52]	; (80028d0 <HAL_I2C_MspInit+0x98>)
 800289c:	0019      	movs	r1, r3
 800289e:	0010      	movs	r0, r2
 80028a0:	f7fd fdfc 	bl	800049c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_I2C_MspInit+0x94>)
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_I2C_MspInit+0x94>)
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	03c9      	lsls	r1, r1, #15
 80028ae:	430a      	orrs	r2, r1
 80028b0:	61da      	str	r2, [r3, #28]
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_I2C_MspInit+0x94>)
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	03db      	lsls	r3, r3, #15
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b00a      	add	sp, #40	; 0x28
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40005800 	.word	0x40005800
 80028cc:	40021000 	.word	0x40021000
 80028d0:	48000400 	.word	0x48000400

080028d4 <i2c_read_reg>:
} 

/* USER CODE BEGIN 1 */

//a couple wrapper functions to make I2C transactions a little easier
HAL_StatusTypeDef i2c_read_reg(uint8_t addr, uint8_t reg, uint8_t* buf) {
 80028d4:	b5b0      	push	{r4, r5, r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af02      	add	r7, sp, #8
 80028da:	603a      	str	r2, [r7, #0]
 80028dc:	1dfb      	adds	r3, r7, #7
 80028de:	1c02      	adds	r2, r0, #0
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	1dbb      	adds	r3, r7, #6
 80028e4:	1c0a      	adds	r2, r1, #0
 80028e6:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	if(BUS_IN_USE) return HAL_BUSY;
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <i2c_read_reg+0x7c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <i2c_read_reg+0x20>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e028      	b.n	8002946 <i2c_read_reg+0x72>
	BUS_IN_USE = 1; //lock the bus
 80028f4:	4b16      	ldr	r3, [pc, #88]	; (8002950 <i2c_read_reg+0x7c>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, &reg, 1, 1); //1ms timeout
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b299      	uxth	r1, r3
 8002900:	250f      	movs	r5, #15
 8002902:	197c      	adds	r4, r7, r5
 8002904:	1dba      	adds	r2, r7, #6
 8002906:	4813      	ldr	r0, [pc, #76]	; (8002954 <i2c_read_reg+0x80>)
 8002908:	2301      	movs	r3, #1
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2301      	movs	r3, #1
 800290e:	f7fe f82d 	bl	800096c <HAL_I2C_Master_Transmit>
 8002912:	0003      	movs	r3, r0
 8002914:	7023      	strb	r3, [r4, #0]
	if(status == HAL_OK) status = HAL_I2C_Master_Receive(&hi2c2, addr, buf, 1, 1); //1ms timeout
 8002916:	197b      	adds	r3, r7, r5
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <i2c_read_reg+0x66>
 800291e:	1dfb      	adds	r3, r7, #7
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b299      	uxth	r1, r3
 8002924:	230f      	movs	r3, #15
 8002926:	18fc      	adds	r4, r7, r3
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	480a      	ldr	r0, [pc, #40]	; (8002954 <i2c_read_reg+0x80>)
 800292c:	2301      	movs	r3, #1
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2301      	movs	r3, #1
 8002932:	f7fe f92f 	bl	8000b94 <HAL_I2C_Master_Receive>
 8002936:	0003      	movs	r3, r0
 8002938:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0;//unlock the bus
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <i2c_read_reg+0x7c>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
	return status;
 8002940:	230f      	movs	r3, #15
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	781b      	ldrb	r3, [r3, #0]
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bdb0      	pop	{r4, r5, r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	20000084 	.word	0x20000084
 8002954:	20000098 	.word	0x20000098

08002958 <i2c_write_reg>:
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, &command, 1, 1); //1ms timeout
	BUS_IN_USE = 0; //unlock the bus
	return status;
}

HAL_StatusTypeDef i2c_write_reg(uint8_t addr, uint8_t reg, uint8_t data) {
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af02      	add	r7, sp, #8
 800295e:	0004      	movs	r4, r0
 8002960:	0008      	movs	r0, r1
 8002962:	0011      	movs	r1, r2
 8002964:	1dfb      	adds	r3, r7, #7
 8002966:	1c22      	adds	r2, r4, #0
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	1dbb      	adds	r3, r7, #6
 800296c:	1c02      	adds	r2, r0, #0
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	1d7b      	adds	r3, r7, #5
 8002972:	1c0a      	adds	r2, r1, #0
 8002974:	701a      	strb	r2, [r3, #0]
	uint8_t txdata[2];
	HAL_StatusTypeDef status;
	txdata[0] = reg;
 8002976:	210c      	movs	r1, #12
 8002978:	187b      	adds	r3, r7, r1
 800297a:	1dba      	adds	r2, r7, #6
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	701a      	strb	r2, [r3, #0]
	txdata[1] = data;
 8002980:	187b      	adds	r3, r7, r1
 8002982:	1d7a      	adds	r2, r7, #5
 8002984:	7812      	ldrb	r2, [r2, #0]
 8002986:	705a      	strb	r2, [r3, #1]
	if(BUS_IN_USE) return HAL_BUSY;
 8002988:	4b10      	ldr	r3, [pc, #64]	; (80029cc <i2c_write_reg+0x74>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <i2c_write_reg+0x3c>
 8002990:	2302      	movs	r3, #2
 8002992:	e016      	b.n	80029c2 <i2c_write_reg+0x6a>
	BUS_IN_USE = 1; //lock the bus
 8002994:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <i2c_write_reg+0x74>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, txdata, 2, 1); //1ms timeout
 800299a:	1dfb      	adds	r3, r7, #7
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	b299      	uxth	r1, r3
 80029a0:	250f      	movs	r5, #15
 80029a2:	197c      	adds	r4, r7, r5
 80029a4:	230c      	movs	r3, #12
 80029a6:	18fa      	adds	r2, r7, r3
 80029a8:	4809      	ldr	r0, [pc, #36]	; (80029d0 <i2c_write_reg+0x78>)
 80029aa:	2301      	movs	r3, #1
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2302      	movs	r3, #2
 80029b0:	f7fd ffdc 	bl	800096c <HAL_I2C_Master_Transmit>
 80029b4:	0003      	movs	r3, r0
 80029b6:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0; //unlock the bus
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <i2c_write_reg+0x74>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
	return status;
 80029be:	197b      	adds	r3, r7, r5
 80029c0:	781b      	ldrb	r3, [r3, #0]
}
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b004      	add	sp, #16
 80029c8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	20000084 	.word	0x20000084
 80029d0:	20000098 	.word	0x20000098

080029d4 <i2c_print_reg>:

HAL_StatusTypeDef i2c_print_reg(uint8_t addr, uint8_t reg) {
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af02      	add	r7, sp, #8
 80029da:	0002      	movs	r2, r0
 80029dc:	1dfb      	adds	r3, r7, #7
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	1dbb      	adds	r3, r7, #6
 80029e2:	1c0a      	adds	r2, r1, #0
 80029e4:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	if(BUS_IN_USE) return HAL_BUSY;
 80029e6:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <i2c_print_reg+0x98>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <i2c_print_reg+0x1e>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e038      	b.n	8002a64 <i2c_print_reg+0x90>
	BUS_IN_USE = 1; //lock the bus
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <i2c_print_reg+0x98>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, &reg, 1, 1); //1ms timeout
 80029f8:	1dfb      	adds	r3, r7, #7
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	b299      	uxth	r1, r3
 80029fe:	250f      	movs	r5, #15
 8002a00:	197c      	adds	r4, r7, r5
 8002a02:	1dba      	adds	r2, r7, #6
 8002a04:	481a      	ldr	r0, [pc, #104]	; (8002a70 <i2c_print_reg+0x9c>)
 8002a06:	2301      	movs	r3, #1
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f7fd ffae 	bl	800096c <HAL_I2C_Master_Transmit>
 8002a10:	0003      	movs	r3, r0
 8002a12:	7023      	strb	r3, [r4, #0]
	if(status == HAL_OK) {
 8002a14:	197b      	adds	r3, r7, r5
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d11a      	bne.n	8002a52 <i2c_print_reg+0x7e>
		uint8_t buf;
		status = HAL_I2C_Master_Receive(&hi2c2, addr, &buf, 1, 1); //1ms timeout
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b299      	uxth	r1, r3
 8002a22:	230f      	movs	r3, #15
 8002a24:	18fc      	adds	r4, r7, r3
 8002a26:	250e      	movs	r5, #14
 8002a28:	197a      	adds	r2, r7, r5
 8002a2a:	4811      	ldr	r0, [pc, #68]	; (8002a70 <i2c_print_reg+0x9c>)
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2301      	movs	r3, #1
 8002a32:	f7fe f8af 	bl	8000b94 <HAL_I2C_Master_Receive>
 8002a36:	0003      	movs	r3, r0
 8002a38:	7023      	strb	r3, [r4, #0]
		BUS_IN_USE = 0; //unlock the bus
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <i2c_print_reg+0x98>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
		printf(" 0x%x\r\n", buf);
 8002a40:	197b      	adds	r3, r7, r5
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	001a      	movs	r2, r3
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <i2c_print_reg+0xa0>)
 8002a48:	0011      	movs	r1, r2
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 fb74 	bl	8003138 <iprintf>
 8002a50:	e005      	b.n	8002a5e <i2c_print_reg+0x8a>
	}
	else {
		printf("\n");
 8002a52:	200a      	movs	r0, #10
 8002a54:	f000 fb8a 	bl	800316c <putchar>
		BUS_IN_USE = 0; //unlock the bus
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <i2c_print_reg+0x98>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8002a5e:	230f      	movs	r3, #15
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	781b      	ldrb	r3, [r3, #0]
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b004      	add	sp, #16
 8002a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a6c:	20000084 	.word	0x20000084
 8002a70:	20000098 	.word	0x20000098
 8002a74:	08004108 	.word	0x08004108

08002a78 <_write>:
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len)
{
 8002a78:	b5b0      	push	{r4, r5, r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d00a      	beq.n	8002aa0 <_write+0x28>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d007      	beq.n	8002aa0 <_write+0x28>
   {
      errno = EBADF;
 8002a90:	f000 fb20 	bl	80030d4 <__errno>
 8002a94:	0003      	movs	r3, r0
 8002a96:	2209      	movs	r2, #9
 8002a98:	601a      	str	r2, [r3, #0]
      return -1;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	425b      	negs	r3, r3
 8002a9e:	e011      	b.n	8002ac4 <_write+0x4c>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 0xFFFF);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	b29a      	uxth	r2, r3
   HAL_StatusTypeDef status =
 8002aa4:	2517      	movs	r5, #23
 8002aa6:	197c      	adds	r4, r7, r5
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <_write+0x54>)
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	4808      	ldr	r0, [pc, #32]	; (8002ad0 <_write+0x58>)
 8002aae:	f7ff fa47 	bl	8001f40 <HAL_UART_Transmit>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	7023      	strb	r3, [r4, #0]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8002ab6:	197b      	adds	r3, r7, r5
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <_write+0x4a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	e000      	b.n	8002ac4 <_write+0x4c>
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b006      	add	sp, #24
 8002aca:	bdb0      	pop	{r4, r5, r7, pc}
 8002acc:	0000ffff 	.word	0x0000ffff
 8002ad0:	200000e8 	.word	0x200000e8

08002ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ada:	f7fd fba1 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ade:	f000 f867 	bl	8002bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae2:	f7ff fde5 	bl	80026b0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002ae6:	f7ff fe67 	bl	80027b8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8002aea:	f000 fa4d 	bl	8002f88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nStarting...\r\n");
 8002aee:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <main+0xc0>)
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 fbaf 	bl	8003254 <puts>
  printf("Read DEVICE_ID: ");
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <main+0xc4>)
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 fb1d 	bl	8003138 <iprintf>
  i2c_print_reg(STUSB_ADDR, DEVICE_ID_REG);
 8002afe:	212f      	movs	r1, #47	; 0x2f
 8002b00:	2050      	movs	r0, #80	; 0x50
 8002b02:	f7ff ff67 	bl	80029d4 <i2c_print_reg>

  Alt_S1Reg_Map alert;
  alert.data = 0xFF;
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	701a      	strb	r2, [r3, #0]
  alert.map.prt_mask = 0;
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	2102      	movs	r1, #2
 8002b12:	438a      	bics	r2, r1
 8002b14:	701a      	strb	r2, [r3, #0]
  i2c_write_reg(STUSB_ADDR, ALERT_STATUS_1_MASK_REG, alert.data);
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	210c      	movs	r1, #12
 8002b1e:	2050      	movs	r0, #80	; 0x50
 8002b20:	f7ff ff1a 	bl	8002958 <i2c_write_reg>
  printf("ALERT_STATUS_1_MASK_REG");
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <main+0xc8>)
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 fb06 	bl	8003138 <iprintf>
  i2c_print_reg(STUSB_ADDR, ALERT_STATUS_1_MASK_REG);
 8002b2c:	210c      	movs	r1, #12
 8002b2e:	2050      	movs	r0, #80	; 0x50
 8002b30:	f7ff ff50 	bl	80029d4 <i2c_print_reg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bool current_attach = HAL_GPIO_ReadPin(ATTACH_GPIO_Port, ATTACH_Pin);
 8002b34:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <main+0xcc>)
 8002b36:	2102      	movs	r1, #2
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7fd fe2b 	bl	8000794 <HAL_GPIO_ReadPin>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	001a      	movs	r2, r3
 8002b42:	1dfb      	adds	r3, r7, #7
 8002b44:	1e51      	subs	r1, r2, #1
 8002b46:	418a      	sbcs	r2, r1
 8002b48:	701a      	strb	r2, [r3, #0]
	  if(current_attach && !last_attach) {
 8002b4a:	1dfb      	adds	r3, r7, #7
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <main+0x96>
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <main+0xd0>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2201      	movs	r2, #1
 8002b58:	4053      	eors	r3, r2
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <main+0x96>
		  printf("Attach Line High!\n");
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <main+0xd4>)
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 fb76 	bl	8003254 <puts>
 8002b68:	e00e      	b.n	8002b88 <main+0xb4>
	  } else if (!current_attach && last_attach) {
 8002b6a:	1dfb      	adds	r3, r7, #7
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4053      	eors	r3, r2
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <main+0xb4>
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <main+0xd0>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <main+0xb4>
		  printf("Attach Line Low!\n");
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <main+0xd8>)
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 fb66 	bl	8003254 <puts>
	  }
	  last_attach = current_attach;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <main+0xd0>)
 8002b8a:	1dfa      	adds	r2, r7, #7
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	701a      	strb	r2, [r3, #0]
  {
 8002b90:	e7d0      	b.n	8002b34 <main+0x60>
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	08004110 	.word	0x08004110
 8002b98:	08004120 	.word	0x08004120
 8002b9c:	08004134 	.word	0x08004134
 8002ba0:	48000400 	.word	0x48000400
 8002ba4:	200000e4 	.word	0x200000e4
 8002ba8:	0800414c 	.word	0x0800414c
 8002bac:	08004160 	.word	0x08004160

08002bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b099      	sub	sp, #100	; 0x64
 8002bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bb6:	242c      	movs	r4, #44	; 0x2c
 8002bb8:	193b      	adds	r3, r7, r4
 8002bba:	0018      	movs	r0, r3
 8002bbc:	2334      	movs	r3, #52	; 0x34
 8002bbe:	001a      	movs	r2, r3
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	f000 fab1 	bl	8003128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bc6:	231c      	movs	r3, #28
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	0018      	movs	r0, r3
 8002bcc:	2310      	movs	r3, #16
 8002bce:	001a      	movs	r2, r3
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	f000 faa9 	bl	8003128 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bd6:	003b      	movs	r3, r7
 8002bd8:	0018      	movs	r0, r3
 8002bda:	231c      	movs	r3, #28
 8002bdc:	001a      	movs	r2, r3
 8002bde:	2100      	movs	r1, #0
 8002be0:	f000 faa2 	bl	8003128 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8002be4:	193b      	adds	r3, r7, r4
 8002be6:	2220      	movs	r2, #32
 8002be8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002bea:	193b      	adds	r3, r7, r4
 8002bec:	2201      	movs	r2, #1
 8002bee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002bf0:	193b      	adds	r3, r7, r4
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf6:	193b      	adds	r3, r7, r4
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7fe fb41 	bl	8001280 <HAL_RCC_OscConfig>
 8002bfe:	1e03      	subs	r3, r0, #0
 8002c00:	d001      	beq.n	8002c06 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8002c02:	f000 f8bd 	bl	8002d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c06:	211c      	movs	r1, #28
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2203      	movs	r2, #3
 8002c12:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	00d2      	lsls	r2, r2, #3
 8002c20:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	2101      	movs	r1, #1
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7fe fe8a 	bl	8001940 <HAL_RCC_ClockConfig>
 8002c2c:	1e03      	subs	r3, r0, #0
 8002c2e:	d001      	beq.n	8002c34 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002c30:	f000 f8a6 	bl	8002d80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c34:	003b      	movs	r3, r7
 8002c36:	2202      	movs	r2, #2
 8002c38:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c3a:	003b      	movs	r3, r7
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c40:	003b      	movs	r3, r7
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff f824 	bl	8001c90 <HAL_RCCEx_PeriphCLKConfig>
 8002c48:	1e03      	subs	r3, r0, #0
 8002c4a:	d001      	beq.n	8002c50 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002c4c:	f000 f898 	bl	8002d80 <Error_Handler>
  }
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b019      	add	sp, #100	; 0x64
 8002c56:	bd90      	pop	{r4, r7, pc}

08002c58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	0002      	movs	r2, r0
 8002c60:	1dbb      	adds	r3, r7, #6
 8002c62:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin==ATTACH_Pin && !HAL_GPIO_ReadPin(ATTACH_GPIO_Port, GPIO_Pin)) //x:0-15
 8002c64:	1dbb      	adds	r3, r7, #6
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d171      	bne.n	8002d50 <HAL_GPIO_EXTI_Callback+0xf8>
 8002c6c:	1dbb      	adds	r3, r7, #6
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	4a39      	ldr	r2, [pc, #228]	; (8002d58 <HAL_GPIO_EXTI_Callback+0x100>)
 8002c72:	0019      	movs	r1, r3
 8002c74:	0010      	movs	r0, r2
 8002c76:	f7fd fd8d 	bl	8000794 <HAL_GPIO_ReadPin>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d168      	bne.n	8002d50 <HAL_GPIO_EXTI_Callback+0xf8>
    {
    	HAL_Delay(5);
 8002c7e:	2005      	movs	r0, #5
 8002c80:	f7fd fb14 	bl	80002ac <HAL_Delay>
        printf("Interrupt!\r\n");
 8002c84:	4b35      	ldr	r3, [pc, #212]	; (8002d5c <HAL_GPIO_EXTI_Callback+0x104>)
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 fae4 	bl	8003254 <puts>
        printf("ALERT_STATUS_1_REG");
 8002c8c:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x108>)
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 fa52 	bl	8003138 <iprintf>
		i2c_print_reg(STUSB_ADDR, ALERT_STATUS_1_REG);
 8002c94:	210b      	movs	r1, #11
 8002c96:	2050      	movs	r0, #80	; 0x50
 8002c98:	f7ff fe9c 	bl	80029d4 <i2c_print_reg>
		printf("PORT_STATUS_0_REG");
 8002c9c:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 fa4a 	bl	8003138 <iprintf>
		i2c_print_reg(STUSB_ADDR, PORT_STATUS_0_REG);
 8002ca4:	210d      	movs	r1, #13
 8002ca6:	2050      	movs	r0, #80	; 0x50
 8002ca8:	f7ff fe94 	bl	80029d4 <i2c_print_reg>
		printf("PORT_STATUS_1_REG");
 8002cac:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <HAL_GPIO_EXTI_Callback+0x110>)
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 fa42 	bl	8003138 <iprintf>
		i2c_print_reg(STUSB_ADDR, PORT_STATUS_1_REG);
 8002cb4:	210e      	movs	r1, #14
 8002cb6:	2050      	movs	r0, #80	; 0x50
 8002cb8:	f7ff fe8c 	bl	80029d4 <i2c_print_reg>

		//read up to PRT_STATUS to clear interrupt line
		for(int i = 0; i < 12; i++) {
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e00c      	b.n	8002cdc <HAL_GPIO_EXTI_Callback+0x84>
			uint8_t throwaway;
			i2c_read_reg(STUSB_ADDR, ALERT_STATUS_1_REG + i, &throwaway);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	330b      	adds	r3, #11
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	220f      	movs	r2, #15
 8002ccc:	18ba      	adds	r2, r7, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	2050      	movs	r0, #80	; 0x50
 8002cd2:	f7ff fdff 	bl	80028d4 <i2c_read_reg>
		for(int i = 0; i < 12; i++) {
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b0b      	cmp	r3, #11
 8002ce0:	ddef      	ble.n	8002cc2 <HAL_GPIO_EXTI_Callback+0x6a>
		}

		CC_Reg_Map cc_reg;
		i2c_read_reg(STUSB_ADDR, CC_STATUS_REG, &cc_reg.data);
 8002ce2:	2410      	movs	r4, #16
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	2111      	movs	r1, #17
 8002cea:	2050      	movs	r0, #80	; 0x50
 8002cec:	f7ff fdf2 	bl	80028d4 <i2c_read_reg>

		printf("\n\r");
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <HAL_GPIO_EXTI_Callback+0x114>)
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 fa20 	bl	8003138 <iprintf>
		printf("CC1 Status: %d \n\r", cc_reg.map.cc1);
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	079b      	lsls	r3, r3, #30
 8002cfe:	0f9b      	lsrs	r3, r3, #30
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	001a      	movs	r2, r3
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x118>)
 8002d06:	0011      	movs	r1, r2
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 fa15 	bl	8003138 <iprintf>
		printf("CC2 Status: %d \n\r", cc_reg.map.cc2);
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	071b      	lsls	r3, r3, #28
 8002d14:	0f9b      	lsrs	r3, r3, #30
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	001a      	movs	r2, r3
 8002d1a:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002d1c:	0011      	movs	r1, r2
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 fa0a 	bl	8003138 <iprintf>
		printf("Sink(1), Source(0): %d \n\r", cc_reg.map.conn_res);
 8002d24:	193b      	adds	r3, r7, r4
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	06db      	lsls	r3, r3, #27
 8002d2a:	0fdb      	lsrs	r3, r3, #31
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	001a      	movs	r2, r3
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x120>)
 8002d32:	0011      	movs	r1, r2
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 f9ff 	bl	8003138 <iprintf>
		printf("Searching?: %d \n\r", cc_reg.map.looking);
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	069b      	lsls	r3, r3, #26
 8002d40:	0fdb      	lsrs	r3, r3, #31
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	001a      	movs	r2, r3
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <HAL_GPIO_EXTI_Callback+0x124>)
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 f9f4 	bl	8003138 <iprintf>
    }
}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b007      	add	sp, #28
 8002d56:	bd90      	pop	{r4, r7, pc}
 8002d58:	48000400 	.word	0x48000400
 8002d5c:	08004174 	.word	0x08004174
 8002d60:	08004180 	.word	0x08004180
 8002d64:	08004194 	.word	0x08004194
 8002d68:	080041a8 	.word	0x080041a8
 8002d6c:	080041bc 	.word	0x080041bc
 8002d70:	080041c0 	.word	0x080041c0
 8002d74:	080041d4 	.word	0x080041d4
 8002d78:	080041e8 	.word	0x080041e8
 8002d7c:	08004204 	.word	0x08004204

08002d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_MspInit+0x44>)
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_MspInit+0x44>)
 8002d98:	2101      	movs	r1, #1
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	619a      	str	r2, [r3, #24]
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_MspInit+0x44>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2201      	movs	r2, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_MspInit+0x44>)
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <HAL_MspInit+0x44>)
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	0549      	lsls	r1, r1, #21
 8002db4:	430a      	orrs	r2, r1
 8002db6:	61da      	str	r2, [r3, #28]
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_MspInit+0x44>)
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	055b      	lsls	r3, r3, #21
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b002      	add	sp, #8
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de2:	e7fe      	b.n	8002de2 <HardFault_Handler+0x4>

08002de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dfc:	f7fd fa40 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002e0a:	2002      	movs	r0, #2
 8002e0c:	f7fd fcfc 	bl	8000808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e00a      	b.n	8002e3e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e28:	e000      	b.n	8002e2c <_read+0x16>
 8002e2a:	bf00      	nop
 8002e2c:	0001      	movs	r1, r0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	60ba      	str	r2, [r7, #8]
 8002e34:	b2ca      	uxtb	r2, r1
 8002e36:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	dbf0      	blt.n	8002e28 <_read+0x12>
	}

return len;
 8002e46:	687b      	ldr	r3, [r7, #4]
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b006      	add	sp, #24
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	return -1;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	425b      	negs	r3, r3
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	0192      	lsls	r2, r2, #6
 8002e74:	605a      	str	r2, [r3, #4]
	return 0;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b002      	add	sp, #8
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_isatty>:

int _isatty(int file)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	return 1;
 8002e88:	2301      	movs	r3, #1
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b002      	add	sp, #8
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
	return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b004      	add	sp, #16
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <_sbrk+0x50>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <_sbrk+0x16>
		heap_end = &end;
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <_sbrk+0x50>)
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <_sbrk+0x54>)
 8002ebc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <_sbrk+0x50>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <_sbrk+0x50>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	18d3      	adds	r3, r2, r3
 8002ecc:	466a      	mov	r2, sp
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d907      	bls.n	8002ee2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ed2:	f000 f8ff 	bl	80030d4 <__errno>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	220c      	movs	r2, #12
 8002eda:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	425b      	negs	r3, r3
 8002ee0:	e006      	b.n	8002ef0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <_sbrk+0x50>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	18d2      	adds	r2, r2, r3
 8002eea:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <_sbrk+0x50>)
 8002eec:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002eee:	68fb      	ldr	r3, [r7, #12]
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b004      	add	sp, #16
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000088 	.word	0x20000088
 8002efc:	20000160 	.word	0x20000160

08002f00 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <SystemInit+0x70>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <SystemInit+0x70>)
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <SystemInit+0x70>)
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <SystemInit+0x70>)
 8002f16:	4917      	ldr	r1, [pc, #92]	; (8002f74 <SystemInit+0x74>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <SystemInit+0x70>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <SystemInit+0x70>)
 8002f22:	4915      	ldr	r1, [pc, #84]	; (8002f78 <SystemInit+0x78>)
 8002f24:	400a      	ands	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <SystemInit+0x70>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <SystemInit+0x70>)
 8002f2e:	4913      	ldr	r1, [pc, #76]	; (8002f7c <SystemInit+0x7c>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <SystemInit+0x70>)
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <SystemInit+0x70>)
 8002f3a:	4911      	ldr	r1, [pc, #68]	; (8002f80 <SystemInit+0x80>)
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <SystemInit+0x70>)
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <SystemInit+0x70>)
 8002f46:	210f      	movs	r1, #15
 8002f48:	438a      	bics	r2, r1
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <SystemInit+0x70>)
 8002f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <SystemInit+0x70>)
 8002f52:	490c      	ldr	r1, [pc, #48]	; (8002f84 <SystemInit+0x84>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <SystemInit+0x70>)
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <SystemInit+0x70>)
 8002f5e:	2101      	movs	r1, #1
 8002f60:	438a      	bics	r2, r1
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <SystemInit+0x70>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]

}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08ffb80c 	.word	0x08ffb80c
 8002f78:	fef6ffff 	.word	0xfef6ffff
 8002f7c:	fffbffff 	.word	0xfffbffff
 8002f80:	ffc0ffff 	.word	0xffc0ffff
 8002f84:	fffcfe2c 	.word	0xfffcfe2c

08002f88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002f8c:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002f8e:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <MX_USART2_UART_Init+0x5c>)
 8002f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002f94:	22e1      	movs	r2, #225	; 0xe1
 8002f96:	0252      	lsls	r2, r2, #9
 8002f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fae:	220c      	movs	r2, #12
 8002fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <MX_USART2_UART_Init+0x58>)
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7fe ff5f 	bl	8001e90 <HAL_UART_Init>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d001      	beq.n	8002fda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002fd6:	f7ff fed3 	bl	8002d80 <Error_Handler>
  }

}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	200000e8 	.word	0x200000e8
 8002fe4:	40004400 	.word	0x40004400

08002fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	2314      	movs	r3, #20
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	2314      	movs	r3, #20
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	f000 f894 	bl	8003128 <memset>
  if(uartHandle->Instance==USART2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <HAL_UART_MspInit+0x90>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d132      	bne.n	8003070 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800300a:	4b1c      	ldr	r3, [pc, #112]	; (800307c <HAL_UART_MspInit+0x94>)
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_UART_MspInit+0x94>)
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	0289      	lsls	r1, r1, #10
 8003014:	430a      	orrs	r2, r1
 8003016:	61da      	str	r2, [r3, #28]
 8003018:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_UART_MspInit+0x94>)
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	029b      	lsls	r3, r3, #10
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_UART_MspInit+0x94>)
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <HAL_UART_MspInit+0x94>)
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	0289      	lsls	r1, r1, #10
 8003030:	430a      	orrs	r2, r1
 8003032:	615a      	str	r2, [r3, #20]
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_UART_MspInit+0x94>)
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	029b      	lsls	r3, r3, #10
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003042:	2114      	movs	r1, #20
 8003044:	187b      	adds	r3, r7, r1
 8003046:	220c      	movs	r2, #12
 8003048:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	187b      	adds	r3, r7, r1
 800304c:	2202      	movs	r2, #2
 800304e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	187b      	adds	r3, r7, r1
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2203      	movs	r2, #3
 800305a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800305c:	187b      	adds	r3, r7, r1
 800305e:	2201      	movs	r2, #1
 8003060:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003062:	187a      	adds	r2, r7, r1
 8003064:	2390      	movs	r3, #144	; 0x90
 8003066:	05db      	lsls	r3, r3, #23
 8003068:	0011      	movs	r1, r2
 800306a:	0018      	movs	r0, r3
 800306c:	f7fd fa16 	bl	800049c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b00a      	add	sp, #40	; 0x28
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40004400 	.word	0x40004400
 800307c:	40021000 	.word	0x40021000

08003080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003080:	480d      	ldr	r0, [pc, #52]	; (80030b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003082:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003084:	480d      	ldr	r0, [pc, #52]	; (80030bc <LoopForever+0x6>)
  ldr r1, =_edata
 8003086:	490e      	ldr	r1, [pc, #56]	; (80030c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003088:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <LoopForever+0xe>)
  movs r3, #0
 800308a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800308c:	e002      	b.n	8003094 <LoopCopyDataInit>

0800308e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800308e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003092:	3304      	adds	r3, #4

08003094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003098:	d3f9      	bcc.n	800308e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800309a:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800309c:	4c0b      	ldr	r4, [pc, #44]	; (80030cc <LoopForever+0x16>)
  movs r3, #0
 800309e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a0:	e001      	b.n	80030a6 <LoopFillZerobss>

080030a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a4:	3204      	adds	r2, #4

080030a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a8:	d3fb      	bcc.n	80030a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80030aa:	f7ff ff29 	bl	8002f00 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80030ae:	f000 f817 	bl	80030e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030b2:	f7ff fd0f 	bl	8002ad4 <main>

080030b6 <LoopForever>:

LoopForever:
    b LoopForever
 80030b6:	e7fe      	b.n	80030b6 <LoopForever>
  ldr   r0, =_estack
 80030b8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80030bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80030c4:	080042d0 	.word	0x080042d0
  ldr r2, =_sbss
 80030c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80030cc:	2000015c 	.word	0x2000015c

080030d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030d0:	e7fe      	b.n	80030d0 <ADC1_COMP_IRQHandler>
	...

080030d4 <__errno>:
 80030d4:	4b01      	ldr	r3, [pc, #4]	; (80030dc <__errno+0x8>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	4770      	bx	lr
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	20000004 	.word	0x20000004

080030e0 <__libc_init_array>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	2600      	movs	r6, #0
 80030e4:	4d0c      	ldr	r5, [pc, #48]	; (8003118 <__libc_init_array+0x38>)
 80030e6:	4c0d      	ldr	r4, [pc, #52]	; (800311c <__libc_init_array+0x3c>)
 80030e8:	1b64      	subs	r4, r4, r5
 80030ea:	10a4      	asrs	r4, r4, #2
 80030ec:	42a6      	cmp	r6, r4
 80030ee:	d109      	bne.n	8003104 <__libc_init_array+0x24>
 80030f0:	2600      	movs	r6, #0
 80030f2:	f000 ffed 	bl	80040d0 <_init>
 80030f6:	4d0a      	ldr	r5, [pc, #40]	; (8003120 <__libc_init_array+0x40>)
 80030f8:	4c0a      	ldr	r4, [pc, #40]	; (8003124 <__libc_init_array+0x44>)
 80030fa:	1b64      	subs	r4, r4, r5
 80030fc:	10a4      	asrs	r4, r4, #2
 80030fe:	42a6      	cmp	r6, r4
 8003100:	d105      	bne.n	800310e <__libc_init_array+0x2e>
 8003102:	bd70      	pop	{r4, r5, r6, pc}
 8003104:	00b3      	lsls	r3, r6, #2
 8003106:	58eb      	ldr	r3, [r5, r3]
 8003108:	4798      	blx	r3
 800310a:	3601      	adds	r6, #1
 800310c:	e7ee      	b.n	80030ec <__libc_init_array+0xc>
 800310e:	00b3      	lsls	r3, r6, #2
 8003110:	58eb      	ldr	r3, [r5, r3]
 8003112:	4798      	blx	r3
 8003114:	3601      	adds	r6, #1
 8003116:	e7f2      	b.n	80030fe <__libc_init_array+0x1e>
 8003118:	080042c8 	.word	0x080042c8
 800311c:	080042c8 	.word	0x080042c8
 8003120:	080042c8 	.word	0x080042c8
 8003124:	080042cc 	.word	0x080042cc

08003128 <memset>:
 8003128:	0003      	movs	r3, r0
 800312a:	1812      	adds	r2, r2, r0
 800312c:	4293      	cmp	r3, r2
 800312e:	d100      	bne.n	8003132 <memset+0xa>
 8003130:	4770      	bx	lr
 8003132:	7019      	strb	r1, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	e7f9      	b.n	800312c <memset+0x4>

08003138 <iprintf>:
 8003138:	b40f      	push	{r0, r1, r2, r3}
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <iprintf+0x30>)
 800313c:	b513      	push	{r0, r1, r4, lr}
 800313e:	681c      	ldr	r4, [r3, #0]
 8003140:	2c00      	cmp	r4, #0
 8003142:	d005      	beq.n	8003150 <iprintf+0x18>
 8003144:	69a3      	ldr	r3, [r4, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <iprintf+0x18>
 800314a:	0020      	movs	r0, r4
 800314c:	f000 fa50 	bl	80035f0 <__sinit>
 8003150:	ab05      	add	r3, sp, #20
 8003152:	9a04      	ldr	r2, [sp, #16]
 8003154:	68a1      	ldr	r1, [r4, #8]
 8003156:	0020      	movs	r0, r4
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	f000 fc19 	bl	8003990 <_vfiprintf_r>
 800315e:	bc16      	pop	{r1, r2, r4}
 8003160:	bc08      	pop	{r3}
 8003162:	b004      	add	sp, #16
 8003164:	4718      	bx	r3
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	20000004 	.word	0x20000004

0800316c <putchar>:
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <putchar+0x24>)
 800316e:	b570      	push	{r4, r5, r6, lr}
 8003170:	681c      	ldr	r4, [r3, #0]
 8003172:	0005      	movs	r5, r0
 8003174:	2c00      	cmp	r4, #0
 8003176:	d005      	beq.n	8003184 <putchar+0x18>
 8003178:	69a3      	ldr	r3, [r4, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <putchar+0x18>
 800317e:	0020      	movs	r0, r4
 8003180:	f000 fa36 	bl	80035f0 <__sinit>
 8003184:	0029      	movs	r1, r5
 8003186:	68a2      	ldr	r2, [r4, #8]
 8003188:	0020      	movs	r0, r4
 800318a:	f000 fe8d 	bl	8003ea8 <_putc_r>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	20000004 	.word	0x20000004

08003194 <_puts_r>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	0005      	movs	r5, r0
 8003198:	000e      	movs	r6, r1
 800319a:	2800      	cmp	r0, #0
 800319c:	d004      	beq.n	80031a8 <_puts_r+0x14>
 800319e:	6983      	ldr	r3, [r0, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <_puts_r+0x14>
 80031a4:	f000 fa24 	bl	80035f0 <__sinit>
 80031a8:	69ab      	ldr	r3, [r5, #24]
 80031aa:	68ac      	ldr	r4, [r5, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <_puts_r+0x22>
 80031b0:	0028      	movs	r0, r5
 80031b2:	f000 fa1d 	bl	80035f0 <__sinit>
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <_puts_r+0xb4>)
 80031b8:	429c      	cmp	r4, r3
 80031ba:	d10f      	bne.n	80031dc <_puts_r+0x48>
 80031bc:	686c      	ldr	r4, [r5, #4]
 80031be:	89a3      	ldrh	r3, [r4, #12]
 80031c0:	071b      	lsls	r3, r3, #28
 80031c2:	d502      	bpl.n	80031ca <_puts_r+0x36>
 80031c4:	6923      	ldr	r3, [r4, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d11f      	bne.n	800320a <_puts_r+0x76>
 80031ca:	0021      	movs	r1, r4
 80031cc:	0028      	movs	r0, r5
 80031ce:	f000 f8a1 	bl	8003314 <__swsetup_r>
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d019      	beq.n	800320a <_puts_r+0x76>
 80031d6:	2001      	movs	r0, #1
 80031d8:	4240      	negs	r0, r0
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <_puts_r+0xb8>)
 80031de:	429c      	cmp	r4, r3
 80031e0:	d101      	bne.n	80031e6 <_puts_r+0x52>
 80031e2:	68ac      	ldr	r4, [r5, #8]
 80031e4:	e7eb      	b.n	80031be <_puts_r+0x2a>
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <_puts_r+0xbc>)
 80031e8:	429c      	cmp	r4, r3
 80031ea:	d1e8      	bne.n	80031be <_puts_r+0x2a>
 80031ec:	68ec      	ldr	r4, [r5, #12]
 80031ee:	e7e6      	b.n	80031be <_puts_r+0x2a>
 80031f0:	3601      	adds	r6, #1
 80031f2:	60a3      	str	r3, [r4, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da04      	bge.n	8003202 <_puts_r+0x6e>
 80031f8:	69a2      	ldr	r2, [r4, #24]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	dc16      	bgt.n	800322c <_puts_r+0x98>
 80031fe:	290a      	cmp	r1, #10
 8003200:	d014      	beq.n	800322c <_puts_r+0x98>
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	6022      	str	r2, [r4, #0]
 8003208:	7019      	strb	r1, [r3, #0]
 800320a:	68a3      	ldr	r3, [r4, #8]
 800320c:	7831      	ldrb	r1, [r6, #0]
 800320e:	3b01      	subs	r3, #1
 8003210:	2900      	cmp	r1, #0
 8003212:	d1ed      	bne.n	80031f0 <_puts_r+0x5c>
 8003214:	60a3      	str	r3, [r4, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	da0f      	bge.n	800323a <_puts_r+0xa6>
 800321a:	0022      	movs	r2, r4
 800321c:	310a      	adds	r1, #10
 800321e:	0028      	movs	r0, r5
 8003220:	f000 f822 	bl	8003268 <__swbuf_r>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	d0d6      	beq.n	80031d6 <_puts_r+0x42>
 8003228:	200a      	movs	r0, #10
 800322a:	e7d6      	b.n	80031da <_puts_r+0x46>
 800322c:	0022      	movs	r2, r4
 800322e:	0028      	movs	r0, r5
 8003230:	f000 f81a 	bl	8003268 <__swbuf_r>
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	d1e8      	bne.n	800320a <_puts_r+0x76>
 8003238:	e7cd      	b.n	80031d6 <_puts_r+0x42>
 800323a:	200a      	movs	r0, #10
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	6022      	str	r2, [r4, #0]
 8003242:	7018      	strb	r0, [r3, #0]
 8003244:	e7c9      	b.n	80031da <_puts_r+0x46>
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	08004254 	.word	0x08004254
 800324c:	08004274 	.word	0x08004274
 8003250:	08004234 	.word	0x08004234

08003254 <puts>:
 8003254:	b510      	push	{r4, lr}
 8003256:	4b03      	ldr	r3, [pc, #12]	; (8003264 <puts+0x10>)
 8003258:	0001      	movs	r1, r0
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	f7ff ff9a 	bl	8003194 <_puts_r>
 8003260:	bd10      	pop	{r4, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	20000004 	.word	0x20000004

08003268 <__swbuf_r>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	0005      	movs	r5, r0
 800326c:	000e      	movs	r6, r1
 800326e:	0014      	movs	r4, r2
 8003270:	2800      	cmp	r0, #0
 8003272:	d004      	beq.n	800327e <__swbuf_r+0x16>
 8003274:	6983      	ldr	r3, [r0, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <__swbuf_r+0x16>
 800327a:	f000 f9b9 	bl	80035f0 <__sinit>
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <__swbuf_r+0xa0>)
 8003280:	429c      	cmp	r4, r3
 8003282:	d12d      	bne.n	80032e0 <__swbuf_r+0x78>
 8003284:	686c      	ldr	r4, [r5, #4]
 8003286:	69a3      	ldr	r3, [r4, #24]
 8003288:	60a3      	str	r3, [r4, #8]
 800328a:	89a3      	ldrh	r3, [r4, #12]
 800328c:	071b      	lsls	r3, r3, #28
 800328e:	d531      	bpl.n	80032f4 <__swbuf_r+0x8c>
 8003290:	6923      	ldr	r3, [r4, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d02e      	beq.n	80032f4 <__swbuf_r+0x8c>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	6922      	ldr	r2, [r4, #16]
 800329a:	b2f7      	uxtb	r7, r6
 800329c:	1a98      	subs	r0, r3, r2
 800329e:	6963      	ldr	r3, [r4, #20]
 80032a0:	b2f6      	uxtb	r6, r6
 80032a2:	4283      	cmp	r3, r0
 80032a4:	dc05      	bgt.n	80032b2 <__swbuf_r+0x4a>
 80032a6:	0021      	movs	r1, r4
 80032a8:	0028      	movs	r0, r5
 80032aa:	f000 f933 	bl	8003514 <_fflush_r>
 80032ae:	2800      	cmp	r0, #0
 80032b0:	d126      	bne.n	8003300 <__swbuf_r+0x98>
 80032b2:	68a3      	ldr	r3, [r4, #8]
 80032b4:	3001      	adds	r0, #1
 80032b6:	3b01      	subs	r3, #1
 80032b8:	60a3      	str	r3, [r4, #8]
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	6022      	str	r2, [r4, #0]
 80032c0:	701f      	strb	r7, [r3, #0]
 80032c2:	6963      	ldr	r3, [r4, #20]
 80032c4:	4283      	cmp	r3, r0
 80032c6:	d004      	beq.n	80032d2 <__swbuf_r+0x6a>
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	07db      	lsls	r3, r3, #31
 80032cc:	d51a      	bpl.n	8003304 <__swbuf_r+0x9c>
 80032ce:	2e0a      	cmp	r6, #10
 80032d0:	d118      	bne.n	8003304 <__swbuf_r+0x9c>
 80032d2:	0021      	movs	r1, r4
 80032d4:	0028      	movs	r0, r5
 80032d6:	f000 f91d 	bl	8003514 <_fflush_r>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d012      	beq.n	8003304 <__swbuf_r+0x9c>
 80032de:	e00f      	b.n	8003300 <__swbuf_r+0x98>
 80032e0:	4b0a      	ldr	r3, [pc, #40]	; (800330c <__swbuf_r+0xa4>)
 80032e2:	429c      	cmp	r4, r3
 80032e4:	d101      	bne.n	80032ea <__swbuf_r+0x82>
 80032e6:	68ac      	ldr	r4, [r5, #8]
 80032e8:	e7cd      	b.n	8003286 <__swbuf_r+0x1e>
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <__swbuf_r+0xa8>)
 80032ec:	429c      	cmp	r4, r3
 80032ee:	d1ca      	bne.n	8003286 <__swbuf_r+0x1e>
 80032f0:	68ec      	ldr	r4, [r5, #12]
 80032f2:	e7c8      	b.n	8003286 <__swbuf_r+0x1e>
 80032f4:	0021      	movs	r1, r4
 80032f6:	0028      	movs	r0, r5
 80032f8:	f000 f80c 	bl	8003314 <__swsetup_r>
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d0ca      	beq.n	8003296 <__swbuf_r+0x2e>
 8003300:	2601      	movs	r6, #1
 8003302:	4276      	negs	r6, r6
 8003304:	0030      	movs	r0, r6
 8003306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003308:	08004254 	.word	0x08004254
 800330c:	08004274 	.word	0x08004274
 8003310:	08004234 	.word	0x08004234

08003314 <__swsetup_r>:
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <__swsetup_r+0xdc>)
 8003316:	b570      	push	{r4, r5, r6, lr}
 8003318:	681d      	ldr	r5, [r3, #0]
 800331a:	0006      	movs	r6, r0
 800331c:	000c      	movs	r4, r1
 800331e:	2d00      	cmp	r5, #0
 8003320:	d005      	beq.n	800332e <__swsetup_r+0x1a>
 8003322:	69ab      	ldr	r3, [r5, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <__swsetup_r+0x1a>
 8003328:	0028      	movs	r0, r5
 800332a:	f000 f961 	bl	80035f0 <__sinit>
 800332e:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <__swsetup_r+0xe0>)
 8003330:	429c      	cmp	r4, r3
 8003332:	d10f      	bne.n	8003354 <__swsetup_r+0x40>
 8003334:	686c      	ldr	r4, [r5, #4]
 8003336:	230c      	movs	r3, #12
 8003338:	5ee2      	ldrsh	r2, [r4, r3]
 800333a:	b293      	uxth	r3, r2
 800333c:	0719      	lsls	r1, r3, #28
 800333e:	d42d      	bmi.n	800339c <__swsetup_r+0x88>
 8003340:	06d9      	lsls	r1, r3, #27
 8003342:	d411      	bmi.n	8003368 <__swsetup_r+0x54>
 8003344:	2309      	movs	r3, #9
 8003346:	2001      	movs	r0, #1
 8003348:	6033      	str	r3, [r6, #0]
 800334a:	3337      	adds	r3, #55	; 0x37
 800334c:	4313      	orrs	r3, r2
 800334e:	81a3      	strh	r3, [r4, #12]
 8003350:	4240      	negs	r0, r0
 8003352:	bd70      	pop	{r4, r5, r6, pc}
 8003354:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <__swsetup_r+0xe4>)
 8003356:	429c      	cmp	r4, r3
 8003358:	d101      	bne.n	800335e <__swsetup_r+0x4a>
 800335a:	68ac      	ldr	r4, [r5, #8]
 800335c:	e7eb      	b.n	8003336 <__swsetup_r+0x22>
 800335e:	4b27      	ldr	r3, [pc, #156]	; (80033fc <__swsetup_r+0xe8>)
 8003360:	429c      	cmp	r4, r3
 8003362:	d1e8      	bne.n	8003336 <__swsetup_r+0x22>
 8003364:	68ec      	ldr	r4, [r5, #12]
 8003366:	e7e6      	b.n	8003336 <__swsetup_r+0x22>
 8003368:	075b      	lsls	r3, r3, #29
 800336a:	d513      	bpl.n	8003394 <__swsetup_r+0x80>
 800336c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800336e:	2900      	cmp	r1, #0
 8003370:	d008      	beq.n	8003384 <__swsetup_r+0x70>
 8003372:	0023      	movs	r3, r4
 8003374:	3344      	adds	r3, #68	; 0x44
 8003376:	4299      	cmp	r1, r3
 8003378:	d002      	beq.n	8003380 <__swsetup_r+0x6c>
 800337a:	0030      	movs	r0, r6
 800337c:	f000 fa38 	bl	80037f0 <_free_r>
 8003380:	2300      	movs	r3, #0
 8003382:	6363      	str	r3, [r4, #52]	; 0x34
 8003384:	2224      	movs	r2, #36	; 0x24
 8003386:	89a3      	ldrh	r3, [r4, #12]
 8003388:	4393      	bics	r3, r2
 800338a:	81a3      	strh	r3, [r4, #12]
 800338c:	2300      	movs	r3, #0
 800338e:	6063      	str	r3, [r4, #4]
 8003390:	6923      	ldr	r3, [r4, #16]
 8003392:	6023      	str	r3, [r4, #0]
 8003394:	2308      	movs	r3, #8
 8003396:	89a2      	ldrh	r2, [r4, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	81a3      	strh	r3, [r4, #12]
 800339c:	6923      	ldr	r3, [r4, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <__swsetup_r+0xa6>
 80033a2:	21a0      	movs	r1, #160	; 0xa0
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	89a3      	ldrh	r3, [r4, #12]
 80033a8:	0089      	lsls	r1, r1, #2
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	400b      	ands	r3, r1
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <__swsetup_r+0xa6>
 80033b2:	0021      	movs	r1, r4
 80033b4:	0030      	movs	r0, r6
 80033b6:	f000 f9d7 	bl	8003768 <__smakebuf_r>
 80033ba:	2301      	movs	r3, #1
 80033bc:	89a2      	ldrh	r2, [r4, #12]
 80033be:	4013      	ands	r3, r2
 80033c0:	d011      	beq.n	80033e6 <__swsetup_r+0xd2>
 80033c2:	2300      	movs	r3, #0
 80033c4:	60a3      	str	r3, [r4, #8]
 80033c6:	6963      	ldr	r3, [r4, #20]
 80033c8:	425b      	negs	r3, r3
 80033ca:	61a3      	str	r3, [r4, #24]
 80033cc:	2000      	movs	r0, #0
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	4283      	cmp	r3, r0
 80033d2:	d1be      	bne.n	8003352 <__swsetup_r+0x3e>
 80033d4:	230c      	movs	r3, #12
 80033d6:	5ee2      	ldrsh	r2, [r4, r3]
 80033d8:	0613      	lsls	r3, r2, #24
 80033da:	d5ba      	bpl.n	8003352 <__swsetup_r+0x3e>
 80033dc:	2340      	movs	r3, #64	; 0x40
 80033de:	4313      	orrs	r3, r2
 80033e0:	81a3      	strh	r3, [r4, #12]
 80033e2:	3801      	subs	r0, #1
 80033e4:	e7b5      	b.n	8003352 <__swsetup_r+0x3e>
 80033e6:	0792      	lsls	r2, r2, #30
 80033e8:	d400      	bmi.n	80033ec <__swsetup_r+0xd8>
 80033ea:	6963      	ldr	r3, [r4, #20]
 80033ec:	60a3      	str	r3, [r4, #8]
 80033ee:	e7ed      	b.n	80033cc <__swsetup_r+0xb8>
 80033f0:	20000004 	.word	0x20000004
 80033f4:	08004254 	.word	0x08004254
 80033f8:	08004274 	.word	0x08004274
 80033fc:	08004234 	.word	0x08004234

08003400 <__sflush_r>:
 8003400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003402:	898a      	ldrh	r2, [r1, #12]
 8003404:	0005      	movs	r5, r0
 8003406:	000c      	movs	r4, r1
 8003408:	0713      	lsls	r3, r2, #28
 800340a:	d460      	bmi.n	80034ce <__sflush_r+0xce>
 800340c:	684b      	ldr	r3, [r1, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	dc04      	bgt.n	800341c <__sflush_r+0x1c>
 8003412:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	dc01      	bgt.n	800341c <__sflush_r+0x1c>
 8003418:	2000      	movs	r0, #0
 800341a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800341c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800341e:	2f00      	cmp	r7, #0
 8003420:	d0fa      	beq.n	8003418 <__sflush_r+0x18>
 8003422:	2300      	movs	r3, #0
 8003424:	682e      	ldr	r6, [r5, #0]
 8003426:	602b      	str	r3, [r5, #0]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	015b      	lsls	r3, r3, #5
 800342c:	6a21      	ldr	r1, [r4, #32]
 800342e:	401a      	ands	r2, r3
 8003430:	d034      	beq.n	800349c <__sflush_r+0x9c>
 8003432:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003434:	89a3      	ldrh	r3, [r4, #12]
 8003436:	075b      	lsls	r3, r3, #29
 8003438:	d506      	bpl.n	8003448 <__sflush_r+0x48>
 800343a:	6863      	ldr	r3, [r4, #4]
 800343c:	1ac0      	subs	r0, r0, r3
 800343e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <__sflush_r+0x48>
 8003444:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003446:	1ac0      	subs	r0, r0, r3
 8003448:	0002      	movs	r2, r0
 800344a:	6a21      	ldr	r1, [r4, #32]
 800344c:	2300      	movs	r3, #0
 800344e:	0028      	movs	r0, r5
 8003450:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003452:	47b8      	blx	r7
 8003454:	89a1      	ldrh	r1, [r4, #12]
 8003456:	1c43      	adds	r3, r0, #1
 8003458:	d106      	bne.n	8003468 <__sflush_r+0x68>
 800345a:	682b      	ldr	r3, [r5, #0]
 800345c:	2b1d      	cmp	r3, #29
 800345e:	d830      	bhi.n	80034c2 <__sflush_r+0xc2>
 8003460:	4a2b      	ldr	r2, [pc, #172]	; (8003510 <__sflush_r+0x110>)
 8003462:	40da      	lsrs	r2, r3
 8003464:	07d3      	lsls	r3, r2, #31
 8003466:	d52c      	bpl.n	80034c2 <__sflush_r+0xc2>
 8003468:	2300      	movs	r3, #0
 800346a:	6063      	str	r3, [r4, #4]
 800346c:	6923      	ldr	r3, [r4, #16]
 800346e:	6023      	str	r3, [r4, #0]
 8003470:	04cb      	lsls	r3, r1, #19
 8003472:	d505      	bpl.n	8003480 <__sflush_r+0x80>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d102      	bne.n	800347e <__sflush_r+0x7e>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d100      	bne.n	8003480 <__sflush_r+0x80>
 800347e:	6560      	str	r0, [r4, #84]	; 0x54
 8003480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003482:	602e      	str	r6, [r5, #0]
 8003484:	2900      	cmp	r1, #0
 8003486:	d0c7      	beq.n	8003418 <__sflush_r+0x18>
 8003488:	0023      	movs	r3, r4
 800348a:	3344      	adds	r3, #68	; 0x44
 800348c:	4299      	cmp	r1, r3
 800348e:	d002      	beq.n	8003496 <__sflush_r+0x96>
 8003490:	0028      	movs	r0, r5
 8003492:	f000 f9ad 	bl	80037f0 <_free_r>
 8003496:	2000      	movs	r0, #0
 8003498:	6360      	str	r0, [r4, #52]	; 0x34
 800349a:	e7be      	b.n	800341a <__sflush_r+0x1a>
 800349c:	2301      	movs	r3, #1
 800349e:	0028      	movs	r0, r5
 80034a0:	47b8      	blx	r7
 80034a2:	1c43      	adds	r3, r0, #1
 80034a4:	d1c6      	bne.n	8003434 <__sflush_r+0x34>
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0c3      	beq.n	8003434 <__sflush_r+0x34>
 80034ac:	2b1d      	cmp	r3, #29
 80034ae:	d001      	beq.n	80034b4 <__sflush_r+0xb4>
 80034b0:	2b16      	cmp	r3, #22
 80034b2:	d101      	bne.n	80034b8 <__sflush_r+0xb8>
 80034b4:	602e      	str	r6, [r5, #0]
 80034b6:	e7af      	b.n	8003418 <__sflush_r+0x18>
 80034b8:	2340      	movs	r3, #64	; 0x40
 80034ba:	89a2      	ldrh	r2, [r4, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	81a3      	strh	r3, [r4, #12]
 80034c0:	e7ab      	b.n	800341a <__sflush_r+0x1a>
 80034c2:	2340      	movs	r3, #64	; 0x40
 80034c4:	430b      	orrs	r3, r1
 80034c6:	2001      	movs	r0, #1
 80034c8:	81a3      	strh	r3, [r4, #12]
 80034ca:	4240      	negs	r0, r0
 80034cc:	e7a5      	b.n	800341a <__sflush_r+0x1a>
 80034ce:	690f      	ldr	r7, [r1, #16]
 80034d0:	2f00      	cmp	r7, #0
 80034d2:	d0a1      	beq.n	8003418 <__sflush_r+0x18>
 80034d4:	680b      	ldr	r3, [r1, #0]
 80034d6:	600f      	str	r7, [r1, #0]
 80034d8:	1bdb      	subs	r3, r3, r7
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	2300      	movs	r3, #0
 80034de:	0792      	lsls	r2, r2, #30
 80034e0:	d100      	bne.n	80034e4 <__sflush_r+0xe4>
 80034e2:	694b      	ldr	r3, [r1, #20]
 80034e4:	60a3      	str	r3, [r4, #8]
 80034e6:	9b01      	ldr	r3, [sp, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	dc00      	bgt.n	80034ee <__sflush_r+0xee>
 80034ec:	e794      	b.n	8003418 <__sflush_r+0x18>
 80034ee:	9b01      	ldr	r3, [sp, #4]
 80034f0:	003a      	movs	r2, r7
 80034f2:	6a21      	ldr	r1, [r4, #32]
 80034f4:	0028      	movs	r0, r5
 80034f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034f8:	47b0      	blx	r6
 80034fa:	2800      	cmp	r0, #0
 80034fc:	dc03      	bgt.n	8003506 <__sflush_r+0x106>
 80034fe:	2340      	movs	r3, #64	; 0x40
 8003500:	89a2      	ldrh	r2, [r4, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	e7df      	b.n	80034c6 <__sflush_r+0xc6>
 8003506:	9b01      	ldr	r3, [sp, #4]
 8003508:	183f      	adds	r7, r7, r0
 800350a:	1a1b      	subs	r3, r3, r0
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	e7ea      	b.n	80034e6 <__sflush_r+0xe6>
 8003510:	20400001 	.word	0x20400001

08003514 <_fflush_r>:
 8003514:	690b      	ldr	r3, [r1, #16]
 8003516:	b570      	push	{r4, r5, r6, lr}
 8003518:	0005      	movs	r5, r0
 800351a:	000c      	movs	r4, r1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <_fflush_r+0x10>
 8003520:	2000      	movs	r0, #0
 8003522:	bd70      	pop	{r4, r5, r6, pc}
 8003524:	2800      	cmp	r0, #0
 8003526:	d004      	beq.n	8003532 <_fflush_r+0x1e>
 8003528:	6983      	ldr	r3, [r0, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <_fflush_r+0x1e>
 800352e:	f000 f85f 	bl	80035f0 <__sinit>
 8003532:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <_fflush_r+0x4c>)
 8003534:	429c      	cmp	r4, r3
 8003536:	d109      	bne.n	800354c <_fflush_r+0x38>
 8003538:	686c      	ldr	r4, [r5, #4]
 800353a:	220c      	movs	r2, #12
 800353c:	5ea3      	ldrsh	r3, [r4, r2]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ee      	beq.n	8003520 <_fflush_r+0xc>
 8003542:	0021      	movs	r1, r4
 8003544:	0028      	movs	r0, r5
 8003546:	f7ff ff5b 	bl	8003400 <__sflush_r>
 800354a:	e7ea      	b.n	8003522 <_fflush_r+0xe>
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <_fflush_r+0x50>)
 800354e:	429c      	cmp	r4, r3
 8003550:	d101      	bne.n	8003556 <_fflush_r+0x42>
 8003552:	68ac      	ldr	r4, [r5, #8]
 8003554:	e7f1      	b.n	800353a <_fflush_r+0x26>
 8003556:	4b04      	ldr	r3, [pc, #16]	; (8003568 <_fflush_r+0x54>)
 8003558:	429c      	cmp	r4, r3
 800355a:	d1ee      	bne.n	800353a <_fflush_r+0x26>
 800355c:	68ec      	ldr	r4, [r5, #12]
 800355e:	e7ec      	b.n	800353a <_fflush_r+0x26>
 8003560:	08004254 	.word	0x08004254
 8003564:	08004274 	.word	0x08004274
 8003568:	08004234 	.word	0x08004234

0800356c <std>:
 800356c:	2300      	movs	r3, #0
 800356e:	b510      	push	{r4, lr}
 8003570:	0004      	movs	r4, r0
 8003572:	6003      	str	r3, [r0, #0]
 8003574:	6043      	str	r3, [r0, #4]
 8003576:	6083      	str	r3, [r0, #8]
 8003578:	8181      	strh	r1, [r0, #12]
 800357a:	6643      	str	r3, [r0, #100]	; 0x64
 800357c:	81c2      	strh	r2, [r0, #14]
 800357e:	6103      	str	r3, [r0, #16]
 8003580:	6143      	str	r3, [r0, #20]
 8003582:	6183      	str	r3, [r0, #24]
 8003584:	0019      	movs	r1, r3
 8003586:	2208      	movs	r2, #8
 8003588:	305c      	adds	r0, #92	; 0x5c
 800358a:	f7ff fdcd 	bl	8003128 <memset>
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <std+0x38>)
 8003590:	6224      	str	r4, [r4, #32]
 8003592:	6263      	str	r3, [r4, #36]	; 0x24
 8003594:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <std+0x3c>)
 8003596:	62a3      	str	r3, [r4, #40]	; 0x28
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <std+0x40>)
 800359a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <std+0x44>)
 800359e:	6323      	str	r3, [r4, #48]	; 0x30
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	08003f39 	.word	0x08003f39
 80035a8:	08003f61 	.word	0x08003f61
 80035ac:	08003f99 	.word	0x08003f99
 80035b0:	08003fc5 	.word	0x08003fc5

080035b4 <_cleanup_r>:
 80035b4:	b510      	push	{r4, lr}
 80035b6:	4902      	ldr	r1, [pc, #8]	; (80035c0 <_cleanup_r+0xc>)
 80035b8:	f000 f88c 	bl	80036d4 <_fwalk_reent>
 80035bc:	bd10      	pop	{r4, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	08003515 	.word	0x08003515

080035c4 <__sfmoreglue>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	2568      	movs	r5, #104	; 0x68
 80035c8:	1e4a      	subs	r2, r1, #1
 80035ca:	4355      	muls	r5, r2
 80035cc:	000e      	movs	r6, r1
 80035ce:	0029      	movs	r1, r5
 80035d0:	3174      	adds	r1, #116	; 0x74
 80035d2:	f000 f957 	bl	8003884 <_malloc_r>
 80035d6:	1e04      	subs	r4, r0, #0
 80035d8:	d008      	beq.n	80035ec <__sfmoreglue+0x28>
 80035da:	2100      	movs	r1, #0
 80035dc:	002a      	movs	r2, r5
 80035de:	6001      	str	r1, [r0, #0]
 80035e0:	6046      	str	r6, [r0, #4]
 80035e2:	300c      	adds	r0, #12
 80035e4:	60a0      	str	r0, [r4, #8]
 80035e6:	3268      	adds	r2, #104	; 0x68
 80035e8:	f7ff fd9e 	bl	8003128 <memset>
 80035ec:	0020      	movs	r0, r4
 80035ee:	bd70      	pop	{r4, r5, r6, pc}

080035f0 <__sinit>:
 80035f0:	6983      	ldr	r3, [r0, #24]
 80035f2:	b513      	push	{r0, r1, r4, lr}
 80035f4:	0004      	movs	r4, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d128      	bne.n	800364c <__sinit+0x5c>
 80035fa:	6483      	str	r3, [r0, #72]	; 0x48
 80035fc:	64c3      	str	r3, [r0, #76]	; 0x4c
 80035fe:	6503      	str	r3, [r0, #80]	; 0x50
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <__sinit+0x60>)
 8003602:	4a14      	ldr	r2, [pc, #80]	; (8003654 <__sinit+0x64>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6282      	str	r2, [r0, #40]	; 0x28
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	4298      	cmp	r0, r3
 800360c:	d101      	bne.n	8003612 <__sinit+0x22>
 800360e:	2301      	movs	r3, #1
 8003610:	6183      	str	r3, [r0, #24]
 8003612:	0020      	movs	r0, r4
 8003614:	f000 f820 	bl	8003658 <__sfp>
 8003618:	6060      	str	r0, [r4, #4]
 800361a:	0020      	movs	r0, r4
 800361c:	f000 f81c 	bl	8003658 <__sfp>
 8003620:	60a0      	str	r0, [r4, #8]
 8003622:	0020      	movs	r0, r4
 8003624:	f000 f818 	bl	8003658 <__sfp>
 8003628:	2200      	movs	r2, #0
 800362a:	60e0      	str	r0, [r4, #12]
 800362c:	2104      	movs	r1, #4
 800362e:	6860      	ldr	r0, [r4, #4]
 8003630:	f7ff ff9c 	bl	800356c <std>
 8003634:	2201      	movs	r2, #1
 8003636:	2109      	movs	r1, #9
 8003638:	68a0      	ldr	r0, [r4, #8]
 800363a:	f7ff ff97 	bl	800356c <std>
 800363e:	2202      	movs	r2, #2
 8003640:	2112      	movs	r1, #18
 8003642:	68e0      	ldr	r0, [r4, #12]
 8003644:	f7ff ff92 	bl	800356c <std>
 8003648:	2301      	movs	r3, #1
 800364a:	61a3      	str	r3, [r4, #24]
 800364c:	bd13      	pop	{r0, r1, r4, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	08004230 	.word	0x08004230
 8003654:	080035b5 	.word	0x080035b5

08003658 <__sfp>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <__sfp+0x74>)
 800365c:	0007      	movs	r7, r0
 800365e:	681e      	ldr	r6, [r3, #0]
 8003660:	69b3      	ldr	r3, [r6, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <__sfp+0x14>
 8003666:	0030      	movs	r0, r6
 8003668:	f7ff ffc2 	bl	80035f0 <__sinit>
 800366c:	3648      	adds	r6, #72	; 0x48
 800366e:	68b4      	ldr	r4, [r6, #8]
 8003670:	6873      	ldr	r3, [r6, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	d504      	bpl.n	8003680 <__sfp+0x28>
 8003676:	6833      	ldr	r3, [r6, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <__sfp+0x34>
 800367c:	6836      	ldr	r6, [r6, #0]
 800367e:	e7f6      	b.n	800366e <__sfp+0x16>
 8003680:	220c      	movs	r2, #12
 8003682:	5ea5      	ldrsh	r5, [r4, r2]
 8003684:	2d00      	cmp	r5, #0
 8003686:	d00d      	beq.n	80036a4 <__sfp+0x4c>
 8003688:	3468      	adds	r4, #104	; 0x68
 800368a:	e7f2      	b.n	8003672 <__sfp+0x1a>
 800368c:	2104      	movs	r1, #4
 800368e:	0038      	movs	r0, r7
 8003690:	f7ff ff98 	bl	80035c4 <__sfmoreglue>
 8003694:	6030      	str	r0, [r6, #0]
 8003696:	2800      	cmp	r0, #0
 8003698:	d1f0      	bne.n	800367c <__sfp+0x24>
 800369a:	230c      	movs	r3, #12
 800369c:	0004      	movs	r4, r0
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	0020      	movs	r0, r4
 80036a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a4:	0020      	movs	r0, r4
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <__sfp+0x78>)
 80036a8:	6665      	str	r5, [r4, #100]	; 0x64
 80036aa:	6025      	str	r5, [r4, #0]
 80036ac:	6065      	str	r5, [r4, #4]
 80036ae:	60a5      	str	r5, [r4, #8]
 80036b0:	60e3      	str	r3, [r4, #12]
 80036b2:	6125      	str	r5, [r4, #16]
 80036b4:	6165      	str	r5, [r4, #20]
 80036b6:	61a5      	str	r5, [r4, #24]
 80036b8:	2208      	movs	r2, #8
 80036ba:	0029      	movs	r1, r5
 80036bc:	305c      	adds	r0, #92	; 0x5c
 80036be:	f7ff fd33 	bl	8003128 <memset>
 80036c2:	6365      	str	r5, [r4, #52]	; 0x34
 80036c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80036c6:	64a5      	str	r5, [r4, #72]	; 0x48
 80036c8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80036ca:	e7e9      	b.n	80036a0 <__sfp+0x48>
 80036cc:	08004230 	.word	0x08004230
 80036d0:	ffff0001 	.word	0xffff0001

080036d4 <_fwalk_reent>:
 80036d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036d6:	0004      	movs	r4, r0
 80036d8:	0007      	movs	r7, r0
 80036da:	2600      	movs	r6, #0
 80036dc:	9101      	str	r1, [sp, #4]
 80036de:	3448      	adds	r4, #72	; 0x48
 80036e0:	2c00      	cmp	r4, #0
 80036e2:	d101      	bne.n	80036e8 <_fwalk_reent+0x14>
 80036e4:	0030      	movs	r0, r6
 80036e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036e8:	6863      	ldr	r3, [r4, #4]
 80036ea:	68a5      	ldr	r5, [r4, #8]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	9b00      	ldr	r3, [sp, #0]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	d501      	bpl.n	80036fa <_fwalk_reent+0x26>
 80036f6:	6824      	ldr	r4, [r4, #0]
 80036f8:	e7f2      	b.n	80036e0 <_fwalk_reent+0xc>
 80036fa:	89ab      	ldrh	r3, [r5, #12]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d908      	bls.n	8003712 <_fwalk_reent+0x3e>
 8003700:	220e      	movs	r2, #14
 8003702:	5eab      	ldrsh	r3, [r5, r2]
 8003704:	3301      	adds	r3, #1
 8003706:	d004      	beq.n	8003712 <_fwalk_reent+0x3e>
 8003708:	0029      	movs	r1, r5
 800370a:	0038      	movs	r0, r7
 800370c:	9b01      	ldr	r3, [sp, #4]
 800370e:	4798      	blx	r3
 8003710:	4306      	orrs	r6, r0
 8003712:	3568      	adds	r5, #104	; 0x68
 8003714:	e7eb      	b.n	80036ee <_fwalk_reent+0x1a>
	...

08003718 <__swhatbuf_r>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	000e      	movs	r6, r1
 800371c:	001d      	movs	r5, r3
 800371e:	230e      	movs	r3, #14
 8003720:	5ec9      	ldrsh	r1, [r1, r3]
 8003722:	b096      	sub	sp, #88	; 0x58
 8003724:	0014      	movs	r4, r2
 8003726:	2900      	cmp	r1, #0
 8003728:	da07      	bge.n	800373a <__swhatbuf_r+0x22>
 800372a:	2300      	movs	r3, #0
 800372c:	602b      	str	r3, [r5, #0]
 800372e:	89b3      	ldrh	r3, [r6, #12]
 8003730:	061b      	lsls	r3, r3, #24
 8003732:	d411      	bmi.n	8003758 <__swhatbuf_r+0x40>
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	e00f      	b.n	800375a <__swhatbuf_r+0x42>
 800373a:	466a      	mov	r2, sp
 800373c:	f000 fc6e 	bl	800401c <_fstat_r>
 8003740:	2800      	cmp	r0, #0
 8003742:	dbf2      	blt.n	800372a <__swhatbuf_r+0x12>
 8003744:	22f0      	movs	r2, #240	; 0xf0
 8003746:	9b01      	ldr	r3, [sp, #4]
 8003748:	0212      	lsls	r2, r2, #8
 800374a:	4013      	ands	r3, r2
 800374c:	4a05      	ldr	r2, [pc, #20]	; (8003764 <__swhatbuf_r+0x4c>)
 800374e:	189b      	adds	r3, r3, r2
 8003750:	425a      	negs	r2, r3
 8003752:	4153      	adcs	r3, r2
 8003754:	602b      	str	r3, [r5, #0]
 8003756:	e7ed      	b.n	8003734 <__swhatbuf_r+0x1c>
 8003758:	2340      	movs	r3, #64	; 0x40
 800375a:	2000      	movs	r0, #0
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	b016      	add	sp, #88	; 0x58
 8003760:	bd70      	pop	{r4, r5, r6, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	ffffe000 	.word	0xffffe000

08003768 <__smakebuf_r>:
 8003768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800376a:	2602      	movs	r6, #2
 800376c:	898b      	ldrh	r3, [r1, #12]
 800376e:	0005      	movs	r5, r0
 8003770:	000c      	movs	r4, r1
 8003772:	4233      	tst	r3, r6
 8003774:	d006      	beq.n	8003784 <__smakebuf_r+0x1c>
 8003776:	0023      	movs	r3, r4
 8003778:	3347      	adds	r3, #71	; 0x47
 800377a:	6023      	str	r3, [r4, #0]
 800377c:	6123      	str	r3, [r4, #16]
 800377e:	2301      	movs	r3, #1
 8003780:	6163      	str	r3, [r4, #20]
 8003782:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003784:	ab01      	add	r3, sp, #4
 8003786:	466a      	mov	r2, sp
 8003788:	f7ff ffc6 	bl	8003718 <__swhatbuf_r>
 800378c:	9900      	ldr	r1, [sp, #0]
 800378e:	0007      	movs	r7, r0
 8003790:	0028      	movs	r0, r5
 8003792:	f000 f877 	bl	8003884 <_malloc_r>
 8003796:	2800      	cmp	r0, #0
 8003798:	d108      	bne.n	80037ac <__smakebuf_r+0x44>
 800379a:	220c      	movs	r2, #12
 800379c:	5ea3      	ldrsh	r3, [r4, r2]
 800379e:	059a      	lsls	r2, r3, #22
 80037a0:	d4ef      	bmi.n	8003782 <__smakebuf_r+0x1a>
 80037a2:	2203      	movs	r2, #3
 80037a4:	4393      	bics	r3, r2
 80037a6:	431e      	orrs	r6, r3
 80037a8:	81a6      	strh	r6, [r4, #12]
 80037aa:	e7e4      	b.n	8003776 <__smakebuf_r+0xe>
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <__smakebuf_r+0x84>)
 80037ae:	62ab      	str	r3, [r5, #40]	; 0x28
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	89a2      	ldrh	r2, [r4, #12]
 80037b4:	6020      	str	r0, [r4, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	9b00      	ldr	r3, [sp, #0]
 80037bc:	6120      	str	r0, [r4, #16]
 80037be:	6163      	str	r3, [r4, #20]
 80037c0:	9b01      	ldr	r3, [sp, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <__smakebuf_r+0x7a>
 80037c6:	230e      	movs	r3, #14
 80037c8:	5ee1      	ldrsh	r1, [r4, r3]
 80037ca:	0028      	movs	r0, r5
 80037cc:	f000 fc38 	bl	8004040 <_isatty_r>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d006      	beq.n	80037e2 <__smakebuf_r+0x7a>
 80037d4:	2203      	movs	r2, #3
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	4393      	bics	r3, r2
 80037da:	001a      	movs	r2, r3
 80037dc:	2301      	movs	r3, #1
 80037de:	4313      	orrs	r3, r2
 80037e0:	81a3      	strh	r3, [r4, #12]
 80037e2:	89a0      	ldrh	r0, [r4, #12]
 80037e4:	4338      	orrs	r0, r7
 80037e6:	81a0      	strh	r0, [r4, #12]
 80037e8:	e7cb      	b.n	8003782 <__smakebuf_r+0x1a>
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	080035b5 	.word	0x080035b5

080037f0 <_free_r>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	0005      	movs	r5, r0
 80037f4:	2900      	cmp	r1, #0
 80037f6:	d010      	beq.n	800381a <_free_r+0x2a>
 80037f8:	1f0c      	subs	r4, r1, #4
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	da00      	bge.n	8003802 <_free_r+0x12>
 8003800:	18e4      	adds	r4, r4, r3
 8003802:	0028      	movs	r0, r5
 8003804:	f000 fc4d 	bl	80040a2 <__malloc_lock>
 8003808:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <_free_r+0x90>)
 800380a:	6813      	ldr	r3, [r2, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <_free_r+0x2c>
 8003810:	6063      	str	r3, [r4, #4]
 8003812:	6014      	str	r4, [r2, #0]
 8003814:	0028      	movs	r0, r5
 8003816:	f000 fc45 	bl	80040a4 <__malloc_unlock>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	42a3      	cmp	r3, r4
 800381e:	d909      	bls.n	8003834 <_free_r+0x44>
 8003820:	6821      	ldr	r1, [r4, #0]
 8003822:	1860      	adds	r0, r4, r1
 8003824:	4283      	cmp	r3, r0
 8003826:	d1f3      	bne.n	8003810 <_free_r+0x20>
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	1841      	adds	r1, r0, r1
 800382e:	6021      	str	r1, [r4, #0]
 8003830:	e7ee      	b.n	8003810 <_free_r+0x20>
 8003832:	0013      	movs	r3, r2
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	2a00      	cmp	r2, #0
 8003838:	d001      	beq.n	800383e <_free_r+0x4e>
 800383a:	42a2      	cmp	r2, r4
 800383c:	d9f9      	bls.n	8003832 <_free_r+0x42>
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	1858      	adds	r0, r3, r1
 8003842:	42a0      	cmp	r0, r4
 8003844:	d10b      	bne.n	800385e <_free_r+0x6e>
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	1809      	adds	r1, r1, r0
 800384a:	1858      	adds	r0, r3, r1
 800384c:	6019      	str	r1, [r3, #0]
 800384e:	4282      	cmp	r2, r0
 8003850:	d1e0      	bne.n	8003814 <_free_r+0x24>
 8003852:	6810      	ldr	r0, [r2, #0]
 8003854:	6852      	ldr	r2, [r2, #4]
 8003856:	1841      	adds	r1, r0, r1
 8003858:	6019      	str	r1, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	e7da      	b.n	8003814 <_free_r+0x24>
 800385e:	42a0      	cmp	r0, r4
 8003860:	d902      	bls.n	8003868 <_free_r+0x78>
 8003862:	230c      	movs	r3, #12
 8003864:	602b      	str	r3, [r5, #0]
 8003866:	e7d5      	b.n	8003814 <_free_r+0x24>
 8003868:	6821      	ldr	r1, [r4, #0]
 800386a:	1860      	adds	r0, r4, r1
 800386c:	4282      	cmp	r2, r0
 800386e:	d103      	bne.n	8003878 <_free_r+0x88>
 8003870:	6810      	ldr	r0, [r2, #0]
 8003872:	6852      	ldr	r2, [r2, #4]
 8003874:	1841      	adds	r1, r0, r1
 8003876:	6021      	str	r1, [r4, #0]
 8003878:	6062      	str	r2, [r4, #4]
 800387a:	605c      	str	r4, [r3, #4]
 800387c:	e7ca      	b.n	8003814 <_free_r+0x24>
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	2000008c 	.word	0x2000008c

08003884 <_malloc_r>:
 8003884:	2303      	movs	r3, #3
 8003886:	b570      	push	{r4, r5, r6, lr}
 8003888:	1ccd      	adds	r5, r1, #3
 800388a:	439d      	bics	r5, r3
 800388c:	3508      	adds	r5, #8
 800388e:	0006      	movs	r6, r0
 8003890:	2d0c      	cmp	r5, #12
 8003892:	d21e      	bcs.n	80038d2 <_malloc_r+0x4e>
 8003894:	250c      	movs	r5, #12
 8003896:	42a9      	cmp	r1, r5
 8003898:	d81d      	bhi.n	80038d6 <_malloc_r+0x52>
 800389a:	0030      	movs	r0, r6
 800389c:	f000 fc01 	bl	80040a2 <__malloc_lock>
 80038a0:	4a25      	ldr	r2, [pc, #148]	; (8003938 <_malloc_r+0xb4>)
 80038a2:	6814      	ldr	r4, [r2, #0]
 80038a4:	0021      	movs	r1, r4
 80038a6:	2900      	cmp	r1, #0
 80038a8:	d119      	bne.n	80038de <_malloc_r+0x5a>
 80038aa:	4c24      	ldr	r4, [pc, #144]	; (800393c <_malloc_r+0xb8>)
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <_malloc_r+0x36>
 80038b2:	0030      	movs	r0, r6
 80038b4:	f000 fb2e 	bl	8003f14 <_sbrk_r>
 80038b8:	6020      	str	r0, [r4, #0]
 80038ba:	0029      	movs	r1, r5
 80038bc:	0030      	movs	r0, r6
 80038be:	f000 fb29 	bl	8003f14 <_sbrk_r>
 80038c2:	1c43      	adds	r3, r0, #1
 80038c4:	d12b      	bne.n	800391e <_malloc_r+0x9a>
 80038c6:	230c      	movs	r3, #12
 80038c8:	0030      	movs	r0, r6
 80038ca:	6033      	str	r3, [r6, #0]
 80038cc:	f000 fbea 	bl	80040a4 <__malloc_unlock>
 80038d0:	e003      	b.n	80038da <_malloc_r+0x56>
 80038d2:	2d00      	cmp	r5, #0
 80038d4:	dadf      	bge.n	8003896 <_malloc_r+0x12>
 80038d6:	230c      	movs	r3, #12
 80038d8:	6033      	str	r3, [r6, #0]
 80038da:	2000      	movs	r0, #0
 80038dc:	bd70      	pop	{r4, r5, r6, pc}
 80038de:	680b      	ldr	r3, [r1, #0]
 80038e0:	1b5b      	subs	r3, r3, r5
 80038e2:	d419      	bmi.n	8003918 <_malloc_r+0x94>
 80038e4:	2b0b      	cmp	r3, #11
 80038e6:	d903      	bls.n	80038f0 <_malloc_r+0x6c>
 80038e8:	600b      	str	r3, [r1, #0]
 80038ea:	18cc      	adds	r4, r1, r3
 80038ec:	6025      	str	r5, [r4, #0]
 80038ee:	e003      	b.n	80038f8 <_malloc_r+0x74>
 80038f0:	684b      	ldr	r3, [r1, #4]
 80038f2:	428c      	cmp	r4, r1
 80038f4:	d10d      	bne.n	8003912 <_malloc_r+0x8e>
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	0030      	movs	r0, r6
 80038fa:	f000 fbd3 	bl	80040a4 <__malloc_unlock>
 80038fe:	0020      	movs	r0, r4
 8003900:	2207      	movs	r2, #7
 8003902:	300b      	adds	r0, #11
 8003904:	1d23      	adds	r3, r4, #4
 8003906:	4390      	bics	r0, r2
 8003908:	1ac3      	subs	r3, r0, r3
 800390a:	d0e7      	beq.n	80038dc <_malloc_r+0x58>
 800390c:	425a      	negs	r2, r3
 800390e:	50e2      	str	r2, [r4, r3]
 8003910:	e7e4      	b.n	80038dc <_malloc_r+0x58>
 8003912:	6063      	str	r3, [r4, #4]
 8003914:	000c      	movs	r4, r1
 8003916:	e7ef      	b.n	80038f8 <_malloc_r+0x74>
 8003918:	000c      	movs	r4, r1
 800391a:	6849      	ldr	r1, [r1, #4]
 800391c:	e7c3      	b.n	80038a6 <_malloc_r+0x22>
 800391e:	2303      	movs	r3, #3
 8003920:	1cc4      	adds	r4, r0, #3
 8003922:	439c      	bics	r4, r3
 8003924:	42a0      	cmp	r0, r4
 8003926:	d0e1      	beq.n	80038ec <_malloc_r+0x68>
 8003928:	1a21      	subs	r1, r4, r0
 800392a:	0030      	movs	r0, r6
 800392c:	f000 faf2 	bl	8003f14 <_sbrk_r>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d1db      	bne.n	80038ec <_malloc_r+0x68>
 8003934:	e7c7      	b.n	80038c6 <_malloc_r+0x42>
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	2000008c 	.word	0x2000008c
 800393c:	20000090 	.word	0x20000090

08003940 <__sfputc_r>:
 8003940:	6893      	ldr	r3, [r2, #8]
 8003942:	b510      	push	{r4, lr}
 8003944:	3b01      	subs	r3, #1
 8003946:	6093      	str	r3, [r2, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	da04      	bge.n	8003956 <__sfputc_r+0x16>
 800394c:	6994      	ldr	r4, [r2, #24]
 800394e:	42a3      	cmp	r3, r4
 8003950:	db07      	blt.n	8003962 <__sfputc_r+0x22>
 8003952:	290a      	cmp	r1, #10
 8003954:	d005      	beq.n	8003962 <__sfputc_r+0x22>
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	1c58      	adds	r0, r3, #1
 800395a:	6010      	str	r0, [r2, #0]
 800395c:	7019      	strb	r1, [r3, #0]
 800395e:	0008      	movs	r0, r1
 8003960:	bd10      	pop	{r4, pc}
 8003962:	f7ff fc81 	bl	8003268 <__swbuf_r>
 8003966:	0001      	movs	r1, r0
 8003968:	e7f9      	b.n	800395e <__sfputc_r+0x1e>

0800396a <__sfputs_r>:
 800396a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396c:	0006      	movs	r6, r0
 800396e:	000f      	movs	r7, r1
 8003970:	0014      	movs	r4, r2
 8003972:	18d5      	adds	r5, r2, r3
 8003974:	42ac      	cmp	r4, r5
 8003976:	d101      	bne.n	800397c <__sfputs_r+0x12>
 8003978:	2000      	movs	r0, #0
 800397a:	e007      	b.n	800398c <__sfputs_r+0x22>
 800397c:	7821      	ldrb	r1, [r4, #0]
 800397e:	003a      	movs	r2, r7
 8003980:	0030      	movs	r0, r6
 8003982:	f7ff ffdd 	bl	8003940 <__sfputc_r>
 8003986:	3401      	adds	r4, #1
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d1f3      	bne.n	8003974 <__sfputs_r+0xa>
 800398c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003990 <_vfiprintf_r>:
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	b0a1      	sub	sp, #132	; 0x84
 8003994:	9003      	str	r0, [sp, #12]
 8003996:	000f      	movs	r7, r1
 8003998:	0016      	movs	r6, r2
 800399a:	001d      	movs	r5, r3
 800399c:	2800      	cmp	r0, #0
 800399e:	d005      	beq.n	80039ac <_vfiprintf_r+0x1c>
 80039a0:	6983      	ldr	r3, [r0, #24]
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <_vfiprintf_r+0x1c>
 80039a8:	f7ff fe22 	bl	80035f0 <__sinit>
 80039ac:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <_vfiprintf_r+0x20c>)
 80039ae:	429f      	cmp	r7, r3
 80039b0:	d15c      	bne.n	8003a6c <_vfiprintf_r+0xdc>
 80039b2:	9b03      	ldr	r3, [sp, #12]
 80039b4:	685f      	ldr	r7, [r3, #4]
 80039b6:	89bb      	ldrh	r3, [r7, #12]
 80039b8:	071b      	lsls	r3, r3, #28
 80039ba:	d563      	bpl.n	8003a84 <_vfiprintf_r+0xf4>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d060      	beq.n	8003a84 <_vfiprintf_r+0xf4>
 80039c2:	2300      	movs	r3, #0
 80039c4:	ac08      	add	r4, sp, #32
 80039c6:	6163      	str	r3, [r4, #20]
 80039c8:	3320      	adds	r3, #32
 80039ca:	7663      	strb	r3, [r4, #25]
 80039cc:	3310      	adds	r3, #16
 80039ce:	76a3      	strb	r3, [r4, #26]
 80039d0:	9507      	str	r5, [sp, #28]
 80039d2:	0035      	movs	r5, r6
 80039d4:	782b      	ldrb	r3, [r5, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <_vfiprintf_r+0x4e>
 80039da:	2b25      	cmp	r3, #37	; 0x25
 80039dc:	d15c      	bne.n	8003a98 <_vfiprintf_r+0x108>
 80039de:	1bab      	subs	r3, r5, r6
 80039e0:	9305      	str	r3, [sp, #20]
 80039e2:	d00c      	beq.n	80039fe <_vfiprintf_r+0x6e>
 80039e4:	0032      	movs	r2, r6
 80039e6:	0039      	movs	r1, r7
 80039e8:	9803      	ldr	r0, [sp, #12]
 80039ea:	f7ff ffbe 	bl	800396a <__sfputs_r>
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	d100      	bne.n	80039f4 <_vfiprintf_r+0x64>
 80039f2:	e0c4      	b.n	8003b7e <_vfiprintf_r+0x1ee>
 80039f4:	6962      	ldr	r2, [r4, #20]
 80039f6:	9b05      	ldr	r3, [sp, #20]
 80039f8:	4694      	mov	ip, r2
 80039fa:	4463      	add	r3, ip
 80039fc:	6163      	str	r3, [r4, #20]
 80039fe:	782b      	ldrb	r3, [r5, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d100      	bne.n	8003a06 <_vfiprintf_r+0x76>
 8003a04:	e0bb      	b.n	8003b7e <_vfiprintf_r+0x1ee>
 8003a06:	2201      	movs	r2, #1
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4252      	negs	r2, r2
 8003a0c:	6062      	str	r2, [r4, #4]
 8003a0e:	a904      	add	r1, sp, #16
 8003a10:	3254      	adds	r2, #84	; 0x54
 8003a12:	1852      	adds	r2, r2, r1
 8003a14:	1c6e      	adds	r6, r5, #1
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	60e3      	str	r3, [r4, #12]
 8003a1a:	60a3      	str	r3, [r4, #8]
 8003a1c:	7013      	strb	r3, [r2, #0]
 8003a1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a20:	7831      	ldrb	r1, [r6, #0]
 8003a22:	2205      	movs	r2, #5
 8003a24:	485e      	ldr	r0, [pc, #376]	; (8003ba0 <_vfiprintf_r+0x210>)
 8003a26:	f000 fb31 	bl	800408c <memchr>
 8003a2a:	1c75      	adds	r5, r6, #1
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d135      	bne.n	8003a9c <_vfiprintf_r+0x10c>
 8003a30:	6822      	ldr	r2, [r4, #0]
 8003a32:	06d3      	lsls	r3, r2, #27
 8003a34:	d504      	bpl.n	8003a40 <_vfiprintf_r+0xb0>
 8003a36:	2353      	movs	r3, #83	; 0x53
 8003a38:	a904      	add	r1, sp, #16
 8003a3a:	185b      	adds	r3, r3, r1
 8003a3c:	2120      	movs	r1, #32
 8003a3e:	7019      	strb	r1, [r3, #0]
 8003a40:	0713      	lsls	r3, r2, #28
 8003a42:	d504      	bpl.n	8003a4e <_vfiprintf_r+0xbe>
 8003a44:	2353      	movs	r3, #83	; 0x53
 8003a46:	a904      	add	r1, sp, #16
 8003a48:	185b      	adds	r3, r3, r1
 8003a4a:	212b      	movs	r1, #43	; 0x2b
 8003a4c:	7019      	strb	r1, [r3, #0]
 8003a4e:	7833      	ldrb	r3, [r6, #0]
 8003a50:	2b2a      	cmp	r3, #42	; 0x2a
 8003a52:	d02c      	beq.n	8003aae <_vfiprintf_r+0x11e>
 8003a54:	0035      	movs	r5, r6
 8003a56:	2100      	movs	r1, #0
 8003a58:	200a      	movs	r0, #10
 8003a5a:	68e3      	ldr	r3, [r4, #12]
 8003a5c:	782a      	ldrb	r2, [r5, #0]
 8003a5e:	1c6e      	adds	r6, r5, #1
 8003a60:	3a30      	subs	r2, #48	; 0x30
 8003a62:	2a09      	cmp	r2, #9
 8003a64:	d964      	bls.n	8003b30 <_vfiprintf_r+0x1a0>
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d02e      	beq.n	8003ac8 <_vfiprintf_r+0x138>
 8003a6a:	e026      	b.n	8003aba <_vfiprintf_r+0x12a>
 8003a6c:	4b4d      	ldr	r3, [pc, #308]	; (8003ba4 <_vfiprintf_r+0x214>)
 8003a6e:	429f      	cmp	r7, r3
 8003a70:	d102      	bne.n	8003a78 <_vfiprintf_r+0xe8>
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	689f      	ldr	r7, [r3, #8]
 8003a76:	e79e      	b.n	80039b6 <_vfiprintf_r+0x26>
 8003a78:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <_vfiprintf_r+0x218>)
 8003a7a:	429f      	cmp	r7, r3
 8003a7c:	d19b      	bne.n	80039b6 <_vfiprintf_r+0x26>
 8003a7e:	9b03      	ldr	r3, [sp, #12]
 8003a80:	68df      	ldr	r7, [r3, #12]
 8003a82:	e798      	b.n	80039b6 <_vfiprintf_r+0x26>
 8003a84:	0039      	movs	r1, r7
 8003a86:	9803      	ldr	r0, [sp, #12]
 8003a88:	f7ff fc44 	bl	8003314 <__swsetup_r>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d098      	beq.n	80039c2 <_vfiprintf_r+0x32>
 8003a90:	2001      	movs	r0, #1
 8003a92:	4240      	negs	r0, r0
 8003a94:	b021      	add	sp, #132	; 0x84
 8003a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a98:	3501      	adds	r5, #1
 8003a9a:	e79b      	b.n	80039d4 <_vfiprintf_r+0x44>
 8003a9c:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <_vfiprintf_r+0x210>)
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	1ac0      	subs	r0, r0, r3
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	4083      	lsls	r3, r0
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	002e      	movs	r6, r5
 8003aac:	e7b8      	b.n	8003a20 <_vfiprintf_r+0x90>
 8003aae:	9b07      	ldr	r3, [sp, #28]
 8003ab0:	1d19      	adds	r1, r3, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	9107      	str	r1, [sp, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	db01      	blt.n	8003abe <_vfiprintf_r+0x12e>
 8003aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8003abc:	e004      	b.n	8003ac8 <_vfiprintf_r+0x138>
 8003abe:	425b      	negs	r3, r3
 8003ac0:	60e3      	str	r3, [r4, #12]
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	782b      	ldrb	r3, [r5, #0]
 8003aca:	2b2e      	cmp	r3, #46	; 0x2e
 8003acc:	d10a      	bne.n	8003ae4 <_vfiprintf_r+0x154>
 8003ace:	786b      	ldrb	r3, [r5, #1]
 8003ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad2:	d135      	bne.n	8003b40 <_vfiprintf_r+0x1b0>
 8003ad4:	9b07      	ldr	r3, [sp, #28]
 8003ad6:	3502      	adds	r5, #2
 8003ad8:	1d1a      	adds	r2, r3, #4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	9207      	str	r2, [sp, #28]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	db2b      	blt.n	8003b3a <_vfiprintf_r+0x1aa>
 8003ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae4:	4e31      	ldr	r6, [pc, #196]	; (8003bac <_vfiprintf_r+0x21c>)
 8003ae6:	7829      	ldrb	r1, [r5, #0]
 8003ae8:	2203      	movs	r2, #3
 8003aea:	0030      	movs	r0, r6
 8003aec:	f000 face 	bl	800408c <memchr>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d006      	beq.n	8003b02 <_vfiprintf_r+0x172>
 8003af4:	2340      	movs	r3, #64	; 0x40
 8003af6:	1b80      	subs	r0, r0, r6
 8003af8:	4083      	lsls	r3, r0
 8003afa:	6822      	ldr	r2, [r4, #0]
 8003afc:	3501      	adds	r5, #1
 8003afe:	4313      	orrs	r3, r2
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	7829      	ldrb	r1, [r5, #0]
 8003b04:	2206      	movs	r2, #6
 8003b06:	482a      	ldr	r0, [pc, #168]	; (8003bb0 <_vfiprintf_r+0x220>)
 8003b08:	1c6e      	adds	r6, r5, #1
 8003b0a:	7621      	strb	r1, [r4, #24]
 8003b0c:	f000 fabe 	bl	800408c <memchr>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d03a      	beq.n	8003b8a <_vfiprintf_r+0x1fa>
 8003b14:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <_vfiprintf_r+0x224>)
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d125      	bne.n	8003b66 <_vfiprintf_r+0x1d6>
 8003b1a:	2207      	movs	r2, #7
 8003b1c:	9b07      	ldr	r3, [sp, #28]
 8003b1e:	3307      	adds	r3, #7
 8003b20:	4393      	bics	r3, r2
 8003b22:	3308      	adds	r3, #8
 8003b24:	9307      	str	r3, [sp, #28]
 8003b26:	6963      	ldr	r3, [r4, #20]
 8003b28:	9a04      	ldr	r2, [sp, #16]
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	6163      	str	r3, [r4, #20]
 8003b2e:	e750      	b.n	80039d2 <_vfiprintf_r+0x42>
 8003b30:	4343      	muls	r3, r0
 8003b32:	2101      	movs	r1, #1
 8003b34:	189b      	adds	r3, r3, r2
 8003b36:	0035      	movs	r5, r6
 8003b38:	e790      	b.n	8003a5c <_vfiprintf_r+0xcc>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	425b      	negs	r3, r3
 8003b3e:	e7d0      	b.n	8003ae2 <_vfiprintf_r+0x152>
 8003b40:	2300      	movs	r3, #0
 8003b42:	200a      	movs	r0, #10
 8003b44:	001a      	movs	r2, r3
 8003b46:	3501      	adds	r5, #1
 8003b48:	6063      	str	r3, [r4, #4]
 8003b4a:	7829      	ldrb	r1, [r5, #0]
 8003b4c:	1c6e      	adds	r6, r5, #1
 8003b4e:	3930      	subs	r1, #48	; 0x30
 8003b50:	2909      	cmp	r1, #9
 8003b52:	d903      	bls.n	8003b5c <_vfiprintf_r+0x1cc>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0c5      	beq.n	8003ae4 <_vfiprintf_r+0x154>
 8003b58:	9209      	str	r2, [sp, #36]	; 0x24
 8003b5a:	e7c3      	b.n	8003ae4 <_vfiprintf_r+0x154>
 8003b5c:	4342      	muls	r2, r0
 8003b5e:	2301      	movs	r3, #1
 8003b60:	1852      	adds	r2, r2, r1
 8003b62:	0035      	movs	r5, r6
 8003b64:	e7f1      	b.n	8003b4a <_vfiprintf_r+0x1ba>
 8003b66:	ab07      	add	r3, sp, #28
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	003a      	movs	r2, r7
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <_vfiprintf_r+0x228>)
 8003b6e:	0021      	movs	r1, r4
 8003b70:	9803      	ldr	r0, [sp, #12]
 8003b72:	e000      	b.n	8003b76 <_vfiprintf_r+0x1e6>
 8003b74:	bf00      	nop
 8003b76:	9004      	str	r0, [sp, #16]
 8003b78:	9b04      	ldr	r3, [sp, #16]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	d1d3      	bne.n	8003b26 <_vfiprintf_r+0x196>
 8003b7e:	89bb      	ldrh	r3, [r7, #12]
 8003b80:	065b      	lsls	r3, r3, #25
 8003b82:	d500      	bpl.n	8003b86 <_vfiprintf_r+0x1f6>
 8003b84:	e784      	b.n	8003a90 <_vfiprintf_r+0x100>
 8003b86:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b88:	e784      	b.n	8003a94 <_vfiprintf_r+0x104>
 8003b8a:	ab07      	add	r3, sp, #28
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	003a      	movs	r2, r7
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <_vfiprintf_r+0x228>)
 8003b92:	0021      	movs	r1, r4
 8003b94:	9803      	ldr	r0, [sp, #12]
 8003b96:	f000 f87f 	bl	8003c98 <_printf_i>
 8003b9a:	e7ec      	b.n	8003b76 <_vfiprintf_r+0x1e6>
 8003b9c:	08004254 	.word	0x08004254
 8003ba0:	08004294 	.word	0x08004294
 8003ba4:	08004274 	.word	0x08004274
 8003ba8:	08004234 	.word	0x08004234
 8003bac:	0800429a 	.word	0x0800429a
 8003bb0:	0800429e 	.word	0x0800429e
 8003bb4:	00000000 	.word	0x00000000
 8003bb8:	0800396b 	.word	0x0800396b

08003bbc <_printf_common>:
 8003bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bbe:	0015      	movs	r5, r2
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	688a      	ldr	r2, [r1, #8]
 8003bc4:	690b      	ldr	r3, [r1, #16]
 8003bc6:	9000      	str	r0, [sp, #0]
 8003bc8:	000c      	movs	r4, r1
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	da00      	bge.n	8003bd0 <_printf_common+0x14>
 8003bce:	0013      	movs	r3, r2
 8003bd0:	0022      	movs	r2, r4
 8003bd2:	602b      	str	r3, [r5, #0]
 8003bd4:	3243      	adds	r2, #67	; 0x43
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	2a00      	cmp	r2, #0
 8003bda:	d001      	beq.n	8003be0 <_printf_common+0x24>
 8003bdc:	3301      	adds	r3, #1
 8003bde:	602b      	str	r3, [r5, #0]
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	069b      	lsls	r3, r3, #26
 8003be4:	d502      	bpl.n	8003bec <_printf_common+0x30>
 8003be6:	682b      	ldr	r3, [r5, #0]
 8003be8:	3302      	adds	r3, #2
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	2706      	movs	r7, #6
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	401f      	ands	r7, r3
 8003bf2:	d027      	beq.n	8003c44 <_printf_common+0x88>
 8003bf4:	0023      	movs	r3, r4
 8003bf6:	3343      	adds	r3, #67	; 0x43
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	1e5a      	subs	r2, r3, #1
 8003bfc:	4193      	sbcs	r3, r2
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	0692      	lsls	r2, r2, #26
 8003c02:	d430      	bmi.n	8003c66 <_printf_common+0xaa>
 8003c04:	0022      	movs	r2, r4
 8003c06:	9901      	ldr	r1, [sp, #4]
 8003c08:	3243      	adds	r2, #67	; 0x43
 8003c0a:	9800      	ldr	r0, [sp, #0]
 8003c0c:	9e08      	ldr	r6, [sp, #32]
 8003c0e:	47b0      	blx	r6
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d025      	beq.n	8003c60 <_printf_common+0xa4>
 8003c14:	2306      	movs	r3, #6
 8003c16:	6820      	ldr	r0, [r4, #0]
 8003c18:	682a      	ldr	r2, [r5, #0]
 8003c1a:	68e1      	ldr	r1, [r4, #12]
 8003c1c:	4003      	ands	r3, r0
 8003c1e:	2500      	movs	r5, #0
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d103      	bne.n	8003c2c <_printf_common+0x70>
 8003c24:	1a8d      	subs	r5, r1, r2
 8003c26:	43eb      	mvns	r3, r5
 8003c28:	17db      	asrs	r3, r3, #31
 8003c2a:	401d      	ands	r5, r3
 8003c2c:	68a3      	ldr	r3, [r4, #8]
 8003c2e:	6922      	ldr	r2, [r4, #16]
 8003c30:	4293      	cmp	r3, r2
 8003c32:	dd01      	ble.n	8003c38 <_printf_common+0x7c>
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	18ed      	adds	r5, r5, r3
 8003c38:	2700      	movs	r7, #0
 8003c3a:	42bd      	cmp	r5, r7
 8003c3c:	d120      	bne.n	8003c80 <_printf_common+0xc4>
 8003c3e:	2000      	movs	r0, #0
 8003c40:	e010      	b.n	8003c64 <_printf_common+0xa8>
 8003c42:	3701      	adds	r7, #1
 8003c44:	68e3      	ldr	r3, [r4, #12]
 8003c46:	682a      	ldr	r2, [r5, #0]
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	42bb      	cmp	r3, r7
 8003c4c:	ddd2      	ble.n	8003bf4 <_printf_common+0x38>
 8003c4e:	0022      	movs	r2, r4
 8003c50:	2301      	movs	r3, #1
 8003c52:	3219      	adds	r2, #25
 8003c54:	9901      	ldr	r1, [sp, #4]
 8003c56:	9800      	ldr	r0, [sp, #0]
 8003c58:	9e08      	ldr	r6, [sp, #32]
 8003c5a:	47b0      	blx	r6
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d1f0      	bne.n	8003c42 <_printf_common+0x86>
 8003c60:	2001      	movs	r0, #1
 8003c62:	4240      	negs	r0, r0
 8003c64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c66:	2030      	movs	r0, #48	; 0x30
 8003c68:	18e1      	adds	r1, r4, r3
 8003c6a:	3143      	adds	r1, #67	; 0x43
 8003c6c:	7008      	strb	r0, [r1, #0]
 8003c6e:	0021      	movs	r1, r4
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	3145      	adds	r1, #69	; 0x45
 8003c74:	7809      	ldrb	r1, [r1, #0]
 8003c76:	18a2      	adds	r2, r4, r2
 8003c78:	3243      	adds	r2, #67	; 0x43
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	7011      	strb	r1, [r2, #0]
 8003c7e:	e7c1      	b.n	8003c04 <_printf_common+0x48>
 8003c80:	0022      	movs	r2, r4
 8003c82:	2301      	movs	r3, #1
 8003c84:	321a      	adds	r2, #26
 8003c86:	9901      	ldr	r1, [sp, #4]
 8003c88:	9800      	ldr	r0, [sp, #0]
 8003c8a:	9e08      	ldr	r6, [sp, #32]
 8003c8c:	47b0      	blx	r6
 8003c8e:	1c43      	adds	r3, r0, #1
 8003c90:	d0e6      	beq.n	8003c60 <_printf_common+0xa4>
 8003c92:	3701      	adds	r7, #1
 8003c94:	e7d1      	b.n	8003c3a <_printf_common+0x7e>
	...

08003c98 <_printf_i>:
 8003c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	9204      	str	r2, [sp, #16]
 8003c9e:	000a      	movs	r2, r1
 8003ca0:	3243      	adds	r2, #67	; 0x43
 8003ca2:	9305      	str	r3, [sp, #20]
 8003ca4:	9003      	str	r0, [sp, #12]
 8003ca6:	9202      	str	r2, [sp, #8]
 8003ca8:	7e0a      	ldrb	r2, [r1, #24]
 8003caa:	000c      	movs	r4, r1
 8003cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cae:	2a6e      	cmp	r2, #110	; 0x6e
 8003cb0:	d100      	bne.n	8003cb4 <_printf_i+0x1c>
 8003cb2:	e086      	b.n	8003dc2 <_printf_i+0x12a>
 8003cb4:	d81f      	bhi.n	8003cf6 <_printf_i+0x5e>
 8003cb6:	2a63      	cmp	r2, #99	; 0x63
 8003cb8:	d033      	beq.n	8003d22 <_printf_i+0x8a>
 8003cba:	d808      	bhi.n	8003cce <_printf_i+0x36>
 8003cbc:	2a00      	cmp	r2, #0
 8003cbe:	d100      	bne.n	8003cc2 <_printf_i+0x2a>
 8003cc0:	e08c      	b.n	8003ddc <_printf_i+0x144>
 8003cc2:	2a58      	cmp	r2, #88	; 0x58
 8003cc4:	d04d      	beq.n	8003d62 <_printf_i+0xca>
 8003cc6:	0025      	movs	r5, r4
 8003cc8:	3542      	adds	r5, #66	; 0x42
 8003cca:	702a      	strb	r2, [r5, #0]
 8003ccc:	e030      	b.n	8003d30 <_printf_i+0x98>
 8003cce:	2a64      	cmp	r2, #100	; 0x64
 8003cd0:	d001      	beq.n	8003cd6 <_printf_i+0x3e>
 8003cd2:	2a69      	cmp	r2, #105	; 0x69
 8003cd4:	d1f7      	bne.n	8003cc6 <_printf_i+0x2e>
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	6825      	ldr	r5, [r4, #0]
 8003cda:	1d0a      	adds	r2, r1, #4
 8003cdc:	0628      	lsls	r0, r5, #24
 8003cde:	d529      	bpl.n	8003d34 <_printf_i+0x9c>
 8003ce0:	6808      	ldr	r0, [r1, #0]
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	da03      	bge.n	8003cf0 <_printf_i+0x58>
 8003ce8:	232d      	movs	r3, #45	; 0x2d
 8003cea:	9a02      	ldr	r2, [sp, #8]
 8003cec:	4240      	negs	r0, r0
 8003cee:	7013      	strb	r3, [r2, #0]
 8003cf0:	4e6b      	ldr	r6, [pc, #428]	; (8003ea0 <_printf_i+0x208>)
 8003cf2:	270a      	movs	r7, #10
 8003cf4:	e04f      	b.n	8003d96 <_printf_i+0xfe>
 8003cf6:	2a73      	cmp	r2, #115	; 0x73
 8003cf8:	d074      	beq.n	8003de4 <_printf_i+0x14c>
 8003cfa:	d808      	bhi.n	8003d0e <_printf_i+0x76>
 8003cfc:	2a6f      	cmp	r2, #111	; 0x6f
 8003cfe:	d01f      	beq.n	8003d40 <_printf_i+0xa8>
 8003d00:	2a70      	cmp	r2, #112	; 0x70
 8003d02:	d1e0      	bne.n	8003cc6 <_printf_i+0x2e>
 8003d04:	2220      	movs	r2, #32
 8003d06:	6809      	ldr	r1, [r1, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	6022      	str	r2, [r4, #0]
 8003d0c:	e003      	b.n	8003d16 <_printf_i+0x7e>
 8003d0e:	2a75      	cmp	r2, #117	; 0x75
 8003d10:	d016      	beq.n	8003d40 <_printf_i+0xa8>
 8003d12:	2a78      	cmp	r2, #120	; 0x78
 8003d14:	d1d7      	bne.n	8003cc6 <_printf_i+0x2e>
 8003d16:	0022      	movs	r2, r4
 8003d18:	2178      	movs	r1, #120	; 0x78
 8003d1a:	3245      	adds	r2, #69	; 0x45
 8003d1c:	7011      	strb	r1, [r2, #0]
 8003d1e:	4e61      	ldr	r6, [pc, #388]	; (8003ea4 <_printf_i+0x20c>)
 8003d20:	e022      	b.n	8003d68 <_printf_i+0xd0>
 8003d22:	0025      	movs	r5, r4
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	3542      	adds	r5, #66	; 0x42
 8003d28:	1d11      	adds	r1, r2, #4
 8003d2a:	6019      	str	r1, [r3, #0]
 8003d2c:	6813      	ldr	r3, [r2, #0]
 8003d2e:	702b      	strb	r3, [r5, #0]
 8003d30:	2301      	movs	r3, #1
 8003d32:	e065      	b.n	8003e00 <_printf_i+0x168>
 8003d34:	6808      	ldr	r0, [r1, #0]
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	0669      	lsls	r1, r5, #25
 8003d3a:	d5d3      	bpl.n	8003ce4 <_printf_i+0x4c>
 8003d3c:	b200      	sxth	r0, r0
 8003d3e:	e7d1      	b.n	8003ce4 <_printf_i+0x4c>
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	6825      	ldr	r5, [r4, #0]
 8003d44:	1d08      	adds	r0, r1, #4
 8003d46:	6018      	str	r0, [r3, #0]
 8003d48:	6808      	ldr	r0, [r1, #0]
 8003d4a:	062e      	lsls	r6, r5, #24
 8003d4c:	d505      	bpl.n	8003d5a <_printf_i+0xc2>
 8003d4e:	4e54      	ldr	r6, [pc, #336]	; (8003ea0 <_printf_i+0x208>)
 8003d50:	2708      	movs	r7, #8
 8003d52:	2a6f      	cmp	r2, #111	; 0x6f
 8003d54:	d01b      	beq.n	8003d8e <_printf_i+0xf6>
 8003d56:	270a      	movs	r7, #10
 8003d58:	e019      	b.n	8003d8e <_printf_i+0xf6>
 8003d5a:	066d      	lsls	r5, r5, #25
 8003d5c:	d5f7      	bpl.n	8003d4e <_printf_i+0xb6>
 8003d5e:	b280      	uxth	r0, r0
 8003d60:	e7f5      	b.n	8003d4e <_printf_i+0xb6>
 8003d62:	3145      	adds	r1, #69	; 0x45
 8003d64:	4e4e      	ldr	r6, [pc, #312]	; (8003ea0 <_printf_i+0x208>)
 8003d66:	700a      	strb	r2, [r1, #0]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	6822      	ldr	r2, [r4, #0]
 8003d6c:	1d01      	adds	r1, r0, #4
 8003d6e:	6800      	ldr	r0, [r0, #0]
 8003d70:	6019      	str	r1, [r3, #0]
 8003d72:	0615      	lsls	r5, r2, #24
 8003d74:	d521      	bpl.n	8003dba <_printf_i+0x122>
 8003d76:	07d3      	lsls	r3, r2, #31
 8003d78:	d502      	bpl.n	8003d80 <_printf_i+0xe8>
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	6022      	str	r2, [r4, #0]
 8003d80:	2710      	movs	r7, #16
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d103      	bne.n	8003d8e <_printf_i+0xf6>
 8003d86:	2320      	movs	r3, #32
 8003d88:	6822      	ldr	r2, [r4, #0]
 8003d8a:	439a      	bics	r2, r3
 8003d8c:	6022      	str	r2, [r4, #0]
 8003d8e:	0023      	movs	r3, r4
 8003d90:	2200      	movs	r2, #0
 8003d92:	3343      	adds	r3, #67	; 0x43
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	6863      	ldr	r3, [r4, #4]
 8003d98:	60a3      	str	r3, [r4, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	db58      	blt.n	8003e50 <_printf_i+0x1b8>
 8003d9e:	2204      	movs	r2, #4
 8003da0:	6821      	ldr	r1, [r4, #0]
 8003da2:	4391      	bics	r1, r2
 8003da4:	6021      	str	r1, [r4, #0]
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d154      	bne.n	8003e54 <_printf_i+0x1bc>
 8003daa:	9d02      	ldr	r5, [sp, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d05a      	beq.n	8003e66 <_printf_i+0x1ce>
 8003db0:	0025      	movs	r5, r4
 8003db2:	7833      	ldrb	r3, [r6, #0]
 8003db4:	3542      	adds	r5, #66	; 0x42
 8003db6:	702b      	strb	r3, [r5, #0]
 8003db8:	e055      	b.n	8003e66 <_printf_i+0x1ce>
 8003dba:	0655      	lsls	r5, r2, #25
 8003dbc:	d5db      	bpl.n	8003d76 <_printf_i+0xde>
 8003dbe:	b280      	uxth	r0, r0
 8003dc0:	e7d9      	b.n	8003d76 <_printf_i+0xde>
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	680d      	ldr	r5, [r1, #0]
 8003dc6:	1d10      	adds	r0, r2, #4
 8003dc8:	6949      	ldr	r1, [r1, #20]
 8003dca:	6018      	str	r0, [r3, #0]
 8003dcc:	6813      	ldr	r3, [r2, #0]
 8003dce:	062e      	lsls	r6, r5, #24
 8003dd0:	d501      	bpl.n	8003dd6 <_printf_i+0x13e>
 8003dd2:	6019      	str	r1, [r3, #0]
 8003dd4:	e002      	b.n	8003ddc <_printf_i+0x144>
 8003dd6:	066d      	lsls	r5, r5, #25
 8003dd8:	d5fb      	bpl.n	8003dd2 <_printf_i+0x13a>
 8003dda:	8019      	strh	r1, [r3, #0]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	9d02      	ldr	r5, [sp, #8]
 8003de0:	6123      	str	r3, [r4, #16]
 8003de2:	e04f      	b.n	8003e84 <_printf_i+0x1ec>
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	1d11      	adds	r1, r2, #4
 8003de8:	6019      	str	r1, [r3, #0]
 8003dea:	6815      	ldr	r5, [r2, #0]
 8003dec:	2100      	movs	r1, #0
 8003dee:	6862      	ldr	r2, [r4, #4]
 8003df0:	0028      	movs	r0, r5
 8003df2:	f000 f94b 	bl	800408c <memchr>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d001      	beq.n	8003dfe <_printf_i+0x166>
 8003dfa:	1b40      	subs	r0, r0, r5
 8003dfc:	6060      	str	r0, [r4, #4]
 8003dfe:	6863      	ldr	r3, [r4, #4]
 8003e00:	6123      	str	r3, [r4, #16]
 8003e02:	2300      	movs	r3, #0
 8003e04:	9a02      	ldr	r2, [sp, #8]
 8003e06:	7013      	strb	r3, [r2, #0]
 8003e08:	e03c      	b.n	8003e84 <_printf_i+0x1ec>
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	002a      	movs	r2, r5
 8003e0e:	9904      	ldr	r1, [sp, #16]
 8003e10:	9803      	ldr	r0, [sp, #12]
 8003e12:	9d05      	ldr	r5, [sp, #20]
 8003e14:	47a8      	blx	r5
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	d03e      	beq.n	8003e98 <_printf_i+0x200>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	079b      	lsls	r3, r3, #30
 8003e1e:	d415      	bmi.n	8003e4c <_printf_i+0x1b4>
 8003e20:	9b07      	ldr	r3, [sp, #28]
 8003e22:	68e0      	ldr	r0, [r4, #12]
 8003e24:	4298      	cmp	r0, r3
 8003e26:	da39      	bge.n	8003e9c <_printf_i+0x204>
 8003e28:	0018      	movs	r0, r3
 8003e2a:	e037      	b.n	8003e9c <_printf_i+0x204>
 8003e2c:	0022      	movs	r2, r4
 8003e2e:	2301      	movs	r3, #1
 8003e30:	3219      	adds	r2, #25
 8003e32:	9904      	ldr	r1, [sp, #16]
 8003e34:	9803      	ldr	r0, [sp, #12]
 8003e36:	9e05      	ldr	r6, [sp, #20]
 8003e38:	47b0      	blx	r6
 8003e3a:	1c43      	adds	r3, r0, #1
 8003e3c:	d02c      	beq.n	8003e98 <_printf_i+0x200>
 8003e3e:	3501      	adds	r5, #1
 8003e40:	68e3      	ldr	r3, [r4, #12]
 8003e42:	9a07      	ldr	r2, [sp, #28]
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	42ab      	cmp	r3, r5
 8003e48:	dcf0      	bgt.n	8003e2c <_printf_i+0x194>
 8003e4a:	e7e9      	b.n	8003e20 <_printf_i+0x188>
 8003e4c:	2500      	movs	r5, #0
 8003e4e:	e7f7      	b.n	8003e40 <_printf_i+0x1a8>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d0ad      	beq.n	8003db0 <_printf_i+0x118>
 8003e54:	9d02      	ldr	r5, [sp, #8]
 8003e56:	0039      	movs	r1, r7
 8003e58:	f7fc f9dc 	bl	8000214 <__aeabi_uidivmod>
 8003e5c:	5c73      	ldrb	r3, [r6, r1]
 8003e5e:	3d01      	subs	r5, #1
 8003e60:	702b      	strb	r3, [r5, #0]
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d1f7      	bne.n	8003e56 <_printf_i+0x1be>
 8003e66:	2f08      	cmp	r7, #8
 8003e68:	d109      	bne.n	8003e7e <_printf_i+0x1e6>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	07db      	lsls	r3, r3, #31
 8003e6e:	d506      	bpl.n	8003e7e <_printf_i+0x1e6>
 8003e70:	6863      	ldr	r3, [r4, #4]
 8003e72:	6922      	ldr	r2, [r4, #16]
 8003e74:	4293      	cmp	r3, r2
 8003e76:	dc02      	bgt.n	8003e7e <_printf_i+0x1e6>
 8003e78:	2330      	movs	r3, #48	; 0x30
 8003e7a:	3d01      	subs	r5, #1
 8003e7c:	702b      	strb	r3, [r5, #0]
 8003e7e:	9b02      	ldr	r3, [sp, #8]
 8003e80:	1b5b      	subs	r3, r3, r5
 8003e82:	6123      	str	r3, [r4, #16]
 8003e84:	9b05      	ldr	r3, [sp, #20]
 8003e86:	aa07      	add	r2, sp, #28
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	0021      	movs	r1, r4
 8003e8c:	9b04      	ldr	r3, [sp, #16]
 8003e8e:	9803      	ldr	r0, [sp, #12]
 8003e90:	f7ff fe94 	bl	8003bbc <_printf_common>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d1b8      	bne.n	8003e0a <_printf_i+0x172>
 8003e98:	2001      	movs	r0, #1
 8003e9a:	4240      	negs	r0, r0
 8003e9c:	b009      	add	sp, #36	; 0x24
 8003e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ea0:	080042a5 	.word	0x080042a5
 8003ea4:	080042b6 	.word	0x080042b6

08003ea8 <_putc_r>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	0006      	movs	r6, r0
 8003eac:	000d      	movs	r5, r1
 8003eae:	0014      	movs	r4, r2
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d004      	beq.n	8003ebe <_putc_r+0x16>
 8003eb4:	6983      	ldr	r3, [r0, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <_putc_r+0x16>
 8003eba:	f7ff fb99 	bl	80035f0 <__sinit>
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <_putc_r+0x60>)
 8003ec0:	429c      	cmp	r4, r3
 8003ec2:	d111      	bne.n	8003ee8 <_putc_r+0x40>
 8003ec4:	6874      	ldr	r4, [r6, #4]
 8003ec6:	68a3      	ldr	r3, [r4, #8]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	60a3      	str	r3, [r4, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	da05      	bge.n	8003edc <_putc_r+0x34>
 8003ed0:	69a2      	ldr	r2, [r4, #24]
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	db12      	blt.n	8003efc <_putc_r+0x54>
 8003ed6:	b2eb      	uxtb	r3, r5
 8003ed8:	2b0a      	cmp	r3, #10
 8003eda:	d00f      	beq.n	8003efc <_putc_r+0x54>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	b2e8      	uxtb	r0, r5
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	6022      	str	r2, [r4, #0]
 8003ee4:	701d      	strb	r5, [r3, #0]
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <_putc_r+0x64>)
 8003eea:	429c      	cmp	r4, r3
 8003eec:	d101      	bne.n	8003ef2 <_putc_r+0x4a>
 8003eee:	68b4      	ldr	r4, [r6, #8]
 8003ef0:	e7e9      	b.n	8003ec6 <_putc_r+0x1e>
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <_putc_r+0x68>)
 8003ef4:	429c      	cmp	r4, r3
 8003ef6:	d1e6      	bne.n	8003ec6 <_putc_r+0x1e>
 8003ef8:	68f4      	ldr	r4, [r6, #12]
 8003efa:	e7e4      	b.n	8003ec6 <_putc_r+0x1e>
 8003efc:	0022      	movs	r2, r4
 8003efe:	0029      	movs	r1, r5
 8003f00:	0030      	movs	r0, r6
 8003f02:	f7ff f9b1 	bl	8003268 <__swbuf_r>
 8003f06:	e7ee      	b.n	8003ee6 <_putc_r+0x3e>
 8003f08:	08004254 	.word	0x08004254
 8003f0c:	08004274 	.word	0x08004274
 8003f10:	08004234 	.word	0x08004234

08003f14 <_sbrk_r>:
 8003f14:	2300      	movs	r3, #0
 8003f16:	b570      	push	{r4, r5, r6, lr}
 8003f18:	4c06      	ldr	r4, [pc, #24]	; (8003f34 <_sbrk_r+0x20>)
 8003f1a:	0005      	movs	r5, r0
 8003f1c:	0008      	movs	r0, r1
 8003f1e:	6023      	str	r3, [r4, #0]
 8003f20:	f7fe ffc2 	bl	8002ea8 <_sbrk>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d103      	bne.n	8003f30 <_sbrk_r+0x1c>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d000      	beq.n	8003f30 <_sbrk_r+0x1c>
 8003f2e:	602b      	str	r3, [r5, #0]
 8003f30:	bd70      	pop	{r4, r5, r6, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	20000158 	.word	0x20000158

08003f38 <__sread>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	000c      	movs	r4, r1
 8003f3c:	250e      	movs	r5, #14
 8003f3e:	5f49      	ldrsh	r1, [r1, r5]
 8003f40:	f000 f8b2 	bl	80040a8 <_read_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	db03      	blt.n	8003f50 <__sread+0x18>
 8003f48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f4a:	181b      	adds	r3, r3, r0
 8003f4c:	6563      	str	r3, [r4, #84]	; 0x54
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	4a02      	ldr	r2, [pc, #8]	; (8003f5c <__sread+0x24>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	e7f9      	b.n	8003f4e <__sread+0x16>
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	ffffefff 	.word	0xffffefff

08003f60 <__swrite>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	001f      	movs	r7, r3
 8003f64:	898b      	ldrh	r3, [r1, #12]
 8003f66:	0005      	movs	r5, r0
 8003f68:	000c      	movs	r4, r1
 8003f6a:	0016      	movs	r6, r2
 8003f6c:	05db      	lsls	r3, r3, #23
 8003f6e:	d505      	bpl.n	8003f7c <__swrite+0x1c>
 8003f70:	230e      	movs	r3, #14
 8003f72:	5ec9      	ldrsh	r1, [r1, r3]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2302      	movs	r3, #2
 8003f78:	f000 f874 	bl	8004064 <_lseek_r>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <__swrite+0x34>)
 8003f80:	0028      	movs	r0, r5
 8003f82:	4013      	ands	r3, r2
 8003f84:	81a3      	strh	r3, [r4, #12]
 8003f86:	0032      	movs	r2, r6
 8003f88:	230e      	movs	r3, #14
 8003f8a:	5ee1      	ldrsh	r1, [r4, r3]
 8003f8c:	003b      	movs	r3, r7
 8003f8e:	f000 f81f 	bl	8003fd0 <_write_r>
 8003f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f94:	ffffefff 	.word	0xffffefff

08003f98 <__sseek>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	000c      	movs	r4, r1
 8003f9c:	250e      	movs	r5, #14
 8003f9e:	5f49      	ldrsh	r1, [r1, r5]
 8003fa0:	f000 f860 	bl	8004064 <_lseek_r>
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	1c42      	adds	r2, r0, #1
 8003fa8:	d103      	bne.n	8003fb2 <__sseek+0x1a>
 8003faa:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <__sseek+0x28>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	bd70      	pop	{r4, r5, r6, pc}
 8003fb2:	2280      	movs	r2, #128	; 0x80
 8003fb4:	0152      	lsls	r2, r2, #5
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	6560      	str	r0, [r4, #84]	; 0x54
 8003fbc:	e7f8      	b.n	8003fb0 <__sseek+0x18>
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	ffffefff 	.word	0xffffefff

08003fc4 <__sclose>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	230e      	movs	r3, #14
 8003fc8:	5ec9      	ldrsh	r1, [r1, r3]
 8003fca:	f000 f815 	bl	8003ff8 <_close_r>
 8003fce:	bd10      	pop	{r4, pc}

08003fd0 <_write_r>:
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	0005      	movs	r5, r0
 8003fd4:	0008      	movs	r0, r1
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4c06      	ldr	r4, [pc, #24]	; (8003ff4 <_write_r+0x24>)
 8003fdc:	6022      	str	r2, [r4, #0]
 8003fde:	001a      	movs	r2, r3
 8003fe0:	f7fe fd4a 	bl	8002a78 <_write>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d103      	bne.n	8003ff0 <_write_r+0x20>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d000      	beq.n	8003ff0 <_write_r+0x20>
 8003fee:	602b      	str	r3, [r5, #0]
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	20000158 	.word	0x20000158

08003ff8 <_close_r>:
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	b570      	push	{r4, r5, r6, lr}
 8003ffc:	4c06      	ldr	r4, [pc, #24]	; (8004018 <_close_r+0x20>)
 8003ffe:	0005      	movs	r5, r0
 8004000:	0008      	movs	r0, r1
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	f7fe ff24 	bl	8002e50 <_close>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d103      	bne.n	8004014 <_close_r+0x1c>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d000      	beq.n	8004014 <_close_r+0x1c>
 8004012:	602b      	str	r3, [r5, #0]
 8004014:	bd70      	pop	{r4, r5, r6, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	20000158 	.word	0x20000158

0800401c <_fstat_r>:
 800401c:	2300      	movs	r3, #0
 800401e:	b570      	push	{r4, r5, r6, lr}
 8004020:	4c06      	ldr	r4, [pc, #24]	; (800403c <_fstat_r+0x20>)
 8004022:	0005      	movs	r5, r0
 8004024:	0008      	movs	r0, r1
 8004026:	0011      	movs	r1, r2
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	f7fe ff1b 	bl	8002e64 <_fstat>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d103      	bne.n	800403a <_fstat_r+0x1e>
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d000      	beq.n	800403a <_fstat_r+0x1e>
 8004038:	602b      	str	r3, [r5, #0]
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	20000158 	.word	0x20000158

08004040 <_isatty_r>:
 8004040:	2300      	movs	r3, #0
 8004042:	b570      	push	{r4, r5, r6, lr}
 8004044:	4c06      	ldr	r4, [pc, #24]	; (8004060 <_isatty_r+0x20>)
 8004046:	0005      	movs	r5, r0
 8004048:	0008      	movs	r0, r1
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	f7fe ff18 	bl	8002e80 <_isatty>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d103      	bne.n	800405c <_isatty_r+0x1c>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d000      	beq.n	800405c <_isatty_r+0x1c>
 800405a:	602b      	str	r3, [r5, #0]
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	20000158 	.word	0x20000158

08004064 <_lseek_r>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	0005      	movs	r5, r0
 8004068:	0008      	movs	r0, r1
 800406a:	0011      	movs	r1, r2
 800406c:	2200      	movs	r2, #0
 800406e:	4c06      	ldr	r4, [pc, #24]	; (8004088 <_lseek_r+0x24>)
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	001a      	movs	r2, r3
 8004074:	f7fe ff0d 	bl	8002e92 <_lseek>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d103      	bne.n	8004084 <_lseek_r+0x20>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d000      	beq.n	8004084 <_lseek_r+0x20>
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000158 	.word	0x20000158

0800408c <memchr>:
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	1882      	adds	r2, r0, r2
 8004090:	4290      	cmp	r0, r2
 8004092:	d101      	bne.n	8004098 <memchr+0xc>
 8004094:	2000      	movs	r0, #0
 8004096:	4770      	bx	lr
 8004098:	7803      	ldrb	r3, [r0, #0]
 800409a:	428b      	cmp	r3, r1
 800409c:	d0fb      	beq.n	8004096 <memchr+0xa>
 800409e:	3001      	adds	r0, #1
 80040a0:	e7f6      	b.n	8004090 <memchr+0x4>

080040a2 <__malloc_lock>:
 80040a2:	4770      	bx	lr

080040a4 <__malloc_unlock>:
 80040a4:	4770      	bx	lr
	...

080040a8 <_read_r>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	0005      	movs	r5, r0
 80040ac:	0008      	movs	r0, r1
 80040ae:	0011      	movs	r1, r2
 80040b0:	2200      	movs	r2, #0
 80040b2:	4c06      	ldr	r4, [pc, #24]	; (80040cc <_read_r+0x24>)
 80040b4:	6022      	str	r2, [r4, #0]
 80040b6:	001a      	movs	r2, r3
 80040b8:	f7fe fead 	bl	8002e16 <_read>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d103      	bne.n	80040c8 <_read_r+0x20>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d000      	beq.n	80040c8 <_read_r+0x20>
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	20000158 	.word	0x20000158

080040d0 <_init>:
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d6:	bc08      	pop	{r3}
 80040d8:	469e      	mov	lr, r3
 80040da:	4770      	bx	lr

080040dc <_fini>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e2:	bc08      	pop	{r3}
 80040e4:	469e      	mov	lr, r3
 80040e6:	4770      	bx	lr
