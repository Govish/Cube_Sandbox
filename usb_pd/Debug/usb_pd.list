
usb_pd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  080092a0  080092a0  000192a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a68  08009a68  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009a68  08009a68  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a68  08009a68  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a68  08009a68  00019a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a6c  08009a6c  00019a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200001d4  08009c44  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08009c44  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012da7  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002852  00000000  00000000  00032fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a50  00000000  00000000  000357f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  00036248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000188b5  00000000  00000000  00036ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d15a  00000000  00000000  0004f455  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079501  00000000  00000000  0005c5af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5ab0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e0  00000000  00000000  000d5b2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009284 	.word	0x08009284

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08009284 	.word	0x08009284

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fa9d 	bl	8001968 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 f9f5 	bl	8001828 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa8f 	bl	8001968 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa85 	bl	8001968 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa17 	bl	80018a0 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa0d 	bl	80018a0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 f9d9 	bl	8000854 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 f95b 	bl	8000768 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f9cb 	bl	8000854 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f9c1 	bl	8000854 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f969 	bl	80007b8 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f95f 	bl	80007b8 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_d2uiz>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	2200      	movs	r2, #0
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <__aeabi_d2uiz+0x38>)
 800050e:	0004      	movs	r4, r0
 8000510:	000d      	movs	r5, r1
 8000512:	f7ff ffb5 	bl	8000480 <__aeabi_dcmpge>
 8000516:	2800      	cmp	r0, #0
 8000518:	d104      	bne.n	8000524 <__aeabi_d2uiz+0x1c>
 800051a:	0020      	movs	r0, r4
 800051c:	0029      	movs	r1, r5
 800051e:	f002 f861 	bl	80025e4 <__aeabi_d2iz>
 8000522:	bd70      	pop	{r4, r5, r6, pc}
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <__aeabi_d2uiz+0x38>)
 8000526:	2200      	movs	r2, #0
 8000528:	0020      	movs	r0, r4
 800052a:	0029      	movs	r1, r5
 800052c:	f001 fcf6 	bl	8001f1c <__aeabi_dsub>
 8000530:	f002 f858 	bl	80025e4 <__aeabi_d2iz>
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	061b      	lsls	r3, r3, #24
 8000538:	469c      	mov	ip, r3
 800053a:	4460      	add	r0, ip
 800053c:	e7f1      	b.n	8000522 <__aeabi_d2uiz+0x1a>
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	41e00000 	.word	0x41e00000

08000544 <__aeabi_fdiv>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	0244      	lsls	r4, r0, #9
 8000550:	b5e0      	push	{r5, r6, r7, lr}
 8000552:	0046      	lsls	r6, r0, #1
 8000554:	4688      	mov	r8, r1
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	0e36      	lsrs	r6, r6, #24
 800055a:	0fc7      	lsrs	r7, r0, #31
 800055c:	2e00      	cmp	r6, #0
 800055e:	d063      	beq.n	8000628 <__aeabi_fdiv+0xe4>
 8000560:	2eff      	cmp	r6, #255	; 0xff
 8000562:	d024      	beq.n	80005ae <__aeabi_fdiv+0x6a>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	00e4      	lsls	r4, r4, #3
 8000568:	04db      	lsls	r3, r3, #19
 800056a:	431c      	orrs	r4, r3
 800056c:	2300      	movs	r3, #0
 800056e:	4699      	mov	r9, r3
 8000570:	469b      	mov	fp, r3
 8000572:	3e7f      	subs	r6, #127	; 0x7f
 8000574:	4643      	mov	r3, r8
 8000576:	4642      	mov	r2, r8
 8000578:	025d      	lsls	r5, r3, #9
 800057a:	0fd2      	lsrs	r2, r2, #31
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	0a6d      	lsrs	r5, r5, #9
 8000580:	0e1b      	lsrs	r3, r3, #24
 8000582:	4690      	mov	r8, r2
 8000584:	4692      	mov	sl, r2
 8000586:	d065      	beq.n	8000654 <__aeabi_fdiv+0x110>
 8000588:	2bff      	cmp	r3, #255	; 0xff
 800058a:	d055      	beq.n	8000638 <__aeabi_fdiv+0xf4>
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	2100      	movs	r1, #0
 8000590:	00ed      	lsls	r5, r5, #3
 8000592:	04d2      	lsls	r2, r2, #19
 8000594:	3b7f      	subs	r3, #127	; 0x7f
 8000596:	4315      	orrs	r5, r2
 8000598:	1af6      	subs	r6, r6, r3
 800059a:	4643      	mov	r3, r8
 800059c:	464a      	mov	r2, r9
 800059e:	407b      	eors	r3, r7
 80005a0:	2a0f      	cmp	r2, #15
 80005a2:	d900      	bls.n	80005a6 <__aeabi_fdiv+0x62>
 80005a4:	e08d      	b.n	80006c2 <__aeabi_fdiv+0x17e>
 80005a6:	486d      	ldr	r0, [pc, #436]	; (800075c <__aeabi_fdiv+0x218>)
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	5882      	ldr	r2, [r0, r2]
 80005ac:	4697      	mov	pc, r2
 80005ae:	2c00      	cmp	r4, #0
 80005b0:	d154      	bne.n	800065c <__aeabi_fdiv+0x118>
 80005b2:	2308      	movs	r3, #8
 80005b4:	4699      	mov	r9, r3
 80005b6:	3b06      	subs	r3, #6
 80005b8:	26ff      	movs	r6, #255	; 0xff
 80005ba:	469b      	mov	fp, r3
 80005bc:	e7da      	b.n	8000574 <__aeabi_fdiv+0x30>
 80005be:	2500      	movs	r5, #0
 80005c0:	4653      	mov	r3, sl
 80005c2:	2902      	cmp	r1, #2
 80005c4:	d01b      	beq.n	80005fe <__aeabi_fdiv+0xba>
 80005c6:	2903      	cmp	r1, #3
 80005c8:	d100      	bne.n	80005cc <__aeabi_fdiv+0x88>
 80005ca:	e0bf      	b.n	800074c <__aeabi_fdiv+0x208>
 80005cc:	2901      	cmp	r1, #1
 80005ce:	d028      	beq.n	8000622 <__aeabi_fdiv+0xde>
 80005d0:	0030      	movs	r0, r6
 80005d2:	307f      	adds	r0, #127	; 0x7f
 80005d4:	2800      	cmp	r0, #0
 80005d6:	dd20      	ble.n	800061a <__aeabi_fdiv+0xd6>
 80005d8:	076a      	lsls	r2, r5, #29
 80005da:	d004      	beq.n	80005e6 <__aeabi_fdiv+0xa2>
 80005dc:	220f      	movs	r2, #15
 80005de:	402a      	ands	r2, r5
 80005e0:	2a04      	cmp	r2, #4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fdiv+0xa2>
 80005e4:	3504      	adds	r5, #4
 80005e6:	012a      	lsls	r2, r5, #4
 80005e8:	d503      	bpl.n	80005f2 <__aeabi_fdiv+0xae>
 80005ea:	0030      	movs	r0, r6
 80005ec:	4a5c      	ldr	r2, [pc, #368]	; (8000760 <__aeabi_fdiv+0x21c>)
 80005ee:	3080      	adds	r0, #128	; 0x80
 80005f0:	4015      	ands	r5, r2
 80005f2:	28fe      	cmp	r0, #254	; 0xfe
 80005f4:	dc03      	bgt.n	80005fe <__aeabi_fdiv+0xba>
 80005f6:	01ac      	lsls	r4, r5, #6
 80005f8:	0a64      	lsrs	r4, r4, #9
 80005fa:	b2c2      	uxtb	r2, r0
 80005fc:	e001      	b.n	8000602 <__aeabi_fdiv+0xbe>
 80005fe:	22ff      	movs	r2, #255	; 0xff
 8000600:	2400      	movs	r4, #0
 8000602:	0264      	lsls	r4, r4, #9
 8000604:	05d2      	lsls	r2, r2, #23
 8000606:	0a60      	lsrs	r0, r4, #9
 8000608:	07db      	lsls	r3, r3, #31
 800060a:	4310      	orrs	r0, r2
 800060c:	4318      	orrs	r0, r3
 800060e:	bc3c      	pop	{r2, r3, r4, r5}
 8000610:	4690      	mov	r8, r2
 8000612:	4699      	mov	r9, r3
 8000614:	46a2      	mov	sl, r4
 8000616:	46ab      	mov	fp, r5
 8000618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800061a:	2201      	movs	r2, #1
 800061c:	1a10      	subs	r0, r2, r0
 800061e:	281b      	cmp	r0, #27
 8000620:	dd7c      	ble.n	800071c <__aeabi_fdiv+0x1d8>
 8000622:	2200      	movs	r2, #0
 8000624:	2400      	movs	r4, #0
 8000626:	e7ec      	b.n	8000602 <__aeabi_fdiv+0xbe>
 8000628:	2c00      	cmp	r4, #0
 800062a:	d11d      	bne.n	8000668 <__aeabi_fdiv+0x124>
 800062c:	2304      	movs	r3, #4
 800062e:	4699      	mov	r9, r3
 8000630:	3b03      	subs	r3, #3
 8000632:	2600      	movs	r6, #0
 8000634:	469b      	mov	fp, r3
 8000636:	e79d      	b.n	8000574 <__aeabi_fdiv+0x30>
 8000638:	3eff      	subs	r6, #255	; 0xff
 800063a:	2d00      	cmp	r5, #0
 800063c:	d120      	bne.n	8000680 <__aeabi_fdiv+0x13c>
 800063e:	2102      	movs	r1, #2
 8000640:	4643      	mov	r3, r8
 8000642:	464a      	mov	r2, r9
 8000644:	407b      	eors	r3, r7
 8000646:	430a      	orrs	r2, r1
 8000648:	2a0f      	cmp	r2, #15
 800064a:	d8d8      	bhi.n	80005fe <__aeabi_fdiv+0xba>
 800064c:	4845      	ldr	r0, [pc, #276]	; (8000764 <__aeabi_fdiv+0x220>)
 800064e:	0092      	lsls	r2, r2, #2
 8000650:	5882      	ldr	r2, [r0, r2]
 8000652:	4697      	mov	pc, r2
 8000654:	2d00      	cmp	r5, #0
 8000656:	d119      	bne.n	800068c <__aeabi_fdiv+0x148>
 8000658:	2101      	movs	r1, #1
 800065a:	e7f1      	b.n	8000640 <__aeabi_fdiv+0xfc>
 800065c:	230c      	movs	r3, #12
 800065e:	4699      	mov	r9, r3
 8000660:	3b09      	subs	r3, #9
 8000662:	26ff      	movs	r6, #255	; 0xff
 8000664:	469b      	mov	fp, r3
 8000666:	e785      	b.n	8000574 <__aeabi_fdiv+0x30>
 8000668:	0020      	movs	r0, r4
 800066a:	f002 f933 	bl	80028d4 <__clzsi2>
 800066e:	2676      	movs	r6, #118	; 0x76
 8000670:	1f43      	subs	r3, r0, #5
 8000672:	409c      	lsls	r4, r3
 8000674:	2300      	movs	r3, #0
 8000676:	4276      	negs	r6, r6
 8000678:	1a36      	subs	r6, r6, r0
 800067a:	4699      	mov	r9, r3
 800067c:	469b      	mov	fp, r3
 800067e:	e779      	b.n	8000574 <__aeabi_fdiv+0x30>
 8000680:	464a      	mov	r2, r9
 8000682:	2303      	movs	r3, #3
 8000684:	431a      	orrs	r2, r3
 8000686:	4691      	mov	r9, r2
 8000688:	2103      	movs	r1, #3
 800068a:	e786      	b.n	800059a <__aeabi_fdiv+0x56>
 800068c:	0028      	movs	r0, r5
 800068e:	f002 f921 	bl	80028d4 <__clzsi2>
 8000692:	1f43      	subs	r3, r0, #5
 8000694:	1836      	adds	r6, r6, r0
 8000696:	409d      	lsls	r5, r3
 8000698:	3676      	adds	r6, #118	; 0x76
 800069a:	2100      	movs	r1, #0
 800069c:	e77d      	b.n	800059a <__aeabi_fdiv+0x56>
 800069e:	2480      	movs	r4, #128	; 0x80
 80006a0:	2300      	movs	r3, #0
 80006a2:	03e4      	lsls	r4, r4, #15
 80006a4:	22ff      	movs	r2, #255	; 0xff
 80006a6:	e7ac      	b.n	8000602 <__aeabi_fdiv+0xbe>
 80006a8:	2500      	movs	r5, #0
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	03db      	lsls	r3, r3, #15
 80006ae:	421c      	tst	r4, r3
 80006b0:	d028      	beq.n	8000704 <__aeabi_fdiv+0x1c0>
 80006b2:	421d      	tst	r5, r3
 80006b4:	d126      	bne.n	8000704 <__aeabi_fdiv+0x1c0>
 80006b6:	432b      	orrs	r3, r5
 80006b8:	025c      	lsls	r4, r3, #9
 80006ba:	0a64      	lsrs	r4, r4, #9
 80006bc:	4643      	mov	r3, r8
 80006be:	22ff      	movs	r2, #255	; 0xff
 80006c0:	e79f      	b.n	8000602 <__aeabi_fdiv+0xbe>
 80006c2:	0162      	lsls	r2, r4, #5
 80006c4:	016c      	lsls	r4, r5, #5
 80006c6:	42a2      	cmp	r2, r4
 80006c8:	d224      	bcs.n	8000714 <__aeabi_fdiv+0x1d0>
 80006ca:	211b      	movs	r1, #27
 80006cc:	2500      	movs	r5, #0
 80006ce:	3e01      	subs	r6, #1
 80006d0:	2701      	movs	r7, #1
 80006d2:	0010      	movs	r0, r2
 80006d4:	006d      	lsls	r5, r5, #1
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	2800      	cmp	r0, #0
 80006da:	db01      	blt.n	80006e0 <__aeabi_fdiv+0x19c>
 80006dc:	4294      	cmp	r4, r2
 80006de:	d801      	bhi.n	80006e4 <__aeabi_fdiv+0x1a0>
 80006e0:	1b12      	subs	r2, r2, r4
 80006e2:	433d      	orrs	r5, r7
 80006e4:	3901      	subs	r1, #1
 80006e6:	2900      	cmp	r1, #0
 80006e8:	d1f3      	bne.n	80006d2 <__aeabi_fdiv+0x18e>
 80006ea:	0014      	movs	r4, r2
 80006ec:	1e62      	subs	r2, r4, #1
 80006ee:	4194      	sbcs	r4, r2
 80006f0:	4325      	orrs	r5, r4
 80006f2:	e76d      	b.n	80005d0 <__aeabi_fdiv+0x8c>
 80006f4:	46ba      	mov	sl, r7
 80006f6:	4659      	mov	r1, fp
 80006f8:	0025      	movs	r5, r4
 80006fa:	4653      	mov	r3, sl
 80006fc:	2902      	cmp	r1, #2
 80006fe:	d000      	beq.n	8000702 <__aeabi_fdiv+0x1be>
 8000700:	e761      	b.n	80005c6 <__aeabi_fdiv+0x82>
 8000702:	e77c      	b.n	80005fe <__aeabi_fdiv+0xba>
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	03db      	lsls	r3, r3, #15
 8000708:	431c      	orrs	r4, r3
 800070a:	0264      	lsls	r4, r4, #9
 800070c:	0a64      	lsrs	r4, r4, #9
 800070e:	003b      	movs	r3, r7
 8000710:	22ff      	movs	r2, #255	; 0xff
 8000712:	e776      	b.n	8000602 <__aeabi_fdiv+0xbe>
 8000714:	1b12      	subs	r2, r2, r4
 8000716:	211a      	movs	r1, #26
 8000718:	2501      	movs	r5, #1
 800071a:	e7d9      	b.n	80006d0 <__aeabi_fdiv+0x18c>
 800071c:	369e      	adds	r6, #158	; 0x9e
 800071e:	002a      	movs	r2, r5
 8000720:	40b5      	lsls	r5, r6
 8000722:	002c      	movs	r4, r5
 8000724:	40c2      	lsrs	r2, r0
 8000726:	1e65      	subs	r5, r4, #1
 8000728:	41ac      	sbcs	r4, r5
 800072a:	4314      	orrs	r4, r2
 800072c:	0762      	lsls	r2, r4, #29
 800072e:	d004      	beq.n	800073a <__aeabi_fdiv+0x1f6>
 8000730:	220f      	movs	r2, #15
 8000732:	4022      	ands	r2, r4
 8000734:	2a04      	cmp	r2, #4
 8000736:	d000      	beq.n	800073a <__aeabi_fdiv+0x1f6>
 8000738:	3404      	adds	r4, #4
 800073a:	0162      	lsls	r2, r4, #5
 800073c:	d403      	bmi.n	8000746 <__aeabi_fdiv+0x202>
 800073e:	01a4      	lsls	r4, r4, #6
 8000740:	0a64      	lsrs	r4, r4, #9
 8000742:	2200      	movs	r2, #0
 8000744:	e75d      	b.n	8000602 <__aeabi_fdiv+0xbe>
 8000746:	2201      	movs	r2, #1
 8000748:	2400      	movs	r4, #0
 800074a:	e75a      	b.n	8000602 <__aeabi_fdiv+0xbe>
 800074c:	2480      	movs	r4, #128	; 0x80
 800074e:	03e4      	lsls	r4, r4, #15
 8000750:	432c      	orrs	r4, r5
 8000752:	0264      	lsls	r4, r4, #9
 8000754:	0a64      	lsrs	r4, r4, #9
 8000756:	22ff      	movs	r2, #255	; 0xff
 8000758:	e753      	b.n	8000602 <__aeabi_fdiv+0xbe>
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	0800964c 	.word	0x0800964c
 8000760:	f7ffffff 	.word	0xf7ffffff
 8000764:	0800968c 	.word	0x0800968c

08000768 <__eqsf2>:
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	0042      	lsls	r2, r0, #1
 800076c:	024e      	lsls	r6, r1, #9
 800076e:	004c      	lsls	r4, r1, #1
 8000770:	0245      	lsls	r5, r0, #9
 8000772:	0a6d      	lsrs	r5, r5, #9
 8000774:	0e12      	lsrs	r2, r2, #24
 8000776:	0fc3      	lsrs	r3, r0, #31
 8000778:	0a76      	lsrs	r6, r6, #9
 800077a:	0e24      	lsrs	r4, r4, #24
 800077c:	0fc9      	lsrs	r1, r1, #31
 800077e:	2aff      	cmp	r2, #255	; 0xff
 8000780:	d00f      	beq.n	80007a2 <__eqsf2+0x3a>
 8000782:	2cff      	cmp	r4, #255	; 0xff
 8000784:	d011      	beq.n	80007aa <__eqsf2+0x42>
 8000786:	2001      	movs	r0, #1
 8000788:	42a2      	cmp	r2, r4
 800078a:	d000      	beq.n	800078e <__eqsf2+0x26>
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	42b5      	cmp	r5, r6
 8000790:	d1fc      	bne.n	800078c <__eqsf2+0x24>
 8000792:	428b      	cmp	r3, r1
 8000794:	d00d      	beq.n	80007b2 <__eqsf2+0x4a>
 8000796:	2a00      	cmp	r2, #0
 8000798:	d1f8      	bne.n	800078c <__eqsf2+0x24>
 800079a:	0028      	movs	r0, r5
 800079c:	1e45      	subs	r5, r0, #1
 800079e:	41a8      	sbcs	r0, r5
 80007a0:	e7f4      	b.n	800078c <__eqsf2+0x24>
 80007a2:	2001      	movs	r0, #1
 80007a4:	2d00      	cmp	r5, #0
 80007a6:	d1f1      	bne.n	800078c <__eqsf2+0x24>
 80007a8:	e7eb      	b.n	8000782 <__eqsf2+0x1a>
 80007aa:	2001      	movs	r0, #1
 80007ac:	2e00      	cmp	r6, #0
 80007ae:	d1ed      	bne.n	800078c <__eqsf2+0x24>
 80007b0:	e7e9      	b.n	8000786 <__eqsf2+0x1e>
 80007b2:	2000      	movs	r0, #0
 80007b4:	e7ea      	b.n	800078c <__eqsf2+0x24>
 80007b6:	46c0      	nop			; (mov r8, r8)

080007b8 <__gesf2>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	004a      	lsls	r2, r1, #1
 80007bc:	024e      	lsls	r6, r1, #9
 80007be:	0245      	lsls	r5, r0, #9
 80007c0:	0044      	lsls	r4, r0, #1
 80007c2:	0a6d      	lsrs	r5, r5, #9
 80007c4:	0e24      	lsrs	r4, r4, #24
 80007c6:	0fc3      	lsrs	r3, r0, #31
 80007c8:	0a76      	lsrs	r6, r6, #9
 80007ca:	0e12      	lsrs	r2, r2, #24
 80007cc:	0fc9      	lsrs	r1, r1, #31
 80007ce:	2cff      	cmp	r4, #255	; 0xff
 80007d0:	d015      	beq.n	80007fe <__gesf2+0x46>
 80007d2:	2aff      	cmp	r2, #255	; 0xff
 80007d4:	d00e      	beq.n	80007f4 <__gesf2+0x3c>
 80007d6:	2c00      	cmp	r4, #0
 80007d8:	d115      	bne.n	8000806 <__gesf2+0x4e>
 80007da:	2a00      	cmp	r2, #0
 80007dc:	d101      	bne.n	80007e2 <__gesf2+0x2a>
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d01c      	beq.n	800081c <__gesf2+0x64>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d014      	beq.n	8000810 <__gesf2+0x58>
 80007e6:	428b      	cmp	r3, r1
 80007e8:	d027      	beq.n	800083a <__gesf2+0x82>
 80007ea:	2002      	movs	r0, #2
 80007ec:	3b01      	subs	r3, #1
 80007ee:	4018      	ands	r0, r3
 80007f0:	3801      	subs	r0, #1
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d0ee      	beq.n	80007d6 <__gesf2+0x1e>
 80007f8:	2002      	movs	r0, #2
 80007fa:	4240      	negs	r0, r0
 80007fc:	e7f9      	b.n	80007f2 <__gesf2+0x3a>
 80007fe:	2d00      	cmp	r5, #0
 8000800:	d1fa      	bne.n	80007f8 <__gesf2+0x40>
 8000802:	2aff      	cmp	r2, #255	; 0xff
 8000804:	d00e      	beq.n	8000824 <__gesf2+0x6c>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d10e      	bne.n	8000828 <__gesf2+0x70>
 800080a:	2e00      	cmp	r6, #0
 800080c:	d0ed      	beq.n	80007ea <__gesf2+0x32>
 800080e:	e00b      	b.n	8000828 <__gesf2+0x70>
 8000810:	2301      	movs	r3, #1
 8000812:	3901      	subs	r1, #1
 8000814:	4399      	bics	r1, r3
 8000816:	0008      	movs	r0, r1
 8000818:	3001      	adds	r0, #1
 800081a:	e7ea      	b.n	80007f2 <__gesf2+0x3a>
 800081c:	2000      	movs	r0, #0
 800081e:	2d00      	cmp	r5, #0
 8000820:	d0e7      	beq.n	80007f2 <__gesf2+0x3a>
 8000822:	e7e2      	b.n	80007ea <__gesf2+0x32>
 8000824:	2e00      	cmp	r6, #0
 8000826:	d1e7      	bne.n	80007f8 <__gesf2+0x40>
 8000828:	428b      	cmp	r3, r1
 800082a:	d1de      	bne.n	80007ea <__gesf2+0x32>
 800082c:	4294      	cmp	r4, r2
 800082e:	dd05      	ble.n	800083c <__gesf2+0x84>
 8000830:	2102      	movs	r1, #2
 8000832:	1e58      	subs	r0, r3, #1
 8000834:	4008      	ands	r0, r1
 8000836:	3801      	subs	r0, #1
 8000838:	e7db      	b.n	80007f2 <__gesf2+0x3a>
 800083a:	2400      	movs	r4, #0
 800083c:	42a2      	cmp	r2, r4
 800083e:	dc04      	bgt.n	800084a <__gesf2+0x92>
 8000840:	42b5      	cmp	r5, r6
 8000842:	d8d2      	bhi.n	80007ea <__gesf2+0x32>
 8000844:	2000      	movs	r0, #0
 8000846:	42b5      	cmp	r5, r6
 8000848:	d2d3      	bcs.n	80007f2 <__gesf2+0x3a>
 800084a:	1e58      	subs	r0, r3, #1
 800084c:	2301      	movs	r3, #1
 800084e:	4398      	bics	r0, r3
 8000850:	3001      	adds	r0, #1
 8000852:	e7ce      	b.n	80007f2 <__gesf2+0x3a>

08000854 <__lesf2>:
 8000854:	b530      	push	{r4, r5, lr}
 8000856:	0042      	lsls	r2, r0, #1
 8000858:	0244      	lsls	r4, r0, #9
 800085a:	024d      	lsls	r5, r1, #9
 800085c:	0fc3      	lsrs	r3, r0, #31
 800085e:	0048      	lsls	r0, r1, #1
 8000860:	0a64      	lsrs	r4, r4, #9
 8000862:	0e12      	lsrs	r2, r2, #24
 8000864:	0a6d      	lsrs	r5, r5, #9
 8000866:	0e00      	lsrs	r0, r0, #24
 8000868:	0fc9      	lsrs	r1, r1, #31
 800086a:	2aff      	cmp	r2, #255	; 0xff
 800086c:	d012      	beq.n	8000894 <__lesf2+0x40>
 800086e:	28ff      	cmp	r0, #255	; 0xff
 8000870:	d00c      	beq.n	800088c <__lesf2+0x38>
 8000872:	2a00      	cmp	r2, #0
 8000874:	d112      	bne.n	800089c <__lesf2+0x48>
 8000876:	2800      	cmp	r0, #0
 8000878:	d119      	bne.n	80008ae <__lesf2+0x5a>
 800087a:	2d00      	cmp	r5, #0
 800087c:	d117      	bne.n	80008ae <__lesf2+0x5a>
 800087e:	2c00      	cmp	r4, #0
 8000880:	d02b      	beq.n	80008da <__lesf2+0x86>
 8000882:	2002      	movs	r0, #2
 8000884:	3b01      	subs	r3, #1
 8000886:	4018      	ands	r0, r3
 8000888:	3801      	subs	r0, #1
 800088a:	e026      	b.n	80008da <__lesf2+0x86>
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0f0      	beq.n	8000872 <__lesf2+0x1e>
 8000890:	2002      	movs	r0, #2
 8000892:	e022      	b.n	80008da <__lesf2+0x86>
 8000894:	2c00      	cmp	r4, #0
 8000896:	d1fb      	bne.n	8000890 <__lesf2+0x3c>
 8000898:	28ff      	cmp	r0, #255	; 0xff
 800089a:	d01f      	beq.n	80008dc <__lesf2+0x88>
 800089c:	2800      	cmp	r0, #0
 800089e:	d11f      	bne.n	80008e0 <__lesf2+0x8c>
 80008a0:	2d00      	cmp	r5, #0
 80008a2:	d11d      	bne.n	80008e0 <__lesf2+0x8c>
 80008a4:	2002      	movs	r0, #2
 80008a6:	3b01      	subs	r3, #1
 80008a8:	4018      	ands	r0, r3
 80008aa:	3801      	subs	r0, #1
 80008ac:	e015      	b.n	80008da <__lesf2+0x86>
 80008ae:	2c00      	cmp	r4, #0
 80008b0:	d00e      	beq.n	80008d0 <__lesf2+0x7c>
 80008b2:	428b      	cmp	r3, r1
 80008b4:	d1e5      	bne.n	8000882 <__lesf2+0x2e>
 80008b6:	2200      	movs	r2, #0
 80008b8:	4290      	cmp	r0, r2
 80008ba:	dc04      	bgt.n	80008c6 <__lesf2+0x72>
 80008bc:	42ac      	cmp	r4, r5
 80008be:	d8e0      	bhi.n	8000882 <__lesf2+0x2e>
 80008c0:	2000      	movs	r0, #0
 80008c2:	42ac      	cmp	r4, r5
 80008c4:	d209      	bcs.n	80008da <__lesf2+0x86>
 80008c6:	1e58      	subs	r0, r3, #1
 80008c8:	2301      	movs	r3, #1
 80008ca:	4398      	bics	r0, r3
 80008cc:	3001      	adds	r0, #1
 80008ce:	e004      	b.n	80008da <__lesf2+0x86>
 80008d0:	2301      	movs	r3, #1
 80008d2:	3901      	subs	r1, #1
 80008d4:	4399      	bics	r1, r3
 80008d6:	0008      	movs	r0, r1
 80008d8:	3001      	adds	r0, #1
 80008da:	bd30      	pop	{r4, r5, pc}
 80008dc:	2d00      	cmp	r5, #0
 80008de:	d1d7      	bne.n	8000890 <__lesf2+0x3c>
 80008e0:	428b      	cmp	r3, r1
 80008e2:	d1ce      	bne.n	8000882 <__lesf2+0x2e>
 80008e4:	4282      	cmp	r2, r0
 80008e6:	dde7      	ble.n	80008b8 <__lesf2+0x64>
 80008e8:	2102      	movs	r1, #2
 80008ea:	1e58      	subs	r0, r3, #1
 80008ec:	4008      	ands	r0, r1
 80008ee:	3801      	subs	r0, #1
 80008f0:	e7f3      	b.n	80008da <__lesf2+0x86>
 80008f2:	46c0      	nop			; (mov r8, r8)

080008f4 <__aeabi_fmul>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	464e      	mov	r6, r9
 80008f8:	4657      	mov	r7, sl
 80008fa:	4645      	mov	r5, r8
 80008fc:	46de      	mov	lr, fp
 80008fe:	b5e0      	push	{r5, r6, r7, lr}
 8000900:	0243      	lsls	r3, r0, #9
 8000902:	0a5b      	lsrs	r3, r3, #9
 8000904:	0045      	lsls	r5, r0, #1
 8000906:	b083      	sub	sp, #12
 8000908:	1c0f      	adds	r7, r1, #0
 800090a:	4699      	mov	r9, r3
 800090c:	0e2d      	lsrs	r5, r5, #24
 800090e:	0fc6      	lsrs	r6, r0, #31
 8000910:	2d00      	cmp	r5, #0
 8000912:	d057      	beq.n	80009c4 <__aeabi_fmul+0xd0>
 8000914:	2dff      	cmp	r5, #255	; 0xff
 8000916:	d024      	beq.n	8000962 <__aeabi_fmul+0x6e>
 8000918:	2080      	movs	r0, #128	; 0x80
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	04c0      	lsls	r0, r0, #19
 800091e:	4318      	orrs	r0, r3
 8000920:	2300      	movs	r3, #0
 8000922:	4681      	mov	r9, r0
 8000924:	469a      	mov	sl, r3
 8000926:	469b      	mov	fp, r3
 8000928:	3d7f      	subs	r5, #127	; 0x7f
 800092a:	027c      	lsls	r4, r7, #9
 800092c:	007a      	lsls	r2, r7, #1
 800092e:	0ffb      	lsrs	r3, r7, #31
 8000930:	0a64      	lsrs	r4, r4, #9
 8000932:	0e12      	lsrs	r2, r2, #24
 8000934:	4698      	mov	r8, r3
 8000936:	d023      	beq.n	8000980 <__aeabi_fmul+0x8c>
 8000938:	2aff      	cmp	r2, #255	; 0xff
 800093a:	d04b      	beq.n	80009d4 <__aeabi_fmul+0xe0>
 800093c:	00e3      	lsls	r3, r4, #3
 800093e:	2480      	movs	r4, #128	; 0x80
 8000940:	2000      	movs	r0, #0
 8000942:	04e4      	lsls	r4, r4, #19
 8000944:	3a7f      	subs	r2, #127	; 0x7f
 8000946:	431c      	orrs	r4, r3
 8000948:	18ad      	adds	r5, r5, r2
 800094a:	1c6b      	adds	r3, r5, #1
 800094c:	4647      	mov	r7, r8
 800094e:	9301      	str	r3, [sp, #4]
 8000950:	4653      	mov	r3, sl
 8000952:	4077      	eors	r7, r6
 8000954:	003a      	movs	r2, r7
 8000956:	2b0f      	cmp	r3, #15
 8000958:	d848      	bhi.n	80009ec <__aeabi_fmul+0xf8>
 800095a:	497d      	ldr	r1, [pc, #500]	; (8000b50 <__aeabi_fmul+0x25c>)
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	58cb      	ldr	r3, [r1, r3]
 8000960:	469f      	mov	pc, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d000      	beq.n	8000968 <__aeabi_fmul+0x74>
 8000966:	e085      	b.n	8000a74 <__aeabi_fmul+0x180>
 8000968:	3308      	adds	r3, #8
 800096a:	469a      	mov	sl, r3
 800096c:	3b06      	subs	r3, #6
 800096e:	469b      	mov	fp, r3
 8000970:	027c      	lsls	r4, r7, #9
 8000972:	007a      	lsls	r2, r7, #1
 8000974:	0ffb      	lsrs	r3, r7, #31
 8000976:	25ff      	movs	r5, #255	; 0xff
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d1db      	bne.n	8000938 <__aeabi_fmul+0x44>
 8000980:	2c00      	cmp	r4, #0
 8000982:	d000      	beq.n	8000986 <__aeabi_fmul+0x92>
 8000984:	e090      	b.n	8000aa8 <__aeabi_fmul+0x1b4>
 8000986:	4652      	mov	r2, sl
 8000988:	2301      	movs	r3, #1
 800098a:	431a      	orrs	r2, r3
 800098c:	4692      	mov	sl, r2
 800098e:	2001      	movs	r0, #1
 8000990:	e7db      	b.n	800094a <__aeabi_fmul+0x56>
 8000992:	464c      	mov	r4, r9
 8000994:	4658      	mov	r0, fp
 8000996:	0017      	movs	r7, r2
 8000998:	2802      	cmp	r0, #2
 800099a:	d024      	beq.n	80009e6 <__aeabi_fmul+0xf2>
 800099c:	2803      	cmp	r0, #3
 800099e:	d100      	bne.n	80009a2 <__aeabi_fmul+0xae>
 80009a0:	e0cf      	b.n	8000b42 <__aeabi_fmul+0x24e>
 80009a2:	2200      	movs	r2, #0
 80009a4:	2300      	movs	r3, #0
 80009a6:	2801      	cmp	r0, #1
 80009a8:	d14d      	bne.n	8000a46 <__aeabi_fmul+0x152>
 80009aa:	0258      	lsls	r0, r3, #9
 80009ac:	05d2      	lsls	r2, r2, #23
 80009ae:	0a40      	lsrs	r0, r0, #9
 80009b0:	07ff      	lsls	r7, r7, #31
 80009b2:	4310      	orrs	r0, r2
 80009b4:	4338      	orrs	r0, r7
 80009b6:	b003      	add	sp, #12
 80009b8:	bc3c      	pop	{r2, r3, r4, r5}
 80009ba:	4690      	mov	r8, r2
 80009bc:	4699      	mov	r9, r3
 80009be:	46a2      	mov	sl, r4
 80009c0:	46ab      	mov	fp, r5
 80009c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d15b      	bne.n	8000a80 <__aeabi_fmul+0x18c>
 80009c8:	2304      	movs	r3, #4
 80009ca:	469a      	mov	sl, r3
 80009cc:	3b03      	subs	r3, #3
 80009ce:	2500      	movs	r5, #0
 80009d0:	469b      	mov	fp, r3
 80009d2:	e7aa      	b.n	800092a <__aeabi_fmul+0x36>
 80009d4:	35ff      	adds	r5, #255	; 0xff
 80009d6:	2c00      	cmp	r4, #0
 80009d8:	d160      	bne.n	8000a9c <__aeabi_fmul+0x1a8>
 80009da:	4652      	mov	r2, sl
 80009dc:	2302      	movs	r3, #2
 80009de:	431a      	orrs	r2, r3
 80009e0:	4692      	mov	sl, r2
 80009e2:	2002      	movs	r0, #2
 80009e4:	e7b1      	b.n	800094a <__aeabi_fmul+0x56>
 80009e6:	22ff      	movs	r2, #255	; 0xff
 80009e8:	2300      	movs	r3, #0
 80009ea:	e7de      	b.n	80009aa <__aeabi_fmul+0xb6>
 80009ec:	464b      	mov	r3, r9
 80009ee:	0c1b      	lsrs	r3, r3, #16
 80009f0:	469c      	mov	ip, r3
 80009f2:	464b      	mov	r3, r9
 80009f4:	0426      	lsls	r6, r4, #16
 80009f6:	0c36      	lsrs	r6, r6, #16
 80009f8:	0418      	lsls	r0, r3, #16
 80009fa:	4661      	mov	r1, ip
 80009fc:	0033      	movs	r3, r6
 80009fe:	0c22      	lsrs	r2, r4, #16
 8000a00:	4664      	mov	r4, ip
 8000a02:	0c00      	lsrs	r0, r0, #16
 8000a04:	4343      	muls	r3, r0
 8000a06:	434e      	muls	r6, r1
 8000a08:	4350      	muls	r0, r2
 8000a0a:	4354      	muls	r4, r2
 8000a0c:	1980      	adds	r0, r0, r6
 8000a0e:	0c1a      	lsrs	r2, r3, #16
 8000a10:	1812      	adds	r2, r2, r0
 8000a12:	4296      	cmp	r6, r2
 8000a14:	d903      	bls.n	8000a1e <__aeabi_fmul+0x12a>
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	0249      	lsls	r1, r1, #9
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4464      	add	r4, ip
 8000a1e:	041b      	lsls	r3, r3, #16
 8000a20:	0c1b      	lsrs	r3, r3, #16
 8000a22:	0410      	lsls	r0, r2, #16
 8000a24:	18c0      	adds	r0, r0, r3
 8000a26:	0183      	lsls	r3, r0, #6
 8000a28:	1e5e      	subs	r6, r3, #1
 8000a2a:	41b3      	sbcs	r3, r6
 8000a2c:	0e80      	lsrs	r0, r0, #26
 8000a2e:	4318      	orrs	r0, r3
 8000a30:	0c13      	lsrs	r3, r2, #16
 8000a32:	191b      	adds	r3, r3, r4
 8000a34:	019b      	lsls	r3, r3, #6
 8000a36:	4303      	orrs	r3, r0
 8000a38:	001c      	movs	r4, r3
 8000a3a:	0123      	lsls	r3, r4, #4
 8000a3c:	d579      	bpl.n	8000b32 <__aeabi_fmul+0x23e>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	0862      	lsrs	r2, r4, #1
 8000a42:	401c      	ands	r4, r3
 8000a44:	4314      	orrs	r4, r2
 8000a46:	9a01      	ldr	r2, [sp, #4]
 8000a48:	327f      	adds	r2, #127	; 0x7f
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	dd4d      	ble.n	8000aea <__aeabi_fmul+0x1f6>
 8000a4e:	0763      	lsls	r3, r4, #29
 8000a50:	d004      	beq.n	8000a5c <__aeabi_fmul+0x168>
 8000a52:	230f      	movs	r3, #15
 8000a54:	4023      	ands	r3, r4
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fmul+0x168>
 8000a5a:	3404      	adds	r4, #4
 8000a5c:	0123      	lsls	r3, r4, #4
 8000a5e:	d503      	bpl.n	8000a68 <__aeabi_fmul+0x174>
 8000a60:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <__aeabi_fmul+0x260>)
 8000a62:	9a01      	ldr	r2, [sp, #4]
 8000a64:	401c      	ands	r4, r3
 8000a66:	3280      	adds	r2, #128	; 0x80
 8000a68:	2afe      	cmp	r2, #254	; 0xfe
 8000a6a:	dcbc      	bgt.n	80009e6 <__aeabi_fmul+0xf2>
 8000a6c:	01a3      	lsls	r3, r4, #6
 8000a6e:	0a5b      	lsrs	r3, r3, #9
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	e79a      	b.n	80009aa <__aeabi_fmul+0xb6>
 8000a74:	230c      	movs	r3, #12
 8000a76:	469a      	mov	sl, r3
 8000a78:	3b09      	subs	r3, #9
 8000a7a:	25ff      	movs	r5, #255	; 0xff
 8000a7c:	469b      	mov	fp, r3
 8000a7e:	e754      	b.n	800092a <__aeabi_fmul+0x36>
 8000a80:	0018      	movs	r0, r3
 8000a82:	f001 ff27 	bl	80028d4 <__clzsi2>
 8000a86:	464a      	mov	r2, r9
 8000a88:	1f43      	subs	r3, r0, #5
 8000a8a:	2576      	movs	r5, #118	; 0x76
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	2300      	movs	r3, #0
 8000a90:	426d      	negs	r5, r5
 8000a92:	4691      	mov	r9, r2
 8000a94:	1a2d      	subs	r5, r5, r0
 8000a96:	469a      	mov	sl, r3
 8000a98:	469b      	mov	fp, r3
 8000a9a:	e746      	b.n	800092a <__aeabi_fmul+0x36>
 8000a9c:	4652      	mov	r2, sl
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	4692      	mov	sl, r2
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	e750      	b.n	800094a <__aeabi_fmul+0x56>
 8000aa8:	0020      	movs	r0, r4
 8000aaa:	f001 ff13 	bl	80028d4 <__clzsi2>
 8000aae:	1f43      	subs	r3, r0, #5
 8000ab0:	1a2d      	subs	r5, r5, r0
 8000ab2:	409c      	lsls	r4, r3
 8000ab4:	3d76      	subs	r5, #118	; 0x76
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	e747      	b.n	800094a <__aeabi_fmul+0x56>
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	2700      	movs	r7, #0
 8000abe:	03db      	lsls	r3, r3, #15
 8000ac0:	22ff      	movs	r2, #255	; 0xff
 8000ac2:	e772      	b.n	80009aa <__aeabi_fmul+0xb6>
 8000ac4:	4642      	mov	r2, r8
 8000ac6:	e766      	b.n	8000996 <__aeabi_fmul+0xa2>
 8000ac8:	464c      	mov	r4, r9
 8000aca:	0032      	movs	r2, r6
 8000acc:	4658      	mov	r0, fp
 8000ace:	e762      	b.n	8000996 <__aeabi_fmul+0xa2>
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	464a      	mov	r2, r9
 8000ad4:	03db      	lsls	r3, r3, #15
 8000ad6:	421a      	tst	r2, r3
 8000ad8:	d022      	beq.n	8000b20 <__aeabi_fmul+0x22c>
 8000ada:	421c      	tst	r4, r3
 8000adc:	d120      	bne.n	8000b20 <__aeabi_fmul+0x22c>
 8000ade:	4323      	orrs	r3, r4
 8000ae0:	025b      	lsls	r3, r3, #9
 8000ae2:	0a5b      	lsrs	r3, r3, #9
 8000ae4:	4647      	mov	r7, r8
 8000ae6:	22ff      	movs	r2, #255	; 0xff
 8000ae8:	e75f      	b.n	80009aa <__aeabi_fmul+0xb6>
 8000aea:	2301      	movs	r3, #1
 8000aec:	1a9a      	subs	r2, r3, r2
 8000aee:	2a1b      	cmp	r2, #27
 8000af0:	dc21      	bgt.n	8000b36 <__aeabi_fmul+0x242>
 8000af2:	0023      	movs	r3, r4
 8000af4:	9901      	ldr	r1, [sp, #4]
 8000af6:	40d3      	lsrs	r3, r2
 8000af8:	319e      	adds	r1, #158	; 0x9e
 8000afa:	408c      	lsls	r4, r1
 8000afc:	001a      	movs	r2, r3
 8000afe:	0023      	movs	r3, r4
 8000b00:	1e5c      	subs	r4, r3, #1
 8000b02:	41a3      	sbcs	r3, r4
 8000b04:	4313      	orrs	r3, r2
 8000b06:	075a      	lsls	r2, r3, #29
 8000b08:	d004      	beq.n	8000b14 <__aeabi_fmul+0x220>
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	2a04      	cmp	r2, #4
 8000b10:	d000      	beq.n	8000b14 <__aeabi_fmul+0x220>
 8000b12:	3304      	adds	r3, #4
 8000b14:	015a      	lsls	r2, r3, #5
 8000b16:	d411      	bmi.n	8000b3c <__aeabi_fmul+0x248>
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	0a5b      	lsrs	r3, r3, #9
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	e744      	b.n	80009aa <__aeabi_fmul+0xb6>
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	464a      	mov	r2, r9
 8000b24:	03db      	lsls	r3, r3, #15
 8000b26:	4313      	orrs	r3, r2
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	0037      	movs	r7, r6
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e73b      	b.n	80009aa <__aeabi_fmul+0xb6>
 8000b32:	9501      	str	r5, [sp, #4]
 8000b34:	e787      	b.n	8000a46 <__aeabi_fmul+0x152>
 8000b36:	2200      	movs	r2, #0
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e736      	b.n	80009aa <__aeabi_fmul+0xb6>
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e733      	b.n	80009aa <__aeabi_fmul+0xb6>
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	03db      	lsls	r3, r3, #15
 8000b46:	4323      	orrs	r3, r4
 8000b48:	025b      	lsls	r3, r3, #9
 8000b4a:	0a5b      	lsrs	r3, r3, #9
 8000b4c:	22ff      	movs	r2, #255	; 0xff
 8000b4e:	e72c      	b.n	80009aa <__aeabi_fmul+0xb6>
 8000b50:	080096cc 	.word	0x080096cc
 8000b54:	f7ffffff 	.word	0xf7ffffff

08000b58 <__aeabi_i2f>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	d03d      	beq.n	8000bda <__aeabi_i2f+0x82>
 8000b5e:	17c3      	asrs	r3, r0, #31
 8000b60:	18c5      	adds	r5, r0, r3
 8000b62:	405d      	eors	r5, r3
 8000b64:	0fc4      	lsrs	r4, r0, #31
 8000b66:	0028      	movs	r0, r5
 8000b68:	f001 feb4 	bl	80028d4 <__clzsi2>
 8000b6c:	229e      	movs	r2, #158	; 0x9e
 8000b6e:	1a12      	subs	r2, r2, r0
 8000b70:	2a96      	cmp	r2, #150	; 0x96
 8000b72:	dc07      	bgt.n	8000b84 <__aeabi_i2f+0x2c>
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	2808      	cmp	r0, #8
 8000b78:	dd33      	ble.n	8000be2 <__aeabi_i2f+0x8a>
 8000b7a:	3808      	subs	r0, #8
 8000b7c:	4085      	lsls	r5, r0
 8000b7e:	0268      	lsls	r0, r5, #9
 8000b80:	0a40      	lsrs	r0, r0, #9
 8000b82:	e023      	b.n	8000bcc <__aeabi_i2f+0x74>
 8000b84:	2a99      	cmp	r2, #153	; 0x99
 8000b86:	dd0b      	ble.n	8000ba0 <__aeabi_i2f+0x48>
 8000b88:	2305      	movs	r3, #5
 8000b8a:	0029      	movs	r1, r5
 8000b8c:	1a1b      	subs	r3, r3, r0
 8000b8e:	40d9      	lsrs	r1, r3
 8000b90:	0003      	movs	r3, r0
 8000b92:	331b      	adds	r3, #27
 8000b94:	409d      	lsls	r5, r3
 8000b96:	002b      	movs	r3, r5
 8000b98:	1e5d      	subs	r5, r3, #1
 8000b9a:	41ab      	sbcs	r3, r5
 8000b9c:	4319      	orrs	r1, r3
 8000b9e:	000d      	movs	r5, r1
 8000ba0:	2805      	cmp	r0, #5
 8000ba2:	dd01      	ble.n	8000ba8 <__aeabi_i2f+0x50>
 8000ba4:	1f43      	subs	r3, r0, #5
 8000ba6:	409d      	lsls	r5, r3
 8000ba8:	002b      	movs	r3, r5
 8000baa:	490f      	ldr	r1, [pc, #60]	; (8000be8 <__aeabi_i2f+0x90>)
 8000bac:	400b      	ands	r3, r1
 8000bae:	076e      	lsls	r6, r5, #29
 8000bb0:	d009      	beq.n	8000bc6 <__aeabi_i2f+0x6e>
 8000bb2:	260f      	movs	r6, #15
 8000bb4:	4035      	ands	r5, r6
 8000bb6:	2d04      	cmp	r5, #4
 8000bb8:	d005      	beq.n	8000bc6 <__aeabi_i2f+0x6e>
 8000bba:	3304      	adds	r3, #4
 8000bbc:	015d      	lsls	r5, r3, #5
 8000bbe:	d502      	bpl.n	8000bc6 <__aeabi_i2f+0x6e>
 8000bc0:	229f      	movs	r2, #159	; 0x9f
 8000bc2:	400b      	ands	r3, r1
 8000bc4:	1a12      	subs	r2, r2, r0
 8000bc6:	019b      	lsls	r3, r3, #6
 8000bc8:	0a58      	lsrs	r0, r3, #9
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	0240      	lsls	r0, r0, #9
 8000bce:	05d2      	lsls	r2, r2, #23
 8000bd0:	0a40      	lsrs	r0, r0, #9
 8000bd2:	07e4      	lsls	r4, r4, #31
 8000bd4:	4310      	orrs	r0, r2
 8000bd6:	4320      	orrs	r0, r4
 8000bd8:	bd70      	pop	{r4, r5, r6, pc}
 8000bda:	2400      	movs	r4, #0
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2000      	movs	r0, #0
 8000be0:	e7f4      	b.n	8000bcc <__aeabi_i2f+0x74>
 8000be2:	0268      	lsls	r0, r5, #9
 8000be4:	0a40      	lsrs	r0, r0, #9
 8000be6:	e7f1      	b.n	8000bcc <__aeabi_i2f+0x74>
 8000be8:	fbffffff 	.word	0xfbffffff

08000bec <__aeabi_dadd>:
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	464f      	mov	r7, r9
 8000bf0:	4646      	mov	r6, r8
 8000bf2:	46d6      	mov	lr, sl
 8000bf4:	000c      	movs	r4, r1
 8000bf6:	0309      	lsls	r1, r1, #12
 8000bf8:	b5c0      	push	{r6, r7, lr}
 8000bfa:	0a49      	lsrs	r1, r1, #9
 8000bfc:	0f47      	lsrs	r7, r0, #29
 8000bfe:	005e      	lsls	r6, r3, #1
 8000c00:	4339      	orrs	r1, r7
 8000c02:	031f      	lsls	r7, r3, #12
 8000c04:	0fdb      	lsrs	r3, r3, #31
 8000c06:	469c      	mov	ip, r3
 8000c08:	0065      	lsls	r5, r4, #1
 8000c0a:	0a7b      	lsrs	r3, r7, #9
 8000c0c:	0f57      	lsrs	r7, r2, #29
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	0d6d      	lsrs	r5, r5, #21
 8000c12:	0fe4      	lsrs	r4, r4, #31
 8000c14:	0d76      	lsrs	r6, r6, #21
 8000c16:	46a1      	mov	r9, r4
 8000c18:	00c0      	lsls	r0, r0, #3
 8000c1a:	46b8      	mov	r8, r7
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	1bab      	subs	r3, r5, r6
 8000c20:	4564      	cmp	r4, ip
 8000c22:	d07b      	beq.n	8000d1c <__aeabi_dadd+0x130>
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dd5f      	ble.n	8000ce8 <__aeabi_dadd+0xfc>
 8000c28:	2e00      	cmp	r6, #0
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_dadd+0x42>
 8000c2c:	e0a4      	b.n	8000d78 <__aeabi_dadd+0x18c>
 8000c2e:	003e      	movs	r6, r7
 8000c30:	4316      	orrs	r6, r2
 8000c32:	d100      	bne.n	8000c36 <__aeabi_dadd+0x4a>
 8000c34:	e112      	b.n	8000e5c <__aeabi_dadd+0x270>
 8000c36:	1e5e      	subs	r6, r3, #1
 8000c38:	2e00      	cmp	r6, #0
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_dadd+0x52>
 8000c3c:	e19e      	b.n	8000f7c <__aeabi_dadd+0x390>
 8000c3e:	1a87      	subs	r7, r0, r2
 8000c40:	4643      	mov	r3, r8
 8000c42:	42b8      	cmp	r0, r7
 8000c44:	4180      	sbcs	r0, r0
 8000c46:	2501      	movs	r5, #1
 8000c48:	1ac9      	subs	r1, r1, r3
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	1a09      	subs	r1, r1, r0
 8000c4e:	020b      	lsls	r3, r1, #8
 8000c50:	d400      	bmi.n	8000c54 <__aeabi_dadd+0x68>
 8000c52:	e131      	b.n	8000eb8 <__aeabi_dadd+0x2cc>
 8000c54:	0249      	lsls	r1, r1, #9
 8000c56:	0a4e      	lsrs	r6, r1, #9
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x72>
 8000c5c:	e16e      	b.n	8000f3c <__aeabi_dadd+0x350>
 8000c5e:	0030      	movs	r0, r6
 8000c60:	f001 fe38 	bl	80028d4 <__clzsi2>
 8000c64:	0003      	movs	r3, r0
 8000c66:	3b08      	subs	r3, #8
 8000c68:	2b1f      	cmp	r3, #31
 8000c6a:	dd00      	ble.n	8000c6e <__aeabi_dadd+0x82>
 8000c6c:	e161      	b.n	8000f32 <__aeabi_dadd+0x346>
 8000c6e:	2220      	movs	r2, #32
 8000c70:	0039      	movs	r1, r7
 8000c72:	1ad2      	subs	r2, r2, r3
 8000c74:	409e      	lsls	r6, r3
 8000c76:	40d1      	lsrs	r1, r2
 8000c78:	409f      	lsls	r7, r3
 8000c7a:	430e      	orrs	r6, r1
 8000c7c:	429d      	cmp	r5, r3
 8000c7e:	dd00      	ble.n	8000c82 <__aeabi_dadd+0x96>
 8000c80:	e151      	b.n	8000f26 <__aeabi_dadd+0x33a>
 8000c82:	1b5d      	subs	r5, r3, r5
 8000c84:	1c6b      	adds	r3, r5, #1
 8000c86:	2b1f      	cmp	r3, #31
 8000c88:	dd00      	ble.n	8000c8c <__aeabi_dadd+0xa0>
 8000c8a:	e17c      	b.n	8000f86 <__aeabi_dadd+0x39a>
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	1ac9      	subs	r1, r1, r3
 8000c90:	003d      	movs	r5, r7
 8000c92:	0030      	movs	r0, r6
 8000c94:	408f      	lsls	r7, r1
 8000c96:	4088      	lsls	r0, r1
 8000c98:	40dd      	lsrs	r5, r3
 8000c9a:	1e79      	subs	r1, r7, #1
 8000c9c:	418f      	sbcs	r7, r1
 8000c9e:	0031      	movs	r1, r6
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	4328      	orrs	r0, r5
 8000ca4:	40d9      	lsrs	r1, r3
 8000ca6:	2500      	movs	r5, #0
 8000ca8:	4307      	orrs	r7, r0
 8000caa:	403a      	ands	r2, r7
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	d009      	beq.n	8000cc4 <__aeabi_dadd+0xd8>
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	403b      	ands	r3, r7
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d005      	beq.n	8000cc4 <__aeabi_dadd+0xd8>
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	42bb      	cmp	r3, r7
 8000cbc:	41bf      	sbcs	r7, r7
 8000cbe:	427f      	negs	r7, r7
 8000cc0:	19c9      	adds	r1, r1, r7
 8000cc2:	001f      	movs	r7, r3
 8000cc4:	020b      	lsls	r3, r1, #8
 8000cc6:	d400      	bmi.n	8000cca <__aeabi_dadd+0xde>
 8000cc8:	e226      	b.n	8001118 <__aeabi_dadd+0x52c>
 8000cca:	1c6a      	adds	r2, r5, #1
 8000ccc:	4bc6      	ldr	r3, [pc, #792]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000cce:	0555      	lsls	r5, r2, #21
 8000cd0:	0d6d      	lsrs	r5, r5, #21
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dadd+0xec>
 8000cd6:	e106      	b.n	8000ee6 <__aeabi_dadd+0x2fa>
 8000cd8:	4ac4      	ldr	r2, [pc, #784]	; (8000fec <__aeabi_dadd+0x400>)
 8000cda:	08ff      	lsrs	r7, r7, #3
 8000cdc:	400a      	ands	r2, r1
 8000cde:	0753      	lsls	r3, r2, #29
 8000ce0:	0252      	lsls	r2, r2, #9
 8000ce2:	433b      	orrs	r3, r7
 8000ce4:	0b12      	lsrs	r2, r2, #12
 8000ce6:	e08e      	b.n	8000e06 <__aeabi_dadd+0x21a>
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d000      	beq.n	8000cee <__aeabi_dadd+0x102>
 8000cec:	e0b8      	b.n	8000e60 <__aeabi_dadd+0x274>
 8000cee:	1c6b      	adds	r3, r5, #1
 8000cf0:	055b      	lsls	r3, r3, #21
 8000cf2:	0d5b      	lsrs	r3, r3, #21
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_dadd+0x10e>
 8000cf8:	e130      	b.n	8000f5c <__aeabi_dadd+0x370>
 8000cfa:	1a87      	subs	r7, r0, r2
 8000cfc:	4643      	mov	r3, r8
 8000cfe:	42b8      	cmp	r0, r7
 8000d00:	41b6      	sbcs	r6, r6
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	4276      	negs	r6, r6
 8000d06:	1b9e      	subs	r6, r3, r6
 8000d08:	0233      	lsls	r3, r6, #8
 8000d0a:	d500      	bpl.n	8000d0e <__aeabi_dadd+0x122>
 8000d0c:	e14c      	b.n	8000fa8 <__aeabi_dadd+0x3bc>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	4333      	orrs	r3, r6
 8000d12:	d1a1      	bne.n	8000c58 <__aeabi_dadd+0x6c>
 8000d14:	2200      	movs	r2, #0
 8000d16:	2400      	movs	r4, #0
 8000d18:	2500      	movs	r5, #0
 8000d1a:	e070      	b.n	8000dfe <__aeabi_dadd+0x212>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dc00      	bgt.n	8000d22 <__aeabi_dadd+0x136>
 8000d20:	e0e5      	b.n	8000eee <__aeabi_dadd+0x302>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_dadd+0x13c>
 8000d26:	e083      	b.n	8000e30 <__aeabi_dadd+0x244>
 8000d28:	4eaf      	ldr	r6, [pc, #700]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000d2a:	42b5      	cmp	r5, r6
 8000d2c:	d060      	beq.n	8000df0 <__aeabi_dadd+0x204>
 8000d2e:	2680      	movs	r6, #128	; 0x80
 8000d30:	0436      	lsls	r6, r6, #16
 8000d32:	4337      	orrs	r7, r6
 8000d34:	46b8      	mov	r8, r7
 8000d36:	2b38      	cmp	r3, #56	; 0x38
 8000d38:	dc00      	bgt.n	8000d3c <__aeabi_dadd+0x150>
 8000d3a:	e13e      	b.n	8000fba <__aeabi_dadd+0x3ce>
 8000d3c:	4643      	mov	r3, r8
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	001f      	movs	r7, r3
 8000d42:	1e7a      	subs	r2, r7, #1
 8000d44:	4197      	sbcs	r7, r2
 8000d46:	183f      	adds	r7, r7, r0
 8000d48:	4287      	cmp	r7, r0
 8000d4a:	4180      	sbcs	r0, r0
 8000d4c:	4240      	negs	r0, r0
 8000d4e:	1809      	adds	r1, r1, r0
 8000d50:	020b      	lsls	r3, r1, #8
 8000d52:	d400      	bmi.n	8000d56 <__aeabi_dadd+0x16a>
 8000d54:	e0b0      	b.n	8000eb8 <__aeabi_dadd+0x2cc>
 8000d56:	4ba4      	ldr	r3, [pc, #656]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000d58:	3501      	adds	r5, #1
 8000d5a:	429d      	cmp	r5, r3
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x174>
 8000d5e:	e0c3      	b.n	8000ee8 <__aeabi_dadd+0x2fc>
 8000d60:	4aa2      	ldr	r2, [pc, #648]	; (8000fec <__aeabi_dadd+0x400>)
 8000d62:	087b      	lsrs	r3, r7, #1
 8000d64:	400a      	ands	r2, r1
 8000d66:	2101      	movs	r1, #1
 8000d68:	400f      	ands	r7, r1
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	0851      	lsrs	r1, r2, #1
 8000d6e:	07d3      	lsls	r3, r2, #31
 8000d70:	2207      	movs	r2, #7
 8000d72:	431f      	orrs	r7, r3
 8000d74:	403a      	ands	r2, r7
 8000d76:	e799      	b.n	8000cac <__aeabi_dadd+0xc0>
 8000d78:	4e9b      	ldr	r6, [pc, #620]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000d7a:	42b5      	cmp	r5, r6
 8000d7c:	d038      	beq.n	8000df0 <__aeabi_dadd+0x204>
 8000d7e:	2680      	movs	r6, #128	; 0x80
 8000d80:	0436      	lsls	r6, r6, #16
 8000d82:	4337      	orrs	r7, r6
 8000d84:	46b8      	mov	r8, r7
 8000d86:	2b38      	cmp	r3, #56	; 0x38
 8000d88:	dd00      	ble.n	8000d8c <__aeabi_dadd+0x1a0>
 8000d8a:	e0dc      	b.n	8000f46 <__aeabi_dadd+0x35a>
 8000d8c:	2b1f      	cmp	r3, #31
 8000d8e:	dc00      	bgt.n	8000d92 <__aeabi_dadd+0x1a6>
 8000d90:	e130      	b.n	8000ff4 <__aeabi_dadd+0x408>
 8000d92:	001e      	movs	r6, r3
 8000d94:	4647      	mov	r7, r8
 8000d96:	3e20      	subs	r6, #32
 8000d98:	40f7      	lsrs	r7, r6
 8000d9a:	46bc      	mov	ip, r7
 8000d9c:	2b20      	cmp	r3, #32
 8000d9e:	d004      	beq.n	8000daa <__aeabi_dadd+0x1be>
 8000da0:	2640      	movs	r6, #64	; 0x40
 8000da2:	1af3      	subs	r3, r6, r3
 8000da4:	4646      	mov	r6, r8
 8000da6:	409e      	lsls	r6, r3
 8000da8:	4332      	orrs	r2, r6
 8000daa:	0017      	movs	r7, r2
 8000dac:	4663      	mov	r3, ip
 8000dae:	1e7a      	subs	r2, r7, #1
 8000db0:	4197      	sbcs	r7, r2
 8000db2:	431f      	orrs	r7, r3
 8000db4:	e0cc      	b.n	8000f50 <__aeabi_dadd+0x364>
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dadd+0x1d0>
 8000dba:	e204      	b.n	80011c6 <__aeabi_dadd+0x5da>
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_dadd+0x1d8>
 8000dc2:	e159      	b.n	8001078 <__aeabi_dadd+0x48c>
 8000dc4:	074b      	lsls	r3, r1, #29
 8000dc6:	08c0      	lsrs	r0, r0, #3
 8000dc8:	4318      	orrs	r0, r3
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	08c9      	lsrs	r1, r1, #3
 8000dce:	031b      	lsls	r3, r3, #12
 8000dd0:	4219      	tst	r1, r3
 8000dd2:	d008      	beq.n	8000de6 <__aeabi_dadd+0x1fa>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	08ed      	lsrs	r5, r5, #3
 8000dd8:	421d      	tst	r5, r3
 8000dda:	d104      	bne.n	8000de6 <__aeabi_dadd+0x1fa>
 8000ddc:	4643      	mov	r3, r8
 8000dde:	08d0      	lsrs	r0, r2, #3
 8000de0:	0759      	lsls	r1, r3, #29
 8000de2:	4308      	orrs	r0, r1
 8000de4:	0029      	movs	r1, r5
 8000de6:	0f42      	lsrs	r2, r0, #29
 8000de8:	00c9      	lsls	r1, r1, #3
 8000dea:	4d7f      	ldr	r5, [pc, #508]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000dec:	4311      	orrs	r1, r2
 8000dee:	00c0      	lsls	r0, r0, #3
 8000df0:	074b      	lsls	r3, r1, #29
 8000df2:	08ca      	lsrs	r2, r1, #3
 8000df4:	497c      	ldr	r1, [pc, #496]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000df6:	08c0      	lsrs	r0, r0, #3
 8000df8:	4303      	orrs	r3, r0
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	d068      	beq.n	8000ed0 <__aeabi_dadd+0x2e4>
 8000dfe:	0312      	lsls	r2, r2, #12
 8000e00:	056d      	lsls	r5, r5, #21
 8000e02:	0b12      	lsrs	r2, r2, #12
 8000e04:	0d6d      	lsrs	r5, r5, #21
 8000e06:	2100      	movs	r1, #0
 8000e08:	0312      	lsls	r2, r2, #12
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	0b13      	lsrs	r3, r2, #12
 8000e0e:	0d0a      	lsrs	r2, r1, #20
 8000e10:	0512      	lsls	r2, r2, #20
 8000e12:	431a      	orrs	r2, r3
 8000e14:	4b76      	ldr	r3, [pc, #472]	; (8000ff0 <__aeabi_dadd+0x404>)
 8000e16:	052d      	lsls	r5, r5, #20
 8000e18:	4013      	ands	r3, r2
 8000e1a:	432b      	orrs	r3, r5
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	07e4      	lsls	r4, r4, #31
 8000e20:	085b      	lsrs	r3, r3, #1
 8000e22:	4323      	orrs	r3, r4
 8000e24:	0019      	movs	r1, r3
 8000e26:	bc1c      	pop	{r2, r3, r4}
 8000e28:	4690      	mov	r8, r2
 8000e2a:	4699      	mov	r9, r3
 8000e2c:	46a2      	mov	sl, r4
 8000e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e30:	003e      	movs	r6, r7
 8000e32:	4316      	orrs	r6, r2
 8000e34:	d012      	beq.n	8000e5c <__aeabi_dadd+0x270>
 8000e36:	1e5e      	subs	r6, r3, #1
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_dadd+0x252>
 8000e3c:	e100      	b.n	8001040 <__aeabi_dadd+0x454>
 8000e3e:	1887      	adds	r7, r0, r2
 8000e40:	4287      	cmp	r7, r0
 8000e42:	4180      	sbcs	r0, r0
 8000e44:	4441      	add	r1, r8
 8000e46:	4240      	negs	r0, r0
 8000e48:	1809      	adds	r1, r1, r0
 8000e4a:	2501      	movs	r5, #1
 8000e4c:	020b      	lsls	r3, r1, #8
 8000e4e:	d533      	bpl.n	8000eb8 <__aeabi_dadd+0x2cc>
 8000e50:	2502      	movs	r5, #2
 8000e52:	e785      	b.n	8000d60 <__aeabi_dadd+0x174>
 8000e54:	4664      	mov	r4, ip
 8000e56:	0033      	movs	r3, r6
 8000e58:	4641      	mov	r1, r8
 8000e5a:	0010      	movs	r0, r2
 8000e5c:	001d      	movs	r5, r3
 8000e5e:	e7c7      	b.n	8000df0 <__aeabi_dadd+0x204>
 8000e60:	2d00      	cmp	r5, #0
 8000e62:	d000      	beq.n	8000e66 <__aeabi_dadd+0x27a>
 8000e64:	e0da      	b.n	800101c <__aeabi_dadd+0x430>
 8000e66:	000c      	movs	r4, r1
 8000e68:	4304      	orrs	r4, r0
 8000e6a:	d0f3      	beq.n	8000e54 <__aeabi_dadd+0x268>
 8000e6c:	1c5c      	adds	r4, r3, #1
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dadd+0x286>
 8000e70:	e19f      	b.n	80011b2 <__aeabi_dadd+0x5c6>
 8000e72:	4c5d      	ldr	r4, [pc, #372]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000e74:	42a6      	cmp	r6, r4
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x28e>
 8000e78:	e12f      	b.n	80010da <__aeabi_dadd+0x4ee>
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	2b38      	cmp	r3, #56	; 0x38
 8000e7e:	dd00      	ble.n	8000e82 <__aeabi_dadd+0x296>
 8000e80:	e166      	b.n	8001150 <__aeabi_dadd+0x564>
 8000e82:	2b1f      	cmp	r3, #31
 8000e84:	dd00      	ble.n	8000e88 <__aeabi_dadd+0x29c>
 8000e86:	e183      	b.n	8001190 <__aeabi_dadd+0x5a4>
 8000e88:	2420      	movs	r4, #32
 8000e8a:	0005      	movs	r5, r0
 8000e8c:	1ae4      	subs	r4, r4, r3
 8000e8e:	000f      	movs	r7, r1
 8000e90:	40dd      	lsrs	r5, r3
 8000e92:	40d9      	lsrs	r1, r3
 8000e94:	40a0      	lsls	r0, r4
 8000e96:	4643      	mov	r3, r8
 8000e98:	40a7      	lsls	r7, r4
 8000e9a:	1a5b      	subs	r3, r3, r1
 8000e9c:	1e44      	subs	r4, r0, #1
 8000e9e:	41a0      	sbcs	r0, r4
 8000ea0:	4698      	mov	r8, r3
 8000ea2:	432f      	orrs	r7, r5
 8000ea4:	4338      	orrs	r0, r7
 8000ea6:	1a17      	subs	r7, r2, r0
 8000ea8:	42ba      	cmp	r2, r7
 8000eaa:	4192      	sbcs	r2, r2
 8000eac:	4643      	mov	r3, r8
 8000eae:	4252      	negs	r2, r2
 8000eb0:	1a99      	subs	r1, r3, r2
 8000eb2:	4664      	mov	r4, ip
 8000eb4:	0035      	movs	r5, r6
 8000eb6:	e6ca      	b.n	8000c4e <__aeabi_dadd+0x62>
 8000eb8:	2207      	movs	r2, #7
 8000eba:	403a      	ands	r2, r7
 8000ebc:	2a00      	cmp	r2, #0
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_dadd+0x2d6>
 8000ec0:	e6f6      	b.n	8000cb0 <__aeabi_dadd+0xc4>
 8000ec2:	074b      	lsls	r3, r1, #29
 8000ec4:	08ca      	lsrs	r2, r1, #3
 8000ec6:	4948      	ldr	r1, [pc, #288]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000ec8:	08ff      	lsrs	r7, r7, #3
 8000eca:	433b      	orrs	r3, r7
 8000ecc:	428d      	cmp	r5, r1
 8000ece:	d196      	bne.n	8000dfe <__aeabi_dadd+0x212>
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	4311      	orrs	r1, r2
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_dadd+0x2ec>
 8000ed6:	e19e      	b.n	8001216 <__aeabi_dadd+0x62a>
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	0309      	lsls	r1, r1, #12
 8000edc:	430a      	orrs	r2, r1
 8000ede:	0312      	lsls	r2, r2, #12
 8000ee0:	0b12      	lsrs	r2, r2, #12
 8000ee2:	4d41      	ldr	r5, [pc, #260]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000ee4:	e78f      	b.n	8000e06 <__aeabi_dadd+0x21a>
 8000ee6:	0015      	movs	r5, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2300      	movs	r3, #0
 8000eec:	e78b      	b.n	8000e06 <__aeabi_dadd+0x21a>
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_dadd+0x308>
 8000ef2:	e0c7      	b.n	8001084 <__aeabi_dadd+0x498>
 8000ef4:	1c6b      	adds	r3, r5, #1
 8000ef6:	055f      	lsls	r7, r3, #21
 8000ef8:	0d7f      	lsrs	r7, r7, #21
 8000efa:	2f01      	cmp	r7, #1
 8000efc:	dc00      	bgt.n	8000f00 <__aeabi_dadd+0x314>
 8000efe:	e0f1      	b.n	80010e4 <__aeabi_dadd+0x4f8>
 8000f00:	4d39      	ldr	r5, [pc, #228]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000f02:	42ab      	cmp	r3, r5
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dadd+0x31c>
 8000f06:	e0b9      	b.n	800107c <__aeabi_dadd+0x490>
 8000f08:	1885      	adds	r5, r0, r2
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	4285      	cmp	r5, r0
 8000f0e:	4189      	sbcs	r1, r1
 8000f10:	4442      	add	r2, r8
 8000f12:	4249      	negs	r1, r1
 8000f14:	1851      	adds	r1, r2, r1
 8000f16:	2207      	movs	r2, #7
 8000f18:	07cf      	lsls	r7, r1, #31
 8000f1a:	086d      	lsrs	r5, r5, #1
 8000f1c:	432f      	orrs	r7, r5
 8000f1e:	0849      	lsrs	r1, r1, #1
 8000f20:	403a      	ands	r2, r7
 8000f22:	001d      	movs	r5, r3
 8000f24:	e6c2      	b.n	8000cac <__aeabi_dadd+0xc0>
 8000f26:	2207      	movs	r2, #7
 8000f28:	4930      	ldr	r1, [pc, #192]	; (8000fec <__aeabi_dadd+0x400>)
 8000f2a:	1aed      	subs	r5, r5, r3
 8000f2c:	4031      	ands	r1, r6
 8000f2e:	403a      	ands	r2, r7
 8000f30:	e6bc      	b.n	8000cac <__aeabi_dadd+0xc0>
 8000f32:	003e      	movs	r6, r7
 8000f34:	3828      	subs	r0, #40	; 0x28
 8000f36:	4086      	lsls	r6, r0
 8000f38:	2700      	movs	r7, #0
 8000f3a:	e69f      	b.n	8000c7c <__aeabi_dadd+0x90>
 8000f3c:	0038      	movs	r0, r7
 8000f3e:	f001 fcc9 	bl	80028d4 <__clzsi2>
 8000f42:	3020      	adds	r0, #32
 8000f44:	e68e      	b.n	8000c64 <__aeabi_dadd+0x78>
 8000f46:	4643      	mov	r3, r8
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	001f      	movs	r7, r3
 8000f4c:	1e7a      	subs	r2, r7, #1
 8000f4e:	4197      	sbcs	r7, r2
 8000f50:	1bc7      	subs	r7, r0, r7
 8000f52:	42b8      	cmp	r0, r7
 8000f54:	4180      	sbcs	r0, r0
 8000f56:	4240      	negs	r0, r0
 8000f58:	1a09      	subs	r1, r1, r0
 8000f5a:	e678      	b.n	8000c4e <__aeabi_dadd+0x62>
 8000f5c:	000e      	movs	r6, r1
 8000f5e:	003b      	movs	r3, r7
 8000f60:	4306      	orrs	r6, r0
 8000f62:	4313      	orrs	r3, r2
 8000f64:	2d00      	cmp	r5, #0
 8000f66:	d161      	bne.n	800102c <__aeabi_dadd+0x440>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_dadd+0x382>
 8000f6c:	e0f4      	b.n	8001158 <__aeabi_dadd+0x56c>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dadd+0x388>
 8000f72:	e11b      	b.n	80011ac <__aeabi_dadd+0x5c0>
 8000f74:	4664      	mov	r4, ip
 8000f76:	0039      	movs	r1, r7
 8000f78:	0010      	movs	r0, r2
 8000f7a:	e739      	b.n	8000df0 <__aeabi_dadd+0x204>
 8000f7c:	4f1a      	ldr	r7, [pc, #104]	; (8000fe8 <__aeabi_dadd+0x3fc>)
 8000f7e:	42bb      	cmp	r3, r7
 8000f80:	d07a      	beq.n	8001078 <__aeabi_dadd+0x48c>
 8000f82:	0033      	movs	r3, r6
 8000f84:	e6ff      	b.n	8000d86 <__aeabi_dadd+0x19a>
 8000f86:	0030      	movs	r0, r6
 8000f88:	3d1f      	subs	r5, #31
 8000f8a:	40e8      	lsrs	r0, r5
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	d003      	beq.n	8000f98 <__aeabi_dadd+0x3ac>
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	1acb      	subs	r3, r1, r3
 8000f94:	409e      	lsls	r6, r3
 8000f96:	4337      	orrs	r7, r6
 8000f98:	1e7b      	subs	r3, r7, #1
 8000f9a:	419f      	sbcs	r7, r3
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	4307      	orrs	r7, r0
 8000fa0:	403a      	ands	r2, r7
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2500      	movs	r5, #0
 8000fa6:	e789      	b.n	8000ebc <__aeabi_dadd+0x2d0>
 8000fa8:	1a17      	subs	r7, r2, r0
 8000faa:	4643      	mov	r3, r8
 8000fac:	42ba      	cmp	r2, r7
 8000fae:	41b6      	sbcs	r6, r6
 8000fb0:	1a59      	subs	r1, r3, r1
 8000fb2:	4276      	negs	r6, r6
 8000fb4:	1b8e      	subs	r6, r1, r6
 8000fb6:	4664      	mov	r4, ip
 8000fb8:	e64e      	b.n	8000c58 <__aeabi_dadd+0x6c>
 8000fba:	2b1f      	cmp	r3, #31
 8000fbc:	dd00      	ble.n	8000fc0 <__aeabi_dadd+0x3d4>
 8000fbe:	e0ad      	b.n	800111c <__aeabi_dadd+0x530>
 8000fc0:	2620      	movs	r6, #32
 8000fc2:	4647      	mov	r7, r8
 8000fc4:	1af6      	subs	r6, r6, r3
 8000fc6:	40b7      	lsls	r7, r6
 8000fc8:	46b9      	mov	r9, r7
 8000fca:	0017      	movs	r7, r2
 8000fcc:	46b2      	mov	sl, r6
 8000fce:	40df      	lsrs	r7, r3
 8000fd0:	464e      	mov	r6, r9
 8000fd2:	433e      	orrs	r6, r7
 8000fd4:	0037      	movs	r7, r6
 8000fd6:	4656      	mov	r6, sl
 8000fd8:	40b2      	lsls	r2, r6
 8000fda:	1e56      	subs	r6, r2, #1
 8000fdc:	41b2      	sbcs	r2, r6
 8000fde:	4317      	orrs	r7, r2
 8000fe0:	4642      	mov	r2, r8
 8000fe2:	40da      	lsrs	r2, r3
 8000fe4:	1889      	adds	r1, r1, r2
 8000fe6:	e6ae      	b.n	8000d46 <__aeabi_dadd+0x15a>
 8000fe8:	000007ff 	.word	0x000007ff
 8000fec:	ff7fffff 	.word	0xff7fffff
 8000ff0:	800fffff 	.word	0x800fffff
 8000ff4:	2620      	movs	r6, #32
 8000ff6:	4647      	mov	r7, r8
 8000ff8:	1af6      	subs	r6, r6, r3
 8000ffa:	40b7      	lsls	r7, r6
 8000ffc:	46b9      	mov	r9, r7
 8000ffe:	0017      	movs	r7, r2
 8001000:	46b2      	mov	sl, r6
 8001002:	40df      	lsrs	r7, r3
 8001004:	464e      	mov	r6, r9
 8001006:	433e      	orrs	r6, r7
 8001008:	0037      	movs	r7, r6
 800100a:	4656      	mov	r6, sl
 800100c:	40b2      	lsls	r2, r6
 800100e:	1e56      	subs	r6, r2, #1
 8001010:	41b2      	sbcs	r2, r6
 8001012:	4317      	orrs	r7, r2
 8001014:	4642      	mov	r2, r8
 8001016:	40da      	lsrs	r2, r3
 8001018:	1a89      	subs	r1, r1, r2
 800101a:	e799      	b.n	8000f50 <__aeabi_dadd+0x364>
 800101c:	4c7f      	ldr	r4, [pc, #508]	; (800121c <__aeabi_dadd+0x630>)
 800101e:	42a6      	cmp	r6, r4
 8001020:	d05b      	beq.n	80010da <__aeabi_dadd+0x4ee>
 8001022:	2480      	movs	r4, #128	; 0x80
 8001024:	0424      	lsls	r4, r4, #16
 8001026:	425b      	negs	r3, r3
 8001028:	4321      	orrs	r1, r4
 800102a:	e727      	b.n	8000e7c <__aeabi_dadd+0x290>
 800102c:	2e00      	cmp	r6, #0
 800102e:	d10c      	bne.n	800104a <__aeabi_dadd+0x45e>
 8001030:	2b00      	cmp	r3, #0
 8001032:	d100      	bne.n	8001036 <__aeabi_dadd+0x44a>
 8001034:	e0cb      	b.n	80011ce <__aeabi_dadd+0x5e2>
 8001036:	4664      	mov	r4, ip
 8001038:	0039      	movs	r1, r7
 800103a:	0010      	movs	r0, r2
 800103c:	4d77      	ldr	r5, [pc, #476]	; (800121c <__aeabi_dadd+0x630>)
 800103e:	e6d7      	b.n	8000df0 <__aeabi_dadd+0x204>
 8001040:	4f76      	ldr	r7, [pc, #472]	; (800121c <__aeabi_dadd+0x630>)
 8001042:	42bb      	cmp	r3, r7
 8001044:	d018      	beq.n	8001078 <__aeabi_dadd+0x48c>
 8001046:	0033      	movs	r3, r6
 8001048:	e675      	b.n	8000d36 <__aeabi_dadd+0x14a>
 800104a:	2b00      	cmp	r3, #0
 800104c:	d014      	beq.n	8001078 <__aeabi_dadd+0x48c>
 800104e:	074b      	lsls	r3, r1, #29
 8001050:	08c0      	lsrs	r0, r0, #3
 8001052:	4318      	orrs	r0, r3
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	08c9      	lsrs	r1, r1, #3
 8001058:	031b      	lsls	r3, r3, #12
 800105a:	4219      	tst	r1, r3
 800105c:	d007      	beq.n	800106e <__aeabi_dadd+0x482>
 800105e:	08fc      	lsrs	r4, r7, #3
 8001060:	421c      	tst	r4, r3
 8001062:	d104      	bne.n	800106e <__aeabi_dadd+0x482>
 8001064:	0779      	lsls	r1, r7, #29
 8001066:	08d0      	lsrs	r0, r2, #3
 8001068:	4308      	orrs	r0, r1
 800106a:	46e1      	mov	r9, ip
 800106c:	0021      	movs	r1, r4
 800106e:	464c      	mov	r4, r9
 8001070:	0f42      	lsrs	r2, r0, #29
 8001072:	00c9      	lsls	r1, r1, #3
 8001074:	4311      	orrs	r1, r2
 8001076:	00c0      	lsls	r0, r0, #3
 8001078:	4d68      	ldr	r5, [pc, #416]	; (800121c <__aeabi_dadd+0x630>)
 800107a:	e6b9      	b.n	8000df0 <__aeabi_dadd+0x204>
 800107c:	001d      	movs	r5, r3
 800107e:	2200      	movs	r2, #0
 8001080:	2300      	movs	r3, #0
 8001082:	e6c0      	b.n	8000e06 <__aeabi_dadd+0x21a>
 8001084:	2d00      	cmp	r5, #0
 8001086:	d15b      	bne.n	8001140 <__aeabi_dadd+0x554>
 8001088:	000d      	movs	r5, r1
 800108a:	4305      	orrs	r5, r0
 800108c:	d100      	bne.n	8001090 <__aeabi_dadd+0x4a4>
 800108e:	e6e2      	b.n	8000e56 <__aeabi_dadd+0x26a>
 8001090:	1c5d      	adds	r5, r3, #1
 8001092:	d100      	bne.n	8001096 <__aeabi_dadd+0x4aa>
 8001094:	e0b0      	b.n	80011f8 <__aeabi_dadd+0x60c>
 8001096:	4d61      	ldr	r5, [pc, #388]	; (800121c <__aeabi_dadd+0x630>)
 8001098:	42ae      	cmp	r6, r5
 800109a:	d01f      	beq.n	80010dc <__aeabi_dadd+0x4f0>
 800109c:	43db      	mvns	r3, r3
 800109e:	2b38      	cmp	r3, #56	; 0x38
 80010a0:	dc71      	bgt.n	8001186 <__aeabi_dadd+0x59a>
 80010a2:	2b1f      	cmp	r3, #31
 80010a4:	dd00      	ble.n	80010a8 <__aeabi_dadd+0x4bc>
 80010a6:	e096      	b.n	80011d6 <__aeabi_dadd+0x5ea>
 80010a8:	2520      	movs	r5, #32
 80010aa:	000f      	movs	r7, r1
 80010ac:	1aed      	subs	r5, r5, r3
 80010ae:	40af      	lsls	r7, r5
 80010b0:	46b9      	mov	r9, r7
 80010b2:	0007      	movs	r7, r0
 80010b4:	46aa      	mov	sl, r5
 80010b6:	40df      	lsrs	r7, r3
 80010b8:	464d      	mov	r5, r9
 80010ba:	433d      	orrs	r5, r7
 80010bc:	002f      	movs	r7, r5
 80010be:	4655      	mov	r5, sl
 80010c0:	40a8      	lsls	r0, r5
 80010c2:	40d9      	lsrs	r1, r3
 80010c4:	1e45      	subs	r5, r0, #1
 80010c6:	41a8      	sbcs	r0, r5
 80010c8:	4488      	add	r8, r1
 80010ca:	4307      	orrs	r7, r0
 80010cc:	18bf      	adds	r7, r7, r2
 80010ce:	4297      	cmp	r7, r2
 80010d0:	4192      	sbcs	r2, r2
 80010d2:	4251      	negs	r1, r2
 80010d4:	4441      	add	r1, r8
 80010d6:	0035      	movs	r5, r6
 80010d8:	e63a      	b.n	8000d50 <__aeabi_dadd+0x164>
 80010da:	4664      	mov	r4, ip
 80010dc:	0035      	movs	r5, r6
 80010de:	4641      	mov	r1, r8
 80010e0:	0010      	movs	r0, r2
 80010e2:	e685      	b.n	8000df0 <__aeabi_dadd+0x204>
 80010e4:	000b      	movs	r3, r1
 80010e6:	4303      	orrs	r3, r0
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	d000      	beq.n	80010ee <__aeabi_dadd+0x502>
 80010ec:	e663      	b.n	8000db6 <__aeabi_dadd+0x1ca>
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f5      	beq.n	80010de <__aeabi_dadd+0x4f2>
 80010f2:	4643      	mov	r3, r8
 80010f4:	4313      	orrs	r3, r2
 80010f6:	d100      	bne.n	80010fa <__aeabi_dadd+0x50e>
 80010f8:	e67a      	b.n	8000df0 <__aeabi_dadd+0x204>
 80010fa:	1887      	adds	r7, r0, r2
 80010fc:	4287      	cmp	r7, r0
 80010fe:	4180      	sbcs	r0, r0
 8001100:	2207      	movs	r2, #7
 8001102:	4441      	add	r1, r8
 8001104:	4240      	negs	r0, r0
 8001106:	1809      	adds	r1, r1, r0
 8001108:	403a      	ands	r2, r7
 800110a:	020b      	lsls	r3, r1, #8
 800110c:	d400      	bmi.n	8001110 <__aeabi_dadd+0x524>
 800110e:	e6d5      	b.n	8000ebc <__aeabi_dadd+0x2d0>
 8001110:	4b43      	ldr	r3, [pc, #268]	; (8001220 <__aeabi_dadd+0x634>)
 8001112:	3501      	adds	r5, #1
 8001114:	4019      	ands	r1, r3
 8001116:	e5c9      	b.n	8000cac <__aeabi_dadd+0xc0>
 8001118:	0038      	movs	r0, r7
 800111a:	e669      	b.n	8000df0 <__aeabi_dadd+0x204>
 800111c:	001e      	movs	r6, r3
 800111e:	4647      	mov	r7, r8
 8001120:	3e20      	subs	r6, #32
 8001122:	40f7      	lsrs	r7, r6
 8001124:	46bc      	mov	ip, r7
 8001126:	2b20      	cmp	r3, #32
 8001128:	d004      	beq.n	8001134 <__aeabi_dadd+0x548>
 800112a:	2640      	movs	r6, #64	; 0x40
 800112c:	1af3      	subs	r3, r6, r3
 800112e:	4646      	mov	r6, r8
 8001130:	409e      	lsls	r6, r3
 8001132:	4332      	orrs	r2, r6
 8001134:	0017      	movs	r7, r2
 8001136:	4663      	mov	r3, ip
 8001138:	1e7a      	subs	r2, r7, #1
 800113a:	4197      	sbcs	r7, r2
 800113c:	431f      	orrs	r7, r3
 800113e:	e602      	b.n	8000d46 <__aeabi_dadd+0x15a>
 8001140:	4d36      	ldr	r5, [pc, #216]	; (800121c <__aeabi_dadd+0x630>)
 8001142:	42ae      	cmp	r6, r5
 8001144:	d0ca      	beq.n	80010dc <__aeabi_dadd+0x4f0>
 8001146:	2580      	movs	r5, #128	; 0x80
 8001148:	042d      	lsls	r5, r5, #16
 800114a:	425b      	negs	r3, r3
 800114c:	4329      	orrs	r1, r5
 800114e:	e7a6      	b.n	800109e <__aeabi_dadd+0x4b2>
 8001150:	4308      	orrs	r0, r1
 8001152:	1e41      	subs	r1, r0, #1
 8001154:	4188      	sbcs	r0, r1
 8001156:	e6a6      	b.n	8000ea6 <__aeabi_dadd+0x2ba>
 8001158:	2b00      	cmp	r3, #0
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x572>
 800115c:	e648      	b.n	8000df0 <__aeabi_dadd+0x204>
 800115e:	1a87      	subs	r7, r0, r2
 8001160:	4643      	mov	r3, r8
 8001162:	42b8      	cmp	r0, r7
 8001164:	41b6      	sbcs	r6, r6
 8001166:	1acb      	subs	r3, r1, r3
 8001168:	4276      	negs	r6, r6
 800116a:	1b9e      	subs	r6, r3, r6
 800116c:	0233      	lsls	r3, r6, #8
 800116e:	d54b      	bpl.n	8001208 <__aeabi_dadd+0x61c>
 8001170:	1a17      	subs	r7, r2, r0
 8001172:	4643      	mov	r3, r8
 8001174:	42ba      	cmp	r2, r7
 8001176:	4192      	sbcs	r2, r2
 8001178:	1a59      	subs	r1, r3, r1
 800117a:	4252      	negs	r2, r2
 800117c:	1a89      	subs	r1, r1, r2
 800117e:	2207      	movs	r2, #7
 8001180:	4664      	mov	r4, ip
 8001182:	403a      	ands	r2, r7
 8001184:	e592      	b.n	8000cac <__aeabi_dadd+0xc0>
 8001186:	4301      	orrs	r1, r0
 8001188:	000f      	movs	r7, r1
 800118a:	1e79      	subs	r1, r7, #1
 800118c:	418f      	sbcs	r7, r1
 800118e:	e79d      	b.n	80010cc <__aeabi_dadd+0x4e0>
 8001190:	001c      	movs	r4, r3
 8001192:	000f      	movs	r7, r1
 8001194:	3c20      	subs	r4, #32
 8001196:	40e7      	lsrs	r7, r4
 8001198:	2b20      	cmp	r3, #32
 800119a:	d003      	beq.n	80011a4 <__aeabi_dadd+0x5b8>
 800119c:	2440      	movs	r4, #64	; 0x40
 800119e:	1ae3      	subs	r3, r4, r3
 80011a0:	4099      	lsls	r1, r3
 80011a2:	4308      	orrs	r0, r1
 80011a4:	1e41      	subs	r1, r0, #1
 80011a6:	4188      	sbcs	r0, r1
 80011a8:	4338      	orrs	r0, r7
 80011aa:	e67c      	b.n	8000ea6 <__aeabi_dadd+0x2ba>
 80011ac:	2200      	movs	r2, #0
 80011ae:	2400      	movs	r4, #0
 80011b0:	e625      	b.n	8000dfe <__aeabi_dadd+0x212>
 80011b2:	1a17      	subs	r7, r2, r0
 80011b4:	4643      	mov	r3, r8
 80011b6:	42ba      	cmp	r2, r7
 80011b8:	4192      	sbcs	r2, r2
 80011ba:	1a59      	subs	r1, r3, r1
 80011bc:	4252      	negs	r2, r2
 80011be:	1a89      	subs	r1, r1, r2
 80011c0:	4664      	mov	r4, ip
 80011c2:	0035      	movs	r5, r6
 80011c4:	e543      	b.n	8000c4e <__aeabi_dadd+0x62>
 80011c6:	4641      	mov	r1, r8
 80011c8:	0010      	movs	r0, r2
 80011ca:	4d14      	ldr	r5, [pc, #80]	; (800121c <__aeabi_dadd+0x630>)
 80011cc:	e610      	b.n	8000df0 <__aeabi_dadd+0x204>
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	2400      	movs	r4, #0
 80011d2:	0312      	lsls	r2, r2, #12
 80011d4:	e680      	b.n	8000ed8 <__aeabi_dadd+0x2ec>
 80011d6:	001d      	movs	r5, r3
 80011d8:	000f      	movs	r7, r1
 80011da:	3d20      	subs	r5, #32
 80011dc:	40ef      	lsrs	r7, r5
 80011de:	46bc      	mov	ip, r7
 80011e0:	2b20      	cmp	r3, #32
 80011e2:	d003      	beq.n	80011ec <__aeabi_dadd+0x600>
 80011e4:	2540      	movs	r5, #64	; 0x40
 80011e6:	1aeb      	subs	r3, r5, r3
 80011e8:	4099      	lsls	r1, r3
 80011ea:	4308      	orrs	r0, r1
 80011ec:	0007      	movs	r7, r0
 80011ee:	4663      	mov	r3, ip
 80011f0:	1e78      	subs	r0, r7, #1
 80011f2:	4187      	sbcs	r7, r0
 80011f4:	431f      	orrs	r7, r3
 80011f6:	e769      	b.n	80010cc <__aeabi_dadd+0x4e0>
 80011f8:	1887      	adds	r7, r0, r2
 80011fa:	4297      	cmp	r7, r2
 80011fc:	419b      	sbcs	r3, r3
 80011fe:	4441      	add	r1, r8
 8001200:	425b      	negs	r3, r3
 8001202:	18c9      	adds	r1, r1, r3
 8001204:	0035      	movs	r5, r6
 8001206:	e5a3      	b.n	8000d50 <__aeabi_dadd+0x164>
 8001208:	003b      	movs	r3, r7
 800120a:	4333      	orrs	r3, r6
 800120c:	d0ce      	beq.n	80011ac <__aeabi_dadd+0x5c0>
 800120e:	2207      	movs	r2, #7
 8001210:	0031      	movs	r1, r6
 8001212:	403a      	ands	r2, r7
 8001214:	e652      	b.n	8000ebc <__aeabi_dadd+0x2d0>
 8001216:	2300      	movs	r3, #0
 8001218:	001a      	movs	r2, r3
 800121a:	e5f4      	b.n	8000e06 <__aeabi_dadd+0x21a>
 800121c:	000007ff 	.word	0x000007ff
 8001220:	ff7fffff 	.word	0xff7fffff

08001224 <__aeabi_ddiv>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	4657      	mov	r7, sl
 8001228:	46de      	mov	lr, fp
 800122a:	464e      	mov	r6, r9
 800122c:	4645      	mov	r5, r8
 800122e:	b5e0      	push	{r5, r6, r7, lr}
 8001230:	4683      	mov	fp, r0
 8001232:	0007      	movs	r7, r0
 8001234:	030e      	lsls	r6, r1, #12
 8001236:	0048      	lsls	r0, r1, #1
 8001238:	b085      	sub	sp, #20
 800123a:	4692      	mov	sl, r2
 800123c:	001c      	movs	r4, r3
 800123e:	0b36      	lsrs	r6, r6, #12
 8001240:	0d40      	lsrs	r0, r0, #21
 8001242:	0fcd      	lsrs	r5, r1, #31
 8001244:	2800      	cmp	r0, #0
 8001246:	d100      	bne.n	800124a <__aeabi_ddiv+0x26>
 8001248:	e09d      	b.n	8001386 <__aeabi_ddiv+0x162>
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <__aeabi_ddiv+0x27c>)
 800124c:	4298      	cmp	r0, r3
 800124e:	d039      	beq.n	80012c4 <__aeabi_ddiv+0xa0>
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	00f6      	lsls	r6, r6, #3
 8001254:	041b      	lsls	r3, r3, #16
 8001256:	431e      	orrs	r6, r3
 8001258:	4a92      	ldr	r2, [pc, #584]	; (80014a4 <__aeabi_ddiv+0x280>)
 800125a:	0f7b      	lsrs	r3, r7, #29
 800125c:	4333      	orrs	r3, r6
 800125e:	4699      	mov	r9, r3
 8001260:	4694      	mov	ip, r2
 8001262:	0003      	movs	r3, r0
 8001264:	4463      	add	r3, ip
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2300      	movs	r3, #0
 800126a:	2600      	movs	r6, #0
 800126c:	00ff      	lsls	r7, r7, #3
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	0323      	lsls	r3, r4, #12
 8001272:	0b1b      	lsrs	r3, r3, #12
 8001274:	4698      	mov	r8, r3
 8001276:	0063      	lsls	r3, r4, #1
 8001278:	0fe4      	lsrs	r4, r4, #31
 800127a:	4652      	mov	r2, sl
 800127c:	0d5b      	lsrs	r3, r3, #21
 800127e:	9401      	str	r4, [sp, #4]
 8001280:	d100      	bne.n	8001284 <__aeabi_ddiv+0x60>
 8001282:	e0b3      	b.n	80013ec <__aeabi_ddiv+0x1c8>
 8001284:	4986      	ldr	r1, [pc, #536]	; (80014a0 <__aeabi_ddiv+0x27c>)
 8001286:	428b      	cmp	r3, r1
 8001288:	d100      	bne.n	800128c <__aeabi_ddiv+0x68>
 800128a:	e09e      	b.n	80013ca <__aeabi_ddiv+0x1a6>
 800128c:	4642      	mov	r2, r8
 800128e:	00d1      	lsls	r1, r2, #3
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	0412      	lsls	r2, r2, #16
 8001294:	430a      	orrs	r2, r1
 8001296:	4651      	mov	r1, sl
 8001298:	0f49      	lsrs	r1, r1, #29
 800129a:	4311      	orrs	r1, r2
 800129c:	468b      	mov	fp, r1
 800129e:	4981      	ldr	r1, [pc, #516]	; (80014a4 <__aeabi_ddiv+0x280>)
 80012a0:	4652      	mov	r2, sl
 80012a2:	468c      	mov	ip, r1
 80012a4:	9900      	ldr	r1, [sp, #0]
 80012a6:	4463      	add	r3, ip
 80012a8:	1acb      	subs	r3, r1, r3
 80012aa:	2100      	movs	r1, #0
 80012ac:	00d2      	lsls	r2, r2, #3
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	002b      	movs	r3, r5
 80012b2:	4063      	eors	r3, r4
 80012b4:	469a      	mov	sl, r3
 80012b6:	2e0f      	cmp	r6, #15
 80012b8:	d900      	bls.n	80012bc <__aeabi_ddiv+0x98>
 80012ba:	e105      	b.n	80014c8 <__aeabi_ddiv+0x2a4>
 80012bc:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <__aeabi_ddiv+0x284>)
 80012be:	00b6      	lsls	r6, r6, #2
 80012c0:	599b      	ldr	r3, [r3, r6]
 80012c2:	469f      	mov	pc, r3
 80012c4:	465b      	mov	r3, fp
 80012c6:	4333      	orrs	r3, r6
 80012c8:	4699      	mov	r9, r3
 80012ca:	d000      	beq.n	80012ce <__aeabi_ddiv+0xaa>
 80012cc:	e0b8      	b.n	8001440 <__aeabi_ddiv+0x21c>
 80012ce:	2302      	movs	r3, #2
 80012d0:	2608      	movs	r6, #8
 80012d2:	2700      	movs	r7, #0
 80012d4:	9000      	str	r0, [sp, #0]
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	e7ca      	b.n	8001270 <__aeabi_ddiv+0x4c>
 80012da:	46cb      	mov	fp, r9
 80012dc:	003a      	movs	r2, r7
 80012de:	9902      	ldr	r1, [sp, #8]
 80012e0:	9501      	str	r5, [sp, #4]
 80012e2:	9b01      	ldr	r3, [sp, #4]
 80012e4:	469a      	mov	sl, r3
 80012e6:	2902      	cmp	r1, #2
 80012e8:	d027      	beq.n	800133a <__aeabi_ddiv+0x116>
 80012ea:	2903      	cmp	r1, #3
 80012ec:	d100      	bne.n	80012f0 <__aeabi_ddiv+0xcc>
 80012ee:	e280      	b.n	80017f2 <__aeabi_ddiv+0x5ce>
 80012f0:	2901      	cmp	r1, #1
 80012f2:	d044      	beq.n	800137e <__aeabi_ddiv+0x15a>
 80012f4:	496d      	ldr	r1, [pc, #436]	; (80014ac <__aeabi_ddiv+0x288>)
 80012f6:	9b00      	ldr	r3, [sp, #0]
 80012f8:	468c      	mov	ip, r1
 80012fa:	4463      	add	r3, ip
 80012fc:	001c      	movs	r4, r3
 80012fe:	2c00      	cmp	r4, #0
 8001300:	dd38      	ble.n	8001374 <__aeabi_ddiv+0x150>
 8001302:	0753      	lsls	r3, r2, #29
 8001304:	d000      	beq.n	8001308 <__aeabi_ddiv+0xe4>
 8001306:	e213      	b.n	8001730 <__aeabi_ddiv+0x50c>
 8001308:	08d2      	lsrs	r2, r2, #3
 800130a:	465b      	mov	r3, fp
 800130c:	01db      	lsls	r3, r3, #7
 800130e:	d509      	bpl.n	8001324 <__aeabi_ddiv+0x100>
 8001310:	4659      	mov	r1, fp
 8001312:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <__aeabi_ddiv+0x28c>)
 8001314:	4019      	ands	r1, r3
 8001316:	468b      	mov	fp, r1
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	00c9      	lsls	r1, r1, #3
 800131c:	468c      	mov	ip, r1
 800131e:	9b00      	ldr	r3, [sp, #0]
 8001320:	4463      	add	r3, ip
 8001322:	001c      	movs	r4, r3
 8001324:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <__aeabi_ddiv+0x290>)
 8001326:	429c      	cmp	r4, r3
 8001328:	dc07      	bgt.n	800133a <__aeabi_ddiv+0x116>
 800132a:	465b      	mov	r3, fp
 800132c:	0564      	lsls	r4, r4, #21
 800132e:	075f      	lsls	r7, r3, #29
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	4317      	orrs	r7, r2
 8001334:	0b1b      	lsrs	r3, r3, #12
 8001336:	0d62      	lsrs	r2, r4, #21
 8001338:	e002      	b.n	8001340 <__aeabi_ddiv+0x11c>
 800133a:	2300      	movs	r3, #0
 800133c:	2700      	movs	r7, #0
 800133e:	4a58      	ldr	r2, [pc, #352]	; (80014a0 <__aeabi_ddiv+0x27c>)
 8001340:	2100      	movs	r1, #0
 8001342:	031b      	lsls	r3, r3, #12
 8001344:	0b1c      	lsrs	r4, r3, #12
 8001346:	0d0b      	lsrs	r3, r1, #20
 8001348:	051b      	lsls	r3, r3, #20
 800134a:	4323      	orrs	r3, r4
 800134c:	0514      	lsls	r4, r2, #20
 800134e:	4a5a      	ldr	r2, [pc, #360]	; (80014b8 <__aeabi_ddiv+0x294>)
 8001350:	0038      	movs	r0, r7
 8001352:	4013      	ands	r3, r2
 8001354:	431c      	orrs	r4, r3
 8001356:	4653      	mov	r3, sl
 8001358:	0064      	lsls	r4, r4, #1
 800135a:	07db      	lsls	r3, r3, #31
 800135c:	0864      	lsrs	r4, r4, #1
 800135e:	431c      	orrs	r4, r3
 8001360:	0021      	movs	r1, r4
 8001362:	b005      	add	sp, #20
 8001364:	bc3c      	pop	{r2, r3, r4, r5}
 8001366:	4690      	mov	r8, r2
 8001368:	4699      	mov	r9, r3
 800136a:	46a2      	mov	sl, r4
 800136c:	46ab      	mov	fp, r5
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001370:	2201      	movs	r2, #1
 8001372:	4252      	negs	r2, r2
 8001374:	2301      	movs	r3, #1
 8001376:	1b1b      	subs	r3, r3, r4
 8001378:	2b38      	cmp	r3, #56	; 0x38
 800137a:	dc00      	bgt.n	800137e <__aeabi_ddiv+0x15a>
 800137c:	e1ad      	b.n	80016da <__aeabi_ddiv+0x4b6>
 800137e:	2200      	movs	r2, #0
 8001380:	2300      	movs	r3, #0
 8001382:	2700      	movs	r7, #0
 8001384:	e7dc      	b.n	8001340 <__aeabi_ddiv+0x11c>
 8001386:	465b      	mov	r3, fp
 8001388:	4333      	orrs	r3, r6
 800138a:	4699      	mov	r9, r3
 800138c:	d05e      	beq.n	800144c <__aeabi_ddiv+0x228>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d100      	bne.n	8001394 <__aeabi_ddiv+0x170>
 8001392:	e18a      	b.n	80016aa <__aeabi_ddiv+0x486>
 8001394:	0030      	movs	r0, r6
 8001396:	f001 fa9d 	bl	80028d4 <__clzsi2>
 800139a:	0003      	movs	r3, r0
 800139c:	3b0b      	subs	r3, #11
 800139e:	2b1c      	cmp	r3, #28
 80013a0:	dd00      	ble.n	80013a4 <__aeabi_ddiv+0x180>
 80013a2:	e17b      	b.n	800169c <__aeabi_ddiv+0x478>
 80013a4:	221d      	movs	r2, #29
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	465a      	mov	r2, fp
 80013aa:	0001      	movs	r1, r0
 80013ac:	40da      	lsrs	r2, r3
 80013ae:	3908      	subs	r1, #8
 80013b0:	408e      	lsls	r6, r1
 80013b2:	0013      	movs	r3, r2
 80013b4:	465f      	mov	r7, fp
 80013b6:	4333      	orrs	r3, r6
 80013b8:	4699      	mov	r9, r3
 80013ba:	408f      	lsls	r7, r1
 80013bc:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <__aeabi_ddiv+0x298>)
 80013be:	2600      	movs	r6, #0
 80013c0:	1a1b      	subs	r3, r3, r0
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2300      	movs	r3, #0
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	e752      	b.n	8001270 <__aeabi_ddiv+0x4c>
 80013ca:	4641      	mov	r1, r8
 80013cc:	4653      	mov	r3, sl
 80013ce:	430b      	orrs	r3, r1
 80013d0:	493b      	ldr	r1, [pc, #236]	; (80014c0 <__aeabi_ddiv+0x29c>)
 80013d2:	469b      	mov	fp, r3
 80013d4:	468c      	mov	ip, r1
 80013d6:	9b00      	ldr	r3, [sp, #0]
 80013d8:	4463      	add	r3, ip
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	465b      	mov	r3, fp
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d13b      	bne.n	800145a <__aeabi_ddiv+0x236>
 80013e2:	2302      	movs	r3, #2
 80013e4:	2200      	movs	r2, #0
 80013e6:	431e      	orrs	r6, r3
 80013e8:	2102      	movs	r1, #2
 80013ea:	e761      	b.n	80012b0 <__aeabi_ddiv+0x8c>
 80013ec:	4643      	mov	r3, r8
 80013ee:	4313      	orrs	r3, r2
 80013f0:	469b      	mov	fp, r3
 80013f2:	d037      	beq.n	8001464 <__aeabi_ddiv+0x240>
 80013f4:	4643      	mov	r3, r8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d100      	bne.n	80013fc <__aeabi_ddiv+0x1d8>
 80013fa:	e162      	b.n	80016c2 <__aeabi_ddiv+0x49e>
 80013fc:	4640      	mov	r0, r8
 80013fe:	f001 fa69 	bl	80028d4 <__clzsi2>
 8001402:	0003      	movs	r3, r0
 8001404:	3b0b      	subs	r3, #11
 8001406:	2b1c      	cmp	r3, #28
 8001408:	dd00      	ble.n	800140c <__aeabi_ddiv+0x1e8>
 800140a:	e153      	b.n	80016b4 <__aeabi_ddiv+0x490>
 800140c:	0002      	movs	r2, r0
 800140e:	4641      	mov	r1, r8
 8001410:	3a08      	subs	r2, #8
 8001412:	4091      	lsls	r1, r2
 8001414:	4688      	mov	r8, r1
 8001416:	211d      	movs	r1, #29
 8001418:	1acb      	subs	r3, r1, r3
 800141a:	4651      	mov	r1, sl
 800141c:	40d9      	lsrs	r1, r3
 800141e:	000b      	movs	r3, r1
 8001420:	4641      	mov	r1, r8
 8001422:	430b      	orrs	r3, r1
 8001424:	469b      	mov	fp, r3
 8001426:	4653      	mov	r3, sl
 8001428:	4093      	lsls	r3, r2
 800142a:	001a      	movs	r2, r3
 800142c:	9b00      	ldr	r3, [sp, #0]
 800142e:	4925      	ldr	r1, [pc, #148]	; (80014c4 <__aeabi_ddiv+0x2a0>)
 8001430:	469c      	mov	ip, r3
 8001432:	4460      	add	r0, ip
 8001434:	0003      	movs	r3, r0
 8001436:	468c      	mov	ip, r1
 8001438:	4463      	add	r3, ip
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2100      	movs	r1, #0
 800143e:	e737      	b.n	80012b0 <__aeabi_ddiv+0x8c>
 8001440:	2303      	movs	r3, #3
 8001442:	46b1      	mov	r9, r6
 8001444:	9000      	str	r0, [sp, #0]
 8001446:	260c      	movs	r6, #12
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	e711      	b.n	8001270 <__aeabi_ddiv+0x4c>
 800144c:	2300      	movs	r3, #0
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	2604      	movs	r6, #4
 8001454:	2700      	movs	r7, #0
 8001456:	9302      	str	r3, [sp, #8]
 8001458:	e70a      	b.n	8001270 <__aeabi_ddiv+0x4c>
 800145a:	2303      	movs	r3, #3
 800145c:	46c3      	mov	fp, r8
 800145e:	431e      	orrs	r6, r3
 8001460:	2103      	movs	r1, #3
 8001462:	e725      	b.n	80012b0 <__aeabi_ddiv+0x8c>
 8001464:	3301      	adds	r3, #1
 8001466:	431e      	orrs	r6, r3
 8001468:	2200      	movs	r2, #0
 800146a:	2101      	movs	r1, #1
 800146c:	e720      	b.n	80012b0 <__aeabi_ddiv+0x8c>
 800146e:	2300      	movs	r3, #0
 8001470:	469a      	mov	sl, r3
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	2700      	movs	r7, #0
 8001476:	031b      	lsls	r3, r3, #12
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <__aeabi_ddiv+0x27c>)
 800147a:	e761      	b.n	8001340 <__aeabi_ddiv+0x11c>
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	4649      	mov	r1, r9
 8001480:	031b      	lsls	r3, r3, #12
 8001482:	4219      	tst	r1, r3
 8001484:	d100      	bne.n	8001488 <__aeabi_ddiv+0x264>
 8001486:	e0e2      	b.n	800164e <__aeabi_ddiv+0x42a>
 8001488:	4659      	mov	r1, fp
 800148a:	4219      	tst	r1, r3
 800148c:	d000      	beq.n	8001490 <__aeabi_ddiv+0x26c>
 800148e:	e0de      	b.n	800164e <__aeabi_ddiv+0x42a>
 8001490:	430b      	orrs	r3, r1
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	0017      	movs	r7, r2
 8001496:	0b1b      	lsrs	r3, r3, #12
 8001498:	46a2      	mov	sl, r4
 800149a:	4a01      	ldr	r2, [pc, #4]	; (80014a0 <__aeabi_ddiv+0x27c>)
 800149c:	e750      	b.n	8001340 <__aeabi_ddiv+0x11c>
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	000007ff 	.word	0x000007ff
 80014a4:	fffffc01 	.word	0xfffffc01
 80014a8:	0800970c 	.word	0x0800970c
 80014ac:	000003ff 	.word	0x000003ff
 80014b0:	feffffff 	.word	0xfeffffff
 80014b4:	000007fe 	.word	0x000007fe
 80014b8:	800fffff 	.word	0x800fffff
 80014bc:	fffffc0d 	.word	0xfffffc0d
 80014c0:	fffff801 	.word	0xfffff801
 80014c4:	000003f3 	.word	0x000003f3
 80014c8:	45d9      	cmp	r9, fp
 80014ca:	d900      	bls.n	80014ce <__aeabi_ddiv+0x2aa>
 80014cc:	e0cb      	b.n	8001666 <__aeabi_ddiv+0x442>
 80014ce:	d100      	bne.n	80014d2 <__aeabi_ddiv+0x2ae>
 80014d0:	e0c6      	b.n	8001660 <__aeabi_ddiv+0x43c>
 80014d2:	003c      	movs	r4, r7
 80014d4:	4648      	mov	r0, r9
 80014d6:	2700      	movs	r7, #0
 80014d8:	9b00      	ldr	r3, [sp, #0]
 80014da:	3b01      	subs	r3, #1
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	465b      	mov	r3, fp
 80014e0:	0e16      	lsrs	r6, r2, #24
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	431e      	orrs	r6, r3
 80014e6:	0213      	lsls	r3, r2, #8
 80014e8:	4698      	mov	r8, r3
 80014ea:	0433      	lsls	r3, r6, #16
 80014ec:	0c1b      	lsrs	r3, r3, #16
 80014ee:	4699      	mov	r9, r3
 80014f0:	0c31      	lsrs	r1, r6, #16
 80014f2:	9101      	str	r1, [sp, #4]
 80014f4:	f7fe fea0 	bl	8000238 <__aeabi_uidivmod>
 80014f8:	464a      	mov	r2, r9
 80014fa:	4342      	muls	r2, r0
 80014fc:	040b      	lsls	r3, r1, #16
 80014fe:	0c21      	lsrs	r1, r4, #16
 8001500:	0005      	movs	r5, r0
 8001502:	4319      	orrs	r1, r3
 8001504:	428a      	cmp	r2, r1
 8001506:	d907      	bls.n	8001518 <__aeabi_ddiv+0x2f4>
 8001508:	1989      	adds	r1, r1, r6
 800150a:	3d01      	subs	r5, #1
 800150c:	428e      	cmp	r6, r1
 800150e:	d803      	bhi.n	8001518 <__aeabi_ddiv+0x2f4>
 8001510:	428a      	cmp	r2, r1
 8001512:	d901      	bls.n	8001518 <__aeabi_ddiv+0x2f4>
 8001514:	1e85      	subs	r5, r0, #2
 8001516:	1989      	adds	r1, r1, r6
 8001518:	1a88      	subs	r0, r1, r2
 800151a:	9901      	ldr	r1, [sp, #4]
 800151c:	f7fe fe8c 	bl	8000238 <__aeabi_uidivmod>
 8001520:	0409      	lsls	r1, r1, #16
 8001522:	468c      	mov	ip, r1
 8001524:	464a      	mov	r2, r9
 8001526:	0421      	lsls	r1, r4, #16
 8001528:	4664      	mov	r4, ip
 800152a:	4342      	muls	r2, r0
 800152c:	0c09      	lsrs	r1, r1, #16
 800152e:	0003      	movs	r3, r0
 8001530:	4321      	orrs	r1, r4
 8001532:	428a      	cmp	r2, r1
 8001534:	d904      	bls.n	8001540 <__aeabi_ddiv+0x31c>
 8001536:	1989      	adds	r1, r1, r6
 8001538:	3b01      	subs	r3, #1
 800153a:	428e      	cmp	r6, r1
 800153c:	d800      	bhi.n	8001540 <__aeabi_ddiv+0x31c>
 800153e:	e0f1      	b.n	8001724 <__aeabi_ddiv+0x500>
 8001540:	042d      	lsls	r5, r5, #16
 8001542:	431d      	orrs	r5, r3
 8001544:	46ab      	mov	fp, r5
 8001546:	4643      	mov	r3, r8
 8001548:	1a89      	subs	r1, r1, r2
 800154a:	4642      	mov	r2, r8
 800154c:	0c28      	lsrs	r0, r5, #16
 800154e:	0412      	lsls	r2, r2, #16
 8001550:	0c1d      	lsrs	r5, r3, #16
 8001552:	465b      	mov	r3, fp
 8001554:	0c14      	lsrs	r4, r2, #16
 8001556:	0022      	movs	r2, r4
 8001558:	041b      	lsls	r3, r3, #16
 800155a:	0c1b      	lsrs	r3, r3, #16
 800155c:	435a      	muls	r2, r3
 800155e:	9403      	str	r4, [sp, #12]
 8001560:	436b      	muls	r3, r5
 8001562:	4344      	muls	r4, r0
 8001564:	9502      	str	r5, [sp, #8]
 8001566:	4368      	muls	r0, r5
 8001568:	191b      	adds	r3, r3, r4
 800156a:	0c15      	lsrs	r5, r2, #16
 800156c:	18eb      	adds	r3, r5, r3
 800156e:	429c      	cmp	r4, r3
 8001570:	d903      	bls.n	800157a <__aeabi_ddiv+0x356>
 8001572:	2480      	movs	r4, #128	; 0x80
 8001574:	0264      	lsls	r4, r4, #9
 8001576:	46a4      	mov	ip, r4
 8001578:	4460      	add	r0, ip
 800157a:	0c1c      	lsrs	r4, r3, #16
 800157c:	0415      	lsls	r5, r2, #16
 800157e:	041b      	lsls	r3, r3, #16
 8001580:	0c2d      	lsrs	r5, r5, #16
 8001582:	1820      	adds	r0, r4, r0
 8001584:	195d      	adds	r5, r3, r5
 8001586:	4281      	cmp	r1, r0
 8001588:	d377      	bcc.n	800167a <__aeabi_ddiv+0x456>
 800158a:	d073      	beq.n	8001674 <__aeabi_ddiv+0x450>
 800158c:	1a0c      	subs	r4, r1, r0
 800158e:	4aa2      	ldr	r2, [pc, #648]	; (8001818 <__aeabi_ddiv+0x5f4>)
 8001590:	1b7d      	subs	r5, r7, r5
 8001592:	42af      	cmp	r7, r5
 8001594:	41bf      	sbcs	r7, r7
 8001596:	4694      	mov	ip, r2
 8001598:	9b00      	ldr	r3, [sp, #0]
 800159a:	427f      	negs	r7, r7
 800159c:	4463      	add	r3, ip
 800159e:	1be0      	subs	r0, r4, r7
 80015a0:	001c      	movs	r4, r3
 80015a2:	4286      	cmp	r6, r0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_ddiv+0x384>
 80015a6:	e0db      	b.n	8001760 <__aeabi_ddiv+0x53c>
 80015a8:	9901      	ldr	r1, [sp, #4]
 80015aa:	f7fe fe45 	bl	8000238 <__aeabi_uidivmod>
 80015ae:	464a      	mov	r2, r9
 80015b0:	4342      	muls	r2, r0
 80015b2:	040b      	lsls	r3, r1, #16
 80015b4:	0c29      	lsrs	r1, r5, #16
 80015b6:	0007      	movs	r7, r0
 80015b8:	4319      	orrs	r1, r3
 80015ba:	428a      	cmp	r2, r1
 80015bc:	d907      	bls.n	80015ce <__aeabi_ddiv+0x3aa>
 80015be:	1989      	adds	r1, r1, r6
 80015c0:	3f01      	subs	r7, #1
 80015c2:	428e      	cmp	r6, r1
 80015c4:	d803      	bhi.n	80015ce <__aeabi_ddiv+0x3aa>
 80015c6:	428a      	cmp	r2, r1
 80015c8:	d901      	bls.n	80015ce <__aeabi_ddiv+0x3aa>
 80015ca:	1e87      	subs	r7, r0, #2
 80015cc:	1989      	adds	r1, r1, r6
 80015ce:	1a88      	subs	r0, r1, r2
 80015d0:	9901      	ldr	r1, [sp, #4]
 80015d2:	f7fe fe31 	bl	8000238 <__aeabi_uidivmod>
 80015d6:	0409      	lsls	r1, r1, #16
 80015d8:	464a      	mov	r2, r9
 80015da:	4689      	mov	r9, r1
 80015dc:	0429      	lsls	r1, r5, #16
 80015de:	464d      	mov	r5, r9
 80015e0:	4342      	muls	r2, r0
 80015e2:	0c09      	lsrs	r1, r1, #16
 80015e4:	0003      	movs	r3, r0
 80015e6:	4329      	orrs	r1, r5
 80015e8:	428a      	cmp	r2, r1
 80015ea:	d907      	bls.n	80015fc <__aeabi_ddiv+0x3d8>
 80015ec:	1989      	adds	r1, r1, r6
 80015ee:	3b01      	subs	r3, #1
 80015f0:	428e      	cmp	r6, r1
 80015f2:	d803      	bhi.n	80015fc <__aeabi_ddiv+0x3d8>
 80015f4:	428a      	cmp	r2, r1
 80015f6:	d901      	bls.n	80015fc <__aeabi_ddiv+0x3d8>
 80015f8:	1e83      	subs	r3, r0, #2
 80015fa:	1989      	adds	r1, r1, r6
 80015fc:	043f      	lsls	r7, r7, #16
 80015fe:	1a89      	subs	r1, r1, r2
 8001600:	003a      	movs	r2, r7
 8001602:	9f03      	ldr	r7, [sp, #12]
 8001604:	431a      	orrs	r2, r3
 8001606:	0038      	movs	r0, r7
 8001608:	0413      	lsls	r3, r2, #16
 800160a:	0c1b      	lsrs	r3, r3, #16
 800160c:	4358      	muls	r0, r3
 800160e:	4681      	mov	r9, r0
 8001610:	9802      	ldr	r0, [sp, #8]
 8001612:	0c15      	lsrs	r5, r2, #16
 8001614:	436f      	muls	r7, r5
 8001616:	4343      	muls	r3, r0
 8001618:	4345      	muls	r5, r0
 800161a:	4648      	mov	r0, r9
 800161c:	0c00      	lsrs	r0, r0, #16
 800161e:	4684      	mov	ip, r0
 8001620:	19db      	adds	r3, r3, r7
 8001622:	4463      	add	r3, ip
 8001624:	429f      	cmp	r7, r3
 8001626:	d903      	bls.n	8001630 <__aeabi_ddiv+0x40c>
 8001628:	2080      	movs	r0, #128	; 0x80
 800162a:	0240      	lsls	r0, r0, #9
 800162c:	4684      	mov	ip, r0
 800162e:	4465      	add	r5, ip
 8001630:	4648      	mov	r0, r9
 8001632:	0c1f      	lsrs	r7, r3, #16
 8001634:	0400      	lsls	r0, r0, #16
 8001636:	041b      	lsls	r3, r3, #16
 8001638:	0c00      	lsrs	r0, r0, #16
 800163a:	197d      	adds	r5, r7, r5
 800163c:	1818      	adds	r0, r3, r0
 800163e:	42a9      	cmp	r1, r5
 8001640:	d200      	bcs.n	8001644 <__aeabi_ddiv+0x420>
 8001642:	e084      	b.n	800174e <__aeabi_ddiv+0x52a>
 8001644:	d100      	bne.n	8001648 <__aeabi_ddiv+0x424>
 8001646:	e07f      	b.n	8001748 <__aeabi_ddiv+0x524>
 8001648:	2301      	movs	r3, #1
 800164a:	431a      	orrs	r2, r3
 800164c:	e657      	b.n	80012fe <__aeabi_ddiv+0xda>
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	464a      	mov	r2, r9
 8001652:	031b      	lsls	r3, r3, #12
 8001654:	4313      	orrs	r3, r2
 8001656:	031b      	lsls	r3, r3, #12
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	46aa      	mov	sl, r5
 800165c:	4a6f      	ldr	r2, [pc, #444]	; (800181c <__aeabi_ddiv+0x5f8>)
 800165e:	e66f      	b.n	8001340 <__aeabi_ddiv+0x11c>
 8001660:	42ba      	cmp	r2, r7
 8001662:	d900      	bls.n	8001666 <__aeabi_ddiv+0x442>
 8001664:	e735      	b.n	80014d2 <__aeabi_ddiv+0x2ae>
 8001666:	464b      	mov	r3, r9
 8001668:	07dc      	lsls	r4, r3, #31
 800166a:	0858      	lsrs	r0, r3, #1
 800166c:	087b      	lsrs	r3, r7, #1
 800166e:	431c      	orrs	r4, r3
 8001670:	07ff      	lsls	r7, r7, #31
 8001672:	e734      	b.n	80014de <__aeabi_ddiv+0x2ba>
 8001674:	2400      	movs	r4, #0
 8001676:	42af      	cmp	r7, r5
 8001678:	d289      	bcs.n	800158e <__aeabi_ddiv+0x36a>
 800167a:	4447      	add	r7, r8
 800167c:	4547      	cmp	r7, r8
 800167e:	41a4      	sbcs	r4, r4
 8001680:	465b      	mov	r3, fp
 8001682:	4264      	negs	r4, r4
 8001684:	19a4      	adds	r4, r4, r6
 8001686:	1864      	adds	r4, r4, r1
 8001688:	3b01      	subs	r3, #1
 800168a:	42a6      	cmp	r6, r4
 800168c:	d21e      	bcs.n	80016cc <__aeabi_ddiv+0x4a8>
 800168e:	42a0      	cmp	r0, r4
 8001690:	d86d      	bhi.n	800176e <__aeabi_ddiv+0x54a>
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x472>
 8001694:	e0b6      	b.n	8001804 <__aeabi_ddiv+0x5e0>
 8001696:	1a24      	subs	r4, r4, r0
 8001698:	469b      	mov	fp, r3
 800169a:	e778      	b.n	800158e <__aeabi_ddiv+0x36a>
 800169c:	0003      	movs	r3, r0
 800169e:	465a      	mov	r2, fp
 80016a0:	3b28      	subs	r3, #40	; 0x28
 80016a2:	409a      	lsls	r2, r3
 80016a4:	2700      	movs	r7, #0
 80016a6:	4691      	mov	r9, r2
 80016a8:	e688      	b.n	80013bc <__aeabi_ddiv+0x198>
 80016aa:	4658      	mov	r0, fp
 80016ac:	f001 f912 	bl	80028d4 <__clzsi2>
 80016b0:	3020      	adds	r0, #32
 80016b2:	e672      	b.n	800139a <__aeabi_ddiv+0x176>
 80016b4:	0003      	movs	r3, r0
 80016b6:	4652      	mov	r2, sl
 80016b8:	3b28      	subs	r3, #40	; 0x28
 80016ba:	409a      	lsls	r2, r3
 80016bc:	4693      	mov	fp, r2
 80016be:	2200      	movs	r2, #0
 80016c0:	e6b4      	b.n	800142c <__aeabi_ddiv+0x208>
 80016c2:	4650      	mov	r0, sl
 80016c4:	f001 f906 	bl	80028d4 <__clzsi2>
 80016c8:	3020      	adds	r0, #32
 80016ca:	e69a      	b.n	8001402 <__aeabi_ddiv+0x1de>
 80016cc:	42a6      	cmp	r6, r4
 80016ce:	d1e2      	bne.n	8001696 <__aeabi_ddiv+0x472>
 80016d0:	45b8      	cmp	r8, r7
 80016d2:	d9dc      	bls.n	800168e <__aeabi_ddiv+0x46a>
 80016d4:	1a34      	subs	r4, r6, r0
 80016d6:	469b      	mov	fp, r3
 80016d8:	e759      	b.n	800158e <__aeabi_ddiv+0x36a>
 80016da:	2b1f      	cmp	r3, #31
 80016dc:	dc65      	bgt.n	80017aa <__aeabi_ddiv+0x586>
 80016de:	4c50      	ldr	r4, [pc, #320]	; (8001820 <__aeabi_ddiv+0x5fc>)
 80016e0:	9900      	ldr	r1, [sp, #0]
 80016e2:	46a4      	mov	ip, r4
 80016e4:	465c      	mov	r4, fp
 80016e6:	4461      	add	r1, ip
 80016e8:	0008      	movs	r0, r1
 80016ea:	408c      	lsls	r4, r1
 80016ec:	0011      	movs	r1, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	40d9      	lsrs	r1, r3
 80016f2:	1e50      	subs	r0, r2, #1
 80016f4:	4182      	sbcs	r2, r0
 80016f6:	430c      	orrs	r4, r1
 80016f8:	4314      	orrs	r4, r2
 80016fa:	465a      	mov	r2, fp
 80016fc:	40da      	lsrs	r2, r3
 80016fe:	0013      	movs	r3, r2
 8001700:	0762      	lsls	r2, r4, #29
 8001702:	d009      	beq.n	8001718 <__aeabi_ddiv+0x4f4>
 8001704:	220f      	movs	r2, #15
 8001706:	4022      	ands	r2, r4
 8001708:	2a04      	cmp	r2, #4
 800170a:	d005      	beq.n	8001718 <__aeabi_ddiv+0x4f4>
 800170c:	0022      	movs	r2, r4
 800170e:	1d14      	adds	r4, r2, #4
 8001710:	4294      	cmp	r4, r2
 8001712:	4189      	sbcs	r1, r1
 8001714:	4249      	negs	r1, r1
 8001716:	185b      	adds	r3, r3, r1
 8001718:	021a      	lsls	r2, r3, #8
 800171a:	d562      	bpl.n	80017e2 <__aeabi_ddiv+0x5be>
 800171c:	2201      	movs	r2, #1
 800171e:	2300      	movs	r3, #0
 8001720:	2700      	movs	r7, #0
 8001722:	e60d      	b.n	8001340 <__aeabi_ddiv+0x11c>
 8001724:	428a      	cmp	r2, r1
 8001726:	d800      	bhi.n	800172a <__aeabi_ddiv+0x506>
 8001728:	e70a      	b.n	8001540 <__aeabi_ddiv+0x31c>
 800172a:	1e83      	subs	r3, r0, #2
 800172c:	1989      	adds	r1, r1, r6
 800172e:	e707      	b.n	8001540 <__aeabi_ddiv+0x31c>
 8001730:	230f      	movs	r3, #15
 8001732:	4013      	ands	r3, r2
 8001734:	2b04      	cmp	r3, #4
 8001736:	d100      	bne.n	800173a <__aeabi_ddiv+0x516>
 8001738:	e5e6      	b.n	8001308 <__aeabi_ddiv+0xe4>
 800173a:	1d17      	adds	r7, r2, #4
 800173c:	4297      	cmp	r7, r2
 800173e:	4192      	sbcs	r2, r2
 8001740:	4253      	negs	r3, r2
 8001742:	449b      	add	fp, r3
 8001744:	08fa      	lsrs	r2, r7, #3
 8001746:	e5e0      	b.n	800130a <__aeabi_ddiv+0xe6>
 8001748:	2800      	cmp	r0, #0
 800174a:	d100      	bne.n	800174e <__aeabi_ddiv+0x52a>
 800174c:	e5d7      	b.n	80012fe <__aeabi_ddiv+0xda>
 800174e:	1871      	adds	r1, r6, r1
 8001750:	1e53      	subs	r3, r2, #1
 8001752:	42b1      	cmp	r1, r6
 8001754:	d327      	bcc.n	80017a6 <__aeabi_ddiv+0x582>
 8001756:	42a9      	cmp	r1, r5
 8001758:	d315      	bcc.n	8001786 <__aeabi_ddiv+0x562>
 800175a:	d058      	beq.n	800180e <__aeabi_ddiv+0x5ea>
 800175c:	001a      	movs	r2, r3
 800175e:	e773      	b.n	8001648 <__aeabi_ddiv+0x424>
 8001760:	2b00      	cmp	r3, #0
 8001762:	dc00      	bgt.n	8001766 <__aeabi_ddiv+0x542>
 8001764:	e604      	b.n	8001370 <__aeabi_ddiv+0x14c>
 8001766:	2301      	movs	r3, #1
 8001768:	2200      	movs	r2, #0
 800176a:	449b      	add	fp, r3
 800176c:	e5cd      	b.n	800130a <__aeabi_ddiv+0xe6>
 800176e:	2302      	movs	r3, #2
 8001770:	4447      	add	r7, r8
 8001772:	4547      	cmp	r7, r8
 8001774:	4189      	sbcs	r1, r1
 8001776:	425b      	negs	r3, r3
 8001778:	469c      	mov	ip, r3
 800177a:	4249      	negs	r1, r1
 800177c:	1989      	adds	r1, r1, r6
 800177e:	190c      	adds	r4, r1, r4
 8001780:	44e3      	add	fp, ip
 8001782:	1a24      	subs	r4, r4, r0
 8001784:	e703      	b.n	800158e <__aeabi_ddiv+0x36a>
 8001786:	4643      	mov	r3, r8
 8001788:	005f      	lsls	r7, r3, #1
 800178a:	4547      	cmp	r7, r8
 800178c:	419b      	sbcs	r3, r3
 800178e:	46b8      	mov	r8, r7
 8001790:	425b      	negs	r3, r3
 8001792:	199e      	adds	r6, r3, r6
 8001794:	3a02      	subs	r2, #2
 8001796:	1989      	adds	r1, r1, r6
 8001798:	42a9      	cmp	r1, r5
 800179a:	d000      	beq.n	800179e <__aeabi_ddiv+0x57a>
 800179c:	e754      	b.n	8001648 <__aeabi_ddiv+0x424>
 800179e:	4540      	cmp	r0, r8
 80017a0:	d000      	beq.n	80017a4 <__aeabi_ddiv+0x580>
 80017a2:	e751      	b.n	8001648 <__aeabi_ddiv+0x424>
 80017a4:	e5ab      	b.n	80012fe <__aeabi_ddiv+0xda>
 80017a6:	001a      	movs	r2, r3
 80017a8:	e7f6      	b.n	8001798 <__aeabi_ddiv+0x574>
 80017aa:	211f      	movs	r1, #31
 80017ac:	465f      	mov	r7, fp
 80017ae:	4249      	negs	r1, r1
 80017b0:	1b0c      	subs	r4, r1, r4
 80017b2:	40e7      	lsrs	r7, r4
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	d007      	beq.n	80017c8 <__aeabi_ddiv+0x5a4>
 80017b8:	491a      	ldr	r1, [pc, #104]	; (8001824 <__aeabi_ddiv+0x600>)
 80017ba:	9b00      	ldr	r3, [sp, #0]
 80017bc:	468c      	mov	ip, r1
 80017be:	4463      	add	r3, ip
 80017c0:	0018      	movs	r0, r3
 80017c2:	465b      	mov	r3, fp
 80017c4:	4083      	lsls	r3, r0
 80017c6:	431a      	orrs	r2, r3
 80017c8:	1e50      	subs	r0, r2, #1
 80017ca:	4182      	sbcs	r2, r0
 80017cc:	433a      	orrs	r2, r7
 80017ce:	2707      	movs	r7, #7
 80017d0:	2300      	movs	r3, #0
 80017d2:	4017      	ands	r7, r2
 80017d4:	d009      	beq.n	80017ea <__aeabi_ddiv+0x5c6>
 80017d6:	210f      	movs	r1, #15
 80017d8:	2300      	movs	r3, #0
 80017da:	4011      	ands	r1, r2
 80017dc:	0014      	movs	r4, r2
 80017de:	2904      	cmp	r1, #4
 80017e0:	d195      	bne.n	800170e <__aeabi_ddiv+0x4ea>
 80017e2:	0022      	movs	r2, r4
 80017e4:	075f      	lsls	r7, r3, #29
 80017e6:	025b      	lsls	r3, r3, #9
 80017e8:	0b1b      	lsrs	r3, r3, #12
 80017ea:	08d2      	lsrs	r2, r2, #3
 80017ec:	4317      	orrs	r7, r2
 80017ee:	2200      	movs	r2, #0
 80017f0:	e5a6      	b.n	8001340 <__aeabi_ddiv+0x11c>
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	4659      	mov	r1, fp
 80017f6:	031b      	lsls	r3, r3, #12
 80017f8:	430b      	orrs	r3, r1
 80017fa:	031b      	lsls	r3, r3, #12
 80017fc:	0017      	movs	r7, r2
 80017fe:	0b1b      	lsrs	r3, r3, #12
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <__aeabi_ddiv+0x5f8>)
 8001802:	e59d      	b.n	8001340 <__aeabi_ddiv+0x11c>
 8001804:	42bd      	cmp	r5, r7
 8001806:	d8b2      	bhi.n	800176e <__aeabi_ddiv+0x54a>
 8001808:	469b      	mov	fp, r3
 800180a:	2400      	movs	r4, #0
 800180c:	e6bf      	b.n	800158e <__aeabi_ddiv+0x36a>
 800180e:	4580      	cmp	r8, r0
 8001810:	d3b9      	bcc.n	8001786 <__aeabi_ddiv+0x562>
 8001812:	001a      	movs	r2, r3
 8001814:	e7c3      	b.n	800179e <__aeabi_ddiv+0x57a>
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	000003ff 	.word	0x000003ff
 800181c:	000007ff 	.word	0x000007ff
 8001820:	0000041e 	.word	0x0000041e
 8001824:	0000043e 	.word	0x0000043e

08001828 <__eqdf2>:
 8001828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182a:	464f      	mov	r7, r9
 800182c:	4646      	mov	r6, r8
 800182e:	46d6      	mov	lr, sl
 8001830:	4684      	mov	ip, r0
 8001832:	b5c0      	push	{r6, r7, lr}
 8001834:	4680      	mov	r8, r0
 8001836:	4e19      	ldr	r6, [pc, #100]	; (800189c <__eqdf2+0x74>)
 8001838:	0318      	lsls	r0, r3, #12
 800183a:	030f      	lsls	r7, r1, #12
 800183c:	004d      	lsls	r5, r1, #1
 800183e:	0b00      	lsrs	r0, r0, #12
 8001840:	005c      	lsls	r4, r3, #1
 8001842:	4682      	mov	sl, r0
 8001844:	0b3f      	lsrs	r7, r7, #12
 8001846:	0d6d      	lsrs	r5, r5, #21
 8001848:	0fc9      	lsrs	r1, r1, #31
 800184a:	4691      	mov	r9, r2
 800184c:	0d64      	lsrs	r4, r4, #21
 800184e:	0fdb      	lsrs	r3, r3, #31
 8001850:	2001      	movs	r0, #1
 8001852:	42b5      	cmp	r5, r6
 8001854:	d00a      	beq.n	800186c <__eqdf2+0x44>
 8001856:	42b4      	cmp	r4, r6
 8001858:	d003      	beq.n	8001862 <__eqdf2+0x3a>
 800185a:	42a5      	cmp	r5, r4
 800185c:	d101      	bne.n	8001862 <__eqdf2+0x3a>
 800185e:	4557      	cmp	r7, sl
 8001860:	d00c      	beq.n	800187c <__eqdf2+0x54>
 8001862:	bc1c      	pop	{r2, r3, r4}
 8001864:	4690      	mov	r8, r2
 8001866:	4699      	mov	r9, r3
 8001868:	46a2      	mov	sl, r4
 800186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186c:	4666      	mov	r6, ip
 800186e:	433e      	orrs	r6, r7
 8001870:	d1f7      	bne.n	8001862 <__eqdf2+0x3a>
 8001872:	42ac      	cmp	r4, r5
 8001874:	d1f5      	bne.n	8001862 <__eqdf2+0x3a>
 8001876:	4654      	mov	r4, sl
 8001878:	4314      	orrs	r4, r2
 800187a:	d1f2      	bne.n	8001862 <__eqdf2+0x3a>
 800187c:	2001      	movs	r0, #1
 800187e:	45c8      	cmp	r8, r9
 8001880:	d1ef      	bne.n	8001862 <__eqdf2+0x3a>
 8001882:	4299      	cmp	r1, r3
 8001884:	d007      	beq.n	8001896 <__eqdf2+0x6e>
 8001886:	2d00      	cmp	r5, #0
 8001888:	d1eb      	bne.n	8001862 <__eqdf2+0x3a>
 800188a:	4663      	mov	r3, ip
 800188c:	431f      	orrs	r7, r3
 800188e:	0038      	movs	r0, r7
 8001890:	1e47      	subs	r7, r0, #1
 8001892:	41b8      	sbcs	r0, r7
 8001894:	e7e5      	b.n	8001862 <__eqdf2+0x3a>
 8001896:	2000      	movs	r0, #0
 8001898:	e7e3      	b.n	8001862 <__eqdf2+0x3a>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff

080018a0 <__gedf2>:
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	464f      	mov	r7, r9
 80018a4:	4646      	mov	r6, r8
 80018a6:	46d6      	mov	lr, sl
 80018a8:	004d      	lsls	r5, r1, #1
 80018aa:	b5c0      	push	{r6, r7, lr}
 80018ac:	030e      	lsls	r6, r1, #12
 80018ae:	0fc9      	lsrs	r1, r1, #31
 80018b0:	468a      	mov	sl, r1
 80018b2:	492c      	ldr	r1, [pc, #176]	; (8001964 <__gedf2+0xc4>)
 80018b4:	031f      	lsls	r7, r3, #12
 80018b6:	005c      	lsls	r4, r3, #1
 80018b8:	4680      	mov	r8, r0
 80018ba:	0b36      	lsrs	r6, r6, #12
 80018bc:	0d6d      	lsrs	r5, r5, #21
 80018be:	4691      	mov	r9, r2
 80018c0:	0b3f      	lsrs	r7, r7, #12
 80018c2:	0d64      	lsrs	r4, r4, #21
 80018c4:	0fdb      	lsrs	r3, r3, #31
 80018c6:	428d      	cmp	r5, r1
 80018c8:	d01e      	beq.n	8001908 <__gedf2+0x68>
 80018ca:	428c      	cmp	r4, r1
 80018cc:	d016      	beq.n	80018fc <__gedf2+0x5c>
 80018ce:	2d00      	cmp	r5, #0
 80018d0:	d11e      	bne.n	8001910 <__gedf2+0x70>
 80018d2:	4330      	orrs	r0, r6
 80018d4:	4684      	mov	ip, r0
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d101      	bne.n	80018de <__gedf2+0x3e>
 80018da:	433a      	orrs	r2, r7
 80018dc:	d023      	beq.n	8001926 <__gedf2+0x86>
 80018de:	4662      	mov	r2, ip
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d01a      	beq.n	800191a <__gedf2+0x7a>
 80018e4:	459a      	cmp	sl, r3
 80018e6:	d029      	beq.n	800193c <__gedf2+0x9c>
 80018e8:	4651      	mov	r1, sl
 80018ea:	2002      	movs	r0, #2
 80018ec:	3901      	subs	r1, #1
 80018ee:	4008      	ands	r0, r1
 80018f0:	3801      	subs	r0, #1
 80018f2:	bc1c      	pop	{r2, r3, r4}
 80018f4:	4690      	mov	r8, r2
 80018f6:	4699      	mov	r9, r3
 80018f8:	46a2      	mov	sl, r4
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fc:	0039      	movs	r1, r7
 80018fe:	4311      	orrs	r1, r2
 8001900:	d0e5      	beq.n	80018ce <__gedf2+0x2e>
 8001902:	2002      	movs	r0, #2
 8001904:	4240      	negs	r0, r0
 8001906:	e7f4      	b.n	80018f2 <__gedf2+0x52>
 8001908:	4330      	orrs	r0, r6
 800190a:	d1fa      	bne.n	8001902 <__gedf2+0x62>
 800190c:	42ac      	cmp	r4, r5
 800190e:	d00f      	beq.n	8001930 <__gedf2+0x90>
 8001910:	2c00      	cmp	r4, #0
 8001912:	d10f      	bne.n	8001934 <__gedf2+0x94>
 8001914:	433a      	orrs	r2, r7
 8001916:	d0e7      	beq.n	80018e8 <__gedf2+0x48>
 8001918:	e00c      	b.n	8001934 <__gedf2+0x94>
 800191a:	2201      	movs	r2, #1
 800191c:	3b01      	subs	r3, #1
 800191e:	4393      	bics	r3, r2
 8001920:	0018      	movs	r0, r3
 8001922:	3001      	adds	r0, #1
 8001924:	e7e5      	b.n	80018f2 <__gedf2+0x52>
 8001926:	4663      	mov	r3, ip
 8001928:	2000      	movs	r0, #0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0e1      	beq.n	80018f2 <__gedf2+0x52>
 800192e:	e7db      	b.n	80018e8 <__gedf2+0x48>
 8001930:	433a      	orrs	r2, r7
 8001932:	d1e6      	bne.n	8001902 <__gedf2+0x62>
 8001934:	459a      	cmp	sl, r3
 8001936:	d1d7      	bne.n	80018e8 <__gedf2+0x48>
 8001938:	42a5      	cmp	r5, r4
 800193a:	dcd5      	bgt.n	80018e8 <__gedf2+0x48>
 800193c:	42a5      	cmp	r5, r4
 800193e:	db05      	blt.n	800194c <__gedf2+0xac>
 8001940:	42be      	cmp	r6, r7
 8001942:	d8d1      	bhi.n	80018e8 <__gedf2+0x48>
 8001944:	d008      	beq.n	8001958 <__gedf2+0xb8>
 8001946:	2000      	movs	r0, #0
 8001948:	42be      	cmp	r6, r7
 800194a:	d2d2      	bcs.n	80018f2 <__gedf2+0x52>
 800194c:	4650      	mov	r0, sl
 800194e:	2301      	movs	r3, #1
 8001950:	3801      	subs	r0, #1
 8001952:	4398      	bics	r0, r3
 8001954:	3001      	adds	r0, #1
 8001956:	e7cc      	b.n	80018f2 <__gedf2+0x52>
 8001958:	45c8      	cmp	r8, r9
 800195a:	d8c5      	bhi.n	80018e8 <__gedf2+0x48>
 800195c:	2000      	movs	r0, #0
 800195e:	45c8      	cmp	r8, r9
 8001960:	d3f4      	bcc.n	800194c <__gedf2+0xac>
 8001962:	e7c6      	b.n	80018f2 <__gedf2+0x52>
 8001964:	000007ff 	.word	0x000007ff

08001968 <__ledf2>:
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	464f      	mov	r7, r9
 800196c:	4646      	mov	r6, r8
 800196e:	46d6      	mov	lr, sl
 8001970:	004d      	lsls	r5, r1, #1
 8001972:	b5c0      	push	{r6, r7, lr}
 8001974:	030e      	lsls	r6, r1, #12
 8001976:	0fc9      	lsrs	r1, r1, #31
 8001978:	468a      	mov	sl, r1
 800197a:	492e      	ldr	r1, [pc, #184]	; (8001a34 <__ledf2+0xcc>)
 800197c:	031f      	lsls	r7, r3, #12
 800197e:	005c      	lsls	r4, r3, #1
 8001980:	4680      	mov	r8, r0
 8001982:	0b36      	lsrs	r6, r6, #12
 8001984:	0d6d      	lsrs	r5, r5, #21
 8001986:	4691      	mov	r9, r2
 8001988:	0b3f      	lsrs	r7, r7, #12
 800198a:	0d64      	lsrs	r4, r4, #21
 800198c:	0fdb      	lsrs	r3, r3, #31
 800198e:	428d      	cmp	r5, r1
 8001990:	d018      	beq.n	80019c4 <__ledf2+0x5c>
 8001992:	428c      	cmp	r4, r1
 8001994:	d011      	beq.n	80019ba <__ledf2+0x52>
 8001996:	2d00      	cmp	r5, #0
 8001998:	d118      	bne.n	80019cc <__ledf2+0x64>
 800199a:	4330      	orrs	r0, r6
 800199c:	4684      	mov	ip, r0
 800199e:	2c00      	cmp	r4, #0
 80019a0:	d11e      	bne.n	80019e0 <__ledf2+0x78>
 80019a2:	433a      	orrs	r2, r7
 80019a4:	d11c      	bne.n	80019e0 <__ledf2+0x78>
 80019a6:	4663      	mov	r3, ip
 80019a8:	2000      	movs	r0, #0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d030      	beq.n	8001a10 <__ledf2+0xa8>
 80019ae:	4651      	mov	r1, sl
 80019b0:	2002      	movs	r0, #2
 80019b2:	3901      	subs	r1, #1
 80019b4:	4008      	ands	r0, r1
 80019b6:	3801      	subs	r0, #1
 80019b8:	e02a      	b.n	8001a10 <__ledf2+0xa8>
 80019ba:	0039      	movs	r1, r7
 80019bc:	4311      	orrs	r1, r2
 80019be:	d0ea      	beq.n	8001996 <__ledf2+0x2e>
 80019c0:	2002      	movs	r0, #2
 80019c2:	e025      	b.n	8001a10 <__ledf2+0xa8>
 80019c4:	4330      	orrs	r0, r6
 80019c6:	d1fb      	bne.n	80019c0 <__ledf2+0x58>
 80019c8:	42ac      	cmp	r4, r5
 80019ca:	d026      	beq.n	8001a1a <__ledf2+0xb2>
 80019cc:	2c00      	cmp	r4, #0
 80019ce:	d126      	bne.n	8001a1e <__ledf2+0xb6>
 80019d0:	433a      	orrs	r2, r7
 80019d2:	d124      	bne.n	8001a1e <__ledf2+0xb6>
 80019d4:	4651      	mov	r1, sl
 80019d6:	2002      	movs	r0, #2
 80019d8:	3901      	subs	r1, #1
 80019da:	4008      	ands	r0, r1
 80019dc:	3801      	subs	r0, #1
 80019de:	e017      	b.n	8001a10 <__ledf2+0xa8>
 80019e0:	4662      	mov	r2, ip
 80019e2:	2a00      	cmp	r2, #0
 80019e4:	d00f      	beq.n	8001a06 <__ledf2+0x9e>
 80019e6:	459a      	cmp	sl, r3
 80019e8:	d1e1      	bne.n	80019ae <__ledf2+0x46>
 80019ea:	42a5      	cmp	r5, r4
 80019ec:	db05      	blt.n	80019fa <__ledf2+0x92>
 80019ee:	42be      	cmp	r6, r7
 80019f0:	d8dd      	bhi.n	80019ae <__ledf2+0x46>
 80019f2:	d019      	beq.n	8001a28 <__ledf2+0xc0>
 80019f4:	2000      	movs	r0, #0
 80019f6:	42be      	cmp	r6, r7
 80019f8:	d20a      	bcs.n	8001a10 <__ledf2+0xa8>
 80019fa:	4650      	mov	r0, sl
 80019fc:	2301      	movs	r3, #1
 80019fe:	3801      	subs	r0, #1
 8001a00:	4398      	bics	r0, r3
 8001a02:	3001      	adds	r0, #1
 8001a04:	e004      	b.n	8001a10 <__ledf2+0xa8>
 8001a06:	2201      	movs	r2, #1
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4393      	bics	r3, r2
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	3001      	adds	r0, #1
 8001a10:	bc1c      	pop	{r2, r3, r4}
 8001a12:	4690      	mov	r8, r2
 8001a14:	4699      	mov	r9, r3
 8001a16:	46a2      	mov	sl, r4
 8001a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1a:	433a      	orrs	r2, r7
 8001a1c:	d1d0      	bne.n	80019c0 <__ledf2+0x58>
 8001a1e:	459a      	cmp	sl, r3
 8001a20:	d1c5      	bne.n	80019ae <__ledf2+0x46>
 8001a22:	42a5      	cmp	r5, r4
 8001a24:	dcc3      	bgt.n	80019ae <__ledf2+0x46>
 8001a26:	e7e0      	b.n	80019ea <__ledf2+0x82>
 8001a28:	45c8      	cmp	r8, r9
 8001a2a:	d8c0      	bhi.n	80019ae <__ledf2+0x46>
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	45c8      	cmp	r8, r9
 8001a30:	d3e3      	bcc.n	80019fa <__ledf2+0x92>
 8001a32:	e7ed      	b.n	8001a10 <__ledf2+0xa8>
 8001a34:	000007ff 	.word	0x000007ff

08001a38 <__aeabi_dmul>:
 8001a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3a:	4657      	mov	r7, sl
 8001a3c:	46de      	mov	lr, fp
 8001a3e:	464e      	mov	r6, r9
 8001a40:	4645      	mov	r5, r8
 8001a42:	b5e0      	push	{r5, r6, r7, lr}
 8001a44:	4683      	mov	fp, r0
 8001a46:	0006      	movs	r6, r0
 8001a48:	030f      	lsls	r7, r1, #12
 8001a4a:	0048      	lsls	r0, r1, #1
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	4692      	mov	sl, r2
 8001a50:	001d      	movs	r5, r3
 8001a52:	0b3f      	lsrs	r7, r7, #12
 8001a54:	0d40      	lsrs	r0, r0, #21
 8001a56:	0fcc      	lsrs	r4, r1, #31
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dmul+0x26>
 8001a5c:	e06f      	b.n	8001b3e <__aeabi_dmul+0x106>
 8001a5e:	4bde      	ldr	r3, [pc, #888]	; (8001dd8 <__aeabi_dmul+0x3a0>)
 8001a60:	4298      	cmp	r0, r3
 8001a62:	d038      	beq.n	8001ad6 <__aeabi_dmul+0x9e>
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	00ff      	lsls	r7, r7, #3
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	431f      	orrs	r7, r3
 8001a6c:	0f73      	lsrs	r3, r6, #29
 8001a6e:	433b      	orrs	r3, r7
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	4bda      	ldr	r3, [pc, #872]	; (8001ddc <__aeabi_dmul+0x3a4>)
 8001a74:	2700      	movs	r7, #0
 8001a76:	4699      	mov	r9, r3
 8001a78:	2300      	movs	r3, #0
 8001a7a:	469b      	mov	fp, r3
 8001a7c:	00f6      	lsls	r6, r6, #3
 8001a7e:	4481      	add	r9, r0
 8001a80:	032b      	lsls	r3, r5, #12
 8001a82:	0069      	lsls	r1, r5, #1
 8001a84:	0b1b      	lsrs	r3, r3, #12
 8001a86:	4652      	mov	r2, sl
 8001a88:	4698      	mov	r8, r3
 8001a8a:	0d49      	lsrs	r1, r1, #21
 8001a8c:	0fed      	lsrs	r5, r5, #31
 8001a8e:	2900      	cmp	r1, #0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dmul+0x5c>
 8001a92:	e085      	b.n	8001ba0 <__aeabi_dmul+0x168>
 8001a94:	4bd0      	ldr	r3, [pc, #832]	; (8001dd8 <__aeabi_dmul+0x3a0>)
 8001a96:	4299      	cmp	r1, r3
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dmul+0x64>
 8001a9a:	e073      	b.n	8001b84 <__aeabi_dmul+0x14c>
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	00da      	lsls	r2, r3, #3
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	4652      	mov	r2, sl
 8001aa8:	48cc      	ldr	r0, [pc, #816]	; (8001ddc <__aeabi_dmul+0x3a4>)
 8001aaa:	0f52      	lsrs	r2, r2, #29
 8001aac:	4684      	mov	ip, r0
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	4652      	mov	r2, sl
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	4461      	add	r1, ip
 8001ab6:	00d2      	lsls	r2, r2, #3
 8001ab8:	4489      	add	r9, r1
 8001aba:	0021      	movs	r1, r4
 8001abc:	4069      	eors	r1, r5
 8001abe:	9100      	str	r1, [sp, #0]
 8001ac0:	468c      	mov	ip, r1
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	4449      	add	r1, r9
 8001ac6:	468a      	mov	sl, r1
 8001ac8:	2f0f      	cmp	r7, #15
 8001aca:	d900      	bls.n	8001ace <__aeabi_dmul+0x96>
 8001acc:	e090      	b.n	8001bf0 <__aeabi_dmul+0x1b8>
 8001ace:	49c4      	ldr	r1, [pc, #784]	; (8001de0 <__aeabi_dmul+0x3a8>)
 8001ad0:	00bf      	lsls	r7, r7, #2
 8001ad2:	59cf      	ldr	r7, [r1, r7]
 8001ad4:	46bf      	mov	pc, r7
 8001ad6:	465b      	mov	r3, fp
 8001ad8:	433b      	orrs	r3, r7
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_dmul+0xa8>
 8001ade:	e16a      	b.n	8001db6 <__aeabi_dmul+0x37e>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	2708      	movs	r7, #8
 8001ae4:	2600      	movs	r6, #0
 8001ae6:	4681      	mov	r9, r0
 8001ae8:	469b      	mov	fp, r3
 8001aea:	e7c9      	b.n	8001a80 <__aeabi_dmul+0x48>
 8001aec:	0032      	movs	r2, r6
 8001aee:	4658      	mov	r0, fp
 8001af0:	9b01      	ldr	r3, [sp, #4]
 8001af2:	4661      	mov	r1, ip
 8001af4:	9100      	str	r1, [sp, #0]
 8001af6:	2802      	cmp	r0, #2
 8001af8:	d100      	bne.n	8001afc <__aeabi_dmul+0xc4>
 8001afa:	e075      	b.n	8001be8 <__aeabi_dmul+0x1b0>
 8001afc:	2803      	cmp	r0, #3
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dmul+0xca>
 8001b00:	e1fe      	b.n	8001f00 <__aeabi_dmul+0x4c8>
 8001b02:	2801      	cmp	r0, #1
 8001b04:	d000      	beq.n	8001b08 <__aeabi_dmul+0xd0>
 8001b06:	e12c      	b.n	8001d62 <__aeabi_dmul+0x32a>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2700      	movs	r7, #0
 8001b0c:	2600      	movs	r6, #0
 8001b0e:	2500      	movs	r5, #0
 8001b10:	033f      	lsls	r7, r7, #12
 8001b12:	0d2a      	lsrs	r2, r5, #20
 8001b14:	0b3f      	lsrs	r7, r7, #12
 8001b16:	48b3      	ldr	r0, [pc, #716]	; (8001de4 <__aeabi_dmul+0x3ac>)
 8001b18:	0512      	lsls	r2, r2, #20
 8001b1a:	433a      	orrs	r2, r7
 8001b1c:	4002      	ands	r2, r0
 8001b1e:	051b      	lsls	r3, r3, #20
 8001b20:	4313      	orrs	r3, r2
 8001b22:	9a00      	ldr	r2, [sp, #0]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	07d1      	lsls	r1, r2, #31
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	0030      	movs	r0, r6
 8001b2e:	0019      	movs	r1, r3
 8001b30:	b007      	add	sp, #28
 8001b32:	bc3c      	pop	{r2, r3, r4, r5}
 8001b34:	4690      	mov	r8, r2
 8001b36:	4699      	mov	r9, r3
 8001b38:	46a2      	mov	sl, r4
 8001b3a:	46ab      	mov	fp, r5
 8001b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3e:	465b      	mov	r3, fp
 8001b40:	433b      	orrs	r3, r7
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	d100      	bne.n	8001b48 <__aeabi_dmul+0x110>
 8001b46:	e12f      	b.n	8001da8 <__aeabi_dmul+0x370>
 8001b48:	2f00      	cmp	r7, #0
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dmul+0x116>
 8001b4c:	e1a5      	b.n	8001e9a <__aeabi_dmul+0x462>
 8001b4e:	0038      	movs	r0, r7
 8001b50:	f000 fec0 	bl	80028d4 <__clzsi2>
 8001b54:	0003      	movs	r3, r0
 8001b56:	3b0b      	subs	r3, #11
 8001b58:	2b1c      	cmp	r3, #28
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dmul+0x126>
 8001b5c:	e196      	b.n	8001e8c <__aeabi_dmul+0x454>
 8001b5e:	221d      	movs	r2, #29
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	465a      	mov	r2, fp
 8001b64:	0001      	movs	r1, r0
 8001b66:	40da      	lsrs	r2, r3
 8001b68:	465e      	mov	r6, fp
 8001b6a:	3908      	subs	r1, #8
 8001b6c:	408f      	lsls	r7, r1
 8001b6e:	0013      	movs	r3, r2
 8001b70:	408e      	lsls	r6, r1
 8001b72:	433b      	orrs	r3, r7
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	4b9c      	ldr	r3, [pc, #624]	; (8001de8 <__aeabi_dmul+0x3b0>)
 8001b78:	2700      	movs	r7, #0
 8001b7a:	1a1b      	subs	r3, r3, r0
 8001b7c:	4699      	mov	r9, r3
 8001b7e:	2300      	movs	r3, #0
 8001b80:	469b      	mov	fp, r3
 8001b82:	e77d      	b.n	8001a80 <__aeabi_dmul+0x48>
 8001b84:	4641      	mov	r1, r8
 8001b86:	4653      	mov	r3, sl
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	4993      	ldr	r1, [pc, #588]	; (8001dd8 <__aeabi_dmul+0x3a0>)
 8001b8c:	468c      	mov	ip, r1
 8001b8e:	44e1      	add	r9, ip
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dmul+0x15e>
 8001b94:	e11a      	b.n	8001dcc <__aeabi_dmul+0x394>
 8001b96:	2202      	movs	r2, #2
 8001b98:	2002      	movs	r0, #2
 8001b9a:	4317      	orrs	r7, r2
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	e78c      	b.n	8001aba <__aeabi_dmul+0x82>
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dmul+0x16e>
 8001ba4:	e10d      	b.n	8001dc2 <__aeabi_dmul+0x38a>
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d100      	bne.n	8001bae <__aeabi_dmul+0x176>
 8001bac:	e181      	b.n	8001eb2 <__aeabi_dmul+0x47a>
 8001bae:	4640      	mov	r0, r8
 8001bb0:	f000 fe90 	bl	80028d4 <__clzsi2>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	3a0b      	subs	r2, #11
 8001bb8:	2a1c      	cmp	r2, #28
 8001bba:	dd00      	ble.n	8001bbe <__aeabi_dmul+0x186>
 8001bbc:	e172      	b.n	8001ea4 <__aeabi_dmul+0x46c>
 8001bbe:	0001      	movs	r1, r0
 8001bc0:	4643      	mov	r3, r8
 8001bc2:	3908      	subs	r1, #8
 8001bc4:	408b      	lsls	r3, r1
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	231d      	movs	r3, #29
 8001bca:	1a9a      	subs	r2, r3, r2
 8001bcc:	4653      	mov	r3, sl
 8001bce:	40d3      	lsrs	r3, r2
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	4643      	mov	r3, r8
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	4652      	mov	r2, sl
 8001bd8:	408a      	lsls	r2, r1
 8001bda:	4649      	mov	r1, r9
 8001bdc:	1a08      	subs	r0, r1, r0
 8001bde:	4982      	ldr	r1, [pc, #520]	; (8001de8 <__aeabi_dmul+0x3b0>)
 8001be0:	4689      	mov	r9, r1
 8001be2:	4481      	add	r9, r0
 8001be4:	2000      	movs	r0, #0
 8001be6:	e768      	b.n	8001aba <__aeabi_dmul+0x82>
 8001be8:	4b7b      	ldr	r3, [pc, #492]	; (8001dd8 <__aeabi_dmul+0x3a0>)
 8001bea:	2700      	movs	r7, #0
 8001bec:	2600      	movs	r6, #0
 8001bee:	e78e      	b.n	8001b0e <__aeabi_dmul+0xd6>
 8001bf0:	0c14      	lsrs	r4, r2, #16
 8001bf2:	0412      	lsls	r2, r2, #16
 8001bf4:	0c12      	lsrs	r2, r2, #16
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0c37      	lsrs	r7, r6, #16
 8001bfa:	0436      	lsls	r6, r6, #16
 8001bfc:	0c35      	lsrs	r5, r6, #16
 8001bfe:	4379      	muls	r1, r7
 8001c00:	0028      	movs	r0, r5
 8001c02:	468c      	mov	ip, r1
 8001c04:	002e      	movs	r6, r5
 8001c06:	4360      	muls	r0, r4
 8001c08:	4460      	add	r0, ip
 8001c0a:	4683      	mov	fp, r0
 8001c0c:	4356      	muls	r6, r2
 8001c0e:	0021      	movs	r1, r4
 8001c10:	0c30      	lsrs	r0, r6, #16
 8001c12:	4680      	mov	r8, r0
 8001c14:	4658      	mov	r0, fp
 8001c16:	4379      	muls	r1, r7
 8001c18:	4440      	add	r0, r8
 8001c1a:	9102      	str	r1, [sp, #8]
 8001c1c:	4584      	cmp	ip, r0
 8001c1e:	d906      	bls.n	8001c2e <__aeabi_dmul+0x1f6>
 8001c20:	4688      	mov	r8, r1
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	0249      	lsls	r1, r1, #9
 8001c26:	468c      	mov	ip, r1
 8001c28:	44e0      	add	r8, ip
 8001c2a:	4641      	mov	r1, r8
 8001c2c:	9102      	str	r1, [sp, #8]
 8001c2e:	0436      	lsls	r6, r6, #16
 8001c30:	0c01      	lsrs	r1, r0, #16
 8001c32:	0c36      	lsrs	r6, r6, #16
 8001c34:	0400      	lsls	r0, r0, #16
 8001c36:	468b      	mov	fp, r1
 8001c38:	1981      	adds	r1, r0, r6
 8001c3a:	0c1e      	lsrs	r6, r3, #16
 8001c3c:	041b      	lsls	r3, r3, #16
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	9103      	str	r1, [sp, #12]
 8001c42:	0019      	movs	r1, r3
 8001c44:	4379      	muls	r1, r7
 8001c46:	468c      	mov	ip, r1
 8001c48:	0028      	movs	r0, r5
 8001c4a:	4375      	muls	r5, r6
 8001c4c:	4465      	add	r5, ip
 8001c4e:	46a8      	mov	r8, r5
 8001c50:	4358      	muls	r0, r3
 8001c52:	0c05      	lsrs	r5, r0, #16
 8001c54:	4445      	add	r5, r8
 8001c56:	4377      	muls	r7, r6
 8001c58:	42a9      	cmp	r1, r5
 8001c5a:	d903      	bls.n	8001c64 <__aeabi_dmul+0x22c>
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	0249      	lsls	r1, r1, #9
 8001c60:	468c      	mov	ip, r1
 8001c62:	4467      	add	r7, ip
 8001c64:	0c29      	lsrs	r1, r5, #16
 8001c66:	468c      	mov	ip, r1
 8001c68:	0039      	movs	r1, r7
 8001c6a:	0400      	lsls	r0, r0, #16
 8001c6c:	0c00      	lsrs	r0, r0, #16
 8001c6e:	042d      	lsls	r5, r5, #16
 8001c70:	182d      	adds	r5, r5, r0
 8001c72:	4461      	add	r1, ip
 8001c74:	44ab      	add	fp, r5
 8001c76:	9105      	str	r1, [sp, #20]
 8001c78:	4659      	mov	r1, fp
 8001c7a:	9104      	str	r1, [sp, #16]
 8001c7c:	9901      	ldr	r1, [sp, #4]
 8001c7e:	040f      	lsls	r7, r1, #16
 8001c80:	0c3f      	lsrs	r7, r7, #16
 8001c82:	0c08      	lsrs	r0, r1, #16
 8001c84:	0039      	movs	r1, r7
 8001c86:	4351      	muls	r1, r2
 8001c88:	4342      	muls	r2, r0
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	468c      	mov	ip, r1
 8001c90:	0c09      	lsrs	r1, r1, #16
 8001c92:	468b      	mov	fp, r1
 8001c94:	4362      	muls	r2, r4
 8001c96:	437c      	muls	r4, r7
 8001c98:	4444      	add	r4, r8
 8001c9a:	445c      	add	r4, fp
 8001c9c:	45a0      	cmp	r8, r4
 8001c9e:	d903      	bls.n	8001ca8 <__aeabi_dmul+0x270>
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	0249      	lsls	r1, r1, #9
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	4442      	add	r2, r8
 8001ca8:	0c21      	lsrs	r1, r4, #16
 8001caa:	4688      	mov	r8, r1
 8001cac:	4661      	mov	r1, ip
 8001cae:	0409      	lsls	r1, r1, #16
 8001cb0:	0c09      	lsrs	r1, r1, #16
 8001cb2:	468c      	mov	ip, r1
 8001cb4:	0039      	movs	r1, r7
 8001cb6:	4359      	muls	r1, r3
 8001cb8:	4343      	muls	r3, r0
 8001cba:	4370      	muls	r0, r6
 8001cbc:	437e      	muls	r6, r7
 8001cbe:	0c0f      	lsrs	r7, r1, #16
 8001cc0:	18f6      	adds	r6, r6, r3
 8001cc2:	0424      	lsls	r4, r4, #16
 8001cc4:	19be      	adds	r6, r7, r6
 8001cc6:	4464      	add	r4, ip
 8001cc8:	4442      	add	r2, r8
 8001cca:	468c      	mov	ip, r1
 8001ccc:	42b3      	cmp	r3, r6
 8001cce:	d903      	bls.n	8001cd8 <__aeabi_dmul+0x2a0>
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	025b      	lsls	r3, r3, #9
 8001cd4:	4698      	mov	r8, r3
 8001cd6:	4440      	add	r0, r8
 8001cd8:	9b02      	ldr	r3, [sp, #8]
 8001cda:	4661      	mov	r1, ip
 8001cdc:	4698      	mov	r8, r3
 8001cde:	9b04      	ldr	r3, [sp, #16]
 8001ce0:	0437      	lsls	r7, r6, #16
 8001ce2:	4443      	add	r3, r8
 8001ce4:	469b      	mov	fp, r3
 8001ce6:	45ab      	cmp	fp, r5
 8001ce8:	41ad      	sbcs	r5, r5
 8001cea:	426b      	negs	r3, r5
 8001cec:	040d      	lsls	r5, r1, #16
 8001cee:	9905      	ldr	r1, [sp, #20]
 8001cf0:	0c2d      	lsrs	r5, r5, #16
 8001cf2:	468c      	mov	ip, r1
 8001cf4:	197f      	adds	r7, r7, r5
 8001cf6:	4467      	add	r7, ip
 8001cf8:	18fd      	adds	r5, r7, r3
 8001cfa:	46a8      	mov	r8, r5
 8001cfc:	465d      	mov	r5, fp
 8001cfe:	192d      	adds	r5, r5, r4
 8001d00:	42a5      	cmp	r5, r4
 8001d02:	41a4      	sbcs	r4, r4
 8001d04:	4693      	mov	fp, r2
 8001d06:	4264      	negs	r4, r4
 8001d08:	46a4      	mov	ip, r4
 8001d0a:	44c3      	add	fp, r8
 8001d0c:	44dc      	add	ip, fp
 8001d0e:	428f      	cmp	r7, r1
 8001d10:	41bf      	sbcs	r7, r7
 8001d12:	4598      	cmp	r8, r3
 8001d14:	419b      	sbcs	r3, r3
 8001d16:	4593      	cmp	fp, r2
 8001d18:	4192      	sbcs	r2, r2
 8001d1a:	45a4      	cmp	ip, r4
 8001d1c:	41a4      	sbcs	r4, r4
 8001d1e:	425b      	negs	r3, r3
 8001d20:	427f      	negs	r7, r7
 8001d22:	431f      	orrs	r7, r3
 8001d24:	0c36      	lsrs	r6, r6, #16
 8001d26:	4252      	negs	r2, r2
 8001d28:	4264      	negs	r4, r4
 8001d2a:	19bf      	adds	r7, r7, r6
 8001d2c:	4322      	orrs	r2, r4
 8001d2e:	18bf      	adds	r7, r7, r2
 8001d30:	4662      	mov	r2, ip
 8001d32:	1838      	adds	r0, r7, r0
 8001d34:	0243      	lsls	r3, r0, #9
 8001d36:	0dd2      	lsrs	r2, r2, #23
 8001d38:	9903      	ldr	r1, [sp, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	026a      	lsls	r2, r5, #9
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	1e50      	subs	r0, r2, #1
 8001d42:	4182      	sbcs	r2, r0
 8001d44:	4661      	mov	r1, ip
 8001d46:	0ded      	lsrs	r5, r5, #23
 8001d48:	432a      	orrs	r2, r5
 8001d4a:	024e      	lsls	r6, r1, #9
 8001d4c:	4332      	orrs	r2, r6
 8001d4e:	01d9      	lsls	r1, r3, #7
 8001d50:	d400      	bmi.n	8001d54 <__aeabi_dmul+0x31c>
 8001d52:	e0b3      	b.n	8001ebc <__aeabi_dmul+0x484>
 8001d54:	2601      	movs	r6, #1
 8001d56:	0850      	lsrs	r0, r2, #1
 8001d58:	4032      	ands	r2, r6
 8001d5a:	4302      	orrs	r2, r0
 8001d5c:	07de      	lsls	r6, r3, #31
 8001d5e:	4332      	orrs	r2, r6
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	4c22      	ldr	r4, [pc, #136]	; (8001dec <__aeabi_dmul+0x3b4>)
 8001d64:	4454      	add	r4, sl
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	dd62      	ble.n	8001e30 <__aeabi_dmul+0x3f8>
 8001d6a:	0751      	lsls	r1, r2, #29
 8001d6c:	d009      	beq.n	8001d82 <__aeabi_dmul+0x34a>
 8001d6e:	200f      	movs	r0, #15
 8001d70:	4010      	ands	r0, r2
 8001d72:	2804      	cmp	r0, #4
 8001d74:	d005      	beq.n	8001d82 <__aeabi_dmul+0x34a>
 8001d76:	1d10      	adds	r0, r2, #4
 8001d78:	4290      	cmp	r0, r2
 8001d7a:	4192      	sbcs	r2, r2
 8001d7c:	4252      	negs	r2, r2
 8001d7e:	189b      	adds	r3, r3, r2
 8001d80:	0002      	movs	r2, r0
 8001d82:	01d9      	lsls	r1, r3, #7
 8001d84:	d504      	bpl.n	8001d90 <__aeabi_dmul+0x358>
 8001d86:	2480      	movs	r4, #128	; 0x80
 8001d88:	4819      	ldr	r0, [pc, #100]	; (8001df0 <__aeabi_dmul+0x3b8>)
 8001d8a:	00e4      	lsls	r4, r4, #3
 8001d8c:	4003      	ands	r3, r0
 8001d8e:	4454      	add	r4, sl
 8001d90:	4818      	ldr	r0, [pc, #96]	; (8001df4 <__aeabi_dmul+0x3bc>)
 8001d92:	4284      	cmp	r4, r0
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dmul+0x360>
 8001d96:	e727      	b.n	8001be8 <__aeabi_dmul+0x1b0>
 8001d98:	075e      	lsls	r6, r3, #29
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	08d2      	lsrs	r2, r2, #3
 8001d9e:	0b1f      	lsrs	r7, r3, #12
 8001da0:	0563      	lsls	r3, r4, #21
 8001da2:	4316      	orrs	r6, r2
 8001da4:	0d5b      	lsrs	r3, r3, #21
 8001da6:	e6b2      	b.n	8001b0e <__aeabi_dmul+0xd6>
 8001da8:	2300      	movs	r3, #0
 8001daa:	4699      	mov	r9, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	2704      	movs	r7, #4
 8001db0:	2600      	movs	r6, #0
 8001db2:	469b      	mov	fp, r3
 8001db4:	e664      	b.n	8001a80 <__aeabi_dmul+0x48>
 8001db6:	2303      	movs	r3, #3
 8001db8:	9701      	str	r7, [sp, #4]
 8001dba:	4681      	mov	r9, r0
 8001dbc:	270c      	movs	r7, #12
 8001dbe:	469b      	mov	fp, r3
 8001dc0:	e65e      	b.n	8001a80 <__aeabi_dmul+0x48>
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	4317      	orrs	r7, r2
 8001dc8:	2200      	movs	r2, #0
 8001dca:	e676      	b.n	8001aba <__aeabi_dmul+0x82>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	2003      	movs	r0, #3
 8001dd0:	431f      	orrs	r7, r3
 8001dd2:	4643      	mov	r3, r8
 8001dd4:	e671      	b.n	8001aba <__aeabi_dmul+0x82>
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	000007ff 	.word	0x000007ff
 8001ddc:	fffffc01 	.word	0xfffffc01
 8001de0:	0800974c 	.word	0x0800974c
 8001de4:	800fffff 	.word	0x800fffff
 8001de8:	fffffc0d 	.word	0xfffffc0d
 8001dec:	000003ff 	.word	0x000003ff
 8001df0:	feffffff 	.word	0xfeffffff
 8001df4:	000007fe 	.word	0x000007fe
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2780      	movs	r7, #128	; 0x80
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	033f      	lsls	r7, r7, #12
 8001e00:	2600      	movs	r6, #0
 8001e02:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <__aeabi_dmul+0x4d8>)
 8001e04:	e683      	b.n	8001b0e <__aeabi_dmul+0xd6>
 8001e06:	9b01      	ldr	r3, [sp, #4]
 8001e08:	0032      	movs	r2, r6
 8001e0a:	46a4      	mov	ip, r4
 8001e0c:	4658      	mov	r0, fp
 8001e0e:	e670      	b.n	8001af2 <__aeabi_dmul+0xba>
 8001e10:	46ac      	mov	ip, r5
 8001e12:	e66e      	b.n	8001af2 <__aeabi_dmul+0xba>
 8001e14:	2780      	movs	r7, #128	; 0x80
 8001e16:	9901      	ldr	r1, [sp, #4]
 8001e18:	033f      	lsls	r7, r7, #12
 8001e1a:	4239      	tst	r1, r7
 8001e1c:	d02d      	beq.n	8001e7a <__aeabi_dmul+0x442>
 8001e1e:	423b      	tst	r3, r7
 8001e20:	d12b      	bne.n	8001e7a <__aeabi_dmul+0x442>
 8001e22:	431f      	orrs	r7, r3
 8001e24:	033f      	lsls	r7, r7, #12
 8001e26:	0b3f      	lsrs	r7, r7, #12
 8001e28:	9500      	str	r5, [sp, #0]
 8001e2a:	0016      	movs	r6, r2
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <__aeabi_dmul+0x4d8>)
 8001e2e:	e66e      	b.n	8001b0e <__aeabi_dmul+0xd6>
 8001e30:	2501      	movs	r5, #1
 8001e32:	1b2d      	subs	r5, r5, r4
 8001e34:	2d38      	cmp	r5, #56	; 0x38
 8001e36:	dd00      	ble.n	8001e3a <__aeabi_dmul+0x402>
 8001e38:	e666      	b.n	8001b08 <__aeabi_dmul+0xd0>
 8001e3a:	2d1f      	cmp	r5, #31
 8001e3c:	dc40      	bgt.n	8001ec0 <__aeabi_dmul+0x488>
 8001e3e:	4835      	ldr	r0, [pc, #212]	; (8001f14 <__aeabi_dmul+0x4dc>)
 8001e40:	001c      	movs	r4, r3
 8001e42:	4450      	add	r0, sl
 8001e44:	0016      	movs	r6, r2
 8001e46:	4082      	lsls	r2, r0
 8001e48:	4084      	lsls	r4, r0
 8001e4a:	40ee      	lsrs	r6, r5
 8001e4c:	1e50      	subs	r0, r2, #1
 8001e4e:	4182      	sbcs	r2, r0
 8001e50:	4334      	orrs	r4, r6
 8001e52:	4314      	orrs	r4, r2
 8001e54:	40eb      	lsrs	r3, r5
 8001e56:	0762      	lsls	r2, r4, #29
 8001e58:	d009      	beq.n	8001e6e <__aeabi_dmul+0x436>
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	4022      	ands	r2, r4
 8001e5e:	2a04      	cmp	r2, #4
 8001e60:	d005      	beq.n	8001e6e <__aeabi_dmul+0x436>
 8001e62:	0022      	movs	r2, r4
 8001e64:	1d14      	adds	r4, r2, #4
 8001e66:	4294      	cmp	r4, r2
 8001e68:	4180      	sbcs	r0, r0
 8001e6a:	4240      	negs	r0, r0
 8001e6c:	181b      	adds	r3, r3, r0
 8001e6e:	021a      	lsls	r2, r3, #8
 8001e70:	d53e      	bpl.n	8001ef0 <__aeabi_dmul+0x4b8>
 8001e72:	2301      	movs	r3, #1
 8001e74:	2700      	movs	r7, #0
 8001e76:	2600      	movs	r6, #0
 8001e78:	e649      	b.n	8001b0e <__aeabi_dmul+0xd6>
 8001e7a:	2780      	movs	r7, #128	; 0x80
 8001e7c:	9b01      	ldr	r3, [sp, #4]
 8001e7e:	033f      	lsls	r7, r7, #12
 8001e80:	431f      	orrs	r7, r3
 8001e82:	033f      	lsls	r7, r7, #12
 8001e84:	0b3f      	lsrs	r7, r7, #12
 8001e86:	9400      	str	r4, [sp, #0]
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <__aeabi_dmul+0x4d8>)
 8001e8a:	e640      	b.n	8001b0e <__aeabi_dmul+0xd6>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	465a      	mov	r2, fp
 8001e90:	3b28      	subs	r3, #40	; 0x28
 8001e92:	409a      	lsls	r2, r3
 8001e94:	2600      	movs	r6, #0
 8001e96:	9201      	str	r2, [sp, #4]
 8001e98:	e66d      	b.n	8001b76 <__aeabi_dmul+0x13e>
 8001e9a:	4658      	mov	r0, fp
 8001e9c:	f000 fd1a 	bl	80028d4 <__clzsi2>
 8001ea0:	3020      	adds	r0, #32
 8001ea2:	e657      	b.n	8001b54 <__aeabi_dmul+0x11c>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	4652      	mov	r2, sl
 8001ea8:	3b28      	subs	r3, #40	; 0x28
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	0013      	movs	r3, r2
 8001eae:	2200      	movs	r2, #0
 8001eb0:	e693      	b.n	8001bda <__aeabi_dmul+0x1a2>
 8001eb2:	4650      	mov	r0, sl
 8001eb4:	f000 fd0e 	bl	80028d4 <__clzsi2>
 8001eb8:	3020      	adds	r0, #32
 8001eba:	e67b      	b.n	8001bb4 <__aeabi_dmul+0x17c>
 8001ebc:	46ca      	mov	sl, r9
 8001ebe:	e750      	b.n	8001d62 <__aeabi_dmul+0x32a>
 8001ec0:	201f      	movs	r0, #31
 8001ec2:	001e      	movs	r6, r3
 8001ec4:	4240      	negs	r0, r0
 8001ec6:	1b04      	subs	r4, r0, r4
 8001ec8:	40e6      	lsrs	r6, r4
 8001eca:	2d20      	cmp	r5, #32
 8001ecc:	d003      	beq.n	8001ed6 <__aeabi_dmul+0x49e>
 8001ece:	4c12      	ldr	r4, [pc, #72]	; (8001f18 <__aeabi_dmul+0x4e0>)
 8001ed0:	4454      	add	r4, sl
 8001ed2:	40a3      	lsls	r3, r4
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	1e50      	subs	r0, r2, #1
 8001ed8:	4182      	sbcs	r2, r0
 8001eda:	4332      	orrs	r2, r6
 8001edc:	2607      	movs	r6, #7
 8001ede:	2700      	movs	r7, #0
 8001ee0:	4016      	ands	r6, r2
 8001ee2:	d009      	beq.n	8001ef8 <__aeabi_dmul+0x4c0>
 8001ee4:	200f      	movs	r0, #15
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	4010      	ands	r0, r2
 8001eea:	0014      	movs	r4, r2
 8001eec:	2804      	cmp	r0, #4
 8001eee:	d1b9      	bne.n	8001e64 <__aeabi_dmul+0x42c>
 8001ef0:	0022      	movs	r2, r4
 8001ef2:	075e      	lsls	r6, r3, #29
 8001ef4:	025b      	lsls	r3, r3, #9
 8001ef6:	0b1f      	lsrs	r7, r3, #12
 8001ef8:	08d2      	lsrs	r2, r2, #3
 8001efa:	4316      	orrs	r6, r2
 8001efc:	2300      	movs	r3, #0
 8001efe:	e606      	b.n	8001b0e <__aeabi_dmul+0xd6>
 8001f00:	2780      	movs	r7, #128	; 0x80
 8001f02:	033f      	lsls	r7, r7, #12
 8001f04:	431f      	orrs	r7, r3
 8001f06:	033f      	lsls	r7, r7, #12
 8001f08:	0b3f      	lsrs	r7, r7, #12
 8001f0a:	0016      	movs	r6, r2
 8001f0c:	4b00      	ldr	r3, [pc, #0]	; (8001f10 <__aeabi_dmul+0x4d8>)
 8001f0e:	e5fe      	b.n	8001b0e <__aeabi_dmul+0xd6>
 8001f10:	000007ff 	.word	0x000007ff
 8001f14:	0000041e 	.word	0x0000041e
 8001f18:	0000043e 	.word	0x0000043e

08001f1c <__aeabi_dsub>:
 8001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1e:	4657      	mov	r7, sl
 8001f20:	464e      	mov	r6, r9
 8001f22:	4645      	mov	r5, r8
 8001f24:	46de      	mov	lr, fp
 8001f26:	000c      	movs	r4, r1
 8001f28:	0309      	lsls	r1, r1, #12
 8001f2a:	b5e0      	push	{r5, r6, r7, lr}
 8001f2c:	0a49      	lsrs	r1, r1, #9
 8001f2e:	0f46      	lsrs	r6, r0, #29
 8001f30:	005f      	lsls	r7, r3, #1
 8001f32:	4331      	orrs	r1, r6
 8001f34:	031e      	lsls	r6, r3, #12
 8001f36:	0fdb      	lsrs	r3, r3, #31
 8001f38:	0a76      	lsrs	r6, r6, #9
 8001f3a:	469b      	mov	fp, r3
 8001f3c:	0f53      	lsrs	r3, r2, #29
 8001f3e:	4333      	orrs	r3, r6
 8001f40:	4ec8      	ldr	r6, [pc, #800]	; (8002264 <__aeabi_dsub+0x348>)
 8001f42:	0065      	lsls	r5, r4, #1
 8001f44:	00c0      	lsls	r0, r0, #3
 8001f46:	0fe4      	lsrs	r4, r4, #31
 8001f48:	00d2      	lsls	r2, r2, #3
 8001f4a:	0d6d      	lsrs	r5, r5, #21
 8001f4c:	46a2      	mov	sl, r4
 8001f4e:	4681      	mov	r9, r0
 8001f50:	0d7f      	lsrs	r7, r7, #21
 8001f52:	469c      	mov	ip, r3
 8001f54:	4690      	mov	r8, r2
 8001f56:	42b7      	cmp	r7, r6
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x40>
 8001f5a:	e0b9      	b.n	80020d0 <__aeabi_dsub+0x1b4>
 8001f5c:	465b      	mov	r3, fp
 8001f5e:	2601      	movs	r6, #1
 8001f60:	4073      	eors	r3, r6
 8001f62:	469b      	mov	fp, r3
 8001f64:	1bee      	subs	r6, r5, r7
 8001f66:	45a3      	cmp	fp, r4
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dsub+0x50>
 8001f6a:	e083      	b.n	8002074 <__aeabi_dsub+0x158>
 8001f6c:	2e00      	cmp	r6, #0
 8001f6e:	dd63      	ble.n	8002038 <__aeabi_dsub+0x11c>
 8001f70:	2f00      	cmp	r7, #0
 8001f72:	d000      	beq.n	8001f76 <__aeabi_dsub+0x5a>
 8001f74:	e0b1      	b.n	80020da <__aeabi_dsub+0x1be>
 8001f76:	4663      	mov	r3, ip
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x62>
 8001f7c:	e123      	b.n	80021c6 <__aeabi_dsub+0x2aa>
 8001f7e:	1e73      	subs	r3, r6, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d000      	beq.n	8001f86 <__aeabi_dsub+0x6a>
 8001f84:	e1ba      	b.n	80022fc <__aeabi_dsub+0x3e0>
 8001f86:	1a86      	subs	r6, r0, r2
 8001f88:	4663      	mov	r3, ip
 8001f8a:	42b0      	cmp	r0, r6
 8001f8c:	4180      	sbcs	r0, r0
 8001f8e:	2501      	movs	r5, #1
 8001f90:	1ac9      	subs	r1, r1, r3
 8001f92:	4240      	negs	r0, r0
 8001f94:	1a09      	subs	r1, r1, r0
 8001f96:	020b      	lsls	r3, r1, #8
 8001f98:	d400      	bmi.n	8001f9c <__aeabi_dsub+0x80>
 8001f9a:	e147      	b.n	800222c <__aeabi_dsub+0x310>
 8001f9c:	0249      	lsls	r1, r1, #9
 8001f9e:	0a4b      	lsrs	r3, r1, #9
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dsub+0x8e>
 8001fa8:	e189      	b.n	80022be <__aeabi_dsub+0x3a2>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fc92 	bl	80028d4 <__clzsi2>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	3b08      	subs	r3, #8
 8001fb4:	2b1f      	cmp	r3, #31
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dsub+0x9e>
 8001fb8:	e17c      	b.n	80022b4 <__aeabi_dsub+0x398>
 8001fba:	2220      	movs	r2, #32
 8001fbc:	0030      	movs	r0, r6
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	4641      	mov	r1, r8
 8001fc2:	40d0      	lsrs	r0, r2
 8001fc4:	4099      	lsls	r1, r3
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	409e      	lsls	r6, r3
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	429d      	cmp	r5, r3
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dsub+0xb6>
 8001fd0:	e16a      	b.n	80022a8 <__aeabi_dsub+0x38c>
 8001fd2:	1b5d      	subs	r5, r3, r5
 8001fd4:	1c6b      	adds	r3, r5, #1
 8001fd6:	2b1f      	cmp	r3, #31
 8001fd8:	dd00      	ble.n	8001fdc <__aeabi_dsub+0xc0>
 8001fda:	e194      	b.n	8002306 <__aeabi_dsub+0x3ea>
 8001fdc:	2120      	movs	r1, #32
 8001fde:	0010      	movs	r0, r2
 8001fe0:	0035      	movs	r5, r6
 8001fe2:	1ac9      	subs	r1, r1, r3
 8001fe4:	408e      	lsls	r6, r1
 8001fe6:	40da      	lsrs	r2, r3
 8001fe8:	4088      	lsls	r0, r1
 8001fea:	40dd      	lsrs	r5, r3
 8001fec:	1e71      	subs	r1, r6, #1
 8001fee:	418e      	sbcs	r6, r1
 8001ff0:	0011      	movs	r1, r2
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	4328      	orrs	r0, r5
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	4306      	orrs	r6, r0
 8001ffa:	4032      	ands	r2, r6
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d009      	beq.n	8002014 <__aeabi_dsub+0xf8>
 8002000:	230f      	movs	r3, #15
 8002002:	4033      	ands	r3, r6
 8002004:	2b04      	cmp	r3, #4
 8002006:	d005      	beq.n	8002014 <__aeabi_dsub+0xf8>
 8002008:	1d33      	adds	r3, r6, #4
 800200a:	42b3      	cmp	r3, r6
 800200c:	41b6      	sbcs	r6, r6
 800200e:	4276      	negs	r6, r6
 8002010:	1989      	adds	r1, r1, r6
 8002012:	001e      	movs	r6, r3
 8002014:	020b      	lsls	r3, r1, #8
 8002016:	d400      	bmi.n	800201a <__aeabi_dsub+0xfe>
 8002018:	e23d      	b.n	8002496 <__aeabi_dsub+0x57a>
 800201a:	1c6a      	adds	r2, r5, #1
 800201c:	4b91      	ldr	r3, [pc, #580]	; (8002264 <__aeabi_dsub+0x348>)
 800201e:	0555      	lsls	r5, r2, #21
 8002020:	0d6d      	lsrs	r5, r5, #21
 8002022:	429a      	cmp	r2, r3
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x10c>
 8002026:	e119      	b.n	800225c <__aeabi_dsub+0x340>
 8002028:	4a8f      	ldr	r2, [pc, #572]	; (8002268 <__aeabi_dsub+0x34c>)
 800202a:	08f6      	lsrs	r6, r6, #3
 800202c:	400a      	ands	r2, r1
 800202e:	0757      	lsls	r7, r2, #29
 8002030:	0252      	lsls	r2, r2, #9
 8002032:	4337      	orrs	r7, r6
 8002034:	0b12      	lsrs	r2, r2, #12
 8002036:	e09b      	b.n	8002170 <__aeabi_dsub+0x254>
 8002038:	2e00      	cmp	r6, #0
 800203a:	d000      	beq.n	800203e <__aeabi_dsub+0x122>
 800203c:	e0c5      	b.n	80021ca <__aeabi_dsub+0x2ae>
 800203e:	1c6e      	adds	r6, r5, #1
 8002040:	0576      	lsls	r6, r6, #21
 8002042:	0d76      	lsrs	r6, r6, #21
 8002044:	2e01      	cmp	r6, #1
 8002046:	dc00      	bgt.n	800204a <__aeabi_dsub+0x12e>
 8002048:	e148      	b.n	80022dc <__aeabi_dsub+0x3c0>
 800204a:	4667      	mov	r7, ip
 800204c:	1a86      	subs	r6, r0, r2
 800204e:	1bcb      	subs	r3, r1, r7
 8002050:	42b0      	cmp	r0, r6
 8002052:	41bf      	sbcs	r7, r7
 8002054:	427f      	negs	r7, r7
 8002056:	46b8      	mov	r8, r7
 8002058:	001f      	movs	r7, r3
 800205a:	4643      	mov	r3, r8
 800205c:	1aff      	subs	r7, r7, r3
 800205e:	003b      	movs	r3, r7
 8002060:	46b8      	mov	r8, r7
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x14c>
 8002066:	e15f      	b.n	8002328 <__aeabi_dsub+0x40c>
 8002068:	4337      	orrs	r7, r6
 800206a:	d19a      	bne.n	8001fa2 <__aeabi_dsub+0x86>
 800206c:	2200      	movs	r2, #0
 800206e:	2400      	movs	r4, #0
 8002070:	2500      	movs	r5, #0
 8002072:	e079      	b.n	8002168 <__aeabi_dsub+0x24c>
 8002074:	2e00      	cmp	r6, #0
 8002076:	dc00      	bgt.n	800207a <__aeabi_dsub+0x15e>
 8002078:	e0fa      	b.n	8002270 <__aeabi_dsub+0x354>
 800207a:	2f00      	cmp	r7, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_dsub+0x164>
 800207e:	e08d      	b.n	800219c <__aeabi_dsub+0x280>
 8002080:	4b78      	ldr	r3, [pc, #480]	; (8002264 <__aeabi_dsub+0x348>)
 8002082:	429d      	cmp	r5, r3
 8002084:	d067      	beq.n	8002156 <__aeabi_dsub+0x23a>
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	4667      	mov	r7, ip
 800208a:	041b      	lsls	r3, r3, #16
 800208c:	431f      	orrs	r7, r3
 800208e:	46bc      	mov	ip, r7
 8002090:	2e38      	cmp	r6, #56	; 0x38
 8002092:	dc00      	bgt.n	8002096 <__aeabi_dsub+0x17a>
 8002094:	e152      	b.n	800233c <__aeabi_dsub+0x420>
 8002096:	4663      	mov	r3, ip
 8002098:	4313      	orrs	r3, r2
 800209a:	1e5a      	subs	r2, r3, #1
 800209c:	4193      	sbcs	r3, r2
 800209e:	181e      	adds	r6, r3, r0
 80020a0:	4286      	cmp	r6, r0
 80020a2:	4180      	sbcs	r0, r0
 80020a4:	4240      	negs	r0, r0
 80020a6:	1809      	adds	r1, r1, r0
 80020a8:	020b      	lsls	r3, r1, #8
 80020aa:	d400      	bmi.n	80020ae <__aeabi_dsub+0x192>
 80020ac:	e0be      	b.n	800222c <__aeabi_dsub+0x310>
 80020ae:	4b6d      	ldr	r3, [pc, #436]	; (8002264 <__aeabi_dsub+0x348>)
 80020b0:	3501      	adds	r5, #1
 80020b2:	429d      	cmp	r5, r3
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x19c>
 80020b6:	e0d2      	b.n	800225e <__aeabi_dsub+0x342>
 80020b8:	4a6b      	ldr	r2, [pc, #428]	; (8002268 <__aeabi_dsub+0x34c>)
 80020ba:	0873      	lsrs	r3, r6, #1
 80020bc:	400a      	ands	r2, r1
 80020be:	2101      	movs	r1, #1
 80020c0:	400e      	ands	r6, r1
 80020c2:	431e      	orrs	r6, r3
 80020c4:	0851      	lsrs	r1, r2, #1
 80020c6:	07d3      	lsls	r3, r2, #31
 80020c8:	2207      	movs	r2, #7
 80020ca:	431e      	orrs	r6, r3
 80020cc:	4032      	ands	r2, r6
 80020ce:	e795      	b.n	8001ffc <__aeabi_dsub+0xe0>
 80020d0:	001e      	movs	r6, r3
 80020d2:	4316      	orrs	r6, r2
 80020d4:	d000      	beq.n	80020d8 <__aeabi_dsub+0x1bc>
 80020d6:	e745      	b.n	8001f64 <__aeabi_dsub+0x48>
 80020d8:	e740      	b.n	8001f5c <__aeabi_dsub+0x40>
 80020da:	4b62      	ldr	r3, [pc, #392]	; (8002264 <__aeabi_dsub+0x348>)
 80020dc:	429d      	cmp	r5, r3
 80020de:	d03a      	beq.n	8002156 <__aeabi_dsub+0x23a>
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	4667      	mov	r7, ip
 80020e4:	041b      	lsls	r3, r3, #16
 80020e6:	431f      	orrs	r7, r3
 80020e8:	46bc      	mov	ip, r7
 80020ea:	2e38      	cmp	r6, #56	; 0x38
 80020ec:	dd00      	ble.n	80020f0 <__aeabi_dsub+0x1d4>
 80020ee:	e0eb      	b.n	80022c8 <__aeabi_dsub+0x3ac>
 80020f0:	2e1f      	cmp	r6, #31
 80020f2:	dc00      	bgt.n	80020f6 <__aeabi_dsub+0x1da>
 80020f4:	e13a      	b.n	800236c <__aeabi_dsub+0x450>
 80020f6:	0033      	movs	r3, r6
 80020f8:	4667      	mov	r7, ip
 80020fa:	3b20      	subs	r3, #32
 80020fc:	40df      	lsrs	r7, r3
 80020fe:	003b      	movs	r3, r7
 8002100:	2e20      	cmp	r6, #32
 8002102:	d005      	beq.n	8002110 <__aeabi_dsub+0x1f4>
 8002104:	2740      	movs	r7, #64	; 0x40
 8002106:	1bbf      	subs	r7, r7, r6
 8002108:	4666      	mov	r6, ip
 800210a:	40be      	lsls	r6, r7
 800210c:	4332      	orrs	r2, r6
 800210e:	4690      	mov	r8, r2
 8002110:	4646      	mov	r6, r8
 8002112:	1e72      	subs	r2, r6, #1
 8002114:	4196      	sbcs	r6, r2
 8002116:	4333      	orrs	r3, r6
 8002118:	e0da      	b.n	80022d0 <__aeabi_dsub+0x3b4>
 800211a:	2b00      	cmp	r3, #0
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x204>
 800211e:	e214      	b.n	800254a <__aeabi_dsub+0x62e>
 8002120:	4663      	mov	r3, ip
 8002122:	4313      	orrs	r3, r2
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x20c>
 8002126:	e168      	b.n	80023fa <__aeabi_dsub+0x4de>
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	074e      	lsls	r6, r1, #29
 800212c:	08c0      	lsrs	r0, r0, #3
 800212e:	08c9      	lsrs	r1, r1, #3
 8002130:	031b      	lsls	r3, r3, #12
 8002132:	4306      	orrs	r6, r0
 8002134:	4219      	tst	r1, r3
 8002136:	d008      	beq.n	800214a <__aeabi_dsub+0x22e>
 8002138:	4660      	mov	r0, ip
 800213a:	08c0      	lsrs	r0, r0, #3
 800213c:	4218      	tst	r0, r3
 800213e:	d104      	bne.n	800214a <__aeabi_dsub+0x22e>
 8002140:	4663      	mov	r3, ip
 8002142:	0001      	movs	r1, r0
 8002144:	08d2      	lsrs	r2, r2, #3
 8002146:	075e      	lsls	r6, r3, #29
 8002148:	4316      	orrs	r6, r2
 800214a:	00f3      	lsls	r3, r6, #3
 800214c:	4699      	mov	r9, r3
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	0f72      	lsrs	r2, r6, #29
 8002152:	4d44      	ldr	r5, [pc, #272]	; (8002264 <__aeabi_dsub+0x348>)
 8002154:	4311      	orrs	r1, r2
 8002156:	464b      	mov	r3, r9
 8002158:	08de      	lsrs	r6, r3, #3
 800215a:	4b42      	ldr	r3, [pc, #264]	; (8002264 <__aeabi_dsub+0x348>)
 800215c:	074f      	lsls	r7, r1, #29
 800215e:	4337      	orrs	r7, r6
 8002160:	08ca      	lsrs	r2, r1, #3
 8002162:	429d      	cmp	r5, r3
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x24c>
 8002166:	e06e      	b.n	8002246 <__aeabi_dsub+0x32a>
 8002168:	0312      	lsls	r2, r2, #12
 800216a:	056d      	lsls	r5, r5, #21
 800216c:	0b12      	lsrs	r2, r2, #12
 800216e:	0d6d      	lsrs	r5, r5, #21
 8002170:	2100      	movs	r1, #0
 8002172:	0312      	lsls	r2, r2, #12
 8002174:	0b13      	lsrs	r3, r2, #12
 8002176:	0d0a      	lsrs	r2, r1, #20
 8002178:	0512      	lsls	r2, r2, #20
 800217a:	431a      	orrs	r2, r3
 800217c:	4b3b      	ldr	r3, [pc, #236]	; (800226c <__aeabi_dsub+0x350>)
 800217e:	052d      	lsls	r5, r5, #20
 8002180:	4013      	ands	r3, r2
 8002182:	432b      	orrs	r3, r5
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	07e4      	lsls	r4, r4, #31
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	4323      	orrs	r3, r4
 800218c:	0038      	movs	r0, r7
 800218e:	0019      	movs	r1, r3
 8002190:	bc3c      	pop	{r2, r3, r4, r5}
 8002192:	4690      	mov	r8, r2
 8002194:	4699      	mov	r9, r3
 8002196:	46a2      	mov	sl, r4
 8002198:	46ab      	mov	fp, r5
 800219a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800219c:	4663      	mov	r3, ip
 800219e:	4313      	orrs	r3, r2
 80021a0:	d011      	beq.n	80021c6 <__aeabi_dsub+0x2aa>
 80021a2:	1e73      	subs	r3, r6, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d000      	beq.n	80021aa <__aeabi_dsub+0x28e>
 80021a8:	e107      	b.n	80023ba <__aeabi_dsub+0x49e>
 80021aa:	1886      	adds	r6, r0, r2
 80021ac:	4286      	cmp	r6, r0
 80021ae:	4180      	sbcs	r0, r0
 80021b0:	4461      	add	r1, ip
 80021b2:	4240      	negs	r0, r0
 80021b4:	1809      	adds	r1, r1, r0
 80021b6:	2501      	movs	r5, #1
 80021b8:	020b      	lsls	r3, r1, #8
 80021ba:	d537      	bpl.n	800222c <__aeabi_dsub+0x310>
 80021bc:	2502      	movs	r5, #2
 80021be:	e77b      	b.n	80020b8 <__aeabi_dsub+0x19c>
 80021c0:	003e      	movs	r6, r7
 80021c2:	4661      	mov	r1, ip
 80021c4:	4691      	mov	r9, r2
 80021c6:	0035      	movs	r5, r6
 80021c8:	e7c5      	b.n	8002156 <__aeabi_dsub+0x23a>
 80021ca:	465c      	mov	r4, fp
 80021cc:	2d00      	cmp	r5, #0
 80021ce:	d000      	beq.n	80021d2 <__aeabi_dsub+0x2b6>
 80021d0:	e0e1      	b.n	8002396 <__aeabi_dsub+0x47a>
 80021d2:	000b      	movs	r3, r1
 80021d4:	4303      	orrs	r3, r0
 80021d6:	d0f3      	beq.n	80021c0 <__aeabi_dsub+0x2a4>
 80021d8:	1c73      	adds	r3, r6, #1
 80021da:	d100      	bne.n	80021de <__aeabi_dsub+0x2c2>
 80021dc:	e1ac      	b.n	8002538 <__aeabi_dsub+0x61c>
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <__aeabi_dsub+0x348>)
 80021e0:	429f      	cmp	r7, r3
 80021e2:	d100      	bne.n	80021e6 <__aeabi_dsub+0x2ca>
 80021e4:	e13a      	b.n	800245c <__aeabi_dsub+0x540>
 80021e6:	43f3      	mvns	r3, r6
 80021e8:	2b38      	cmp	r3, #56	; 0x38
 80021ea:	dd00      	ble.n	80021ee <__aeabi_dsub+0x2d2>
 80021ec:	e16f      	b.n	80024ce <__aeabi_dsub+0x5b2>
 80021ee:	2b1f      	cmp	r3, #31
 80021f0:	dd00      	ble.n	80021f4 <__aeabi_dsub+0x2d8>
 80021f2:	e18c      	b.n	800250e <__aeabi_dsub+0x5f2>
 80021f4:	2520      	movs	r5, #32
 80021f6:	000e      	movs	r6, r1
 80021f8:	1aed      	subs	r5, r5, r3
 80021fa:	40ae      	lsls	r6, r5
 80021fc:	46b0      	mov	r8, r6
 80021fe:	0006      	movs	r6, r0
 8002200:	46aa      	mov	sl, r5
 8002202:	40de      	lsrs	r6, r3
 8002204:	4645      	mov	r5, r8
 8002206:	4335      	orrs	r5, r6
 8002208:	002e      	movs	r6, r5
 800220a:	4655      	mov	r5, sl
 800220c:	40d9      	lsrs	r1, r3
 800220e:	40a8      	lsls	r0, r5
 8002210:	4663      	mov	r3, ip
 8002212:	1e45      	subs	r5, r0, #1
 8002214:	41a8      	sbcs	r0, r5
 8002216:	1a5b      	subs	r3, r3, r1
 8002218:	469c      	mov	ip, r3
 800221a:	4330      	orrs	r0, r6
 800221c:	1a16      	subs	r6, r2, r0
 800221e:	42b2      	cmp	r2, r6
 8002220:	4192      	sbcs	r2, r2
 8002222:	4663      	mov	r3, ip
 8002224:	4252      	negs	r2, r2
 8002226:	1a99      	subs	r1, r3, r2
 8002228:	003d      	movs	r5, r7
 800222a:	e6b4      	b.n	8001f96 <__aeabi_dsub+0x7a>
 800222c:	2207      	movs	r2, #7
 800222e:	4032      	ands	r2, r6
 8002230:	2a00      	cmp	r2, #0
 8002232:	d000      	beq.n	8002236 <__aeabi_dsub+0x31a>
 8002234:	e6e4      	b.n	8002000 <__aeabi_dsub+0xe4>
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <__aeabi_dsub+0x348>)
 8002238:	08f6      	lsrs	r6, r6, #3
 800223a:	074f      	lsls	r7, r1, #29
 800223c:	4337      	orrs	r7, r6
 800223e:	08ca      	lsrs	r2, r1, #3
 8002240:	429d      	cmp	r5, r3
 8002242:	d000      	beq.n	8002246 <__aeabi_dsub+0x32a>
 8002244:	e790      	b.n	8002168 <__aeabi_dsub+0x24c>
 8002246:	003b      	movs	r3, r7
 8002248:	4313      	orrs	r3, r2
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x332>
 800224c:	e1a6      	b.n	800259c <__aeabi_dsub+0x680>
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	031b      	lsls	r3, r3, #12
 8002252:	431a      	orrs	r2, r3
 8002254:	0312      	lsls	r2, r2, #12
 8002256:	0b12      	lsrs	r2, r2, #12
 8002258:	4d02      	ldr	r5, [pc, #8]	; (8002264 <__aeabi_dsub+0x348>)
 800225a:	e789      	b.n	8002170 <__aeabi_dsub+0x254>
 800225c:	0015      	movs	r5, r2
 800225e:	2200      	movs	r2, #0
 8002260:	2700      	movs	r7, #0
 8002262:	e785      	b.n	8002170 <__aeabi_dsub+0x254>
 8002264:	000007ff 	.word	0x000007ff
 8002268:	ff7fffff 	.word	0xff7fffff
 800226c:	800fffff 	.word	0x800fffff
 8002270:	2e00      	cmp	r6, #0
 8002272:	d000      	beq.n	8002276 <__aeabi_dsub+0x35a>
 8002274:	e0c7      	b.n	8002406 <__aeabi_dsub+0x4ea>
 8002276:	1c6b      	adds	r3, r5, #1
 8002278:	055e      	lsls	r6, r3, #21
 800227a:	0d76      	lsrs	r6, r6, #21
 800227c:	2e01      	cmp	r6, #1
 800227e:	dc00      	bgt.n	8002282 <__aeabi_dsub+0x366>
 8002280:	e0f0      	b.n	8002464 <__aeabi_dsub+0x548>
 8002282:	4dc8      	ldr	r5, [pc, #800]	; (80025a4 <__aeabi_dsub+0x688>)
 8002284:	42ab      	cmp	r3, r5
 8002286:	d100      	bne.n	800228a <__aeabi_dsub+0x36e>
 8002288:	e0b9      	b.n	80023fe <__aeabi_dsub+0x4e2>
 800228a:	1885      	adds	r5, r0, r2
 800228c:	000a      	movs	r2, r1
 800228e:	4285      	cmp	r5, r0
 8002290:	4189      	sbcs	r1, r1
 8002292:	4462      	add	r2, ip
 8002294:	4249      	negs	r1, r1
 8002296:	1851      	adds	r1, r2, r1
 8002298:	2207      	movs	r2, #7
 800229a:	07ce      	lsls	r6, r1, #31
 800229c:	086d      	lsrs	r5, r5, #1
 800229e:	432e      	orrs	r6, r5
 80022a0:	0849      	lsrs	r1, r1, #1
 80022a2:	4032      	ands	r2, r6
 80022a4:	001d      	movs	r5, r3
 80022a6:	e6a9      	b.n	8001ffc <__aeabi_dsub+0xe0>
 80022a8:	49bf      	ldr	r1, [pc, #764]	; (80025a8 <__aeabi_dsub+0x68c>)
 80022aa:	1aed      	subs	r5, r5, r3
 80022ac:	4011      	ands	r1, r2
 80022ae:	2207      	movs	r2, #7
 80022b0:	4032      	ands	r2, r6
 80022b2:	e6a3      	b.n	8001ffc <__aeabi_dsub+0xe0>
 80022b4:	0032      	movs	r2, r6
 80022b6:	3828      	subs	r0, #40	; 0x28
 80022b8:	4082      	lsls	r2, r0
 80022ba:	2600      	movs	r6, #0
 80022bc:	e686      	b.n	8001fcc <__aeabi_dsub+0xb0>
 80022be:	0030      	movs	r0, r6
 80022c0:	f000 fb08 	bl	80028d4 <__clzsi2>
 80022c4:	3020      	adds	r0, #32
 80022c6:	e673      	b.n	8001fb0 <__aeabi_dsub+0x94>
 80022c8:	4663      	mov	r3, ip
 80022ca:	4313      	orrs	r3, r2
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	4193      	sbcs	r3, r2
 80022d0:	1ac6      	subs	r6, r0, r3
 80022d2:	42b0      	cmp	r0, r6
 80022d4:	4180      	sbcs	r0, r0
 80022d6:	4240      	negs	r0, r0
 80022d8:	1a09      	subs	r1, r1, r0
 80022da:	e65c      	b.n	8001f96 <__aeabi_dsub+0x7a>
 80022dc:	000e      	movs	r6, r1
 80022de:	4667      	mov	r7, ip
 80022e0:	4306      	orrs	r6, r0
 80022e2:	4317      	orrs	r7, r2
 80022e4:	2d00      	cmp	r5, #0
 80022e6:	d15e      	bne.n	80023a6 <__aeabi_dsub+0x48a>
 80022e8:	2e00      	cmp	r6, #0
 80022ea:	d000      	beq.n	80022ee <__aeabi_dsub+0x3d2>
 80022ec:	e0f3      	b.n	80024d6 <__aeabi_dsub+0x5ba>
 80022ee:	2f00      	cmp	r7, #0
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x3d8>
 80022f2:	e11e      	b.n	8002532 <__aeabi_dsub+0x616>
 80022f4:	465c      	mov	r4, fp
 80022f6:	4661      	mov	r1, ip
 80022f8:	4691      	mov	r9, r2
 80022fa:	e72c      	b.n	8002156 <__aeabi_dsub+0x23a>
 80022fc:	4fa9      	ldr	r7, [pc, #676]	; (80025a4 <__aeabi_dsub+0x688>)
 80022fe:	42be      	cmp	r6, r7
 8002300:	d07b      	beq.n	80023fa <__aeabi_dsub+0x4de>
 8002302:	001e      	movs	r6, r3
 8002304:	e6f1      	b.n	80020ea <__aeabi_dsub+0x1ce>
 8002306:	0010      	movs	r0, r2
 8002308:	3d1f      	subs	r5, #31
 800230a:	40e8      	lsrs	r0, r5
 800230c:	2b20      	cmp	r3, #32
 800230e:	d003      	beq.n	8002318 <__aeabi_dsub+0x3fc>
 8002310:	2140      	movs	r1, #64	; 0x40
 8002312:	1acb      	subs	r3, r1, r3
 8002314:	409a      	lsls	r2, r3
 8002316:	4316      	orrs	r6, r2
 8002318:	1e73      	subs	r3, r6, #1
 800231a:	419e      	sbcs	r6, r3
 800231c:	2207      	movs	r2, #7
 800231e:	4306      	orrs	r6, r0
 8002320:	4032      	ands	r2, r6
 8002322:	2100      	movs	r1, #0
 8002324:	2500      	movs	r5, #0
 8002326:	e783      	b.n	8002230 <__aeabi_dsub+0x314>
 8002328:	1a16      	subs	r6, r2, r0
 800232a:	4663      	mov	r3, ip
 800232c:	42b2      	cmp	r2, r6
 800232e:	4180      	sbcs	r0, r0
 8002330:	1a59      	subs	r1, r3, r1
 8002332:	4240      	negs	r0, r0
 8002334:	1a0b      	subs	r3, r1, r0
 8002336:	4698      	mov	r8, r3
 8002338:	465c      	mov	r4, fp
 800233a:	e632      	b.n	8001fa2 <__aeabi_dsub+0x86>
 800233c:	2e1f      	cmp	r6, #31
 800233e:	dd00      	ble.n	8002342 <__aeabi_dsub+0x426>
 8002340:	e0ab      	b.n	800249a <__aeabi_dsub+0x57e>
 8002342:	2720      	movs	r7, #32
 8002344:	1bbb      	subs	r3, r7, r6
 8002346:	469a      	mov	sl, r3
 8002348:	4663      	mov	r3, ip
 800234a:	4657      	mov	r7, sl
 800234c:	40bb      	lsls	r3, r7
 800234e:	4699      	mov	r9, r3
 8002350:	0013      	movs	r3, r2
 8002352:	464f      	mov	r7, r9
 8002354:	40f3      	lsrs	r3, r6
 8002356:	431f      	orrs	r7, r3
 8002358:	003b      	movs	r3, r7
 800235a:	4657      	mov	r7, sl
 800235c:	40ba      	lsls	r2, r7
 800235e:	1e57      	subs	r7, r2, #1
 8002360:	41ba      	sbcs	r2, r7
 8002362:	4313      	orrs	r3, r2
 8002364:	4662      	mov	r2, ip
 8002366:	40f2      	lsrs	r2, r6
 8002368:	1889      	adds	r1, r1, r2
 800236a:	e698      	b.n	800209e <__aeabi_dsub+0x182>
 800236c:	2720      	movs	r7, #32
 800236e:	1bbb      	subs	r3, r7, r6
 8002370:	469a      	mov	sl, r3
 8002372:	4663      	mov	r3, ip
 8002374:	4657      	mov	r7, sl
 8002376:	40bb      	lsls	r3, r7
 8002378:	4699      	mov	r9, r3
 800237a:	0013      	movs	r3, r2
 800237c:	464f      	mov	r7, r9
 800237e:	40f3      	lsrs	r3, r6
 8002380:	431f      	orrs	r7, r3
 8002382:	003b      	movs	r3, r7
 8002384:	4657      	mov	r7, sl
 8002386:	40ba      	lsls	r2, r7
 8002388:	1e57      	subs	r7, r2, #1
 800238a:	41ba      	sbcs	r2, r7
 800238c:	4313      	orrs	r3, r2
 800238e:	4662      	mov	r2, ip
 8002390:	40f2      	lsrs	r2, r6
 8002392:	1a89      	subs	r1, r1, r2
 8002394:	e79c      	b.n	80022d0 <__aeabi_dsub+0x3b4>
 8002396:	4b83      	ldr	r3, [pc, #524]	; (80025a4 <__aeabi_dsub+0x688>)
 8002398:	429f      	cmp	r7, r3
 800239a:	d05f      	beq.n	800245c <__aeabi_dsub+0x540>
 800239c:	2580      	movs	r5, #128	; 0x80
 800239e:	042d      	lsls	r5, r5, #16
 80023a0:	4273      	negs	r3, r6
 80023a2:	4329      	orrs	r1, r5
 80023a4:	e720      	b.n	80021e8 <__aeabi_dsub+0x2cc>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d10c      	bne.n	80023c4 <__aeabi_dsub+0x4a8>
 80023aa:	2f00      	cmp	r7, #0
 80023ac:	d100      	bne.n	80023b0 <__aeabi_dsub+0x494>
 80023ae:	e0d0      	b.n	8002552 <__aeabi_dsub+0x636>
 80023b0:	465c      	mov	r4, fp
 80023b2:	4661      	mov	r1, ip
 80023b4:	4691      	mov	r9, r2
 80023b6:	4d7b      	ldr	r5, [pc, #492]	; (80025a4 <__aeabi_dsub+0x688>)
 80023b8:	e6cd      	b.n	8002156 <__aeabi_dsub+0x23a>
 80023ba:	4f7a      	ldr	r7, [pc, #488]	; (80025a4 <__aeabi_dsub+0x688>)
 80023bc:	42be      	cmp	r6, r7
 80023be:	d01c      	beq.n	80023fa <__aeabi_dsub+0x4de>
 80023c0:	001e      	movs	r6, r3
 80023c2:	e665      	b.n	8002090 <__aeabi_dsub+0x174>
 80023c4:	2f00      	cmp	r7, #0
 80023c6:	d018      	beq.n	80023fa <__aeabi_dsub+0x4de>
 80023c8:	08c0      	lsrs	r0, r0, #3
 80023ca:	074e      	lsls	r6, r1, #29
 80023cc:	4306      	orrs	r6, r0
 80023ce:	2080      	movs	r0, #128	; 0x80
 80023d0:	08c9      	lsrs	r1, r1, #3
 80023d2:	0300      	lsls	r0, r0, #12
 80023d4:	4201      	tst	r1, r0
 80023d6:	d008      	beq.n	80023ea <__aeabi_dsub+0x4ce>
 80023d8:	4663      	mov	r3, ip
 80023da:	08dc      	lsrs	r4, r3, #3
 80023dc:	4204      	tst	r4, r0
 80023de:	d104      	bne.n	80023ea <__aeabi_dsub+0x4ce>
 80023e0:	0021      	movs	r1, r4
 80023e2:	46da      	mov	sl, fp
 80023e4:	08d2      	lsrs	r2, r2, #3
 80023e6:	075e      	lsls	r6, r3, #29
 80023e8:	4316      	orrs	r6, r2
 80023ea:	00f3      	lsls	r3, r6, #3
 80023ec:	4699      	mov	r9, r3
 80023ee:	2401      	movs	r4, #1
 80023f0:	4653      	mov	r3, sl
 80023f2:	00c9      	lsls	r1, r1, #3
 80023f4:	0f72      	lsrs	r2, r6, #29
 80023f6:	4311      	orrs	r1, r2
 80023f8:	401c      	ands	r4, r3
 80023fa:	4d6a      	ldr	r5, [pc, #424]	; (80025a4 <__aeabi_dsub+0x688>)
 80023fc:	e6ab      	b.n	8002156 <__aeabi_dsub+0x23a>
 80023fe:	001d      	movs	r5, r3
 8002400:	2200      	movs	r2, #0
 8002402:	2700      	movs	r7, #0
 8002404:	e6b4      	b.n	8002170 <__aeabi_dsub+0x254>
 8002406:	2d00      	cmp	r5, #0
 8002408:	d159      	bne.n	80024be <__aeabi_dsub+0x5a2>
 800240a:	000b      	movs	r3, r1
 800240c:	4303      	orrs	r3, r0
 800240e:	d100      	bne.n	8002412 <__aeabi_dsub+0x4f6>
 8002410:	e6d6      	b.n	80021c0 <__aeabi_dsub+0x2a4>
 8002412:	1c73      	adds	r3, r6, #1
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x4fc>
 8002416:	e0b2      	b.n	800257e <__aeabi_dsub+0x662>
 8002418:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <__aeabi_dsub+0x688>)
 800241a:	429f      	cmp	r7, r3
 800241c:	d01e      	beq.n	800245c <__aeabi_dsub+0x540>
 800241e:	43f3      	mvns	r3, r6
 8002420:	2b38      	cmp	r3, #56	; 0x38
 8002422:	dc6f      	bgt.n	8002504 <__aeabi_dsub+0x5e8>
 8002424:	2b1f      	cmp	r3, #31
 8002426:	dd00      	ble.n	800242a <__aeabi_dsub+0x50e>
 8002428:	e097      	b.n	800255a <__aeabi_dsub+0x63e>
 800242a:	2520      	movs	r5, #32
 800242c:	000e      	movs	r6, r1
 800242e:	1aed      	subs	r5, r5, r3
 8002430:	40ae      	lsls	r6, r5
 8002432:	46b0      	mov	r8, r6
 8002434:	0006      	movs	r6, r0
 8002436:	46aa      	mov	sl, r5
 8002438:	40de      	lsrs	r6, r3
 800243a:	4645      	mov	r5, r8
 800243c:	4335      	orrs	r5, r6
 800243e:	002e      	movs	r6, r5
 8002440:	4655      	mov	r5, sl
 8002442:	40a8      	lsls	r0, r5
 8002444:	40d9      	lsrs	r1, r3
 8002446:	1e45      	subs	r5, r0, #1
 8002448:	41a8      	sbcs	r0, r5
 800244a:	448c      	add	ip, r1
 800244c:	4306      	orrs	r6, r0
 800244e:	18b6      	adds	r6, r6, r2
 8002450:	4296      	cmp	r6, r2
 8002452:	4192      	sbcs	r2, r2
 8002454:	4251      	negs	r1, r2
 8002456:	4461      	add	r1, ip
 8002458:	003d      	movs	r5, r7
 800245a:	e625      	b.n	80020a8 <__aeabi_dsub+0x18c>
 800245c:	003d      	movs	r5, r7
 800245e:	4661      	mov	r1, ip
 8002460:	4691      	mov	r9, r2
 8002462:	e678      	b.n	8002156 <__aeabi_dsub+0x23a>
 8002464:	000b      	movs	r3, r1
 8002466:	4303      	orrs	r3, r0
 8002468:	2d00      	cmp	r5, #0
 800246a:	d000      	beq.n	800246e <__aeabi_dsub+0x552>
 800246c:	e655      	b.n	800211a <__aeabi_dsub+0x1fe>
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f5      	beq.n	800245e <__aeabi_dsub+0x542>
 8002472:	4663      	mov	r3, ip
 8002474:	4313      	orrs	r3, r2
 8002476:	d100      	bne.n	800247a <__aeabi_dsub+0x55e>
 8002478:	e66d      	b.n	8002156 <__aeabi_dsub+0x23a>
 800247a:	1886      	adds	r6, r0, r2
 800247c:	4286      	cmp	r6, r0
 800247e:	4180      	sbcs	r0, r0
 8002480:	4461      	add	r1, ip
 8002482:	4240      	negs	r0, r0
 8002484:	1809      	adds	r1, r1, r0
 8002486:	2200      	movs	r2, #0
 8002488:	020b      	lsls	r3, r1, #8
 800248a:	d400      	bmi.n	800248e <__aeabi_dsub+0x572>
 800248c:	e6d0      	b.n	8002230 <__aeabi_dsub+0x314>
 800248e:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <__aeabi_dsub+0x68c>)
 8002490:	3501      	adds	r5, #1
 8002492:	4019      	ands	r1, r3
 8002494:	e5b2      	b.n	8001ffc <__aeabi_dsub+0xe0>
 8002496:	46b1      	mov	r9, r6
 8002498:	e65d      	b.n	8002156 <__aeabi_dsub+0x23a>
 800249a:	0033      	movs	r3, r6
 800249c:	4667      	mov	r7, ip
 800249e:	3b20      	subs	r3, #32
 80024a0:	40df      	lsrs	r7, r3
 80024a2:	003b      	movs	r3, r7
 80024a4:	2e20      	cmp	r6, #32
 80024a6:	d005      	beq.n	80024b4 <__aeabi_dsub+0x598>
 80024a8:	2740      	movs	r7, #64	; 0x40
 80024aa:	1bbf      	subs	r7, r7, r6
 80024ac:	4666      	mov	r6, ip
 80024ae:	40be      	lsls	r6, r7
 80024b0:	4332      	orrs	r2, r6
 80024b2:	4690      	mov	r8, r2
 80024b4:	4646      	mov	r6, r8
 80024b6:	1e72      	subs	r2, r6, #1
 80024b8:	4196      	sbcs	r6, r2
 80024ba:	4333      	orrs	r3, r6
 80024bc:	e5ef      	b.n	800209e <__aeabi_dsub+0x182>
 80024be:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <__aeabi_dsub+0x688>)
 80024c0:	429f      	cmp	r7, r3
 80024c2:	d0cb      	beq.n	800245c <__aeabi_dsub+0x540>
 80024c4:	2580      	movs	r5, #128	; 0x80
 80024c6:	042d      	lsls	r5, r5, #16
 80024c8:	4273      	negs	r3, r6
 80024ca:	4329      	orrs	r1, r5
 80024cc:	e7a8      	b.n	8002420 <__aeabi_dsub+0x504>
 80024ce:	4308      	orrs	r0, r1
 80024d0:	1e41      	subs	r1, r0, #1
 80024d2:	4188      	sbcs	r0, r1
 80024d4:	e6a2      	b.n	800221c <__aeabi_dsub+0x300>
 80024d6:	2f00      	cmp	r7, #0
 80024d8:	d100      	bne.n	80024dc <__aeabi_dsub+0x5c0>
 80024da:	e63c      	b.n	8002156 <__aeabi_dsub+0x23a>
 80024dc:	4663      	mov	r3, ip
 80024de:	1a86      	subs	r6, r0, r2
 80024e0:	1acf      	subs	r7, r1, r3
 80024e2:	42b0      	cmp	r0, r6
 80024e4:	419b      	sbcs	r3, r3
 80024e6:	425b      	negs	r3, r3
 80024e8:	1afb      	subs	r3, r7, r3
 80024ea:	4698      	mov	r8, r3
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	d54e      	bpl.n	800258e <__aeabi_dsub+0x672>
 80024f0:	1a16      	subs	r6, r2, r0
 80024f2:	4663      	mov	r3, ip
 80024f4:	42b2      	cmp	r2, r6
 80024f6:	4192      	sbcs	r2, r2
 80024f8:	1a59      	subs	r1, r3, r1
 80024fa:	4252      	negs	r2, r2
 80024fc:	1a89      	subs	r1, r1, r2
 80024fe:	465c      	mov	r4, fp
 8002500:	2200      	movs	r2, #0
 8002502:	e57b      	b.n	8001ffc <__aeabi_dsub+0xe0>
 8002504:	4301      	orrs	r1, r0
 8002506:	000e      	movs	r6, r1
 8002508:	1e71      	subs	r1, r6, #1
 800250a:	418e      	sbcs	r6, r1
 800250c:	e79f      	b.n	800244e <__aeabi_dsub+0x532>
 800250e:	001d      	movs	r5, r3
 8002510:	000e      	movs	r6, r1
 8002512:	3d20      	subs	r5, #32
 8002514:	40ee      	lsrs	r6, r5
 8002516:	46b0      	mov	r8, r6
 8002518:	2b20      	cmp	r3, #32
 800251a:	d004      	beq.n	8002526 <__aeabi_dsub+0x60a>
 800251c:	2540      	movs	r5, #64	; 0x40
 800251e:	1aeb      	subs	r3, r5, r3
 8002520:	4099      	lsls	r1, r3
 8002522:	4308      	orrs	r0, r1
 8002524:	4681      	mov	r9, r0
 8002526:	4648      	mov	r0, r9
 8002528:	4643      	mov	r3, r8
 800252a:	1e41      	subs	r1, r0, #1
 800252c:	4188      	sbcs	r0, r1
 800252e:	4318      	orrs	r0, r3
 8002530:	e674      	b.n	800221c <__aeabi_dsub+0x300>
 8002532:	2200      	movs	r2, #0
 8002534:	2400      	movs	r4, #0
 8002536:	e617      	b.n	8002168 <__aeabi_dsub+0x24c>
 8002538:	1a16      	subs	r6, r2, r0
 800253a:	4663      	mov	r3, ip
 800253c:	42b2      	cmp	r2, r6
 800253e:	4192      	sbcs	r2, r2
 8002540:	1a59      	subs	r1, r3, r1
 8002542:	4252      	negs	r2, r2
 8002544:	1a89      	subs	r1, r1, r2
 8002546:	003d      	movs	r5, r7
 8002548:	e525      	b.n	8001f96 <__aeabi_dsub+0x7a>
 800254a:	4661      	mov	r1, ip
 800254c:	4691      	mov	r9, r2
 800254e:	4d15      	ldr	r5, [pc, #84]	; (80025a4 <__aeabi_dsub+0x688>)
 8002550:	e601      	b.n	8002156 <__aeabi_dsub+0x23a>
 8002552:	2280      	movs	r2, #128	; 0x80
 8002554:	2400      	movs	r4, #0
 8002556:	0312      	lsls	r2, r2, #12
 8002558:	e679      	b.n	800224e <__aeabi_dsub+0x332>
 800255a:	001d      	movs	r5, r3
 800255c:	000e      	movs	r6, r1
 800255e:	3d20      	subs	r5, #32
 8002560:	40ee      	lsrs	r6, r5
 8002562:	46b0      	mov	r8, r6
 8002564:	2b20      	cmp	r3, #32
 8002566:	d004      	beq.n	8002572 <__aeabi_dsub+0x656>
 8002568:	2540      	movs	r5, #64	; 0x40
 800256a:	1aeb      	subs	r3, r5, r3
 800256c:	4099      	lsls	r1, r3
 800256e:	4308      	orrs	r0, r1
 8002570:	4681      	mov	r9, r0
 8002572:	464e      	mov	r6, r9
 8002574:	4643      	mov	r3, r8
 8002576:	1e71      	subs	r1, r6, #1
 8002578:	418e      	sbcs	r6, r1
 800257a:	431e      	orrs	r6, r3
 800257c:	e767      	b.n	800244e <__aeabi_dsub+0x532>
 800257e:	1886      	adds	r6, r0, r2
 8002580:	4296      	cmp	r6, r2
 8002582:	419b      	sbcs	r3, r3
 8002584:	4461      	add	r1, ip
 8002586:	425b      	negs	r3, r3
 8002588:	18c9      	adds	r1, r1, r3
 800258a:	003d      	movs	r5, r7
 800258c:	e58c      	b.n	80020a8 <__aeabi_dsub+0x18c>
 800258e:	4647      	mov	r7, r8
 8002590:	4337      	orrs	r7, r6
 8002592:	d0ce      	beq.n	8002532 <__aeabi_dsub+0x616>
 8002594:	2207      	movs	r2, #7
 8002596:	4641      	mov	r1, r8
 8002598:	4032      	ands	r2, r6
 800259a:	e649      	b.n	8002230 <__aeabi_dsub+0x314>
 800259c:	2700      	movs	r7, #0
 800259e:	003a      	movs	r2, r7
 80025a0:	e5e6      	b.n	8002170 <__aeabi_dsub+0x254>
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	000007ff 	.word	0x000007ff
 80025a8:	ff7fffff 	.word	0xff7fffff

080025ac <__aeabi_dcmpun>:
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	4e0c      	ldr	r6, [pc, #48]	; (80025e0 <__aeabi_dcmpun+0x34>)
 80025b0:	030d      	lsls	r5, r1, #12
 80025b2:	031c      	lsls	r4, r3, #12
 80025b4:	0049      	lsls	r1, r1, #1
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	0b2d      	lsrs	r5, r5, #12
 80025ba:	0d49      	lsrs	r1, r1, #21
 80025bc:	0b24      	lsrs	r4, r4, #12
 80025be:	0d5b      	lsrs	r3, r3, #21
 80025c0:	42b1      	cmp	r1, r6
 80025c2:	d008      	beq.n	80025d6 <__aeabi_dcmpun+0x2a>
 80025c4:	4906      	ldr	r1, [pc, #24]	; (80025e0 <__aeabi_dcmpun+0x34>)
 80025c6:	2000      	movs	r0, #0
 80025c8:	428b      	cmp	r3, r1
 80025ca:	d103      	bne.n	80025d4 <__aeabi_dcmpun+0x28>
 80025cc:	4314      	orrs	r4, r2
 80025ce:	0020      	movs	r0, r4
 80025d0:	1e44      	subs	r4, r0, #1
 80025d2:	41a0      	sbcs	r0, r4
 80025d4:	bd70      	pop	{r4, r5, r6, pc}
 80025d6:	4305      	orrs	r5, r0
 80025d8:	2001      	movs	r0, #1
 80025da:	2d00      	cmp	r5, #0
 80025dc:	d1fa      	bne.n	80025d4 <__aeabi_dcmpun+0x28>
 80025de:	e7f1      	b.n	80025c4 <__aeabi_dcmpun+0x18>
 80025e0:	000007ff 	.word	0x000007ff

080025e4 <__aeabi_d2iz>:
 80025e4:	b530      	push	{r4, r5, lr}
 80025e6:	4d14      	ldr	r5, [pc, #80]	; (8002638 <__aeabi_d2iz+0x54>)
 80025e8:	030a      	lsls	r2, r1, #12
 80025ea:	004b      	lsls	r3, r1, #1
 80025ec:	0b12      	lsrs	r2, r2, #12
 80025ee:	0d5b      	lsrs	r3, r3, #21
 80025f0:	0fc9      	lsrs	r1, r1, #31
 80025f2:	2400      	movs	r4, #0
 80025f4:	42ab      	cmp	r3, r5
 80025f6:	dd11      	ble.n	800261c <__aeabi_d2iz+0x38>
 80025f8:	4c10      	ldr	r4, [pc, #64]	; (800263c <__aeabi_d2iz+0x58>)
 80025fa:	42a3      	cmp	r3, r4
 80025fc:	dc10      	bgt.n	8002620 <__aeabi_d2iz+0x3c>
 80025fe:	2480      	movs	r4, #128	; 0x80
 8002600:	0364      	lsls	r4, r4, #13
 8002602:	4322      	orrs	r2, r4
 8002604:	4c0e      	ldr	r4, [pc, #56]	; (8002640 <__aeabi_d2iz+0x5c>)
 8002606:	1ae4      	subs	r4, r4, r3
 8002608:	2c1f      	cmp	r4, #31
 800260a:	dd0c      	ble.n	8002626 <__aeabi_d2iz+0x42>
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <__aeabi_d2iz+0x60>)
 800260e:	1ac3      	subs	r3, r0, r3
 8002610:	40da      	lsrs	r2, r3
 8002612:	0013      	movs	r3, r2
 8002614:	425c      	negs	r4, r3
 8002616:	2900      	cmp	r1, #0
 8002618:	d100      	bne.n	800261c <__aeabi_d2iz+0x38>
 800261a:	001c      	movs	r4, r3
 800261c:	0020      	movs	r0, r4
 800261e:	bd30      	pop	{r4, r5, pc}
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <__aeabi_d2iz+0x64>)
 8002622:	18cc      	adds	r4, r1, r3
 8002624:	e7fa      	b.n	800261c <__aeabi_d2iz+0x38>
 8002626:	4d09      	ldr	r5, [pc, #36]	; (800264c <__aeabi_d2iz+0x68>)
 8002628:	40e0      	lsrs	r0, r4
 800262a:	46ac      	mov	ip, r5
 800262c:	4463      	add	r3, ip
 800262e:	409a      	lsls	r2, r3
 8002630:	0013      	movs	r3, r2
 8002632:	4303      	orrs	r3, r0
 8002634:	e7ee      	b.n	8002614 <__aeabi_d2iz+0x30>
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	000003fe 	.word	0x000003fe
 800263c:	0000041d 	.word	0x0000041d
 8002640:	00000433 	.word	0x00000433
 8002644:	00000413 	.word	0x00000413
 8002648:	7fffffff 	.word	0x7fffffff
 800264c:	fffffbed 	.word	0xfffffbed

08002650 <__aeabi_i2d>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	2800      	cmp	r0, #0
 8002654:	d02d      	beq.n	80026b2 <__aeabi_i2d+0x62>
 8002656:	17c3      	asrs	r3, r0, #31
 8002658:	18c5      	adds	r5, r0, r3
 800265a:	405d      	eors	r5, r3
 800265c:	0fc4      	lsrs	r4, r0, #31
 800265e:	0028      	movs	r0, r5
 8002660:	f000 f938 	bl	80028d4 <__clzsi2>
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <__aeabi_i2d+0x6c>)
 8002666:	1a1b      	subs	r3, r3, r0
 8002668:	055b      	lsls	r3, r3, #21
 800266a:	0d5b      	lsrs	r3, r3, #21
 800266c:	280a      	cmp	r0, #10
 800266e:	dd15      	ble.n	800269c <__aeabi_i2d+0x4c>
 8002670:	380b      	subs	r0, #11
 8002672:	4085      	lsls	r5, r0
 8002674:	2200      	movs	r2, #0
 8002676:	032d      	lsls	r5, r5, #12
 8002678:	0b2d      	lsrs	r5, r5, #12
 800267a:	2100      	movs	r1, #0
 800267c:	0010      	movs	r0, r2
 800267e:	032d      	lsls	r5, r5, #12
 8002680:	0d0a      	lsrs	r2, r1, #20
 8002682:	0b2d      	lsrs	r5, r5, #12
 8002684:	0512      	lsls	r2, r2, #20
 8002686:	432a      	orrs	r2, r5
 8002688:	4d0d      	ldr	r5, [pc, #52]	; (80026c0 <__aeabi_i2d+0x70>)
 800268a:	051b      	lsls	r3, r3, #20
 800268c:	402a      	ands	r2, r5
 800268e:	4313      	orrs	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	07e4      	lsls	r4, r4, #31
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	4323      	orrs	r3, r4
 8002698:	0019      	movs	r1, r3
 800269a:	bd70      	pop	{r4, r5, r6, pc}
 800269c:	0002      	movs	r2, r0
 800269e:	0029      	movs	r1, r5
 80026a0:	3215      	adds	r2, #21
 80026a2:	4091      	lsls	r1, r2
 80026a4:	000a      	movs	r2, r1
 80026a6:	210b      	movs	r1, #11
 80026a8:	1a08      	subs	r0, r1, r0
 80026aa:	40c5      	lsrs	r5, r0
 80026ac:	032d      	lsls	r5, r5, #12
 80026ae:	0b2d      	lsrs	r5, r5, #12
 80026b0:	e7e3      	b.n	800267a <__aeabi_i2d+0x2a>
 80026b2:	2400      	movs	r4, #0
 80026b4:	2300      	movs	r3, #0
 80026b6:	2500      	movs	r5, #0
 80026b8:	2200      	movs	r2, #0
 80026ba:	e7de      	b.n	800267a <__aeabi_i2d+0x2a>
 80026bc:	0000041e 	.word	0x0000041e
 80026c0:	800fffff 	.word	0x800fffff

080026c4 <__aeabi_ui2d>:
 80026c4:	b510      	push	{r4, lr}
 80026c6:	1e04      	subs	r4, r0, #0
 80026c8:	d025      	beq.n	8002716 <__aeabi_ui2d+0x52>
 80026ca:	f000 f903 	bl	80028d4 <__clzsi2>
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <__aeabi_ui2d+0x5c>)
 80026d0:	1a1b      	subs	r3, r3, r0
 80026d2:	055b      	lsls	r3, r3, #21
 80026d4:	0d5b      	lsrs	r3, r3, #21
 80026d6:	280a      	cmp	r0, #10
 80026d8:	dd12      	ble.n	8002700 <__aeabi_ui2d+0x3c>
 80026da:	380b      	subs	r0, #11
 80026dc:	4084      	lsls	r4, r0
 80026de:	2200      	movs	r2, #0
 80026e0:	0324      	lsls	r4, r4, #12
 80026e2:	0b24      	lsrs	r4, r4, #12
 80026e4:	2100      	movs	r1, #0
 80026e6:	0010      	movs	r0, r2
 80026e8:	0324      	lsls	r4, r4, #12
 80026ea:	0d0a      	lsrs	r2, r1, #20
 80026ec:	0b24      	lsrs	r4, r4, #12
 80026ee:	0512      	lsls	r2, r2, #20
 80026f0:	4322      	orrs	r2, r4
 80026f2:	4c0c      	ldr	r4, [pc, #48]	; (8002724 <__aeabi_ui2d+0x60>)
 80026f4:	051b      	lsls	r3, r3, #20
 80026f6:	4022      	ands	r2, r4
 80026f8:	4313      	orrs	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	0859      	lsrs	r1, r3, #1
 80026fe:	bd10      	pop	{r4, pc}
 8002700:	0002      	movs	r2, r0
 8002702:	0021      	movs	r1, r4
 8002704:	3215      	adds	r2, #21
 8002706:	4091      	lsls	r1, r2
 8002708:	000a      	movs	r2, r1
 800270a:	210b      	movs	r1, #11
 800270c:	1a08      	subs	r0, r1, r0
 800270e:	40c4      	lsrs	r4, r0
 8002710:	0324      	lsls	r4, r4, #12
 8002712:	0b24      	lsrs	r4, r4, #12
 8002714:	e7e6      	b.n	80026e4 <__aeabi_ui2d+0x20>
 8002716:	2300      	movs	r3, #0
 8002718:	2400      	movs	r4, #0
 800271a:	2200      	movs	r2, #0
 800271c:	e7e2      	b.n	80026e4 <__aeabi_ui2d+0x20>
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	0000041e 	.word	0x0000041e
 8002724:	800fffff 	.word	0x800fffff

08002728 <__aeabi_f2d>:
 8002728:	0041      	lsls	r1, r0, #1
 800272a:	0e09      	lsrs	r1, r1, #24
 800272c:	1c4b      	adds	r3, r1, #1
 800272e:	b570      	push	{r4, r5, r6, lr}
 8002730:	b2db      	uxtb	r3, r3
 8002732:	0246      	lsls	r6, r0, #9
 8002734:	0a75      	lsrs	r5, r6, #9
 8002736:	0fc4      	lsrs	r4, r0, #31
 8002738:	2b01      	cmp	r3, #1
 800273a:	dd14      	ble.n	8002766 <__aeabi_f2d+0x3e>
 800273c:	23e0      	movs	r3, #224	; 0xe0
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	076d      	lsls	r5, r5, #29
 8002742:	0b36      	lsrs	r6, r6, #12
 8002744:	18cb      	adds	r3, r1, r3
 8002746:	2100      	movs	r1, #0
 8002748:	0d0a      	lsrs	r2, r1, #20
 800274a:	0028      	movs	r0, r5
 800274c:	0512      	lsls	r2, r2, #20
 800274e:	4d1c      	ldr	r5, [pc, #112]	; (80027c0 <__aeabi_f2d+0x98>)
 8002750:	4332      	orrs	r2, r6
 8002752:	055b      	lsls	r3, r3, #21
 8002754:	402a      	ands	r2, r5
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	4313      	orrs	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	07e4      	lsls	r4, r4, #31
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	4323      	orrs	r3, r4
 8002762:	0019      	movs	r1, r3
 8002764:	bd70      	pop	{r4, r5, r6, pc}
 8002766:	2900      	cmp	r1, #0
 8002768:	d114      	bne.n	8002794 <__aeabi_f2d+0x6c>
 800276a:	2d00      	cmp	r5, #0
 800276c:	d01e      	beq.n	80027ac <__aeabi_f2d+0x84>
 800276e:	0028      	movs	r0, r5
 8002770:	f000 f8b0 	bl	80028d4 <__clzsi2>
 8002774:	280a      	cmp	r0, #10
 8002776:	dc1c      	bgt.n	80027b2 <__aeabi_f2d+0x8a>
 8002778:	230b      	movs	r3, #11
 800277a:	002a      	movs	r2, r5
 800277c:	1a1b      	subs	r3, r3, r0
 800277e:	40da      	lsrs	r2, r3
 8002780:	0003      	movs	r3, r0
 8002782:	3315      	adds	r3, #21
 8002784:	409d      	lsls	r5, r3
 8002786:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <__aeabi_f2d+0x9c>)
 8002788:	0312      	lsls	r2, r2, #12
 800278a:	1a1b      	subs	r3, r3, r0
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	0b16      	lsrs	r6, r2, #12
 8002790:	0d5b      	lsrs	r3, r3, #21
 8002792:	e7d8      	b.n	8002746 <__aeabi_f2d+0x1e>
 8002794:	2d00      	cmp	r5, #0
 8002796:	d006      	beq.n	80027a6 <__aeabi_f2d+0x7e>
 8002798:	0b32      	lsrs	r2, r6, #12
 800279a:	2680      	movs	r6, #128	; 0x80
 800279c:	0336      	lsls	r6, r6, #12
 800279e:	076d      	lsls	r5, r5, #29
 80027a0:	4316      	orrs	r6, r2
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <__aeabi_f2d+0xa0>)
 80027a4:	e7cf      	b.n	8002746 <__aeabi_f2d+0x1e>
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <__aeabi_f2d+0xa0>)
 80027a8:	2600      	movs	r6, #0
 80027aa:	e7cc      	b.n	8002746 <__aeabi_f2d+0x1e>
 80027ac:	2300      	movs	r3, #0
 80027ae:	2600      	movs	r6, #0
 80027b0:	e7c9      	b.n	8002746 <__aeabi_f2d+0x1e>
 80027b2:	0003      	movs	r3, r0
 80027b4:	002a      	movs	r2, r5
 80027b6:	3b0b      	subs	r3, #11
 80027b8:	409a      	lsls	r2, r3
 80027ba:	2500      	movs	r5, #0
 80027bc:	e7e3      	b.n	8002786 <__aeabi_f2d+0x5e>
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	800fffff 	.word	0x800fffff
 80027c4:	00000389 	.word	0x00000389
 80027c8:	000007ff 	.word	0x000007ff

080027cc <__aeabi_d2f>:
 80027cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ce:	004c      	lsls	r4, r1, #1
 80027d0:	0d64      	lsrs	r4, r4, #21
 80027d2:	030b      	lsls	r3, r1, #12
 80027d4:	1c62      	adds	r2, r4, #1
 80027d6:	0a5b      	lsrs	r3, r3, #9
 80027d8:	0f46      	lsrs	r6, r0, #29
 80027da:	0552      	lsls	r2, r2, #21
 80027dc:	0fc9      	lsrs	r1, r1, #31
 80027de:	431e      	orrs	r6, r3
 80027e0:	00c5      	lsls	r5, r0, #3
 80027e2:	0d52      	lsrs	r2, r2, #21
 80027e4:	2a01      	cmp	r2, #1
 80027e6:	dd29      	ble.n	800283c <__aeabi_d2f+0x70>
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <__aeabi_d2f+0xfc>)
 80027ea:	18e7      	adds	r7, r4, r3
 80027ec:	2ffe      	cmp	r7, #254	; 0xfe
 80027ee:	dc1c      	bgt.n	800282a <__aeabi_d2f+0x5e>
 80027f0:	2f00      	cmp	r7, #0
 80027f2:	dd3b      	ble.n	800286c <__aeabi_d2f+0xa0>
 80027f4:	0180      	lsls	r0, r0, #6
 80027f6:	1e43      	subs	r3, r0, #1
 80027f8:	4198      	sbcs	r0, r3
 80027fa:	2207      	movs	r2, #7
 80027fc:	00f3      	lsls	r3, r6, #3
 80027fe:	0f6d      	lsrs	r5, r5, #29
 8002800:	4303      	orrs	r3, r0
 8002802:	432b      	orrs	r3, r5
 8002804:	401a      	ands	r2, r3
 8002806:	2a00      	cmp	r2, #0
 8002808:	d004      	beq.n	8002814 <__aeabi_d2f+0x48>
 800280a:	220f      	movs	r2, #15
 800280c:	401a      	ands	r2, r3
 800280e:	2a04      	cmp	r2, #4
 8002810:	d000      	beq.n	8002814 <__aeabi_d2f+0x48>
 8002812:	3304      	adds	r3, #4
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	04d2      	lsls	r2, r2, #19
 8002818:	401a      	ands	r2, r3
 800281a:	d024      	beq.n	8002866 <__aeabi_d2f+0x9a>
 800281c:	3701      	adds	r7, #1
 800281e:	b2fa      	uxtb	r2, r7
 8002820:	2fff      	cmp	r7, #255	; 0xff
 8002822:	d002      	beq.n	800282a <__aeabi_d2f+0x5e>
 8002824:	019b      	lsls	r3, r3, #6
 8002826:	0a58      	lsrs	r0, r3, #9
 8002828:	e001      	b.n	800282e <__aeabi_d2f+0x62>
 800282a:	22ff      	movs	r2, #255	; 0xff
 800282c:	2000      	movs	r0, #0
 800282e:	0240      	lsls	r0, r0, #9
 8002830:	05d2      	lsls	r2, r2, #23
 8002832:	0a40      	lsrs	r0, r0, #9
 8002834:	07c9      	lsls	r1, r1, #31
 8002836:	4310      	orrs	r0, r2
 8002838:	4308      	orrs	r0, r1
 800283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283c:	4335      	orrs	r5, r6
 800283e:	2c00      	cmp	r4, #0
 8002840:	d104      	bne.n	800284c <__aeabi_d2f+0x80>
 8002842:	2d00      	cmp	r5, #0
 8002844:	d10a      	bne.n	800285c <__aeabi_d2f+0x90>
 8002846:	2200      	movs	r2, #0
 8002848:	2000      	movs	r0, #0
 800284a:	e7f0      	b.n	800282e <__aeabi_d2f+0x62>
 800284c:	2d00      	cmp	r5, #0
 800284e:	d0ec      	beq.n	800282a <__aeabi_d2f+0x5e>
 8002850:	2080      	movs	r0, #128	; 0x80
 8002852:	03c0      	lsls	r0, r0, #15
 8002854:	4330      	orrs	r0, r6
 8002856:	22ff      	movs	r2, #255	; 0xff
 8002858:	e7e9      	b.n	800282e <__aeabi_d2f+0x62>
 800285a:	2400      	movs	r4, #0
 800285c:	2300      	movs	r3, #0
 800285e:	025b      	lsls	r3, r3, #9
 8002860:	0a58      	lsrs	r0, r3, #9
 8002862:	b2e2      	uxtb	r2, r4
 8002864:	e7e3      	b.n	800282e <__aeabi_d2f+0x62>
 8002866:	08db      	lsrs	r3, r3, #3
 8002868:	003c      	movs	r4, r7
 800286a:	e7f8      	b.n	800285e <__aeabi_d2f+0x92>
 800286c:	003b      	movs	r3, r7
 800286e:	3317      	adds	r3, #23
 8002870:	dbf3      	blt.n	800285a <__aeabi_d2f+0x8e>
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	041b      	lsls	r3, r3, #16
 8002876:	4333      	orrs	r3, r6
 8002878:	261e      	movs	r6, #30
 800287a:	1bf6      	subs	r6, r6, r7
 800287c:	2e1f      	cmp	r6, #31
 800287e:	dd14      	ble.n	80028aa <__aeabi_d2f+0xde>
 8002880:	2202      	movs	r2, #2
 8002882:	4252      	negs	r2, r2
 8002884:	1bd7      	subs	r7, r2, r7
 8002886:	001a      	movs	r2, r3
 8002888:	40fa      	lsrs	r2, r7
 800288a:	0017      	movs	r7, r2
 800288c:	2e20      	cmp	r6, #32
 800288e:	d004      	beq.n	800289a <__aeabi_d2f+0xce>
 8002890:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <__aeabi_d2f+0x100>)
 8002892:	4694      	mov	ip, r2
 8002894:	4464      	add	r4, ip
 8002896:	40a3      	lsls	r3, r4
 8002898:	431d      	orrs	r5, r3
 800289a:	002b      	movs	r3, r5
 800289c:	1e5d      	subs	r5, r3, #1
 800289e:	41ab      	sbcs	r3, r5
 80028a0:	2207      	movs	r2, #7
 80028a2:	433b      	orrs	r3, r7
 80028a4:	401a      	ands	r2, r3
 80028a6:	2700      	movs	r7, #0
 80028a8:	e7ad      	b.n	8002806 <__aeabi_d2f+0x3a>
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <__aeabi_d2f+0x104>)
 80028ac:	0028      	movs	r0, r5
 80028ae:	18a2      	adds	r2, r4, r2
 80028b0:	4095      	lsls	r5, r2
 80028b2:	4093      	lsls	r3, r2
 80028b4:	1e6c      	subs	r4, r5, #1
 80028b6:	41a5      	sbcs	r5, r4
 80028b8:	40f0      	lsrs	r0, r6
 80028ba:	2207      	movs	r2, #7
 80028bc:	432b      	orrs	r3, r5
 80028be:	4303      	orrs	r3, r0
 80028c0:	401a      	ands	r2, r3
 80028c2:	2700      	movs	r7, #0
 80028c4:	e79f      	b.n	8002806 <__aeabi_d2f+0x3a>
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	fffffc80 	.word	0xfffffc80
 80028cc:	fffffca2 	.word	0xfffffca2
 80028d0:	fffffc82 	.word	0xfffffc82

080028d4 <__clzsi2>:
 80028d4:	211c      	movs	r1, #28
 80028d6:	2301      	movs	r3, #1
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	4298      	cmp	r0, r3
 80028dc:	d301      	bcc.n	80028e2 <__clzsi2+0xe>
 80028de:	0c00      	lsrs	r0, r0, #16
 80028e0:	3910      	subs	r1, #16
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	4298      	cmp	r0, r3
 80028e6:	d301      	bcc.n	80028ec <__clzsi2+0x18>
 80028e8:	0a00      	lsrs	r0, r0, #8
 80028ea:	3908      	subs	r1, #8
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	4298      	cmp	r0, r3
 80028f0:	d301      	bcc.n	80028f6 <__clzsi2+0x22>
 80028f2:	0900      	lsrs	r0, r0, #4
 80028f4:	3904      	subs	r1, #4
 80028f6:	a202      	add	r2, pc, #8	; (adr r2, 8002900 <__clzsi2+0x2c>)
 80028f8:	5c10      	ldrb	r0, [r2, r0]
 80028fa:	1840      	adds	r0, r0, r1
 80028fc:	4770      	bx	lr
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	02020304 	.word	0x02020304
 8002904:	01010101 	.word	0x01010101
	...

08002910 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_Init+0x24>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_Init+0x24>)
 800291a:	2110      	movs	r1, #16
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002920:	2000      	movs	r0, #0
 8002922:	f000 f809 	bl	8002938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002926:	f002 fdab 	bl	8005480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	40022000 	.word	0x40022000

08002938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002940:	f001 fcfe 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8002944:	0002      	movs	r2, r0
 8002946:	23fa      	movs	r3, #250	; 0xfa
 8002948:	0099      	lsls	r1, r3, #2
 800294a:	0010      	movs	r0, r2
 800294c:	f7fd fbee 	bl	800012c <__udivsi3>
 8002950:	0003      	movs	r3, r0
 8002952:	0018      	movs	r0, r3
 8002954:	f000 f90d 	bl	8002b72 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	2301      	movs	r3, #1
 800295c:	425b      	negs	r3, r3
 800295e:	2200      	movs	r2, #0
 8002960:	0018      	movs	r0, r3
 8002962:	f000 f8e1 	bl	8002b28 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  uwTick++;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_IncTick+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	4b02      	ldr	r3, [pc, #8]	; (8002984 <HAL_IncTick+0x14>)
 800297c:	601a      	str	r2, [r3, #0]
}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000224 	.word	0x20000224

08002988 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  return uwTick;
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <HAL_GetTick+0x10>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	20000224 	.word	0x20000224

0800299c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff fff0 	bl	8002988 <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3301      	adds	r3, #1
 80029b4:	d002      	beq.n	80029bc <HAL_Delay+0x20>
  {
     wait++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80029bc:	46c0      	nop			; (mov r8, r8)
 80029be:	f7ff ffe3 	bl	8002988 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d8f7      	bhi.n	80029be <HAL_Delay+0x22>
  {
  }
}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b004      	add	sp, #16
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	0002      	movs	r2, r0
 80029e0:	1dfb      	adds	r3, r7, #7
 80029e2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	001a      	movs	r2, r3
 80029ea:	231f      	movs	r3, #31
 80029ec:	401a      	ands	r2, r3
 80029ee:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <NVIC_EnableIRQ+0x28>)
 80029f0:	2101      	movs	r1, #1
 80029f2:	4091      	lsls	r1, r2
 80029f4:	000a      	movs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	e000e100 	.word	0xe000e100

08002a04 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	1dfb      	adds	r3, r7, #7
 8002a10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b7f      	cmp	r3, #127	; 0x7f
 8002a18:	d932      	bls.n	8002a80 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ad8 <NVIC_SetPriority+0xd4>)
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	0019      	movs	r1, r3
 8002a22:	230f      	movs	r3, #15
 8002a24:	400b      	ands	r3, r1
 8002a26:	3b08      	subs	r3, #8
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3306      	adds	r3, #6
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	18d3      	adds	r3, r2, r3
 8002a30:	3304      	adds	r3, #4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	1dfa      	adds	r2, r7, #7
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	0011      	movs	r1, r2
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	00d2      	lsls	r2, r2, #3
 8002a40:	21ff      	movs	r1, #255	; 0xff
 8002a42:	4091      	lsls	r1, r2
 8002a44:	000a      	movs	r2, r1
 8002a46:	43d2      	mvns	r2, r2
 8002a48:	401a      	ands	r2, r3
 8002a4a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	019b      	lsls	r3, r3, #6
 8002a50:	22ff      	movs	r2, #255	; 0xff
 8002a52:	401a      	ands	r2, r3
 8002a54:	1dfb      	adds	r3, r7, #7
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	4003      	ands	r3, r0
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a62:	481d      	ldr	r0, [pc, #116]	; (8002ad8 <NVIC_SetPriority+0xd4>)
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	001c      	movs	r4, r3
 8002a6a:	230f      	movs	r3, #15
 8002a6c:	4023      	ands	r3, r4
 8002a6e:	3b08      	subs	r3, #8
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	430a      	orrs	r2, r1
 8002a74:	3306      	adds	r3, #6
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	18c3      	adds	r3, r0, r3
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a7e:	e027      	b.n	8002ad0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a80:	4a16      	ldr	r2, [pc, #88]	; (8002adc <NVIC_SetPriority+0xd8>)
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	33c0      	adds	r3, #192	; 0xc0
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	589b      	ldr	r3, [r3, r2]
 8002a90:	1dfa      	adds	r2, r7, #7
 8002a92:	7812      	ldrb	r2, [r2, #0]
 8002a94:	0011      	movs	r1, r2
 8002a96:	2203      	movs	r2, #3
 8002a98:	400a      	ands	r2, r1
 8002a9a:	00d2      	lsls	r2, r2, #3
 8002a9c:	21ff      	movs	r1, #255	; 0xff
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	43d2      	mvns	r2, r2
 8002aa4:	401a      	ands	r2, r3
 8002aa6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	019b      	lsls	r3, r3, #6
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	401a      	ands	r2, r3
 8002ab0:	1dfb      	adds	r3, r7, #7
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	4003      	ands	r3, r0
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002abe:	4807      	ldr	r0, [pc, #28]	; (8002adc <NVIC_SetPriority+0xd8>)
 8002ac0:	1dfb      	adds	r3, r7, #7
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	33c0      	adds	r3, #192	; 0xc0
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	501a      	str	r2, [r3, r0]
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b003      	add	sp, #12
 8002ad6:	bd90      	pop	{r4, r7, pc}
 8002ad8:	e000ed00 	.word	0xe000ed00
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <SysTick_Config+0x40>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af2:	2301      	movs	r3, #1
 8002af4:	e010      	b.n	8002b18 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <SysTick_Config+0x44>)
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	3a01      	subs	r2, #1
 8002afc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afe:	2301      	movs	r3, #1
 8002b00:	425b      	negs	r3, r3
 8002b02:	2103      	movs	r1, #3
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7ff ff7d 	bl	8002a04 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <SysTick_Config+0x44>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <SysTick_Config+0x44>)
 8002b12:	2207      	movs	r2, #7
 8002b14:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	00ffffff 	.word	0x00ffffff
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	210f      	movs	r1, #15
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	1c02      	adds	r2, r0, #0
 8002b38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	0011      	movs	r1, r2
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff ff5d 	bl	8002a04 <NVIC_SetPriority>
}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b004      	add	sp, #16
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	0002      	movs	r2, r0
 8002b5a:	1dfb      	adds	r3, r7, #7
 8002b5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5e:	1dfb      	adds	r3, r7, #7
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b25b      	sxtb	r3, r3
 8002b64:	0018      	movs	r0, r3
 8002b66:	f7ff ff37 	bl	80029d8 <NVIC_EnableIRQ>
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7ff ffaf 	bl	8002ae0 <SysTick_Config>
 8002b82:	0003      	movs	r3, r0
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002ba2:	e155      	b.n	8002e50 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4091      	lsls	r1, r2
 8002bae:	000a      	movs	r2, r1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d100      	bne.n	8002bbc <HAL_GPIO_Init+0x30>
 8002bba:	e146      	b.n	8002e4a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x40>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b12      	cmp	r3, #18
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	58d3      	ldr	r3, [r2, r3]
 8002bd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2207      	movs	r2, #7
 8002bde:	4013      	ands	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	409a      	lsls	r2, r3
 8002be6:	0013      	movs	r3, r2
 8002be8:	43da      	mvns	r2, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2107      	movs	r1, #7
 8002bf8:	400b      	ands	r3, r1
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	0013      	movs	r3, r2
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	6939      	ldr	r1, [r7, #16]
 8002c12:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	409a      	lsls	r2, r3
 8002c22:	0013      	movs	r3, r2
 8002c24:	43da      	mvns	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2203      	movs	r2, #3
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d00b      	beq.n	8002c68 <HAL_GPIO_Init+0xdc>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d007      	beq.n	8002c68 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c5c:	2b11      	cmp	r3, #17
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b12      	cmp	r3, #18
 8002c66:	d130      	bne.n	8002cca <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	409a      	lsls	r2, r3
 8002c76:	0013      	movs	r3, r2
 8002c78:	43da      	mvns	r2, r3
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	0013      	movs	r3, r2
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	0013      	movs	r3, r2
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	0013      	movs	r3, r2
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	409a      	lsls	r2, r3
 8002cec:	0013      	movs	r3, r2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	055b      	lsls	r3, r3, #21
 8002d02:	4013      	ands	r3, r2
 8002d04:	d100      	bne.n	8002d08 <HAL_GPIO_Init+0x17c>
 8002d06:	e0a0      	b.n	8002e4a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d08:	4b57      	ldr	r3, [pc, #348]	; (8002e68 <HAL_GPIO_Init+0x2dc>)
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	4b56      	ldr	r3, [pc, #344]	; (8002e68 <HAL_GPIO_Init+0x2dc>)
 8002d0e:	2101      	movs	r1, #1
 8002d10:	430a      	orrs	r2, r1
 8002d12:	619a      	str	r2, [r3, #24]
 8002d14:	4b54      	ldr	r3, [pc, #336]	; (8002e68 <HAL_GPIO_Init+0x2dc>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8002d20:	4a52      	ldr	r2, [pc, #328]	; (8002e6c <HAL_GPIO_Init+0x2e0>)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	589b      	ldr	r3, [r3, r2]
 8002d2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2203      	movs	r2, #3
 8002d32:	4013      	ands	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	0013      	movs	r3, r2
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	2390      	movs	r3, #144	; 0x90
 8002d48:	05db      	lsls	r3, r3, #23
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d019      	beq.n	8002d82 <HAL_GPIO_Init+0x1f6>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <HAL_GPIO_Init+0x2e4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_GPIO_Init+0x1f2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a46      	ldr	r2, [pc, #280]	; (8002e74 <HAL_GPIO_Init+0x2e8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00d      	beq.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a45      	ldr	r2, [pc, #276]	; (8002e78 <HAL_GPIO_Init+0x2ec>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <HAL_GPIO_Init+0x1ea>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a44      	ldr	r2, [pc, #272]	; (8002e7c <HAL_GPIO_Init+0x2f0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_GPIO_Init+0x1e6>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	e008      	b.n	8002d84 <HAL_GPIO_Init+0x1f8>
 8002d72:	2305      	movs	r3, #5
 8002d74:	e006      	b.n	8002d84 <HAL_GPIO_Init+0x1f8>
 8002d76:	2303      	movs	r3, #3
 8002d78:	e004      	b.n	8002d84 <HAL_GPIO_Init+0x1f8>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e002      	b.n	8002d84 <HAL_GPIO_Init+0x1f8>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_GPIO_Init+0x1f8>
 8002d82:	2300      	movs	r3, #0
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	2103      	movs	r1, #3
 8002d88:	400a      	ands	r2, r1
 8002d8a:	0092      	lsls	r2, r2, #2
 8002d8c:	4093      	lsls	r3, r2
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d94:	4935      	ldr	r1, [pc, #212]	; (8002e6c <HAL_GPIO_Init+0x2e0>)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_GPIO_Init+0x2f4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43da      	mvns	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	025b      	lsls	r3, r3, #9
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dc6:	4b2e      	ldr	r3, [pc, #184]	; (8002e80 <HAL_GPIO_Init+0x2f4>)
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_GPIO_Init+0x2f4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	4013      	ands	r3, r2
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002df0:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <HAL_GPIO_Init+0x2f4>)
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002df6:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <HAL_GPIO_Init+0x2f4>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	035b      	lsls	r3, r3, #13
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_GPIO_Init+0x2f4>)
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002e20:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_GPIO_Init+0x2f4>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	039b      	lsls	r3, r3, #14
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_GPIO_Init+0x2f4>)
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	40da      	lsrs	r2, r3
 8002e58:	1e13      	subs	r3, r2, #0
 8002e5a:	d000      	beq.n	8002e5e <HAL_GPIO_Init+0x2d2>
 8002e5c:	e6a2      	b.n	8002ba4 <HAL_GPIO_Init+0x18>
  } 
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b006      	add	sp, #24
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	48000400 	.word	0x48000400
 8002e74:	48000800 	.word	0x48000800
 8002e78:	48000c00 	.word	0x48000c00
 8002e7c:	48001000 	.word	0x48001000
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	000a      	movs	r2, r1
 8002e8e:	1cbb      	adds	r3, r7, #2
 8002e90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	1cba      	adds	r2, r7, #2
 8002e98:	8812      	ldrh	r2, [r2, #0]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002e9e:	230f      	movs	r3, #15
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e003      	b.n	8002eb0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	781b      	ldrb	r3, [r3, #0]
  }
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	0008      	movs	r0, r1
 8002ec8:	0011      	movs	r1, r2
 8002eca:	1cbb      	adds	r3, r7, #2
 8002ecc:	1c02      	adds	r2, r0, #0
 8002ece:	801a      	strh	r2, [r3, #0]
 8002ed0:	1c7b      	adds	r3, r7, #1
 8002ed2:	1c0a      	adds	r2, r1, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ed6:	1c7b      	adds	r3, r7, #1
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ede:	1cbb      	adds	r3, r7, #2
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ee6:	e003      	b.n	8002ef0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ee8:	1cbb      	adds	r3, r7, #2
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	0002      	movs	r2, r0
 8002f00:	1dbb      	adds	r3, r7, #6
 8002f02:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	1dba      	adds	r2, r7, #6
 8002f0a:	8812      	ldrh	r2, [r2, #0]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d008      	beq.n	8002f22 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002f12:	1dba      	adds	r2, r7, #6
 8002f14:	8812      	ldrh	r2, [r2, #0]
 8002f16:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f18:	1dbb      	adds	r3, r7, #6
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f002 fa83 	bl	8005428 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b002      	add	sp, #8
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	40010400 	.word	0x40010400

08002f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e082      	b.n	8003048 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2241      	movs	r2, #65	; 0x41
 8002f46:	5c9b      	ldrb	r3, [r3, r2]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d107      	bne.n	8002f5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2240      	movs	r2, #64	; 0x40
 8002f52:	2100      	movs	r1, #0
 8002f54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f001 ffff 	bl	8004f5c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2241      	movs	r2, #65	; 0x41
 8002f62:	2124      	movs	r1, #36	; 0x24
 8002f64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	438a      	bics	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4934      	ldr	r1, [pc, #208]	; (8003050 <HAL_I2C_Init+0x120>)
 8002f80:	400a      	ands	r2, r1
 8002f82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4931      	ldr	r1, [pc, #196]	; (8003054 <HAL_I2C_Init+0x124>)
 8002f90:	400a      	ands	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d108      	bne.n	8002fae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	0209      	lsls	r1, r1, #8
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	e007      	b.n	8002fbe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2184      	movs	r1, #132	; 0x84
 8002fb8:	0209      	lsls	r1, r1, #8
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d104      	bne.n	8002fd0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	491f      	ldr	r1, [pc, #124]	; (8003058 <HAL_I2C_Init+0x128>)
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	491a      	ldr	r1, [pc, #104]	; (8003054 <HAL_I2C_Init+0x124>)
 8002fec:	400a      	ands	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69d9      	ldr	r1, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2241      	movs	r2, #65	; 0x41
 8003034:	2120      	movs	r1, #32
 8003036:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2242      	movs	r2, #66	; 0x42
 8003042:	2100      	movs	r1, #0
 8003044:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b002      	add	sp, #8
 800304e:	bd80      	pop	{r7, pc}
 8003050:	f0ffffff 	.word	0xf0ffffff
 8003054:	ffff7fff 	.word	0xffff7fff
 8003058:	02008000 	.word	0x02008000

0800305c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	b089      	sub	sp, #36	; 0x24
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	0008      	movs	r0, r1
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	0019      	movs	r1, r3
 800306a:	230a      	movs	r3, #10
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	1c02      	adds	r2, r0, #0
 8003070:	801a      	strh	r2, [r3, #0]
 8003072:	2308      	movs	r3, #8
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	1c0a      	adds	r2, r1, #0
 8003078:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2241      	movs	r2, #65	; 0x41
 8003082:	5c9b      	ldrb	r3, [r3, r2]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	d000      	beq.n	800308c <HAL_I2C_Master_Transmit+0x30>
 800308a:	e0f3      	b.n	8003274 <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	5c9b      	ldrb	r3, [r3, r2]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_I2C_Master_Transmit+0x3e>
 8003096:	2302      	movs	r3, #2
 8003098:	e0ed      	b.n	8003276 <HAL_I2C_Master_Transmit+0x21a>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2240      	movs	r2, #64	; 0x40
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030a2:	f7ff fc71 	bl	8002988 <HAL_GetTick>
 80030a6:	0003      	movs	r3, r0
 80030a8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	0219      	lsls	r1, r3, #8
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	2319      	movs	r3, #25
 80030b6:	2201      	movs	r2, #1
 80030b8:	f000 fa1a 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 80030bc:	1e03      	subs	r3, r0, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e0d8      	b.n	8003276 <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2241      	movs	r2, #65	; 0x41
 80030c8:	2121      	movs	r1, #33	; 0x21
 80030ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2242      	movs	r2, #66	; 0x42
 80030d0:	2110      	movs	r1, #16
 80030d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2208      	movs	r2, #8
 80030e4:	18ba      	adds	r2, r7, r2
 80030e6:	8812      	ldrh	r2, [r2, #0]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2bff      	cmp	r3, #255	; 0xff
 80030f8:	d912      	bls.n	8003120 <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	22ff      	movs	r2, #255	; 0xff
 80030fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	b2da      	uxtb	r2, r3
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	045c      	lsls	r4, r3, #17
 800310a:	230a      	movs	r3, #10
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	8819      	ldrh	r1, [r3, #0]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	019b      	lsls	r3, r3, #6
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	0023      	movs	r3, r4
 800311a:	f000 fb59 	bl	80037d0 <I2C_TransferConfig>
 800311e:	e07a      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	b2da      	uxtb	r2, r3
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	049c      	lsls	r4, r3, #18
 8003134:	230a      	movs	r3, #10
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	8819      	ldrh	r1, [r3, #0]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	019b      	lsls	r3, r3, #6
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	0023      	movs	r3, r4
 8003144:	f000 fb44 	bl	80037d0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003148:	e065      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	0018      	movs	r0, r3
 8003152:	f000 fa06 	bl	8003562 <I2C_WaitOnTXISFlagUntilTimeout>
 8003156:	1e03      	subs	r3, r0, #0
 8003158:	d007      	beq.n	800316a <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	2b04      	cmp	r3, #4
 8003160:	d101      	bne.n	8003166 <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e087      	b.n	8003276 <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e085      	b.n	8003276 <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c59      	adds	r1, r3, #1
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	6251      	str	r1, [r2, #36]	; 0x24
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	2b00      	cmp	r3, #0
 800319c:	d13b      	bne.n	8003216 <HAL_I2C_Master_Transmit+0x1ba>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d036      	beq.n	8003216 <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	0013      	movs	r3, r2
 80031b2:	2200      	movs	r2, #0
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	f000 f99b 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	1e03      	subs	r3, r0, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e059      	b.n	8003276 <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2bff      	cmp	r3, #255	; 0xff
 80031ca:	d911      	bls.n	80031f0 <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	22ff      	movs	r2, #255	; 0xff
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	2380      	movs	r3, #128	; 0x80
 80031da:	045c      	lsls	r4, r3, #17
 80031dc:	230a      	movs	r3, #10
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	8819      	ldrh	r1, [r3, #0]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	0023      	movs	r3, r4
 80031ea:	f000 faf1 	bl	80037d0 <I2C_TransferConfig>
 80031ee:	e012      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	049c      	lsls	r4, r3, #18
 8003204:	230a      	movs	r3, #10
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	8819      	ldrh	r1, [r3, #0]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	2300      	movs	r3, #0
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	0023      	movs	r3, r4
 8003212:	f000 fadd 	bl	80037d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d194      	bne.n	800314a <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	0018      	movs	r0, r3
 8003228:	f000 f9da 	bl	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d007      	beq.n	8003240 <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	2b04      	cmp	r3, #4
 8003236:	d101      	bne.n	800323c <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e01c      	b.n	8003276 <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e01a      	b.n	8003276 <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2220      	movs	r2, #32
 8003246:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	490b      	ldr	r1, [pc, #44]	; (8003280 <HAL_I2C_Master_Transmit+0x224>)
 8003254:	400a      	ands	r2, r1
 8003256:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2241      	movs	r2, #65	; 0x41
 800325c:	2120      	movs	r1, #32
 800325e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2242      	movs	r2, #66	; 0x42
 8003264:	2100      	movs	r1, #0
 8003266:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2240      	movs	r2, #64	; 0x40
 800326c:	2100      	movs	r1, #0
 800326e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b007      	add	sp, #28
 800327c:	bd90      	pop	{r4, r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	fe00e800 	.word	0xfe00e800

08003284 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	0008      	movs	r0, r1
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	0019      	movs	r1, r3
 8003292:	230a      	movs	r3, #10
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	1c02      	adds	r2, r0, #0
 8003298:	801a      	strh	r2, [r3, #0]
 800329a:	2308      	movs	r3, #8
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	1c0a      	adds	r2, r1, #0
 80032a0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2241      	movs	r2, #65	; 0x41
 80032aa:	5c9b      	ldrb	r3, [r3, r2]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d000      	beq.n	80032b4 <HAL_I2C_Master_Receive+0x30>
 80032b2:	e0f4      	b.n	800349e <HAL_I2C_Master_Receive+0x21a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2240      	movs	r2, #64	; 0x40
 80032b8:	5c9b      	ldrb	r3, [r3, r2]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Master_Receive+0x3e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0ee      	b.n	80034a0 <HAL_I2C_Master_Receive+0x21c>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2240      	movs	r2, #64	; 0x40
 80032c6:	2101      	movs	r1, #1
 80032c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ca:	f7ff fb5d 	bl	8002988 <HAL_GetTick>
 80032ce:	0003      	movs	r3, r0
 80032d0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	0219      	lsls	r1, r3, #8
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2319      	movs	r3, #25
 80032de:	2201      	movs	r2, #1
 80032e0:	f000 f906 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Master_Receive+0x68>
    {
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0d9      	b.n	80034a0 <HAL_I2C_Master_Receive+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2241      	movs	r2, #65	; 0x41
 80032f0:	2122      	movs	r1, #34	; 0x22
 80032f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2242      	movs	r2, #66	; 0x42
 80032f8:	2110      	movs	r1, #16
 80032fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2208      	movs	r2, #8
 800330c:	18ba      	adds	r2, r7, r2
 800330e:	8812      	ldrh	r2, [r2, #0]
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2bff      	cmp	r3, #255	; 0xff
 8003320:	d912      	bls.n	8003348 <HAL_I2C_Master_Receive+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	22ff      	movs	r2, #255	; 0xff
 8003326:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	b2da      	uxtb	r2, r3
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	045c      	lsls	r4, r3, #17
 8003332:	230a      	movs	r3, #10
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	8819      	ldrh	r1, [r3, #0]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	2390      	movs	r3, #144	; 0x90
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	0023      	movs	r3, r4
 8003342:	f000 fa45 	bl	80037d0 <I2C_TransferConfig>
 8003346:	e07b      	b.n	8003440 <HAL_I2C_Master_Receive+0x1bc>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	b2da      	uxtb	r2, r3
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	049c      	lsls	r4, r3, #18
 800335c:	230a      	movs	r3, #10
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	8819      	ldrh	r1, [r3, #0]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	2390      	movs	r3, #144	; 0x90
 8003366:	019b      	lsls	r3, r3, #6
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	0023      	movs	r3, r4
 800336c:	f000 fa30 	bl	80037d0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003370:	e066      	b.n	8003440 <HAL_I2C_Master_Receive+0x1bc>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f96d 	bl	8003658 <I2C_WaitOnRXNEFlagUntilTimeout>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d007      	beq.n	8003392 <HAL_I2C_Master_Receive+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	2b04      	cmp	r3, #4
 8003388:	d101      	bne.n	800338e <HAL_I2C_Master_Receive+0x10a>
        {
          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e088      	b.n	80034a0 <HAL_I2C_Master_Receive+0x21c>
        }
        else
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e086      	b.n	80034a0 <HAL_I2C_Master_Receive+0x21c>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c59      	adds	r1, r3, #1
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	6251      	str	r1, [r2, #36]	; 0x24
 80033a2:	b2c2      	uxtb	r2, r0
 80033a4:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d13b      	bne.n	8003440 <HAL_I2C_Master_Receive+0x1bc>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d036      	beq.n	8003440 <HAL_I2C_Master_Receive+0x1bc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	0013      	movs	r3, r2
 80033dc:	2200      	movs	r2, #0
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	f000 f886 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d001      	beq.n	80033ec <HAL_I2C_Master_Receive+0x168>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e059      	b.n	80034a0 <HAL_I2C_Master_Receive+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2bff      	cmp	r3, #255	; 0xff
 80033f4:	d911      	bls.n	800341a <HAL_I2C_Master_Receive+0x196>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003400:	b2da      	uxtb	r2, r3
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	045c      	lsls	r4, r3, #17
 8003406:	230a      	movs	r3, #10
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	8819      	ldrh	r1, [r3, #0]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	2300      	movs	r3, #0
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	0023      	movs	r3, r4
 8003414:	f000 f9dc 	bl	80037d0 <I2C_TransferConfig>
 8003418:	e012      	b.n	8003440 <HAL_I2C_Master_Receive+0x1bc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	b2da      	uxtb	r2, r3
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	049c      	lsls	r4, r3, #18
 800342e:	230a      	movs	r3, #10
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	8819      	ldrh	r1, [r3, #0]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	0023      	movs	r3, r4
 800343c:	f000 f9c8 	bl	80037d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d193      	bne.n	8003372 <HAL_I2C_Master_Receive+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 f8c5 	bl	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003456:	1e03      	subs	r3, r0, #0
 8003458:	d007      	beq.n	800346a <HAL_I2C_Master_Receive+0x1e6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	2b04      	cmp	r3, #4
 8003460:	d101      	bne.n	8003466 <HAL_I2C_Master_Receive+0x1e2>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e01c      	b.n	80034a0 <HAL_I2C_Master_Receive+0x21c>
      }
      else
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e01a      	b.n	80034a0 <HAL_I2C_Master_Receive+0x21c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2220      	movs	r2, #32
 8003470:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	490a      	ldr	r1, [pc, #40]	; (80034a8 <HAL_I2C_Master_Receive+0x224>)
 800347e:	400a      	ands	r2, r1
 8003480:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2241      	movs	r2, #65	; 0x41
 8003486:	2120      	movs	r1, #32
 8003488:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2242      	movs	r2, #66	; 0x42
 800348e:	2100      	movs	r1, #0
 8003490:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2240      	movs	r2, #64	; 0x40
 8003496:	2100      	movs	r1, #0
 8003498:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e000      	b.n	80034a0 <HAL_I2C_Master_Receive+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800349e:	2302      	movs	r3, #2
  }
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b007      	add	sp, #28
 80034a6:	bd90      	pop	{r4, r7, pc}
 80034a8:	fe00e800 	.word	0xfe00e800

080034ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2202      	movs	r2, #2
 80034bc:	4013      	ands	r3, r2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d103      	bne.n	80034ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2201      	movs	r2, #1
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d007      	beq.n	80034e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2101      	movs	r1, #1
 80034e4:	430a      	orrs	r2, r1
 80034e6:	619a      	str	r2, [r3, #24]
  }
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b002      	add	sp, #8
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	1dfb      	adds	r3, r7, #7
 80034fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003500:	e01b      	b.n	800353a <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	d018      	beq.n	800353a <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <I2C_WaitOnFlagUntilTimeout+0x2e>
 800350e:	f7ff fa3b 	bl	8002988 <HAL_GetTick>
 8003512:	0002      	movs	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d20d      	bcs.n	800353a <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2241      	movs	r2, #65	; 0x41
 8003522:	2120      	movs	r1, #32
 8003524:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2242      	movs	r2, #66	; 0x42
 800352a:	2100      	movs	r1, #0
 800352c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2240      	movs	r2, #64	; 0x40
 8003532:	2100      	movs	r1, #0
 8003534:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e00f      	b.n	800355a <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	4013      	ands	r3, r2
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	425a      	negs	r2, r3
 800354a:	4153      	adcs	r3, r2
 800354c:	b2db      	uxtb	r3, r3
 800354e:	001a      	movs	r2, r3
 8003550:	1dfb      	adds	r3, r7, #7
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d0d4      	beq.n	8003502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bd80      	pop	{r7, pc}

08003562 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800356e:	e02b      	b.n	80035c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	0018      	movs	r0, r3
 8003578:	f000 f8cc 	bl	8003714 <I2C_IsAcknowledgeFailed>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e029      	b.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	3301      	adds	r3, #1
 8003588:	d01e      	beq.n	80035c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003590:	f7ff f9fa 	bl	8002988 <HAL_GetTick>
 8003594:	0002      	movs	r2, r0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d213      	bcs.n	80035c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	2220      	movs	r2, #32
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2241      	movs	r2, #65	; 0x41
 80035b0:	2120      	movs	r1, #32
 80035b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2242      	movs	r2, #66	; 0x42
 80035b8:	2100      	movs	r1, #0
 80035ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	2100      	movs	r1, #0
 80035c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e007      	b.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2202      	movs	r2, #2
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d1cc      	bne.n	8003570 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b004      	add	sp, #16
 80035de:	bd80      	pop	{r7, pc}

080035e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ec:	e028      	b.n	8003640 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 f88d 	bl	8003714 <I2C_IsAcknowledgeFailed>
 80035fa:	1e03      	subs	r3, r0, #0
 80035fc:	d001      	beq.n	8003602 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e026      	b.n	8003650 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003608:	f7ff f9be 	bl	8002988 <HAL_GetTick>
 800360c:	0002      	movs	r2, r0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	429a      	cmp	r2, r3
 8003616:	d213      	bcs.n	8003640 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	2220      	movs	r2, #32
 800361e:	431a      	orrs	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2241      	movs	r2, #65	; 0x41
 8003628:	2120      	movs	r1, #32
 800362a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2242      	movs	r2, #66	; 0x42
 8003630:	2100      	movs	r1, #0
 8003632:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	2100      	movs	r1, #0
 800363a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e007      	b.n	8003650 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2220      	movs	r2, #32
 8003648:	4013      	ands	r3, r2
 800364a:	2b20      	cmp	r3, #32
 800364c:	d1cf      	bne.n	80035ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b004      	add	sp, #16
 8003656:	bd80      	pop	{r7, pc}

08003658 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003664:	e048      	b.n	80036f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	0018      	movs	r0, r3
 800366e:	f000 f851 	bl	8003714 <I2C_IsAcknowledgeFailed>
 8003672:	1e03      	subs	r3, r0, #0
 8003674:	d001      	beq.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e046      	b.n	8003708 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2220      	movs	r2, #32
 8003682:	4013      	ands	r3, r2
 8003684:	2b20      	cmp	r3, #32
 8003686:	d11c      	bne.n	80036c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2220      	movs	r2, #32
 800368e:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	491d      	ldr	r1, [pc, #116]	; (8003710 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 800369c:	400a      	ands	r2, r1
 800369e:	605a      	str	r2, [r3, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2241      	movs	r2, #65	; 0x41
 80036aa:	2120      	movs	r1, #32
 80036ac:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2242      	movs	r2, #66	; 0x42
 80036b2:	2100      	movs	r1, #0
 80036b4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2240      	movs	r2, #64	; 0x40
 80036ba:	2100      	movs	r1, #0
 80036bc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e022      	b.n	8003708 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 80036c8:	f7ff f95e 	bl	8002988 <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d20f      	bcs.n	80036f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	2220      	movs	r2, #32
 80036de:	431a      	orrs	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2241      	movs	r2, #65	; 0x41
 80036e8:	2120      	movs	r1, #32
 80036ea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2240      	movs	r2, #64	; 0x40
 80036f0:	2100      	movs	r1, #0
 80036f2:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e007      	b.n	8003708 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2204      	movs	r2, #4
 8003700:	4013      	ands	r3, r2
 8003702:	2b04      	cmp	r3, #4
 8003704:	d1af      	bne.n	8003666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b004      	add	sp, #16
 800370e:	bd80      	pop	{r7, pc}
 8003710:	fe00e800 	.word	0xfe00e800

08003714 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2210      	movs	r2, #16
 8003728:	4013      	ands	r3, r2
 800372a:	2b10      	cmp	r3, #16
 800372c:	d148      	bne.n	80037c0 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800372e:	e01b      	b.n	8003768 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	3301      	adds	r3, #1
 8003734:	d018      	beq.n	8003768 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <I2C_IsAcknowledgeFailed+0x38>
 800373c:	f7ff f924 	bl	8002988 <HAL_GetTick>
 8003740:	0002      	movs	r2, r0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	d20d      	bcs.n	8003768 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2241      	movs	r2, #65	; 0x41
 8003750:	2120      	movs	r1, #32
 8003752:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2242      	movs	r2, #66	; 0x42
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2240      	movs	r2, #64	; 0x40
 8003760:	2100      	movs	r1, #0
 8003762:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e02c      	b.n	80037c2 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2220      	movs	r2, #32
 8003770:	4013      	ands	r3, r2
 8003772:	2b20      	cmp	r3, #32
 8003774:	d1dc      	bne.n	8003730 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2210      	movs	r2, #16
 800377c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2220      	movs	r2, #32
 8003784:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff fe8f 	bl	80034ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	490c      	ldr	r1, [pc, #48]	; (80037cc <I2C_IsAcknowledgeFailed+0xb8>)
 800379a:	400a      	ands	r2, r1
 800379c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2204      	movs	r2, #4
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2241      	movs	r2, #65	; 0x41
 80037a8:	2120      	movs	r1, #32
 80037aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2242      	movs	r2, #66	; 0x42
 80037b0:	2100      	movs	r1, #0
 80037b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	fe00e800 	.word	0xfe00e800

080037d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	0008      	movs	r0, r1
 80037da:	0011      	movs	r1, r2
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	240a      	movs	r4, #10
 80037e0:	193b      	adds	r3, r7, r4
 80037e2:	1c02      	adds	r2, r0, #0
 80037e4:	801a      	strh	r2, [r3, #0]
 80037e6:	2009      	movs	r0, #9
 80037e8:	183b      	adds	r3, r7, r0
 80037ea:	1c0a      	adds	r2, r1, #0
 80037ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <I2C_TransferConfig+0x68>)
 80037fe:	4013      	ands	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8003802:	193b      	adds	r3, r7, r4
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	059b      	lsls	r3, r3, #22
 8003808:	0d9a      	lsrs	r2, r3, #22
 800380a:	183b      	adds	r3, r7, r0
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	0419      	lsls	r1, r3, #16
 8003810:	23ff      	movs	r3, #255	; 0xff
 8003812:	041b      	lsls	r3, r3, #16
 8003814:	400b      	ands	r3, r1
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	431a      	orrs	r2, r3
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	4313      	orrs	r3, r2
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	605a      	str	r2, [r3, #4]
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b007      	add	sp, #28
 8003834:	bd90      	pop	{r4, r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	fc009800 	.word	0xfc009800

0800383c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2241      	movs	r2, #65	; 0x41
 800384a:	5c9b      	ldrb	r3, [r3, r2]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b20      	cmp	r3, #32
 8003850:	d138      	bne.n	80038c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2240      	movs	r2, #64	; 0x40
 8003856:	5c9b      	ldrb	r3, [r3, r2]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800385c:	2302      	movs	r3, #2
 800385e:	e032      	b.n	80038c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2240      	movs	r2, #64	; 0x40
 8003864:	2101      	movs	r1, #1
 8003866:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2241      	movs	r2, #65	; 0x41
 800386c:	2124      	movs	r1, #36	; 0x24
 800386e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2101      	movs	r1, #1
 800387c:	438a      	bics	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4911      	ldr	r1, [pc, #68]	; (80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800388c:	400a      	ands	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2101      	movs	r1, #1
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2241      	movs	r2, #65	; 0x41
 80038b4:	2120      	movs	r1, #32
 80038b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	2100      	movs	r1, #0
 80038be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	ffffefff 	.word	0xffffefff

080038d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2241      	movs	r2, #65	; 0x41
 80038e6:	5c9b      	ldrb	r3, [r3, r2]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d139      	bne.n	8003962 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2240      	movs	r2, #64	; 0x40
 80038f2:	5c9b      	ldrb	r3, [r3, r2]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e033      	b.n	8003964 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2240      	movs	r2, #64	; 0x40
 8003900:	2101      	movs	r1, #1
 8003902:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2241      	movs	r2, #65	; 0x41
 8003908:	2124      	movs	r1, #36	; 0x24
 800390a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2101      	movs	r1, #1
 8003918:	438a      	bics	r2, r1
 800391a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a11      	ldr	r2, [pc, #68]	; (800396c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8003928:	4013      	ands	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	430a      	orrs	r2, r1
 800394c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2241      	movs	r2, #65	; 0x41
 8003952:	2120      	movs	r1, #32
 8003954:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2240      	movs	r2, #64	; 0x40
 800395a:	2100      	movs	r1, #0
 800395c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b004      	add	sp, #16
 800396a:	bd80      	pop	{r7, pc}
 800396c:	fffff0ff 	.word	0xfffff0ff

08003970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	4013      	ands	r3, r2
 8003984:	d100      	bne.n	8003988 <HAL_RCC_OscConfig+0x18>
 8003986:	e08d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003988:	4bc5      	ldr	r3, [pc, #788]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	220c      	movs	r2, #12
 800398e:	4013      	ands	r3, r2
 8003990:	2b04      	cmp	r3, #4
 8003992:	d00e      	beq.n	80039b2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003994:	4bc2      	ldr	r3, [pc, #776]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	220c      	movs	r2, #12
 800399a:	4013      	ands	r3, r2
 800399c:	2b08      	cmp	r3, #8
 800399e:	d116      	bne.n	80039ce <HAL_RCC_OscConfig+0x5e>
 80039a0:	4bbf      	ldr	r3, [pc, #764]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	23c0      	movs	r3, #192	; 0xc0
 80039a6:	025b      	lsls	r3, r3, #9
 80039a8:	401a      	ands	r2, r3
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	025b      	lsls	r3, r3, #9
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d10d      	bne.n	80039ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b2:	4bbb      	ldr	r3, [pc, #748]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	029b      	lsls	r3, r3, #10
 80039ba:	4013      	ands	r3, r2
 80039bc:	d100      	bne.n	80039c0 <HAL_RCC_OscConfig+0x50>
 80039be:	e070      	b.n	8003aa2 <HAL_RCC_OscConfig+0x132>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d000      	beq.n	80039ca <HAL_RCC_OscConfig+0x5a>
 80039c8:	e06b      	b.n	8003aa2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e329      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_OscConfig+0x76>
 80039d6:	4bb2      	ldr	r3, [pc, #712]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4bb1      	ldr	r3, [pc, #708]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	0249      	lsls	r1, r1, #9
 80039e0:	430a      	orrs	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	e02f      	b.n	8003a46 <HAL_RCC_OscConfig+0xd6>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x98>
 80039ee:	4bac      	ldr	r3, [pc, #688]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4bab      	ldr	r3, [pc, #684]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 80039f4:	49ab      	ldr	r1, [pc, #684]	; (8003ca4 <HAL_RCC_OscConfig+0x334>)
 80039f6:	400a      	ands	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	4ba9      	ldr	r3, [pc, #676]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4ba8      	ldr	r3, [pc, #672]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a00:	49a9      	ldr	r1, [pc, #676]	; (8003ca8 <HAL_RCC_OscConfig+0x338>)
 8003a02:	400a      	ands	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e01e      	b.n	8003a46 <HAL_RCC_OscConfig+0xd6>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d10e      	bne.n	8003a2e <HAL_RCC_OscConfig+0xbe>
 8003a10:	4ba3      	ldr	r3, [pc, #652]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4ba2      	ldr	r3, [pc, #648]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a16:	2180      	movs	r1, #128	; 0x80
 8003a18:	02c9      	lsls	r1, r1, #11
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	4ba0      	ldr	r3, [pc, #640]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b9f      	ldr	r3, [pc, #636]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a24:	2180      	movs	r1, #128	; 0x80
 8003a26:	0249      	lsls	r1, r1, #9
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e00b      	b.n	8003a46 <HAL_RCC_OscConfig+0xd6>
 8003a2e:	4b9c      	ldr	r3, [pc, #624]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b9b      	ldr	r3, [pc, #620]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a34:	499b      	ldr	r1, [pc, #620]	; (8003ca4 <HAL_RCC_OscConfig+0x334>)
 8003a36:	400a      	ands	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	4b99      	ldr	r3, [pc, #612]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4b98      	ldr	r3, [pc, #608]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a40:	4999      	ldr	r1, [pc, #612]	; (8003ca8 <HAL_RCC_OscConfig+0x338>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fe ff9b 	bl	8002988 <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fe ff96 	bl	8002988 <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e2db      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b8d      	ldr	r3, [pc, #564]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	029b      	lsls	r3, r3, #10
 8003a72:	4013      	ands	r3, r2
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe8>
 8003a76:	e015      	b.n	8003aa4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fe ff86 	bl	8002988 <HAL_GetTick>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a82:	f7fe ff81 	bl	8002988 <HAL_GetTick>
 8003a86:	0002      	movs	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b64      	cmp	r3, #100	; 0x64
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e2c6      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a94:	4b82      	ldr	r3, [pc, #520]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	029b      	lsls	r3, r3, #10
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d1f0      	bne.n	8003a82 <HAL_RCC_OscConfig+0x112>
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d100      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x140>
 8003aae:	e06c      	b.n	8003b8a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ab0:	4b7b      	ldr	r3, [pc, #492]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	220c      	movs	r2, #12
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d00e      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003aba:	4b79      	ldr	r3, [pc, #484]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	220c      	movs	r2, #12
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d11f      	bne.n	8003b06 <HAL_RCC_OscConfig+0x196>
 8003ac6:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	23c0      	movs	r3, #192	; 0xc0
 8003acc:	025b      	lsls	r3, r3, #9
 8003ace:	401a      	ands	r2, r3
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d116      	bne.n	8003b06 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad8:	4b71      	ldr	r3, [pc, #452]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2202      	movs	r2, #2
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d005      	beq.n	8003aee <HAL_RCC_OscConfig+0x17e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e299      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b6c      	ldr	r3, [pc, #432]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	22f8      	movs	r2, #248	; 0xf8
 8003af4:	4393      	bics	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00da      	lsls	r2, r3, #3
 8003afe:	4b68      	ldr	r3, [pc, #416]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b04:	e041      	b.n	8003b8a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d024      	beq.n	8003b58 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0e:	4b64      	ldr	r3, [pc, #400]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe ff35 	bl	8002988 <HAL_GetTick>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b24:	f7fe ff30 	bl	8002988 <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e275      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b36:	4b5a      	ldr	r3, [pc, #360]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d0f1      	beq.n	8003b24 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b57      	ldr	r3, [pc, #348]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	22f8      	movs	r2, #248	; 0xf8
 8003b46:	4393      	bics	r3, r2
 8003b48:	0019      	movs	r1, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00da      	lsls	r2, r3, #3
 8003b50:	4b53      	ldr	r3, [pc, #332]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e018      	b.n	8003b8a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b58:	4b51      	ldr	r3, [pc, #324]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b50      	ldr	r3, [pc, #320]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003b5e:	2101      	movs	r1, #1
 8003b60:	438a      	bics	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fe ff10 	bl	8002988 <HAL_GetTick>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7fe ff0b 	bl	8002988 <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e250      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b80:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2202      	movs	r2, #2
 8003b86:	4013      	ands	r3, r2
 8003b88:	d1f1      	bne.n	8003b6e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2208      	movs	r2, #8
 8003b90:	4013      	ands	r3, r2
 8003b92:	d036      	beq.n	8003c02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d019      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9c:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba0:	4b3f      	ldr	r3, [pc, #252]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba8:	f7fe feee 	bl	8002988 <HAL_GetTick>
 8003bac:	0003      	movs	r3, r0
 8003bae:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb2:	f7fe fee9 	bl	8002988 <HAL_GetTick>
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e22e      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc4:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	2202      	movs	r2, #2
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d0f1      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x242>
 8003bce:	e018      	b.n	8003c02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd0:	4b33      	ldr	r3, [pc, #204]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd4:	4b32      	ldr	r3, [pc, #200]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	438a      	bics	r2, r1
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bdc:	f7fe fed4 	bl	8002988 <HAL_GetTick>
 8003be0:	0003      	movs	r3, r0
 8003be2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be6:	f7fe fecf 	bl	8002988 <HAL_GetTick>
 8003bea:	0002      	movs	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e214      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d1f1      	bne.n	8003be6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2204      	movs	r2, #4
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <HAL_RCC_OscConfig+0x29e>
 8003c0c:	e0b6      	b.n	8003d7c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0e:	2317      	movs	r3, #23
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	055b      	lsls	r3, r3, #21
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d111      	bne.n	8003c46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c22:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	0549      	lsls	r1, r1, #21
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	61da      	str	r2, [r3, #28]
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	055b      	lsls	r3, r3, #21
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c3e:	2317      	movs	r3, #23
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c46:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_RCC_OscConfig+0x33c>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d11a      	bne.n	8003c88 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c52:	4b16      	ldr	r3, [pc, #88]	; (8003cac <HAL_RCC_OscConfig+0x33c>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <HAL_RCC_OscConfig+0x33c>)
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	0049      	lsls	r1, r1, #1
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c60:	f7fe fe92 	bl	8002988 <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fe fe8d 	bl	8002988 <HAL_GetTick>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b64      	cmp	r3, #100	; 0x64
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e1d2      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_OscConfig+0x33c>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4013      	ands	r3, r2
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x340>
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	4b02      	ldr	r3, [pc, #8]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003c96:	2101      	movs	r1, #1
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	621a      	str	r2, [r3, #32]
 8003c9c:	e036      	b.n	8003d0c <HAL_RCC_OscConfig+0x39c>
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	fffeffff 	.word	0xfffeffff
 8003ca8:	fffbffff 	.word	0xfffbffff
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x362>
 8003cb8:	4bca      	ldr	r3, [pc, #808]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	4bc9      	ldr	r3, [pc, #804]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	621a      	str	r2, [r3, #32]
 8003cc4:	4bc7      	ldr	r3, [pc, #796]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	4bc6      	ldr	r3, [pc, #792]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003cca:	2104      	movs	r1, #4
 8003ccc:	438a      	bics	r2, r1
 8003cce:	621a      	str	r2, [r3, #32]
 8003cd0:	e01c      	b.n	8003d0c <HAL_RCC_OscConfig+0x39c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x384>
 8003cda:	4bc2      	ldr	r3, [pc, #776]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003cdc:	6a1a      	ldr	r2, [r3, #32]
 8003cde:	4bc1      	ldr	r3, [pc, #772]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003ce0:	2104      	movs	r1, #4
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	621a      	str	r2, [r3, #32]
 8003ce6:	4bbf      	ldr	r3, [pc, #764]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003ce8:	6a1a      	ldr	r2, [r3, #32]
 8003cea:	4bbe      	ldr	r3, [pc, #760]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003cec:	2101      	movs	r1, #1
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	621a      	str	r2, [r3, #32]
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCC_OscConfig+0x39c>
 8003cf4:	4bbb      	ldr	r3, [pc, #748]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	4bba      	ldr	r3, [pc, #744]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	438a      	bics	r2, r1
 8003cfe:	621a      	str	r2, [r3, #32]
 8003d00:	4bb8      	ldr	r3, [pc, #736]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	4bb7      	ldr	r3, [pc, #732]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003d06:	2104      	movs	r1, #4
 8003d08:	438a      	bics	r2, r1
 8003d0a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d014      	beq.n	8003d3e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d14:	f7fe fe38 	bl	8002988 <HAL_GetTick>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1c:	e009      	b.n	8003d32 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fe fe33 	bl	8002988 <HAL_GetTick>
 8003d22:	0002      	movs	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	4aaf      	ldr	r2, [pc, #700]	; (8003fe8 <HAL_RCC_OscConfig+0x678>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e177      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d32:	4bac      	ldr	r3, [pc, #688]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	2202      	movs	r2, #2
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x3ae>
 8003d3c:	e013      	b.n	8003d66 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe fe23 	bl	8002988 <HAL_GetTick>
 8003d42:	0003      	movs	r3, r0
 8003d44:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d46:	e009      	b.n	8003d5c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d48:	f7fe fe1e 	bl	8002988 <HAL_GetTick>
 8003d4c:	0002      	movs	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	4aa5      	ldr	r2, [pc, #660]	; (8003fe8 <HAL_RCC_OscConfig+0x678>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e162      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5c:	4ba1      	ldr	r3, [pc, #644]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	2202      	movs	r2, #2
 8003d62:	4013      	ands	r3, r2
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d66:	2317      	movs	r3, #23
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d105      	bne.n	8003d7c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d70:	4b9c      	ldr	r3, [pc, #624]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	4b9b      	ldr	r3, [pc, #620]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003d76:	499d      	ldr	r1, [pc, #628]	; (8003fec <HAL_RCC_OscConfig+0x67c>)
 8003d78:	400a      	ands	r2, r1
 8003d7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2210      	movs	r2, #16
 8003d82:	4013      	ands	r3, r2
 8003d84:	d063      	beq.n	8003e4e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d12a      	bne.n	8003de4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d8e:	4b95      	ldr	r3, [pc, #596]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d92:	4b94      	ldr	r3, [pc, #592]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003d94:	2104      	movs	r1, #4
 8003d96:	430a      	orrs	r2, r1
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d9a:	4b92      	ldr	r3, [pc, #584]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9e:	4b91      	ldr	r3, [pc, #580]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003da0:	2101      	movs	r1, #1
 8003da2:	430a      	orrs	r2, r1
 8003da4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da6:	f7fe fdef 	bl	8002988 <HAL_GetTick>
 8003daa:	0003      	movs	r3, r0
 8003dac:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003db0:	f7fe fdea 	bl	8002988 <HAL_GetTick>
 8003db4:	0002      	movs	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e12f      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d0f1      	beq.n	8003db0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003dcc:	4b85      	ldr	r3, [pc, #532]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	22f8      	movs	r2, #248	; 0xf8
 8003dd2:	4393      	bics	r3, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	00da      	lsls	r2, r3, #3
 8003ddc:	4b81      	ldr	r3, [pc, #516]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003dde:	430a      	orrs	r2, r1
 8003de0:	635a      	str	r2, [r3, #52]	; 0x34
 8003de2:	e034      	b.n	8003e4e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	3305      	adds	r3, #5
 8003dea:	d111      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003dec:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df0:	4b7c      	ldr	r3, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003df2:	2104      	movs	r1, #4
 8003df4:	438a      	bics	r2, r1
 8003df6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003df8:	4b7a      	ldr	r3, [pc, #488]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	22f8      	movs	r2, #248	; 0xf8
 8003dfe:	4393      	bics	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	00da      	lsls	r2, r3, #3
 8003e08:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0e:	e01e      	b.n	8003e4e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e10:	4b74      	ldr	r3, [pc, #464]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e14:	4b73      	ldr	r3, [pc, #460]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003e16:	2104      	movs	r1, #4
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e1c:	4b71      	ldr	r3, [pc, #452]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e20:	4b70      	ldr	r3, [pc, #448]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003e22:	2101      	movs	r1, #1
 8003e24:	438a      	bics	r2, r1
 8003e26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e28:	f7fe fdae 	bl	8002988 <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e32:	f7fe fda9 	bl	8002988 <HAL_GetTick>
 8003e36:	0002      	movs	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e0ee      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e44:	4b67      	ldr	r3, [pc, #412]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	2202      	movs	r2, #2
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d1f1      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2220      	movs	r2, #32
 8003e54:	4013      	ands	r3, r2
 8003e56:	d05c      	beq.n	8003f12 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003e58:	4b62      	ldr	r3, [pc, #392]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	220c      	movs	r2, #12
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	d00e      	beq.n	8003e82 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003e64:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	220c      	movs	r2, #12
 8003e6a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d114      	bne.n	8003e9a <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003e70:	4b5c      	ldr	r3, [pc, #368]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	23c0      	movs	r3, #192	; 0xc0
 8003e76:	025b      	lsls	r3, r3, #9
 8003e78:	401a      	ands	r2, r3
 8003e7a:	23c0      	movs	r3, #192	; 0xc0
 8003e7c:	025b      	lsls	r3, r3, #9
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d10b      	bne.n	8003e9a <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003e82:	4b58      	ldr	r3, [pc, #352]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	025b      	lsls	r3, r3, #9
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d040      	beq.n	8003f10 <HAL_RCC_OscConfig+0x5a0>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d03c      	beq.n	8003f10 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0c3      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01b      	beq.n	8003eda <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003ea2:	4b50      	ldr	r3, [pc, #320]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea6:	4b4f      	ldr	r3, [pc, #316]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003ea8:	2180      	movs	r1, #128	; 0x80
 8003eaa:	0249      	lsls	r1, r1, #9
 8003eac:	430a      	orrs	r2, r1
 8003eae:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fe fd6a 	bl	8002988 <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eba:	f7fe fd65 	bl	8002988 <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e0aa      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003ecc:	4b45      	ldr	r3, [pc, #276]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	025b      	lsls	r3, r3, #9
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x54a>
 8003ed8:	e01b      	b.n	8003f12 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003eda:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003ee0:	4943      	ldr	r1, [pc, #268]	; (8003ff0 <HAL_RCC_OscConfig+0x680>)
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fe fd4f 	bl	8002988 <HAL_GetTick>
 8003eea:	0003      	movs	r3, r0
 8003eec:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ef0:	f7fe fd4a 	bl	8002988 <HAL_GetTick>
 8003ef4:	0002      	movs	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e08f      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003f02:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	025b      	lsls	r3, r3, #9
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x580>
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003f10:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d100      	bne.n	8003f1c <HAL_RCC_OscConfig+0x5ac>
 8003f1a:	e081      	b.n	8004020 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f1c:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	220c      	movs	r2, #12
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d100      	bne.n	8003f2a <HAL_RCC_OscConfig+0x5ba>
 8003f28:	e078      	b.n	800401c <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d14c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f32:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b2b      	ldr	r3, [pc, #172]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f38:	492e      	ldr	r1, [pc, #184]	; (8003ff4 <HAL_RCC_OscConfig+0x684>)
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3e:	f7fe fd23 	bl	8002988 <HAL_GetTick>
 8003f42:	0003      	movs	r3, r0
 8003f44:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe fd1e 	bl	8002988 <HAL_GetTick>
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e063      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5a:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	049b      	lsls	r3, r3, #18
 8003f62:	4013      	ands	r3, r2
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f66:	4b1f      	ldr	r3, [pc, #124]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	220f      	movs	r2, #15
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f76:	430a      	orrs	r2, r1
 8003f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f7a:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <HAL_RCC_OscConfig+0x688>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	0019      	movs	r1, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f94:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	0449      	lsls	r1, r1, #17
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fe fcf1 	bl	8002988 <HAL_GetTick>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fe fcec 	bl	8002988 <HAL_GetTick>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e031      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	049b      	lsls	r3, r3, #18
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x63c>
 8003fca:	e029      	b.n	8004020 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <HAL_RCC_OscConfig+0x674>)
 8003fd2:	4908      	ldr	r1, [pc, #32]	; (8003ff4 <HAL_RCC_OscConfig+0x684>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd8:	f7fe fcd6 	bl	8002988 <HAL_GetTick>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe0:	e015      	b.n	800400e <HAL_RCC_OscConfig+0x69e>
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	00001388 	.word	0x00001388
 8003fec:	efffffff 	.word	0xefffffff
 8003ff0:	fffeffff 	.word	0xfffeffff
 8003ff4:	feffffff 	.word	0xfeffffff
 8003ff8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe fcc4 	bl	8002988 <HAL_GetTick>
 8004000:	0002      	movs	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e009      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <HAL_RCC_OscConfig+0x6bc>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	049b      	lsls	r3, r3, #18
 8004016:	4013      	ands	r3, r2
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x68c>
 800401a:	e001      	b.n	8004020 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b006      	add	sp, #24
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	40021000 	.word	0x40021000

08004030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800403e:	4b7b      	ldr	r3, [pc, #492]	; (800422c <HAL_RCC_ClockConfig+0x1fc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2201      	movs	r2, #1
 8004044:	4013      	ands	r3, r2
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d911      	bls.n	8004070 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404c:	4b77      	ldr	r3, [pc, #476]	; (800422c <HAL_RCC_ClockConfig+0x1fc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2201      	movs	r2, #1
 8004052:	4393      	bics	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	4b75      	ldr	r3, [pc, #468]	; (800422c <HAL_RCC_ClockConfig+0x1fc>)
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800405e:	4b73      	ldr	r3, [pc, #460]	; (800422c <HAL_RCC_ClockConfig+0x1fc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2201      	movs	r2, #1
 8004064:	4013      	ands	r3, r2
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0d8      	b.n	8004222 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407a:	4b6d      	ldr	r3, [pc, #436]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	22f0      	movs	r2, #240	; 0xf0
 8004080:	4393      	bics	r3, r2
 8004082:	0019      	movs	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	4b69      	ldr	r3, [pc, #420]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2201      	movs	r2, #1
 8004094:	4013      	ands	r3, r2
 8004096:	d100      	bne.n	800409a <HAL_RCC_ClockConfig+0x6a>
 8004098:	e089      	b.n	80041ae <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	029b      	lsls	r3, r3, #10
 80040aa:	4013      	ands	r3, r2
 80040ac:	d120      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0b7      	b.n	8004222 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ba:	4b5d      	ldr	r3, [pc, #372]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	049b      	lsls	r3, r3, #18
 80040c2:	4013      	ands	r3, r2
 80040c4:	d114      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e0ab      	b.n	8004222 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80040d2:	4b57      	ldr	r3, [pc, #348]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 80040d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	025b      	lsls	r3, r3, #9
 80040da:	4013      	ands	r3, r2
 80040dc:	d108      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e09f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	4b53      	ldr	r3, [pc, #332]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2202      	movs	r2, #2
 80040e8:	4013      	ands	r3, r2
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e098      	b.n	8004222 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f0:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2203      	movs	r2, #3
 80040f6:	4393      	bics	r3, r2
 80040f8:	0019      	movs	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	4b4c      	ldr	r3, [pc, #304]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004104:	f7fe fc40 	bl	8002988 <HAL_GetTick>
 8004108:	0003      	movs	r3, r0
 800410a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d111      	bne.n	8004138 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004114:	e009      	b.n	800412a <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004116:	f7fe fc37 	bl	8002988 <HAL_GetTick>
 800411a:	0002      	movs	r2, r0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	4a44      	ldr	r2, [pc, #272]	; (8004234 <HAL_RCC_ClockConfig+0x204>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e07b      	b.n	8004222 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800412a:	4b41      	ldr	r3, [pc, #260]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	220c      	movs	r2, #12
 8004130:	4013      	ands	r3, r2
 8004132:	2b04      	cmp	r3, #4
 8004134:	d1ef      	bne.n	8004116 <HAL_RCC_ClockConfig+0xe6>
 8004136:	e03a      	b.n	80041ae <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d111      	bne.n	8004164 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004140:	e009      	b.n	8004156 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004142:	f7fe fc21 	bl	8002988 <HAL_GetTick>
 8004146:	0002      	movs	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	4a39      	ldr	r2, [pc, #228]	; (8004234 <HAL_RCC_ClockConfig+0x204>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e065      	b.n	8004222 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004156:	4b36      	ldr	r3, [pc, #216]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	220c      	movs	r2, #12
 800415c:	4013      	ands	r3, r2
 800415e:	2b08      	cmp	r3, #8
 8004160:	d1ef      	bne.n	8004142 <HAL_RCC_ClockConfig+0x112>
 8004162:	e024      	b.n	80041ae <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d11b      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800416c:	e009      	b.n	8004182 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416e:	f7fe fc0b 	bl	8002988 <HAL_GetTick>
 8004172:	0002      	movs	r2, r0
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	4a2e      	ldr	r2, [pc, #184]	; (8004234 <HAL_RCC_ClockConfig+0x204>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e04f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	220c      	movs	r2, #12
 8004188:	4013      	ands	r3, r2
 800418a:	2b0c      	cmp	r3, #12
 800418c:	d1ef      	bne.n	800416e <HAL_RCC_ClockConfig+0x13e>
 800418e:	e00e      	b.n	80041ae <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004190:	f7fe fbfa 	bl	8002988 <HAL_GetTick>
 8004194:	0002      	movs	r2, r0
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	4a26      	ldr	r2, [pc, #152]	; (8004234 <HAL_RCC_ClockConfig+0x204>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e03e      	b.n	8004222 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041a4:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	220c      	movs	r2, #12
 80041aa:	4013      	ands	r3, r2
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80041ae:	4b1f      	ldr	r3, [pc, #124]	; (800422c <HAL_RCC_ClockConfig+0x1fc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	4013      	ands	r3, r2
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d211      	bcs.n	80041e0 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_RCC_ClockConfig+0x1fc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2201      	movs	r2, #1
 80041c2:	4393      	bics	r3, r2
 80041c4:	0019      	movs	r1, r3
 80041c6:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCC_ClockConfig+0x1fc>)
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041ce:	4b17      	ldr	r3, [pc, #92]	; (800422c <HAL_RCC_ClockConfig+0x1fc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	4013      	ands	r3, r2
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e020      	b.n	8004222 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2204      	movs	r2, #4
 80041e6:	4013      	ands	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4a12      	ldr	r2, [pc, #72]	; (8004238 <HAL_RCC_ClockConfig+0x208>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	0019      	movs	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80041fe:	f000 f821 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8004202:	0001      	movs	r1, r0
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	220f      	movs	r2, #15
 800420c:	4013      	ands	r3, r2
 800420e:	4a0b      	ldr	r2, [pc, #44]	; (800423c <HAL_RCC_ClockConfig+0x20c>)
 8004210:	5cd3      	ldrb	r3, [r2, r3]
 8004212:	000a      	movs	r2, r1
 8004214:	40da      	lsrs	r2, r3
 8004216:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x210>)
 8004218:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800421a:	2000      	movs	r0, #0
 800421c:	f7fe fb8c 	bl	8002938 <HAL_InitTick>
  
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b004      	add	sp, #16
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	40022000 	.word	0x40022000
 8004230:	40021000 	.word	0x40021000
 8004234:	00001388 	.word	0x00001388
 8004238:	fffff8ff 	.word	0xfffff8ff
 800423c:	0800978c 	.word	0x0800978c
 8004240:	20000000 	.word	0x20000000

08004244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b08f      	sub	sp, #60	; 0x3c
 8004248:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800424a:	2314      	movs	r3, #20
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	4a37      	ldr	r2, [pc, #220]	; (800432c <HAL_RCC_GetSysClockFreq+0xe8>)
 8004250:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004252:	c313      	stmia	r3!, {r0, r1, r4}
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	4a35      	ldr	r2, [pc, #212]	; (8004330 <HAL_RCC_GetSysClockFreq+0xec>)
 800425c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800425e:	c313      	stmia	r3!, {r0, r1, r4}
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004268:	2300      	movs	r3, #0
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
 800426c:	2300      	movs	r3, #0
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
 8004270:	2300      	movs	r3, #0
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004278:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <HAL_RCC_GetSysClockFreq+0xf0>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	220c      	movs	r2, #12
 8004282:	4013      	ands	r3, r2
 8004284:	2b08      	cmp	r3, #8
 8004286:	d006      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0x52>
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d043      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0xd0>
 800428c:	2b04      	cmp	r3, #4
 800428e:	d144      	bne.n	800431a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004292:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004294:	e044      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	0c9b      	lsrs	r3, r3, #18
 800429a:	220f      	movs	r2, #15
 800429c:	4013      	ands	r3, r2
 800429e:	2214      	movs	r2, #20
 80042a0:	18ba      	adds	r2, r7, r2
 80042a2:	5cd3      	ldrb	r3, [r2, r3]
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80042a6:	4b23      	ldr	r3, [pc, #140]	; (8004334 <HAL_RCC_GetSysClockFreq+0xf0>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	220f      	movs	r2, #15
 80042ac:	4013      	ands	r3, r2
 80042ae:	1d3a      	adds	r2, r7, #4
 80042b0:	5cd3      	ldrb	r3, [r2, r3]
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b6:	23c0      	movs	r3, #192	; 0xc0
 80042b8:	025b      	lsls	r3, r3, #9
 80042ba:	401a      	ands	r2, r3
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	025b      	lsls	r3, r3, #9
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d109      	bne.n	80042d8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80042c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c6:	481c      	ldr	r0, [pc, #112]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf4>)
 80042c8:	f7fb ff30 	bl	800012c <__udivsi3>
 80042cc:	0003      	movs	r3, r0
 80042ce:	001a      	movs	r2, r3
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	4353      	muls	r3, r2
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
 80042d6:	e01a      	b.n	800430e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80042d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042da:	23c0      	movs	r3, #192	; 0xc0
 80042dc:	025b      	lsls	r3, r3, #9
 80042de:	401a      	ands	r2, r3
 80042e0:	23c0      	movs	r3, #192	; 0xc0
 80042e2:	025b      	lsls	r3, r3, #9
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d109      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80042e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ea:	4814      	ldr	r0, [pc, #80]	; (800433c <HAL_RCC_GetSysClockFreq+0xf8>)
 80042ec:	f7fb ff1e 	bl	800012c <__udivsi3>
 80042f0:	0003      	movs	r3, r0
 80042f2:	001a      	movs	r2, r3
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	4353      	muls	r3, r2
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
 80042fa:	e008      	b.n	800430e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80042fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042fe:	480e      	ldr	r0, [pc, #56]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004300:	f7fb ff14 	bl	800012c <__udivsi3>
 8004304:	0003      	movs	r3, r0
 8004306:	001a      	movs	r2, r3
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	4353      	muls	r3, r2
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 800430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004310:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004312:	e005      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004316:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004318:	e002      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf4>)
 800431c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800431e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b00f      	add	sp, #60	; 0x3c
 8004328:	bd90      	pop	{r4, r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	080092a0 	.word	0x080092a0
 8004330:	080092b0 	.word	0x080092b0
 8004334:	40021000 	.word	0x40021000
 8004338:	007a1200 	.word	0x007a1200
 800433c:	02dc6c00 	.word	0x02dc6c00

08004340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004344:	4b02      	ldr	r3, [pc, #8]	; (8004350 <HAL_RCC_GetHCLKFreq+0x10>)
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	20000000 	.word	0x20000000

08004354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004358:	f7ff fff2 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 800435c:	0001      	movs	r1, r0
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	2207      	movs	r2, #7
 8004366:	4013      	ands	r3, r2
 8004368:	4a04      	ldr	r2, [pc, #16]	; (800437c <HAL_RCC_GetPCLK1Freq+0x28>)
 800436a:	5cd3      	ldrb	r3, [r2, r3]
 800436c:	40d9      	lsrs	r1, r3
 800436e:	000b      	movs	r3, r1
}    
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	40021000 	.word	0x40021000
 800437c:	0800979c 	.word	0x0800979c

08004380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	025b      	lsls	r3, r3, #9
 8004398:	4013      	ands	r3, r2
 800439a:	d100      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800439c:	e08f      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2317      	movs	r3, #23
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a6:	4b6f      	ldr	r3, [pc, #444]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	055b      	lsls	r3, r3, #21
 80043ae:	4013      	ands	r3, r2
 80043b0:	d111      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	4b6c      	ldr	r3, [pc, #432]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	4b6b      	ldr	r3, [pc, #428]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	0549      	lsls	r1, r1, #21
 80043bc:	430a      	orrs	r2, r1
 80043be:	61da      	str	r2, [r3, #28]
 80043c0:	4b68      	ldr	r3, [pc, #416]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	055b      	lsls	r3, r3, #21
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ce:	2317      	movs	r3, #23
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d6:	4b64      	ldr	r3, [pc, #400]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4013      	ands	r3, r2
 80043e0:	d11a      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043e2:	4b61      	ldr	r3, [pc, #388]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b60      	ldr	r3, [pc, #384]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	0049      	lsls	r1, r1, #1
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f0:	f7fe faca 	bl	8002988 <HAL_GetTick>
 80043f4:	0003      	movs	r3, r0
 80043f6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f8:	e008      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fa:	f7fe fac5 	bl	8002988 <HAL_GetTick>
 80043fe:	0002      	movs	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b64      	cmp	r3, #100	; 0x64
 8004406:	d901      	bls.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e0a6      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	4b56      	ldr	r3, [pc, #344]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4013      	ands	r3, r2
 8004416:	d0f0      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004418:	4b52      	ldr	r3, [pc, #328]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800441a:	6a1a      	ldr	r2, [r3, #32]
 800441c:	23c0      	movs	r3, #192	; 0xc0
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4013      	ands	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d034      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	23c0      	movs	r3, #192	; 0xc0
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4013      	ands	r3, r2
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	429a      	cmp	r2, r3
 8004438:	d02c      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800443a:	4b4a      	ldr	r3, [pc, #296]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	4a4b      	ldr	r2, [pc, #300]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004440:	4013      	ands	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004444:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	4b46      	ldr	r3, [pc, #280]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800444a:	2180      	movs	r1, #128	; 0x80
 800444c:	0249      	lsls	r1, r1, #9
 800444e:	430a      	orrs	r2, r1
 8004450:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004452:	4b44      	ldr	r3, [pc, #272]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004454:	6a1a      	ldr	r2, [r3, #32]
 8004456:	4b43      	ldr	r3, [pc, #268]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004458:	4945      	ldr	r1, [pc, #276]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800445a:	400a      	ands	r2, r1
 800445c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800445e:	4b41      	ldr	r3, [pc, #260]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	4013      	ands	r3, r2
 800446a:	d013      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7fe fa8c 	bl	8002988 <HAL_GetTick>
 8004470:	0003      	movs	r3, r0
 8004472:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	e009      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fe fa87 	bl	8002988 <HAL_GetTick>
 800447a:	0002      	movs	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	4a3c      	ldr	r2, [pc, #240]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e067      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	2202      	movs	r2, #2
 8004490:	4013      	ands	r3, r2
 8004492:	d0f0      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004494:	4b33      	ldr	r3, [pc, #204]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4a34      	ldr	r2, [pc, #208]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800449a:	4013      	ands	r3, r2
 800449c:	0019      	movs	r1, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	4b30      	ldr	r3, [pc, #192]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044a4:	430a      	orrs	r2, r1
 80044a6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044a8:	2317      	movs	r3, #23
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d105      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b2:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044b8:	492f      	ldr	r1, [pc, #188]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044ba:	400a      	ands	r2, r1
 80044bc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	4013      	ands	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044c8:	4b26      	ldr	r3, [pc, #152]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2203      	movs	r2, #3
 80044ce:	4393      	bics	r3, r2
 80044d0:	0019      	movs	r1, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	4b23      	ldr	r3, [pc, #140]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044d8:	430a      	orrs	r2, r1
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2202      	movs	r2, #2
 80044e2:	4013      	ands	r3, r2
 80044e4:	d009      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	4a24      	ldr	r2, [pc, #144]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	0019      	movs	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044f6:	430a      	orrs	r2, r1
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2220      	movs	r2, #32
 8004500:	4013      	ands	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004504:	4b17      	ldr	r3, [pc, #92]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	2210      	movs	r2, #16
 800450a:	4393      	bics	r3, r2
 800450c:	0019      	movs	r1, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004514:	430a      	orrs	r2, r1
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	029b      	lsls	r3, r3, #10
 8004520:	4013      	ands	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	2280      	movs	r2, #128	; 0x80
 800452a:	4393      	bics	r3, r2
 800452c:	0019      	movs	r1, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004534:	430a      	orrs	r2, r1
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4013      	ands	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2240      	movs	r2, #64	; 0x40
 800454a:	4393      	bics	r3, r2
 800454c:	0019      	movs	r1, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	4b04      	ldr	r3, [pc, #16]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004554:	430a      	orrs	r2, r1
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b006      	add	sp, #24
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	40021000 	.word	0x40021000
 8004568:	40007000 	.word	0x40007000
 800456c:	fffffcff 	.word	0xfffffcff
 8004570:	fffeffff 	.word	0xfffeffff
 8004574:	00001388 	.word	0x00001388
 8004578:	efffffff 	.word	0xefffffff
 800457c:	fffcffff 	.word	0xfffcffff

08004580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e047      	b.n	8004622 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2269      	movs	r2, #105	; 0x69
 8004596:	5c9b      	ldrb	r3, [r3, r2]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d107      	bne.n	80045ae <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2268      	movs	r2, #104	; 0x68
 80045a2:	2100      	movs	r1, #0
 80045a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	0018      	movs	r0, r3
 80045aa:	f002 f9c3 	bl	8006934 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2269      	movs	r2, #105	; 0x69
 80045b2:	2124      	movs	r1, #36	; 0x24
 80045b4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2101      	movs	r1, #1
 80045c2:	438a      	bics	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0018      	movs	r0, r3
 80045ca:	f000 f8d5 	bl	8004778 <UART_SetConfig>
 80045ce:	0003      	movs	r3, r0
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e024      	b.n	8004622 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 fa84 	bl	8004af0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	490e      	ldr	r1, [pc, #56]	; (800462c <HAL_UART_Init+0xac>)
 80045f4:	400a      	ands	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	212a      	movs	r1, #42	; 0x2a
 8004604:	438a      	bics	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2101      	movs	r1, #1
 8004614:	430a      	orrs	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	0018      	movs	r0, r3
 800461c:	f000 fb1c 	bl	8004c58 <UART_CheckIdleState>
 8004620:	0003      	movs	r3, r0
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	ffffb7ff 	.word	0xffffb7ff

08004630 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	1dbb      	adds	r3, r7, #6
 800463e:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2269      	movs	r2, #105	; 0x69
 8004648:	5c9b      	ldrb	r3, [r3, r2]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b20      	cmp	r3, #32
 800464e:	d000      	beq.n	8004652 <HAL_UART_Transmit+0x22>
 8004650:	e08c      	b.n	800476c <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_UART_Transmit+0x30>
 8004658:	1dbb      	adds	r3, r7, #6
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e084      	b.n	800476e <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	015b      	lsls	r3, r3, #5
 800466c:	429a      	cmp	r2, r3
 800466e:	d109      	bne.n	8004684 <HAL_UART_Transmit+0x54>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2201      	movs	r2, #1
 800467c:	4013      	ands	r3, r2
 800467e:	d001      	beq.n	8004684 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e074      	b.n	800476e <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2268      	movs	r2, #104	; 0x68
 8004688:	5c9b      	ldrb	r3, [r3, r2]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_UART_Transmit+0x62>
 800468e:	2302      	movs	r3, #2
 8004690:	e06d      	b.n	800476e <HAL_UART_Transmit+0x13e>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2268      	movs	r2, #104	; 0x68
 8004696:	2101      	movs	r1, #1
 8004698:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2269      	movs	r2, #105	; 0x69
 80046a4:	2121      	movs	r1, #33	; 0x21
 80046a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80046a8:	f7fe f96e 	bl	8002988 <HAL_GetTick>
 80046ac:	0003      	movs	r3, r0
 80046ae:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1dba      	adds	r2, r7, #6
 80046b4:	2150      	movs	r1, #80	; 0x50
 80046b6:	8812      	ldrh	r2, [r2, #0]
 80046b8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1dba      	adds	r2, r7, #6
 80046be:	2152      	movs	r1, #82	; 0x52
 80046c0:	8812      	ldrh	r2, [r2, #0]
 80046c2:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 80046c4:	e035      	b.n	8004732 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2252      	movs	r2, #82	; 0x52
 80046ca:	5a9b      	ldrh	r3, [r3, r2]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b299      	uxth	r1, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2252      	movs	r2, #82	; 0x52
 80046d6:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	0013      	movs	r3, r2
 80046e2:	2200      	movs	r2, #0
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	f000 fb0f 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 80046ea:	1e03      	subs	r3, r0, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e03d      	b.n	800476e <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	015b      	lsls	r3, r3, #5
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d111      	bne.n	8004722 <HAL_UART_Transmit+0xf2>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10d      	bne.n	8004722 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	881a      	ldrh	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	05d2      	lsls	r2, r2, #23
 8004714:	0dd2      	lsrs	r2, r2, #23
 8004716:	b292      	uxth	r2, r2
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3302      	adds	r3, #2
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	e007      	b.n	8004732 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	60ba      	str	r2, [r7, #8]
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	b292      	uxth	r2, r2
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2252      	movs	r2, #82	; 0x52
 8004736:	5a9b      	ldrh	r3, [r3, r2]
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1c3      	bne.n	80046c6 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	0013      	movs	r3, r2
 8004748:	2200      	movs	r2, #0
 800474a:	2140      	movs	r1, #64	; 0x40
 800474c:	f000 fadc 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 8004750:	1e03      	subs	r3, r0, #0
 8004752:	d001      	beq.n	8004758 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e00a      	b.n	800476e <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2269      	movs	r2, #105	; 0x69
 800475c:	2120      	movs	r1, #32
 800475e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2268      	movs	r2, #104	; 0x68
 8004764:	2100      	movs	r1, #0
 8004766:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b006      	add	sp, #24
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	b590      	push	{r4, r7, lr}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004784:	2317      	movs	r3, #23
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2210      	movs	r2, #16
 800478a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 800478c:	230a      	movs	r3, #10
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2200      	movs	r2, #0
 8004792:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8004794:	2314      	movs	r3, #20
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	2200      	movs	r2, #0
 800479a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800479c:	2313      	movs	r3, #19
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4ac1      	ldr	r2, [pc, #772]	; (8004ac8 <UART_SetConfig+0x350>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	0019      	movs	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4abc      	ldr	r2, [pc, #752]	; (8004acc <UART_SetConfig+0x354>)
 80047da:	4013      	ands	r3, r2
 80047dc:	0019      	movs	r1, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4ab4      	ldr	r2, [pc, #720]	; (8004ad0 <UART_SetConfig+0x358>)
 80047fe:	4013      	ands	r3, r2
 8004800:	0019      	movs	r1, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4ab0      	ldr	r2, [pc, #704]	; (8004ad4 <UART_SetConfig+0x35c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d125      	bne.n	8004862 <UART_SetConfig+0xea>
 8004816:	4bb0      	ldr	r3, [pc, #704]	; (8004ad8 <UART_SetConfig+0x360>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	2203      	movs	r2, #3
 800481c:	4013      	ands	r3, r2
 800481e:	2b01      	cmp	r3, #1
 8004820:	d00f      	beq.n	8004842 <UART_SetConfig+0xca>
 8004822:	d304      	bcc.n	800482e <UART_SetConfig+0xb6>
 8004824:	2b02      	cmp	r3, #2
 8004826:	d011      	beq.n	800484c <UART_SetConfig+0xd4>
 8004828:	2b03      	cmp	r3, #3
 800482a:	d005      	beq.n	8004838 <UART_SetConfig+0xc0>
 800482c:	e013      	b.n	8004856 <UART_SetConfig+0xde>
 800482e:	2317      	movs	r3, #23
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	e064      	b.n	8004902 <UART_SetConfig+0x18a>
 8004838:	2317      	movs	r3, #23
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	2202      	movs	r2, #2
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	e05f      	b.n	8004902 <UART_SetConfig+0x18a>
 8004842:	2317      	movs	r3, #23
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	2204      	movs	r2, #4
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	e05a      	b.n	8004902 <UART_SetConfig+0x18a>
 800484c:	2317      	movs	r3, #23
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	2208      	movs	r2, #8
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	e055      	b.n	8004902 <UART_SetConfig+0x18a>
 8004856:	2317      	movs	r3, #23
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	2210      	movs	r2, #16
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	e04f      	b.n	8004902 <UART_SetConfig+0x18a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a9d      	ldr	r2, [pc, #628]	; (8004adc <UART_SetConfig+0x364>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d132      	bne.n	80048d2 <UART_SetConfig+0x15a>
 800486c:	4b9a      	ldr	r3, [pc, #616]	; (8004ad8 <UART_SetConfig+0x360>)
 800486e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004870:	23c0      	movs	r3, #192	; 0xc0
 8004872:	029b      	lsls	r3, r3, #10
 8004874:	4013      	ands	r3, r2
 8004876:	2280      	movs	r2, #128	; 0x80
 8004878:	0252      	lsls	r2, r2, #9
 800487a:	4293      	cmp	r3, r2
 800487c:	d019      	beq.n	80048b2 <UART_SetConfig+0x13a>
 800487e:	2280      	movs	r2, #128	; 0x80
 8004880:	0252      	lsls	r2, r2, #9
 8004882:	4293      	cmp	r3, r2
 8004884:	d802      	bhi.n	800488c <UART_SetConfig+0x114>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <UART_SetConfig+0x126>
 800488a:	e01c      	b.n	80048c6 <UART_SetConfig+0x14e>
 800488c:	2280      	movs	r2, #128	; 0x80
 800488e:	0292      	lsls	r2, r2, #10
 8004890:	4293      	cmp	r3, r2
 8004892:	d013      	beq.n	80048bc <UART_SetConfig+0x144>
 8004894:	22c0      	movs	r2, #192	; 0xc0
 8004896:	0292      	lsls	r2, r2, #10
 8004898:	4293      	cmp	r3, r2
 800489a:	d005      	beq.n	80048a8 <UART_SetConfig+0x130>
 800489c:	e013      	b.n	80048c6 <UART_SetConfig+0x14e>
 800489e:	2317      	movs	r3, #23
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e02c      	b.n	8004902 <UART_SetConfig+0x18a>
 80048a8:	2317      	movs	r3, #23
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	2202      	movs	r2, #2
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	e027      	b.n	8004902 <UART_SetConfig+0x18a>
 80048b2:	2317      	movs	r3, #23
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	2204      	movs	r2, #4
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	e022      	b.n	8004902 <UART_SetConfig+0x18a>
 80048bc:	2317      	movs	r3, #23
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2208      	movs	r2, #8
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e01d      	b.n	8004902 <UART_SetConfig+0x18a>
 80048c6:	2317      	movs	r3, #23
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	2210      	movs	r2, #16
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	e017      	b.n	8004902 <UART_SetConfig+0x18a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a82      	ldr	r2, [pc, #520]	; (8004ae0 <UART_SetConfig+0x368>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d104      	bne.n	80048e6 <UART_SetConfig+0x16e>
 80048dc:	2317      	movs	r3, #23
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e00d      	b.n	8004902 <UART_SetConfig+0x18a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a7e      	ldr	r2, [pc, #504]	; (8004ae4 <UART_SetConfig+0x36c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d104      	bne.n	80048fa <UART_SetConfig+0x182>
 80048f0:	2317      	movs	r3, #23
 80048f2:	18fb      	adds	r3, r7, r3
 80048f4:	2200      	movs	r2, #0
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e003      	b.n	8004902 <UART_SetConfig+0x18a>
 80048fa:	2317      	movs	r3, #23
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2210      	movs	r2, #16
 8004900:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	2380      	movs	r3, #128	; 0x80
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	429a      	cmp	r2, r3
 800490c:	d000      	beq.n	8004910 <UART_SetConfig+0x198>
 800490e:	e077      	b.n	8004a00 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8004910:	2317      	movs	r3, #23
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d01c      	beq.n	8004954 <UART_SetConfig+0x1dc>
 800491a:	dc02      	bgt.n	8004922 <UART_SetConfig+0x1aa>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <UART_SetConfig+0x1b4>
 8004920:	e04f      	b.n	80049c2 <UART_SetConfig+0x24a>
 8004922:	2b04      	cmp	r3, #4
 8004924:	d027      	beq.n	8004976 <UART_SetConfig+0x1fe>
 8004926:	2b08      	cmp	r3, #8
 8004928:	d039      	beq.n	800499e <UART_SetConfig+0x226>
 800492a:	e04a      	b.n	80049c2 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800492c:	f7ff fd12 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 8004930:	0003      	movs	r3, r0
 8004932:	005a      	lsls	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	18d2      	adds	r2, r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	0019      	movs	r1, r3
 8004942:	0010      	movs	r0, r2
 8004944:	f7fb fbf2 	bl	800012c <__udivsi3>
 8004948:	0003      	movs	r3, r0
 800494a:	001a      	movs	r2, r3
 800494c:	2314      	movs	r3, #20
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	801a      	strh	r2, [r3, #0]
        break;
 8004952:	e03b      	b.n	80049cc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	4a63      	ldr	r2, [pc, #396]	; (8004ae8 <UART_SetConfig+0x370>)
 800495c:	189a      	adds	r2, r3, r2
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	0019      	movs	r1, r3
 8004964:	0010      	movs	r0, r2
 8004966:	f7fb fbe1 	bl	800012c <__udivsi3>
 800496a:	0003      	movs	r3, r0
 800496c:	001a      	movs	r2, r3
 800496e:	2314      	movs	r3, #20
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	801a      	strh	r2, [r3, #0]
        break;
 8004974:	e02a      	b.n	80049cc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004976:	f7ff fc65 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 800497a:	0003      	movs	r3, r0
 800497c:	005a      	lsls	r2, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	18d2      	adds	r2, r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	0019      	movs	r1, r3
 800498c:	0010      	movs	r0, r2
 800498e:	f7fb fbcd 	bl	800012c <__udivsi3>
 8004992:	0003      	movs	r3, r0
 8004994:	001a      	movs	r2, r3
 8004996:	2314      	movs	r3, #20
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	801a      	strh	r2, [r3, #0]
        break;
 800499c:	e016      	b.n	80049cc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	2280      	movs	r2, #128	; 0x80
 80049a6:	0252      	lsls	r2, r2, #9
 80049a8:	189a      	adds	r2, r3, r2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	0019      	movs	r1, r3
 80049b0:	0010      	movs	r0, r2
 80049b2:	f7fb fbbb 	bl	800012c <__udivsi3>
 80049b6:	0003      	movs	r3, r0
 80049b8:	001a      	movs	r2, r3
 80049ba:	2314      	movs	r3, #20
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	801a      	strh	r2, [r3, #0]
        break;
 80049c0:	e004      	b.n	80049cc <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80049c2:	2313      	movs	r3, #19
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
        break;
 80049ca:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80049cc:	200a      	movs	r0, #10
 80049ce:	183b      	adds	r3, r7, r0
 80049d0:	2414      	movs	r4, #20
 80049d2:	193a      	adds	r2, r7, r4
 80049d4:	8812      	ldrh	r2, [r2, #0]
 80049d6:	210f      	movs	r1, #15
 80049d8:	438a      	bics	r2, r1
 80049da:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049dc:	193b      	adds	r3, r7, r4
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	105b      	asrs	r3, r3, #1
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2207      	movs	r2, #7
 80049e6:	4013      	ands	r3, r2
 80049e8:	b299      	uxth	r1, r3
 80049ea:	183b      	adds	r3, r7, r0
 80049ec:	183a      	adds	r2, r7, r0
 80049ee:	8812      	ldrh	r2, [r2, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	183a      	adds	r2, r7, r0
 80049fa:	8812      	ldrh	r2, [r2, #0]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	e05b      	b.n	8004ab8 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8004a00:	2317      	movs	r3, #23
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d01b      	beq.n	8004a42 <UART_SetConfig+0x2ca>
 8004a0a:	dc02      	bgt.n	8004a12 <UART_SetConfig+0x29a>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <UART_SetConfig+0x2a4>
 8004a10:	e04d      	b.n	8004aae <UART_SetConfig+0x336>
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d026      	beq.n	8004a64 <UART_SetConfig+0x2ec>
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d037      	beq.n	8004a8a <UART_SetConfig+0x312>
 8004a1a:	e048      	b.n	8004aae <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a1c:	f7ff fc9a 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 8004a20:	0002      	movs	r2, r0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	18d2      	adds	r2, r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	0019      	movs	r1, r3
 8004a30:	0010      	movs	r0, r2
 8004a32:	f7fb fb7b 	bl	800012c <__udivsi3>
 8004a36:	0003      	movs	r3, r0
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60da      	str	r2, [r3, #12]
        break;
 8004a40:	e03a      	b.n	8004ab8 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	4a28      	ldr	r2, [pc, #160]	; (8004aec <UART_SetConfig+0x374>)
 8004a4a:	189a      	adds	r2, r3, r2
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	0019      	movs	r1, r3
 8004a52:	0010      	movs	r0, r2
 8004a54:	f7fb fb6a 	bl	800012c <__udivsi3>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60da      	str	r2, [r3, #12]
        break;
 8004a62:	e029      	b.n	8004ab8 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004a64:	f7ff fbee 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8004a68:	0002      	movs	r2, r0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	18d2      	adds	r2, r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	0019      	movs	r1, r3
 8004a78:	0010      	movs	r0, r2
 8004a7a:	f7fb fb57 	bl	800012c <__udivsi3>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60da      	str	r2, [r3, #12]
        break;
 8004a88:	e016      	b.n	8004ab8 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	0212      	lsls	r2, r2, #8
 8004a94:	189a      	adds	r2, r3, r2
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	0010      	movs	r0, r2
 8004a9e:	f7fb fb45 	bl	800012c <__udivsi3>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60da      	str	r2, [r3, #12]
        break;
 8004aac:	e004      	b.n	8004ab8 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004aae:	2313      	movs	r3, #19
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	701a      	strb	r2, [r3, #0]
        break;
 8004ab6:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8004ab8:	2313      	movs	r3, #19
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	781b      	ldrb	r3, [r3, #0]

}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b007      	add	sp, #28
 8004ac4:	bd90      	pop	{r4, r7, pc}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	efff69f3 	.word	0xefff69f3
 8004acc:	ffffcfff 	.word	0xffffcfff
 8004ad0:	fffff4ff 	.word	0xfffff4ff
 8004ad4:	40013800 	.word	0x40013800
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	40004400 	.word	0x40004400
 8004ae0:	40004800 	.word	0x40004800
 8004ae4:	40004c00 	.word	0x40004c00
 8004ae8:	00f42400 	.word	0x00f42400
 8004aec:	007a1200 	.word	0x007a1200

08004af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2201      	movs	r2, #1
 8004afe:	4013      	ands	r3, r2
 8004b00:	d00b      	beq.n	8004b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a4a      	ldr	r2, [pc, #296]	; (8004c34 <UART_AdvFeatureConfig+0x144>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	0019      	movs	r1, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	2202      	movs	r2, #2
 8004b20:	4013      	ands	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4a43      	ldr	r2, [pc, #268]	; (8004c38 <UART_AdvFeatureConfig+0x148>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	0019      	movs	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2204      	movs	r2, #4
 8004b42:	4013      	ands	r3, r2
 8004b44:	d00b      	beq.n	8004b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	4a3b      	ldr	r2, [pc, #236]	; (8004c3c <UART_AdvFeatureConfig+0x14c>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	0019      	movs	r1, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	2208      	movs	r2, #8
 8004b64:	4013      	ands	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4a34      	ldr	r2, [pc, #208]	; (8004c40 <UART_AdvFeatureConfig+0x150>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	0019      	movs	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2210      	movs	r2, #16
 8004b86:	4013      	ands	r3, r2
 8004b88:	d00b      	beq.n	8004ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <UART_AdvFeatureConfig+0x154>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	0019      	movs	r1, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d00b      	beq.n	8004bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	4a25      	ldr	r2, [pc, #148]	; (8004c48 <UART_AdvFeatureConfig+0x158>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	2240      	movs	r2, #64	; 0x40
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d01d      	beq.n	8004c0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4a1d      	ldr	r2, [pc, #116]	; (8004c4c <UART_AdvFeatureConfig+0x15c>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	0019      	movs	r1, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	035b      	lsls	r3, r3, #13
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d10b      	bne.n	8004c0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <UART_AdvFeatureConfig+0x160>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	0019      	movs	r1, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	4013      	ands	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4a0e      	ldr	r2, [pc, #56]	; (8004c54 <UART_AdvFeatureConfig+0x164>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	0019      	movs	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]
  }
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b002      	add	sp, #8
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	fffdffff 	.word	0xfffdffff
 8004c38:	fffeffff 	.word	0xfffeffff
 8004c3c:	fffbffff 	.word	0xfffbffff
 8004c40:	ffff7fff 	.word	0xffff7fff
 8004c44:	ffffefff 	.word	0xffffefff
 8004c48:	ffffdfff 	.word	0xffffdfff
 8004c4c:	ffefffff 	.word	0xffefffff
 8004c50:	ff9fffff 	.word	0xff9fffff
 8004c54:	fff7ffff 	.word	0xfff7ffff

08004c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c6a:	f7fd fe8d 	bl	8002988 <HAL_GetTick>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a21      	ldr	r2, [pc, #132]	; (8004cfc <UART_CheckIdleState+0xa4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <UART_CheckIdleState+0x2e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1f      	ldr	r2, [pc, #124]	; (8004d00 <UART_CheckIdleState+0xa8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d129      	bne.n	8004cda <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d10d      	bne.n	8004cb0 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	2380      	movs	r3, #128	; 0x80
 8004c98:	0399      	lsls	r1, r3, #14
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <UART_CheckIdleState+0xac>)
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	0013      	movs	r3, r2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f000 f830 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 8004ca8:	1e03      	subs	r3, r0, #0
 8004caa:	d001      	beq.n	8004cb0 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e021      	b.n	8004cf4 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d10d      	bne.n	8004cda <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	03d9      	lsls	r1, r3, #15
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <UART_CheckIdleState+0xac>)
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	0013      	movs	r3, r2
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f000 f81b 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 8004cd2:	1e03      	subs	r3, r0, #0
 8004cd4:	d001      	beq.n	8004cda <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e00c      	b.n	8004cf4 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2269      	movs	r2, #105	; 0x69
 8004cde:	2120      	movs	r1, #32
 8004ce0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	226a      	movs	r2, #106	; 0x6a
 8004ce6:	2120      	movs	r1, #32
 8004ce8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2268      	movs	r2, #104	; 0x68
 8004cee:	2100      	movs	r1, #0
 8004cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b004      	add	sp, #16
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40013800 	.word	0x40013800
 8004d00:	40004400 	.word	0x40004400
 8004d04:	01ffffff 	.word	0x01ffffff

08004d08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	1dfb      	adds	r3, r7, #7
 8004d16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d18:	e02b      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	d028      	beq.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d26:	f7fd fe2f 	bl	8002988 <HAL_GetTick>
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d21d      	bcs.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4916      	ldr	r1, [pc, #88]	; (8004d9c <UART_WaitOnFlagUntilTimeout+0x94>)
 8004d42:	400a      	ands	r2, r1
 8004d44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2101      	movs	r1, #1
 8004d52:	438a      	bics	r2, r1
 8004d54:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2269      	movs	r2, #105	; 0x69
 8004d5a:	2120      	movs	r1, #32
 8004d5c:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	226a      	movs	r2, #106	; 0x6a
 8004d62:	2120      	movs	r1, #32
 8004d64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2268      	movs	r2, #104	; 0x68
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e00f      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	425a      	negs	r2, r3
 8004d82:	4153      	adcs	r3, r2
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	001a      	movs	r2, r3
 8004d88:	1dfb      	adds	r3, r7, #7
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d0c4      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	0018      	movs	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b004      	add	sp, #16
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	fffffe5f 	.word	0xfffffe5f

08004da0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b089      	sub	sp, #36	; 0x24
 8004da4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004da6:	240c      	movs	r4, #12
 8004da8:	193b      	adds	r3, r7, r4
 8004daa:	0018      	movs	r0, r3
 8004dac:	2314      	movs	r3, #20
 8004dae:	001a      	movs	r2, r3
 8004db0:	2100      	movs	r1, #0
 8004db2:	f001 fe5f 	bl	8006a74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004db6:	4b44      	ldr	r3, [pc, #272]	; (8004ec8 <MX_GPIO_Init+0x128>)
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	4b43      	ldr	r3, [pc, #268]	; (8004ec8 <MX_GPIO_Init+0x128>)
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	0309      	lsls	r1, r1, #12
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	615a      	str	r2, [r3, #20]
 8004dc4:	4b40      	ldr	r3, [pc, #256]	; (8004ec8 <MX_GPIO_Init+0x128>)
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	031b      	lsls	r3, r3, #12
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd2:	4b3d      	ldr	r3, [pc, #244]	; (8004ec8 <MX_GPIO_Init+0x128>)
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	4b3c      	ldr	r3, [pc, #240]	; (8004ec8 <MX_GPIO_Init+0x128>)
 8004dd8:	2180      	movs	r1, #128	; 0x80
 8004dda:	0289      	lsls	r1, r1, #10
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	615a      	str	r2, [r3, #20]
 8004de0:	4b39      	ldr	r3, [pc, #228]	; (8004ec8 <MX_GPIO_Init+0x128>)
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	029b      	lsls	r3, r3, #10
 8004de8:	4013      	ands	r3, r2
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dee:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <MX_GPIO_Init+0x128>)
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	4b35      	ldr	r3, [pc, #212]	; (8004ec8 <MX_GPIO_Init+0x128>)
 8004df4:	2180      	movs	r1, #128	; 0x80
 8004df6:	02c9      	lsls	r1, r1, #11
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	615a      	str	r2, [r3, #20]
 8004dfc:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <MX_GPIO_Init+0x128>)
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	02db      	lsls	r3, r3, #11
 8004e04:	4013      	ands	r3, r2
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004e0a:	2390      	movs	r3, #144	; 0x90
 8004e0c:	05db      	lsls	r3, r3, #23
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2120      	movs	r1, #32
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7fe f853 	bl	8002ebe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8004e18:	193b      	adds	r3, r7, r4
 8004e1a:	2280      	movs	r2, #128	; 0x80
 8004e1c:	0192      	lsls	r2, r2, #6
 8004e1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e20:	193b      	adds	r3, r7, r4
 8004e22:	2200      	movs	r2, #0
 8004e24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	193b      	adds	r3, r7, r4
 8004e28:	2200      	movs	r2, #0
 8004e2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004e2c:	193b      	adds	r3, r7, r4
 8004e2e:	4a27      	ldr	r2, [pc, #156]	; (8004ecc <MX_GPIO_Init+0x12c>)
 8004e30:	0019      	movs	r1, r3
 8004e32:	0010      	movs	r0, r2
 8004e34:	f7fd feaa 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004e38:	193b      	adds	r3, r7, r4
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e3e:	193b      	adds	r3, r7, r4
 8004e40:	2201      	movs	r2, #1
 8004e42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e44:	193b      	adds	r3, r7, r4
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4a:	193b      	adds	r3, r7, r4
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004e50:	193a      	adds	r2, r7, r4
 8004e52:	2390      	movs	r3, #144	; 0x90
 8004e54:	05db      	lsls	r3, r3, #23
 8004e56:	0011      	movs	r1, r2
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7fd fe97 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ATTACH_Pin;
 8004e5e:	193b      	adds	r3, r7, r4
 8004e60:	2202      	movs	r2, #2
 8004e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004e64:	193b      	adds	r3, r7, r4
 8004e66:	4a1a      	ldr	r2, [pc, #104]	; (8004ed0 <MX_GPIO_Init+0x130>)
 8004e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e6a:	193b      	adds	r3, r7, r4
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ATTACH_GPIO_Port, &GPIO_InitStruct);
 8004e70:	193b      	adds	r3, r7, r4
 8004e72:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <MX_GPIO_Init+0x134>)
 8004e74:	0019      	movs	r1, r3
 8004e76:	0010      	movs	r0, r2
 8004e78:	f7fd fe88 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_ALT_Pin;
 8004e7c:	0021      	movs	r1, r4
 8004e7e:	187b      	adds	r3, r7, r1
 8004e80:	2280      	movs	r2, #128	; 0x80
 8004e82:	0212      	lsls	r2, r2, #8
 8004e84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e86:	187b      	adds	r3, r7, r1
 8004e88:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <MX_GPIO_Init+0x138>)
 8004e8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e8c:	187b      	adds	r3, r7, r1
 8004e8e:	2201      	movs	r2, #1
 8004e90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_ALT_GPIO_Port, &GPIO_InitStruct);
 8004e92:	187b      	adds	r3, r7, r1
 8004e94:	4a0f      	ldr	r2, [pc, #60]	; (8004ed4 <MX_GPIO_Init+0x134>)
 8004e96:	0019      	movs	r1, r3
 8004e98:	0010      	movs	r0, r2
 8004e9a:	f7fd fe77 	bl	8002b8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	2005      	movs	r0, #5
 8004ea4:	f7fd fe40 	bl	8002b28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004ea8:	2005      	movs	r0, #5
 8004eaa:	f7fd fe52 	bl	8002b52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	2007      	movs	r0, #7
 8004eb4:	f7fd fe38 	bl	8002b28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004eb8:	2007      	movs	r0, #7
 8004eba:	f7fd fe4a 	bl	8002b52 <HAL_NVIC_EnableIRQ>

}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b009      	add	sp, #36	; 0x24
 8004ec4:	bd90      	pop	{r4, r7, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	48000800 	.word	0x48000800
 8004ed0:	10310000 	.word	0x10310000
 8004ed4:	48000400 	.word	0x48000400
 8004ed8:	10210000 	.word	0x10210000

08004edc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004ee2:	4a1c      	ldr	r2, [pc, #112]	; (8004f54 <MX_I2C2_Init+0x78>)
 8004ee4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00506682;
 8004ee6:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004ee8:	4a1b      	ldr	r2, [pc, #108]	; (8004f58 <MX_I2C2_Init+0x7c>)
 8004eea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004eec:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ef2:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ef8:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004efe:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004f04:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f0a:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004f16:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7fe f809 	bl	8002f30 <HAL_I2C_Init>
 8004f1e:	1e03      	subs	r3, r0, #0
 8004f20:	d001      	beq.n	8004f26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004f22:	f000 faa7 	bl	8005474 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004f28:	2100      	movs	r1, #0
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f7fe fc86 	bl	800383c <HAL_I2CEx_ConfigAnalogFilter>
 8004f30:	1e03      	subs	r3, r0, #0
 8004f32:	d001      	beq.n	8004f38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004f34:	f000 fa9e 	bl	8005474 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <MX_I2C2_Init+0x74>)
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f7fe fcc9 	bl	80038d4 <HAL_I2CEx_ConfigDigitalFilter>
 8004f42:	1e03      	subs	r3, r0, #0
 8004f44:	d001      	beq.n	8004f4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004f46:	f000 fa95 	bl	8005474 <Error_Handler>
  }

}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000228 	.word	0x20000228
 8004f54:	40005800 	.word	0x40005800
 8004f58:	00506682 	.word	0x00506682

08004f5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	; 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f64:	2314      	movs	r3, #20
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	0018      	movs	r0, r3
 8004f6a:	2314      	movs	r3, #20
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	2100      	movs	r1, #0
 8004f70:	f001 fd80 	bl	8006a74 <memset>
  if(i2cHandle->Instance==I2C2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <HAL_I2C_MspInit+0x90>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d132      	bne.n	8004fe4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ff0 <HAL_I2C_MspInit+0x94>)
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <HAL_I2C_MspInit+0x94>)
 8004f84:	2180      	movs	r1, #128	; 0x80
 8004f86:	02c9      	lsls	r1, r1, #11
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	615a      	str	r2, [r3, #20]
 8004f8c:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <HAL_I2C_MspInit+0x94>)
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	02db      	lsls	r3, r3, #11
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004f9a:	2114      	movs	r1, #20
 8004f9c:	187b      	adds	r3, r7, r1
 8004f9e:	22c0      	movs	r2, #192	; 0xc0
 8004fa0:	01d2      	lsls	r2, r2, #7
 8004fa2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fa4:	187b      	adds	r3, r7, r1
 8004fa6:	2212      	movs	r2, #18
 8004fa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	2201      	movs	r2, #1
 8004fae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fb0:	187b      	adds	r3, r7, r1
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8004fb6:	187b      	adds	r3, r7, r1
 8004fb8:	2205      	movs	r2, #5
 8004fba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fbc:	187b      	adds	r3, r7, r1
 8004fbe:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <HAL_I2C_MspInit+0x98>)
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	0010      	movs	r0, r2
 8004fc4:	f7fd fde2 	bl	8002b8c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004fc8:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <HAL_I2C_MspInit+0x94>)
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <HAL_I2C_MspInit+0x94>)
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	03c9      	lsls	r1, r1, #15
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	61da      	str	r2, [r3, #28]
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_I2C_MspInit+0x94>)
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	2380      	movs	r3, #128	; 0x80
 8004fdc:	03db      	lsls	r3, r3, #15
 8004fde:	4013      	ands	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b00a      	add	sp, #40	; 0x28
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40005800 	.word	0x40005800
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	48000400 	.word	0x48000400

08004ff8 <i2c_read_reg>:
} 

/* USER CODE BEGIN 1 */

//a couple wrapper functions to make I2C transactions a little easier
HAL_StatusTypeDef i2c_read_reg(uint8_t addr, uint8_t reg, uint8_t* buf) {
 8004ff8:	b5b0      	push	{r4, r5, r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	603a      	str	r2, [r7, #0]
 8005000:	1dfb      	adds	r3, r7, #7
 8005002:	1c02      	adds	r2, r0, #0
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	1dbb      	adds	r3, r7, #6
 8005008:	1c0a      	adds	r2, r1, #0
 800500a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	if(BUS_IN_USE) return HAL_BUSY;
 800500c:	4b19      	ldr	r3, [pc, #100]	; (8005074 <i2c_read_reg+0x7c>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <i2c_read_reg+0x20>
 8005014:	2302      	movs	r3, #2
 8005016:	e028      	b.n	800506a <i2c_read_reg+0x72>
	BUS_IN_USE = 1; //lock the bus
 8005018:	4b16      	ldr	r3, [pc, #88]	; (8005074 <i2c_read_reg+0x7c>)
 800501a:	2201      	movs	r2, #1
 800501c:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, &reg, 1, 1); //1ms timeout
 800501e:	1dfb      	adds	r3, r7, #7
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	b299      	uxth	r1, r3
 8005024:	250f      	movs	r5, #15
 8005026:	197c      	adds	r4, r7, r5
 8005028:	1dba      	adds	r2, r7, #6
 800502a:	4813      	ldr	r0, [pc, #76]	; (8005078 <i2c_read_reg+0x80>)
 800502c:	2301      	movs	r3, #1
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2301      	movs	r3, #1
 8005032:	f7fe f813 	bl	800305c <HAL_I2C_Master_Transmit>
 8005036:	0003      	movs	r3, r0
 8005038:	7023      	strb	r3, [r4, #0]
	if(status == HAL_OK) status = HAL_I2C_Master_Receive(&hi2c2, addr, buf, 1, 1); //1ms timeout
 800503a:	197b      	adds	r3, r7, r5
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10d      	bne.n	800505e <i2c_read_reg+0x66>
 8005042:	1dfb      	adds	r3, r7, #7
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b299      	uxth	r1, r3
 8005048:	230f      	movs	r3, #15
 800504a:	18fc      	adds	r4, r7, r3
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	480a      	ldr	r0, [pc, #40]	; (8005078 <i2c_read_reg+0x80>)
 8005050:	2301      	movs	r3, #1
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2301      	movs	r3, #1
 8005056:	f7fe f915 	bl	8003284 <HAL_I2C_Master_Receive>
 800505a:	0003      	movs	r3, r0
 800505c:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0;//unlock the bus
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <i2c_read_reg+0x7c>)
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
	return status;
 8005064:	230f      	movs	r3, #15
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	781b      	ldrb	r3, [r3, #0]
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	b004      	add	sp, #16
 8005070:	bdb0      	pop	{r4, r5, r7, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	200001f0 	.word	0x200001f0
 8005078:	20000228 	.word	0x20000228

0800507c <i2c_write_reg>:
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, &command, 1, 1); //1ms timeout
	BUS_IN_USE = 0; //unlock the bus
	return status;
}

HAL_StatusTypeDef i2c_write_reg(uint8_t addr, uint8_t reg, uint8_t data) {
 800507c:	b5b0      	push	{r4, r5, r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af02      	add	r7, sp, #8
 8005082:	0004      	movs	r4, r0
 8005084:	0008      	movs	r0, r1
 8005086:	0011      	movs	r1, r2
 8005088:	1dfb      	adds	r3, r7, #7
 800508a:	1c22      	adds	r2, r4, #0
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	1dbb      	adds	r3, r7, #6
 8005090:	1c02      	adds	r2, r0, #0
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	1d7b      	adds	r3, r7, #5
 8005096:	1c0a      	adds	r2, r1, #0
 8005098:	701a      	strb	r2, [r3, #0]
	uint8_t txdata[2];
	HAL_StatusTypeDef status;
	txdata[0] = reg;
 800509a:	210c      	movs	r1, #12
 800509c:	187b      	adds	r3, r7, r1
 800509e:	1dba      	adds	r2, r7, #6
 80050a0:	7812      	ldrb	r2, [r2, #0]
 80050a2:	701a      	strb	r2, [r3, #0]
	txdata[1] = data;
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	1d7a      	adds	r2, r7, #5
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	705a      	strb	r2, [r3, #1]
	if(BUS_IN_USE) return HAL_BUSY;
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <i2c_write_reg+0x74>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <i2c_write_reg+0x3c>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e016      	b.n	80050e6 <i2c_write_reg+0x6a>
	BUS_IN_USE = 1; //lock the bus
 80050b8:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <i2c_write_reg+0x74>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, txdata, 2, 1); //1ms timeout
 80050be:	1dfb      	adds	r3, r7, #7
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	b299      	uxth	r1, r3
 80050c4:	250f      	movs	r5, #15
 80050c6:	197c      	adds	r4, r7, r5
 80050c8:	230c      	movs	r3, #12
 80050ca:	18fa      	adds	r2, r7, r3
 80050cc:	4809      	ldr	r0, [pc, #36]	; (80050f4 <i2c_write_reg+0x78>)
 80050ce:	2301      	movs	r3, #1
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	2302      	movs	r3, #2
 80050d4:	f7fd ffc2 	bl	800305c <HAL_I2C_Master_Transmit>
 80050d8:	0003      	movs	r3, r0
 80050da:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0; //unlock the bus
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <i2c_write_reg+0x74>)
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
	return status;
 80050e2:	197b      	adds	r3, r7, r5
 80050e4:	781b      	ldrb	r3, [r3, #0]
}
 80050e6:	0018      	movs	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b004      	add	sp, #16
 80050ec:	bdb0      	pop	{r4, r5, r7, pc}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	200001f0 	.word	0x200001f0
 80050f4:	20000228 	.word	0x20000228

080050f8 <i2c_read_regs>:
		BUS_IN_USE = 0; //unlock the bus
	}
	return status;
}

HAL_StatusTypeDef i2c_read_regs(uint8_t addr, uint8_t reg_start, uint8_t num_regs, uint8_t* read_data) {
 80050f8:	b5b0      	push	{r4, r5, r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	0004      	movs	r4, r0
 8005100:	0008      	movs	r0, r1
 8005102:	0011      	movs	r1, r2
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	1dfb      	adds	r3, r7, #7
 8005108:	1c22      	adds	r2, r4, #0
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	1dbb      	adds	r3, r7, #6
 800510e:	1c02      	adds	r2, r0, #0
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	1d7b      	adds	r3, r7, #5
 8005114:	1c0a      	adds	r2, r1, #0
 8005116:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	if(BUS_IN_USE) return HAL_BUSY;
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <i2c_read_regs+0x90>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <i2c_read_regs+0x2c>
 8005120:	2302      	movs	r3, #2
 8005122:	e02c      	b.n	800517e <i2c_read_regs+0x86>
	BUS_IN_USE = 1; //lock the bus
 8005124:	4b18      	ldr	r3, [pc, #96]	; (8005188 <i2c_read_regs+0x90>)
 8005126:	2201      	movs	r2, #1
 8005128:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, &reg_start, 1, 1); //1ms timeout
 800512a:	1dfb      	adds	r3, r7, #7
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	b299      	uxth	r1, r3
 8005130:	250f      	movs	r5, #15
 8005132:	197c      	adds	r4, r7, r5
 8005134:	1dba      	adds	r2, r7, #6
 8005136:	4815      	ldr	r0, [pc, #84]	; (800518c <i2c_read_regs+0x94>)
 8005138:	2301      	movs	r3, #1
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	2301      	movs	r3, #1
 800513e:	f7fd ff8d 	bl	800305c <HAL_I2C_Master_Transmit>
 8005142:	0003      	movs	r3, r0
 8005144:	7023      	strb	r3, [r4, #0]
	if(status == HAL_OK) status = HAL_I2C_Master_Receive(&hi2c2, addr, read_data, num_regs, num_regs); //1ms per byte, should be plenty even at 100khz
 8005146:	197b      	adds	r3, r7, r5
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d111      	bne.n	8005172 <i2c_read_regs+0x7a>
 800514e:	1dfb      	adds	r3, r7, #7
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b299      	uxth	r1, r3
 8005154:	1d7b      	adds	r3, r7, #5
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	b29d      	uxth	r5, r3
 800515a:	1d7b      	adds	r3, r7, #5
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	220f      	movs	r2, #15
 8005160:	18bc      	adds	r4, r7, r2
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	4809      	ldr	r0, [pc, #36]	; (800518c <i2c_read_regs+0x94>)
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	002b      	movs	r3, r5
 800516a:	f7fe f88b 	bl	8003284 <HAL_I2C_Master_Receive>
 800516e:	0003      	movs	r3, r0
 8005170:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0; //unlock the bus
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <i2c_read_regs+0x90>)
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
	return status;
 8005178:	230f      	movs	r3, #15
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	781b      	ldrb	r3, [r3, #0]
}
 800517e:	0018      	movs	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	b004      	add	sp, #16
 8005184:	bdb0      	pop	{r4, r5, r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	200001f0 	.word	0x200001f0
 800518c:	20000228 	.word	0x20000228

08005190 <i2c_write_regs>:

HAL_StatusTypeDef i2c_write_regs(uint8_t addr, uint8_t* data_to_write, uint8_t len) {
 8005190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005192:	b087      	sub	sp, #28
 8005194:	af02      	add	r7, sp, #8
 8005196:	6039      	str	r1, [r7, #0]
 8005198:	0011      	movs	r1, r2
 800519a:	1dfb      	adds	r3, r7, #7
 800519c:	1c02      	adds	r2, r0, #0
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	1dbb      	adds	r3, r7, #6
 80051a2:	1c0a      	adds	r2, r1, #0
 80051a4:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;
	if(BUS_IN_USE) return HAL_BUSY;
 80051a6:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <i2c_write_regs+0x60>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <i2c_write_regs+0x22>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e019      	b.n	80051e6 <i2c_write_regs+0x56>
	BUS_IN_USE = 1; //lock the bus
 80051b2:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <i2c_write_regs+0x60>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c2, addr, data_to_write, len, len); //1ms per byte, should be plenty even at 100khz
 80051b8:	1dfb      	adds	r3, r7, #7
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	b299      	uxth	r1, r3
 80051be:	1dbb      	adds	r3, r7, #6
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	b29d      	uxth	r5, r3
 80051c4:	1dbb      	adds	r3, r7, #6
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	260f      	movs	r6, #15
 80051ca:	19bc      	adds	r4, r7, r6
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	4809      	ldr	r0, [pc, #36]	; (80051f4 <i2c_write_regs+0x64>)
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	002b      	movs	r3, r5
 80051d4:	f7fd ff42 	bl	800305c <HAL_I2C_Master_Transmit>
 80051d8:	0003      	movs	r3, r0
 80051da:	7023      	strb	r3, [r4, #0]
	BUS_IN_USE = 0; //unlock the bus
 80051dc:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <i2c_write_regs+0x60>)
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
	return status;
 80051e2:	19bb      	adds	r3, r7, r6
 80051e4:	781b      	ldrb	r3, [r3, #0]
}
 80051e6:	0018      	movs	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b005      	add	sp, #20
 80051ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	200001f0 	.word	0x200001f0
 80051f4:	20000228 	.word	0x20000228

080051f8 <_write>:
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len)
{
 80051f8:	b5b0      	push	{r4, r5, r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d00a      	beq.n	8005220 <_write+0x28>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b02      	cmp	r3, #2
 800520e:	d007      	beq.n	8005220 <_write+0x28>
   {
      errno = EBADF;
 8005210:	f001 fc06 	bl	8006a20 <__errno>
 8005214:	0003      	movs	r3, r0
 8005216:	2209      	movs	r2, #9
 8005218:	601a      	str	r2, [r3, #0]
      return -1;
 800521a:	2301      	movs	r3, #1
 800521c:	425b      	negs	r3, r3
 800521e:	e011      	b.n	8005244 <_write+0x4c>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 0xFFFF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	b29a      	uxth	r2, r3
   HAL_StatusTypeDef status =
 8005224:	2517      	movs	r5, #23
 8005226:	197c      	adds	r4, r7, r5
 8005228:	4b08      	ldr	r3, [pc, #32]	; (800524c <_write+0x54>)
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	4808      	ldr	r0, [pc, #32]	; (8005250 <_write+0x58>)
 800522e:	f7ff f9ff 	bl	8004630 <HAL_UART_Transmit>
 8005232:	0003      	movs	r3, r0
 8005234:	7023      	strb	r3, [r4, #0]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8005236:	197b      	adds	r3, r7, r5
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <_write+0x4a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	e000      	b.n	8005244 <_write+0x4c>
 8005242:	2300      	movs	r3, #0
}
 8005244:	0018      	movs	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	b006      	add	sp, #24
 800524a:	bdb0      	pop	{r4, r5, r7, pc}
 800524c:	0000ffff 	.word	0x0000ffff
 8005250:	20000278 	.word	0x20000278

08005254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005254:	b5b0      	push	{r4, r5, r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800525a:	f7fd fb59 	bl	8002910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800525e:	f000 f88f 	bl	8005380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005262:	f7ff fd9d 	bl	8004da0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8005266:	f7ff fe39 	bl	8004edc <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800526a:	f001 fb33 	bl	80068d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nStarting...\r\n");
 800526e:	4b3a      	ldr	r3, [pc, #232]	; (8005358 <main+0x104>)
 8005270:	0018      	movs	r0, r3
 8005272:	f002 f8df 	bl	8007434 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //we just got attached
	  bool attached = pd_attached(); //read attachment status once per loop -> interrupt safe
 8005276:	230f      	movs	r3, #15
 8005278:	18fc      	adds	r4, r7, r3
 800527a:	f001 f897 	bl	80063ac <pd_attached>
 800527e:	0003      	movs	r3, r0
 8005280:	7023      	strb	r3, [r4, #0]
	  if(!last_attach && attached) {
 8005282:	4b36      	ldr	r3, [pc, #216]	; (800535c <main+0x108>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2201      	movs	r2, #1
 8005288:	4053      	eors	r3, r2
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d05d      	beq.n	800534c <main+0xf8>
 8005290:	230f      	movs	r3, #15
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d058      	beq.n	800534c <main+0xf8>
		  printf("Starting Negotiation!\n");
 800529a:	4b31      	ldr	r3, [pc, #196]	; (8005360 <main+0x10c>)
 800529c:	0018      	movs	r0, r3
 800529e:	f002 f8c9 	bl	8007434 <puts>
		  float voltage, current, power;
		  HAL_StatusTypeDef status;

		  status = pd_auto_nego(&voltage, &current, &power);
 80052a2:	250e      	movs	r5, #14
 80052a4:	197c      	adds	r4, r7, r5
 80052a6:	003a      	movs	r2, r7
 80052a8:	1d39      	adds	r1, r7, #4
 80052aa:	2308      	movs	r3, #8
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	0018      	movs	r0, r3
 80052b0:	f000 fa80 	bl	80057b4 <pd_auto_nego>
 80052b4:	0003      	movs	r3, r0
 80052b6:	7023      	strb	r3, [r4, #0]
		  if(status == HAL_OK) {
 80052b8:	197b      	adds	r3, r7, r5
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d128      	bne.n	8005312 <main+0xbe>
			  printf("Negotiation Successful!\n");
 80052c0:	4b28      	ldr	r3, [pc, #160]	; (8005364 <main+0x110>)
 80052c2:	0018      	movs	r0, r3
 80052c4:	f002 f8b6 	bl	8007434 <puts>
			  //https://stackoverflow.com/questions/28334435/stm32-printf-float-variable
			  printf("\tVoltage: %.2f\n", voltage); //had to add "-u _printf_float" to linker flags
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	1c18      	adds	r0, r3, #0
 80052cc:	f7fd fa2c 	bl	8002728 <__aeabi_f2d>
 80052d0:	0003      	movs	r3, r0
 80052d2:	000c      	movs	r4, r1
 80052d4:	4924      	ldr	r1, [pc, #144]	; (8005368 <main+0x114>)
 80052d6:	001a      	movs	r2, r3
 80052d8:	0023      	movs	r3, r4
 80052da:	0008      	movs	r0, r1
 80052dc:	f002 f830 	bl	8007340 <iprintf>
			  printf("\tCurrent: %.2f\n", current);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1c18      	adds	r0, r3, #0
 80052e4:	f7fd fa20 	bl	8002728 <__aeabi_f2d>
 80052e8:	0003      	movs	r3, r0
 80052ea:	000c      	movs	r4, r1
 80052ec:	491f      	ldr	r1, [pc, #124]	; (800536c <main+0x118>)
 80052ee:	001a      	movs	r2, r3
 80052f0:	0023      	movs	r3, r4
 80052f2:	0008      	movs	r0, r1
 80052f4:	f002 f824 	bl	8007340 <iprintf>
			  printf("\tPower: %.2f\n", power);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	1c18      	adds	r0, r3, #0
 80052fc:	f7fd fa14 	bl	8002728 <__aeabi_f2d>
 8005300:	0003      	movs	r3, r0
 8005302:	000c      	movs	r4, r1
 8005304:	491a      	ldr	r1, [pc, #104]	; (8005370 <main+0x11c>)
 8005306:	001a      	movs	r2, r3
 8005308:	0023      	movs	r3, r4
 800530a:	0008      	movs	r0, r1
 800530c:	f002 f818 	bl	8007340 <iprintf>
 8005310:	e01c      	b.n	800534c <main+0xf8>
		  }
		  else if(status == HAL_TIMEOUT) {
 8005312:	230e      	movs	r3, #14
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d104      	bne.n	8005326 <main+0xd2>
			  printf("Negotiation Timed Out!\n");
 800531c:	4b15      	ldr	r3, [pc, #84]	; (8005374 <main+0x120>)
 800531e:	0018      	movs	r0, r3
 8005320:	f002 f888 	bl	8007434 <puts>
 8005324:	e012      	b.n	800534c <main+0xf8>
		  }
		  else if(status == HAL_BUSY) {
 8005326:	230e      	movs	r3, #14
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d104      	bne.n	800533a <main+0xe6>
			  printf("Negotiation returned busy\n");
 8005330:	4b11      	ldr	r3, [pc, #68]	; (8005378 <main+0x124>)
 8005332:	0018      	movs	r0, r3
 8005334:	f002 f87e 	bl	8007434 <puts>
 8005338:	e008      	b.n	800534c <main+0xf8>
		  }
		  else if(status == HAL_ERROR) {
 800533a:	230e      	movs	r3, #14
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d103      	bne.n	800534c <main+0xf8>
			  printf("Negotiation Error!\n");
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <main+0x128>)
 8005346:	0018      	movs	r0, r3
 8005348:	f002 f874 	bl	8007434 <puts>
		  }
	  }
	  last_attach = attached;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <main+0x108>)
 800534e:	220f      	movs	r2, #15
 8005350:	18ba      	adds	r2, r7, r2
 8005352:	7812      	ldrb	r2, [r2, #0]
 8005354:	701a      	strb	r2, [r3, #0]
  {
 8005356:	e78e      	b.n	8005276 <main+0x22>
 8005358:	080092c0 	.word	0x080092c0
 800535c:	20000274 	.word	0x20000274
 8005360:	080092d0 	.word	0x080092d0
 8005364:	080092e8 	.word	0x080092e8
 8005368:	08009300 	.word	0x08009300
 800536c:	08009310 	.word	0x08009310
 8005370:	08009320 	.word	0x08009320
 8005374:	08009330 	.word	0x08009330
 8005378:	08009348 	.word	0x08009348
 800537c:	08009364 	.word	0x08009364

08005380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005380:	b590      	push	{r4, r7, lr}
 8005382:	b099      	sub	sp, #100	; 0x64
 8005384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005386:	242c      	movs	r4, #44	; 0x2c
 8005388:	193b      	adds	r3, r7, r4
 800538a:	0018      	movs	r0, r3
 800538c:	2334      	movs	r3, #52	; 0x34
 800538e:	001a      	movs	r2, r3
 8005390:	2100      	movs	r1, #0
 8005392:	f001 fb6f 	bl	8006a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005396:	231c      	movs	r3, #28
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	0018      	movs	r0, r3
 800539c:	2310      	movs	r3, #16
 800539e:	001a      	movs	r2, r3
 80053a0:	2100      	movs	r1, #0
 80053a2:	f001 fb67 	bl	8006a74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053a6:	003b      	movs	r3, r7
 80053a8:	0018      	movs	r0, r3
 80053aa:	231c      	movs	r3, #28
 80053ac:	001a      	movs	r2, r3
 80053ae:	2100      	movs	r1, #0
 80053b0:	f001 fb60 	bl	8006a74 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80053b4:	193b      	adds	r3, r7, r4
 80053b6:	2220      	movs	r2, #32
 80053b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80053ba:	193b      	adds	r3, r7, r4
 80053bc:	2201      	movs	r2, #1
 80053be:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80053c0:	193b      	adds	r3, r7, r4
 80053c2:	2200      	movs	r2, #0
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053c6:	193b      	adds	r3, r7, r4
 80053c8:	0018      	movs	r0, r3
 80053ca:	f7fe fad1 	bl	8003970 <HAL_RCC_OscConfig>
 80053ce:	1e03      	subs	r3, r0, #0
 80053d0:	d001      	beq.n	80053d6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80053d2:	f000 f84f 	bl	8005474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053d6:	211c      	movs	r1, #28
 80053d8:	187b      	adds	r3, r7, r1
 80053da:	2207      	movs	r2, #7
 80053dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80053de:	187b      	adds	r3, r7, r1
 80053e0:	2203      	movs	r2, #3
 80053e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053e4:	187b      	adds	r3, r7, r1
 80053e6:	2200      	movs	r2, #0
 80053e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80053ea:	187b      	adds	r3, r7, r1
 80053ec:	2280      	movs	r2, #128	; 0x80
 80053ee:	00d2      	lsls	r2, r2, #3
 80053f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80053f2:	187b      	adds	r3, r7, r1
 80053f4:	2101      	movs	r1, #1
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7fe fe1a 	bl	8004030 <HAL_RCC_ClockConfig>
 80053fc:	1e03      	subs	r3, r0, #0
 80053fe:	d001      	beq.n	8005404 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8005400:	f000 f838 	bl	8005474 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005404:	003b      	movs	r3, r7
 8005406:	2202      	movs	r2, #2
 8005408:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800540a:	003b      	movs	r3, r7
 800540c:	2200      	movs	r2, #0
 800540e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005410:	003b      	movs	r3, r7
 8005412:	0018      	movs	r0, r3
 8005414:	f7fe ffb4 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 8005418:	1e03      	subs	r3, r0, #0
 800541a:	d001      	beq.n	8005420 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800541c:	f000 f82a 	bl	8005474 <Error_Handler>
  }
}
 8005420:	46c0      	nop			; (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b019      	add	sp, #100	; 0x64
 8005426:	bd90      	pop	{r4, r7, pc}

08005428 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	0002      	movs	r2, r0
 8005430:	1dbb      	adds	r3, r7, #6
 8005432:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == ATTACH_Pin) {
 8005434:	1dbb      	adds	r3, r7, #6
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d10d      	bne.n	8005458 <HAL_GPIO_EXTI_Callback+0x30>
    	if(!HAL_GPIO_ReadPin(ATTACH_GPIO_Port, GPIO_Pin)) { //x:0-15
 800543c:	1dbb      	adds	r3, r7, #6
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	4a0b      	ldr	r2, [pc, #44]	; (8005470 <HAL_GPIO_EXTI_Callback+0x48>)
 8005442:	0019      	movs	r1, r3
 8005444:	0010      	movs	r0, r2
 8005446:	f7fd fd1d 	bl	8002e84 <HAL_GPIO_ReadPin>
 800544a:	1e03      	subs	r3, r0, #0
 800544c:	d102      	bne.n	8005454 <HAL_GPIO_EXTI_Callback+0x2c>
    		pd_onAttach(); //will automatically time out if this is unsuccessful
 800544e:	f000 ffb7 	bl	80063c0 <pd_onAttach>
 8005452:	e001      	b.n	8005458 <HAL_GPIO_EXTI_Callback+0x30>
    	} else {
    		pd_onDetach(); //only runs when a source has been attached
 8005454:	f000 fffa 	bl	800644c <pd_onDetach>
    	}
    }

    if (GPIO_Pin == USB_ALT_Pin) {
 8005458:	1dbb      	adds	r3, r7, #6
 800545a:	881a      	ldrh	r2, [r3, #0]
 800545c:	2380      	movs	r3, #128	; 0x80
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	429a      	cmp	r2, r3
 8005462:	d101      	bne.n	8005468 <HAL_GPIO_EXTI_Callback+0x40>
    	pd_onAlert();
 8005464:	f001 f820 	bl	80064a8 <pd_onAlert>
    }
}
 8005468:	46c0      	nop			; (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b002      	add	sp, #8
 800546e:	bd80      	pop	{r7, pc}
 8005470:	48000400 	.word	0x48000400

08005474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005478:	46c0      	nop			; (mov r8, r8)
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005486:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <HAL_MspInit+0x44>)
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <HAL_MspInit+0x44>)
 800548c:	2101      	movs	r1, #1
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
 8005492:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <HAL_MspInit+0x44>)
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2201      	movs	r2, #1
 8005498:	4013      	ands	r3, r2
 800549a:	607b      	str	r3, [r7, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800549e:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <HAL_MspInit+0x44>)
 80054a0:	69da      	ldr	r2, [r3, #28]
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <HAL_MspInit+0x44>)
 80054a4:	2180      	movs	r1, #128	; 0x80
 80054a6:	0549      	lsls	r1, r1, #21
 80054a8:	430a      	orrs	r2, r1
 80054aa:	61da      	str	r2, [r3, #28]
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_MspInit+0x44>)
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	055b      	lsls	r3, r3, #21
 80054b4:	4013      	ands	r3, r2
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	b002      	add	sp, #8
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	40021000 	.word	0x40021000

080054c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054d6:	e7fe      	b.n	80054d6 <HardFault_Handler+0x4>

080054d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054f0:	f7fd fa3e 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80054fe:	2002      	movs	r0, #2
 8005500:	f7fd fcfa 	bl	8002ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8005504:	46c0      	nop			; (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	0018      	movs	r0, r3
 8005514:	f7fd fcf0 	bl	8002ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <pd_init>:
volatile static bool psready_received; //flag that says if we've received a PS_RDY message

volatile static bool attached; //just a little flag variable that makes things convenient, updated from interrupt context!

//================== PUBLIC FUNCTIONS ===================
HAL_StatusTypeDef pd_init() {
 800551e:	b5b0      	push	{r4, r5, r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	//read the deviceID, make sure it's 0x21 or 0x25
	uint8_t buf;
	status = i2c_read_reg(STUSB_ADDR, DEVICE_ID_REG, &buf);
 8005524:	230f      	movs	r3, #15
 8005526:	18fc      	adds	r4, r7, r3
 8005528:	250e      	movs	r5, #14
 800552a:	197b      	adds	r3, r7, r5
 800552c:	001a      	movs	r2, r3
 800552e:	212f      	movs	r1, #47	; 0x2f
 8005530:	2050      	movs	r0, #80	; 0x50
 8005532:	f7ff fd61 	bl	8004ff8 <i2c_read_reg>
 8005536:	0003      	movs	r3, r0
 8005538:	7023      	strb	r3, [r4, #0]
	if(buf != 0x21 && buf != 0x25) return HAL_ERROR;	//return error if we don't get an expected deviceID
 800553a:	197b      	adds	r3, r7, r5
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b21      	cmp	r3, #33	; 0x21
 8005540:	d006      	beq.n	8005550 <pd_init+0x32>
 8005542:	230e      	movs	r3, #14
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b25      	cmp	r3, #37	; 0x25
 800554a:	d001      	beq.n	8005550 <pd_init+0x32>
 800554c:	2301      	movs	r3, #1
 800554e:	e035      	b.n	80055bc <pd_init+0x9e>
	if(status != HAL_OK) return status;
 8005550:	230f      	movs	r3, #15
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <pd_init+0x44>
 800555a:	230f      	movs	r3, #15
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	e02c      	b.n	80055bc <pd_init+0x9e>

	//enable the interrupts that we care about
	//don't need to worry about the attach detection, phy interrupts, and type-c status
	Alt_S1Reg_Map alt_sreg_mask;
	alt_sreg_mask.data = 0xFF; //mask everything at the start
 8005562:	200c      	movs	r0, #12
 8005564:	183b      	adds	r3, r7, r0
 8005566:	22ff      	movs	r2, #255	; 0xff
 8005568:	701a      	strb	r2, [r3, #0]
	alt_sreg_mask.map.prt_mask = 0; //interrupt when we receive a new protocol message
 800556a:	183b      	adds	r3, r7, r0
 800556c:	781a      	ldrb	r2, [r3, #0]
 800556e:	2102      	movs	r1, #2
 8005570:	438a      	bics	r2, r1
 8005572:	701a      	strb	r2, [r3, #0]
	//alt_sreg_mask.map.tcmon_mask = 0; //interrupt when vbus crosses an invalid threshold
	alt_sreg_mask.map.ccfault_mask = 0; //interrupt when we detect an error on the CC lines
 8005574:	183b      	adds	r3, r7, r0
 8005576:	781a      	ldrb	r2, [r3, #0]
 8005578:	2110      	movs	r1, #16
 800557a:	438a      	bics	r2, r1
 800557c:	701a      	strb	r2, [r3, #0]
	alt_sreg_mask.map.hreset_mask = 0; //interrupt when we receive a hard reset
 800557e:	183b      	adds	r3, r7, r0
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	217f      	movs	r1, #127	; 0x7f
 8005584:	400a      	ands	r2, r1
 8005586:	701a      	strb	r2, [r3, #0]
	status = i2c_write_reg(STUSB_ADDR, ALERT_STATUS_1_MASK_REG, alt_sreg_mask.data);
 8005588:	183b      	adds	r3, r7, r0
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	250f      	movs	r5, #15
 800558e:	197c      	adds	r4, r7, r5
 8005590:	001a      	movs	r2, r3
 8005592:	210c      	movs	r1, #12
 8005594:	2050      	movs	r0, #80	; 0x50
 8005596:	f7ff fd71 	bl	800507c <i2c_write_reg>
 800559a:	0003      	movs	r3, r0
 800559c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 800559e:	197b      	adds	r3, r7, r5
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <pd_init+0x90>
 80055a6:	230f      	movs	r3, #15
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	e006      	b.n	80055bc <pd_init+0x9e>

	//read 12 bytes starting at 0x0B (the ALERT_STATUS_1_REG buffer)
	//not 100% sure why we have to do this but the sample code does this?
	uint8_t throwaway[12];
	return i2c_read_regs(STUSB_ADDR, ALERT_STATUS_1_REG, 12, throwaway);
 80055ae:	003b      	movs	r3, r7
 80055b0:	220c      	movs	r2, #12
 80055b2:	210b      	movs	r1, #11
 80055b4:	2050      	movs	r0, #80	; 0x50
 80055b6:	f7ff fd9f 	bl	80050f8 <i2c_read_regs>
 80055ba:	0003      	movs	r3, r0
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	b004      	add	sp, #16
 80055c2:	bdb0      	pop	{r4, r5, r7, pc}

080055c4 <pd_send_soft_reset>:

	//write '0' to the LSB of the RESET_CTRL_REGISTER
	return i2c_write_reg(STUSB_ADDR, RESET_CTRL_REG, 0x00);
}

HAL_StatusTypeDef pd_send_soft_reset() {
 80055c4:	b590      	push	{r4, r7, lr}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
	//dude like this entire "methodology" isn't in the datasheet and uses "ghost" registers lol
	//like none of these registers are in the datasheet
	//but just following what the sample code is doingggggg

	//send 0x0D to the TX_HEADER register (x51, not in the datasheet)
	status = i2c_write_reg(STUSB_ADDR, TX_HEADER_REG, 0x0D);
 80055ca:	1dfc      	adds	r4, r7, #7
 80055cc:	220d      	movs	r2, #13
 80055ce:	2151      	movs	r1, #81	; 0x51
 80055d0:	2050      	movs	r0, #80	; 0x50
 80055d2:	f7ff fd53 	bl	800507c <i2c_write_reg>
 80055d6:	0003      	movs	r3, r0
 80055d8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80055da:	1dfb      	adds	r3, r7, #7
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <pd_send_soft_reset+0x24>
 80055e2:	1dfb      	adds	r3, r7, #7
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	e005      	b.n	80055f4 <pd_send_soft_reset+0x30>

	//send 0x26 to the STUSB_GEN1S_CMD_CTRL register (x1A, not in the datasheet)
	return i2c_write_reg(STUSB_ADDR, STUSB_GEN1S_CMD_CTRL_REG, 0x26);
 80055e8:	2226      	movs	r2, #38	; 0x26
 80055ea:	211a      	movs	r1, #26
 80055ec:	2050      	movs	r0, #80	; 0x50
 80055ee:	f7ff fd45 	bl	800507c <i2c_write_reg>
 80055f2:	0003      	movs	r3, r0
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b003      	add	sp, #12
 80055fa:	bd90      	pop	{r4, r7, pc}

080055fc <pd_read_rdo>:
	for(int i = 0; i < num_source_pdos; i++) pdos[i] = source_pdos[i];

	return HAL_OK;
}

HAL_StatusTypeDef pd_read_rdo(RDOTypedef* rdo) {
 80055fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	uint8_t rdo_data[4];
	status = i2c_read_regs(STUSB_ADDR, DPM_REQ_RDO1, 4, rdo_data);
 8005604:	260f      	movs	r6, #15
 8005606:	19bc      	adds	r4, r7, r6
 8005608:	2108      	movs	r1, #8
 800560a:	000d      	movs	r5, r1
 800560c:	187b      	adds	r3, r7, r1
 800560e:	2204      	movs	r2, #4
 8005610:	2191      	movs	r1, #145	; 0x91
 8005612:	2050      	movs	r0, #80	; 0x50
 8005614:	f7ff fd70 	bl	80050f8 <i2c_read_regs>
 8005618:	0003      	movs	r3, r0
 800561a:	7023      	strb	r3, [r4, #0]

	//concatenate the four bytes into one PDO structure which we passed
	rdo->data = (rdo_data[0]) | (rdo_data[1] << 8) | (rdo_data[2] << 16) | (rdo_data[3] << 24);
 800561c:	0029      	movs	r1, r5
 800561e:	187b      	adds	r3, r7, r1
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	001a      	movs	r2, r3
 8005624:	187b      	adds	r3, r7, r1
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	431a      	orrs	r2, r3
 800562c:	187b      	adds	r3, r7, r1
 800562e:	789b      	ldrb	r3, [r3, #2]
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	431a      	orrs	r2, r3
 8005634:	187b      	adds	r3, r7, r1
 8005636:	78db      	ldrb	r3, [r3, #3]
 8005638:	061b      	lsls	r3, r3, #24
 800563a:	4313      	orrs	r3, r2
 800563c:	001a      	movs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]

	return status;
 8005642:	19bb      	adds	r3, r7, r6
 8005644:	781b      	ldrb	r3, [r3, #0]
}
 8005646:	0018      	movs	r0, r3
 8005648:	46bd      	mov	sp, r7
 800564a:	b005      	add	sp, #20
 800564c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800564e <pd_update_sink_pdo>:

HAL_StatusTypeDef pd_update_sink_pdo(uint8_t pdo_index, PDOTypedef* new_pdo) {
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	0002      	movs	r2, r0
 8005656:	6039      	str	r1, [r7, #0]
 8005658:	1dfb      	adds	r3, r7, #7
 800565a:	701a      	strb	r2, [r3, #0]
	//break down the new PDO into 4 byte messages
	//we'll save the first index for the particular pdo register that we want to update
	uint8_t pdo_buf[5];
	pdo_buf[1] = new_pdo->data & 0xFF;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	2108      	movs	r1, #8
 8005664:	187b      	adds	r3, r7, r1
 8005666:	705a      	strb	r2, [r3, #1]
	pdo_buf[2] = (new_pdo->data >> 8) & 0xFF;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	b2da      	uxtb	r2, r3
 8005670:	187b      	adds	r3, r7, r1
 8005672:	709a      	strb	r2, [r3, #2]
	pdo_buf[3] = (new_pdo->data >> 16) & 0xFF;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	b2da      	uxtb	r2, r3
 800567c:	187b      	adds	r3, r7, r1
 800567e:	70da      	strb	r2, [r3, #3]
	pdo_buf[4] = (new_pdo->data >> 24) & 0xFF;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	0e1b      	lsrs	r3, r3, #24
 8005686:	b2da      	uxtb	r2, r3
 8005688:	187b      	adds	r3, r7, r1
 800568a:	711a      	strb	r2, [r3, #4]

	//only allow updates to PDO2 and PDO3 (PDO1 MUST be 5V so we get some sort of nego
	if(pdo_index == 2) {
 800568c:	1dfb      	adds	r3, r7, #7
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d10b      	bne.n	80056ac <pd_update_sink_pdo+0x5e>
		pdo_buf[0] = DPM_SNK_PDO2;
 8005694:	2108      	movs	r1, #8
 8005696:	187b      	adds	r3, r7, r1
 8005698:	2289      	movs	r2, #137	; 0x89
 800569a:	701a      	strb	r2, [r3, #0]
		return i2c_write_regs(STUSB_ADDR, pdo_buf, 5);
 800569c:	187b      	adds	r3, r7, r1
 800569e:	2205      	movs	r2, #5
 80056a0:	0019      	movs	r1, r3
 80056a2:	2050      	movs	r0, #80	; 0x50
 80056a4:	f7ff fd74 	bl	8005190 <i2c_write_regs>
 80056a8:	0003      	movs	r3, r0
 80056aa:	e010      	b.n	80056ce <pd_update_sink_pdo+0x80>
	}
	else if(pdo_index == 3) {
 80056ac:	1dfb      	adds	r3, r7, #7
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d10b      	bne.n	80056cc <pd_update_sink_pdo+0x7e>
		pdo_buf[0] = DPM_SNK_PDO3;
 80056b4:	2108      	movs	r1, #8
 80056b6:	187b      	adds	r3, r7, r1
 80056b8:	228d      	movs	r2, #141	; 0x8d
 80056ba:	701a      	strb	r2, [r3, #0]
		return i2c_write_regs(STUSB_ADDR, pdo_buf, 5);
 80056bc:	187b      	adds	r3, r7, r1
 80056be:	2205      	movs	r2, #5
 80056c0:	0019      	movs	r1, r3
 80056c2:	2050      	movs	r0, #80	; 0x50
 80056c4:	f7ff fd64 	bl	8005190 <i2c_write_regs>
 80056c8:	0003      	movs	r3, r0
 80056ca:	e000      	b.n	80056ce <pd_update_sink_pdo+0x80>
	}

	//this means that the PDO index wasn't 2 or 3, so the PDO wasn't updated
	return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b004      	add	sp, #16
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <pd_update_num_pdos>:

HAL_StatusTypeDef pd_update_num_pdos(uint8_t num_active_pdos) {
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	0002      	movs	r2, r0
 80056de:	1dfb      	adds	r3, r7, #7
 80056e0:	701a      	strb	r2, [r3, #0]
	//constrain the number of active pdos from 1-3
	num_active_pdos = num_active_pdos < 1 ? 1 : (num_active_pdos > 3 ? 3 : num_active_pdos);
 80056e2:	1dfb      	adds	r3, r7, #7
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <pd_update_num_pdos+0x24>
 80056ea:	1dfb      	adds	r3, r7, #7
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	2a03      	cmp	r2, #3
 80056f2:	d900      	bls.n	80056f6 <pd_update_num_pdos+0x20>
 80056f4:	2303      	movs	r3, #3
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	e000      	b.n	80056fc <pd_update_num_pdos+0x26>
 80056fa:	2201      	movs	r2, #1
 80056fc:	1dfb      	adds	r3, r7, #7
 80056fe:	701a      	strb	r2, [r3, #0]

	//write that value to the DPM_PDO_NUMB register
	return i2c_write_reg(STUSB_ADDR, DPM_PDO_NUMB_REG, num_active_pdos);
 8005700:	1dfb      	adds	r3, r7, #7
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	001a      	movs	r2, r3
 8005706:	2170      	movs	r1, #112	; 0x70
 8005708:	2050      	movs	r0, #80	; 0x50
 800570a:	f7ff fcb7 	bl	800507c <i2c_write_reg>
 800570e:	0003      	movs	r3, r0
}
 8005710:	0018      	movs	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}

08005718 <pd_request_pdo_num>:
HAL_StatusTypeDef pd_typec_info(CC_Reg_Map* infobuf) {
	//basically just reading from the CC_STATUS register and returning the value
	return i2c_read_reg(STUSB_ADDR, CC_STATUS_REG, &infobuf->data);
}

HAL_StatusTypeDef pd_request_pdo_num(uint8_t pdo_index) {
 8005718:	b5b0      	push	{r4, r5, r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	0002      	movs	r2, r0
 8005720:	1dfb      	adds	r3, r7, #7
 8005722:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	//sanity check our index
	if(pdo_index < 1 || pdo_index > num_source_pdos) return HAL_ERROR;
 8005724:	1dfb      	adds	r3, r7, #7
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d006      	beq.n	800573a <pd_request_pdo_num+0x22>
 800572c:	4b1e      	ldr	r3, [pc, #120]	; (80057a8 <pd_request_pdo_num+0x90>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	1dfa      	adds	r2, r7, #7
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d901      	bls.n	800573e <pd_request_pdo_num+0x26>
 800573a:	2301      	movs	r3, #1
 800573c:	e030      	b.n	80057a0 <pd_request_pdo_num+0x88>

	//read the PDO at our index
	PDOTypedef PDO_to_request;
	PDO_to_request = source_pdos[pdo_index-1];
 800573e:	1dfb      	adds	r3, r7, #7
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	1e5a      	subs	r2, r3, #1
 8005744:	4b19      	ldr	r3, [pc, #100]	; (80057ac <pd_request_pdo_num+0x94>)
 8005746:	0092      	lsls	r2, r2, #2
 8005748:	58d3      	ldr	r3, [r2, r3]
 800574a:	60bb      	str	r3, [r7, #8]

	printf("Requesting this PDO: 0x%lx\n", PDO_to_request.data);
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <pd_request_pdo_num+0x98>)
 8005750:	0011      	movs	r1, r2
 8005752:	0018      	movs	r0, r3
 8005754:	f001 fdf4 	bl	8007340 <iprintf>

	//write that PDO to index 2 and set the number of PDOs to 2
	status = pd_update_sink_pdo(2, &PDO_to_request);
 8005758:	250f      	movs	r5, #15
 800575a:	197c      	adds	r4, r7, r5
 800575c:	2308      	movs	r3, #8
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	0019      	movs	r1, r3
 8005762:	2002      	movs	r0, #2
 8005764:	f7ff ff73 	bl	800564e <pd_update_sink_pdo>
 8005768:	0003      	movs	r3, r0
 800576a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 800576c:	197b      	adds	r3, r7, r5
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <pd_request_pdo_num+0x64>
 8005774:	230f      	movs	r3, #15
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	e011      	b.n	80057a0 <pd_request_pdo_num+0x88>
	status = pd_update_num_pdos(2);
 800577c:	250f      	movs	r5, #15
 800577e:	197c      	adds	r4, r7, r5
 8005780:	2002      	movs	r0, #2
 8005782:	f7ff ffa8 	bl	80056d6 <pd_update_num_pdos>
 8005786:	0003      	movs	r3, r0
 8005788:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 800578a:	197b      	adds	r3, r7, r5
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <pd_request_pdo_num+0x82>
 8005792:	230f      	movs	r3, #15
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	e002      	b.n	80057a0 <pd_request_pdo_num+0x88>

	//send a soft reset command to force renegotiation
	return pd_send_soft_reset();
 800579a:	f7ff ff13 	bl	80055c4 <pd_send_soft_reset>
 800579e:	0003      	movs	r3, r0
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b004      	add	sp, #16
 80057a6:	bdb0      	pop	{r4, r5, r7, pc}
 80057a8:	200001f1 	.word	0x200001f1
 80057ac:	200001f4 	.word	0x200001f4
 80057b0:	08009378 	.word	0x08009378

080057b4 <pd_auto_nego>:

/* TODO: write pd_auto_nego function! (namely how retries work) */
//call this to automatically negotiate a contract
//type C device must be attached for nego to be successful
HAL_StatusTypeDef pd_auto_nego(float* voltage, float* current, float* power) {
 80057b4:	b5b0      	push	{r4, r5, r7, lr}
 80057b6:	b09c      	sub	sp, #112	; 0x70
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
	HAL_Delay(NEGO_WAIT_TIME); //wait for the source to chill out for a little
 80057c0:	23fa      	movs	r3, #250	; 0xfa
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	0018      	movs	r0, r3
 80057c6:	f7fd f8e9 	bl	800299c <HAL_Delay>

	/* ========= prepare to negotiate ========= */
	HAL_StatusTypeDef status;
	pdo_received = false; //clear the PDO received flag
 80057ca:	4bd2      	ldr	r3, [pc, #840]	; (8005b14 <pd_auto_nego+0x360>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
	uint8_t retry_counter = NEGO_NUM_RETRIES;
 80057d0:	2367      	movs	r3, #103	; 0x67
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	2205      	movs	r2, #5
 80057d6:	701a      	strb	r2, [r3, #0]
	uint32_t timeout_counter = HAL_GetTick();
 80057d8:	f7fd f8d6 	bl	8002988 <HAL_GetTick>
 80057dc:	0003      	movs	r3, r0
 80057de:	663b      	str	r3, [r7, #96]	; 0x60
	printf("Starting Negotiation...\n");
 80057e0:	4bcd      	ldr	r3, [pc, #820]	; (8005b18 <pd_auto_nego+0x364>)
 80057e2:	0018      	movs	r0, r3
 80057e4:	f001 fe26 	bl	8007434 <puts>

	/* ========== Actually do the negotiation, with finite retries and timeouts =========== */
	while(true) {
		//send a soft reset
		status = pd_send_soft_reset();
 80057e8:	254f      	movs	r5, #79	; 0x4f
 80057ea:	197c      	adds	r4, r7, r5
 80057ec:	f7ff feea 	bl	80055c4 <pd_send_soft_reset>
 80057f0:	0003      	movs	r3, r0
 80057f2:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK) return status;
 80057f4:	197b      	adds	r3, r7, r5
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <pd_auto_nego+0x52>
 80057fc:	234f      	movs	r3, #79	; 0x4f
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	f000 fdb8 	bl	8006376 <pd_auto_nego+0xbc2>

		//do nothing until we either receive a PDO or timeout
		while(!pdo_received && (HAL_GetTick() - timeout_counter) < NEGO_WAIT_TIME);
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	4bc2      	ldr	r3, [pc, #776]	; (8005b14 <pd_auto_nego+0x360>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2201      	movs	r2, #1
 8005810:	4053      	eors	r3, r2
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <pd_auto_nego+0x74>
 8005818:	f7fd f8b6 	bl	8002988 <HAL_GetTick>
 800581c:	0002      	movs	r2, r0
 800581e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	4abe      	ldr	r2, [pc, #760]	; (8005b1c <pd_auto_nego+0x368>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d9ef      	bls.n	8005808 <pd_auto_nego+0x54>

		//if we received a PDO, skip to the check portion of this loop
		//don't need to decrement the retry counter and try to hunt for more PDOs
		if(pdo_received) goto CheckPDO;
 8005828:	4bba      	ldr	r3, [pc, #744]	; (8005b14 <pd_auto_nego+0x360>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d11c      	bne.n	800586c <pd_auto_nego+0xb8>

		//decrement the retry counter, and skip the rest of the code, check if we have retried too many times
		retry_counter--;
 8005832:	2467      	movs	r4, #103	; 0x67
 8005834:	193b      	adds	r3, r7, r4
 8005836:	781a      	ldrb	r2, [r3, #0]
 8005838:	193b      	adds	r3, r7, r4
 800583a:	3a01      	subs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
		printf("No PDOs Received!\n");
 800583e:	4bb8      	ldr	r3, [pc, #736]	; (8005b20 <pd_auto_nego+0x36c>)
 8005840:	0018      	movs	r0, r3
 8005842:	f001 fdf7 	bl	8007434 <puts>
		printf("Retry Counter: %d\n", retry_counter);
 8005846:	193b      	adds	r3, r7, r4
 8005848:	781a      	ldrb	r2, [r3, #0]
 800584a:	4bb6      	ldr	r3, [pc, #728]	; (8005b24 <pd_auto_nego+0x370>)
 800584c:	0011      	movs	r1, r2
 800584e:	0018      	movs	r0, r3
 8005850:	f001 fd76 	bl	8007340 <iprintf>
		if(retry_counter == 0) break;
 8005854:	193b      	adds	r3, r7, r4
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <pd_auto_nego+0xac>
 800585c:	f000 fd81 	bl	8006362 <pd_auto_nego+0xbae>
		timeout_counter = HAL_GetTick(); //reset the timeout counter
 8005860:	f7fd f892 	bl	8002988 <HAL_GetTick>
 8005864:	0003      	movs	r3, r0
 8005866:	663b      	str	r3, [r7, #96]	; 0x60
		continue; //skip the rest of the loop so we try to hunt for another PDO
 8005868:	f000 fd79 	bl	800635e <pd_auto_nego+0xbaa>
		if(pdo_received) goto CheckPDO;
 800586c:	46c0      	nop			; (mov r8, r8)

CheckPDO:
		printf("Received PDOs! Quantity: %d\n", num_source_pdos);
 800586e:	4bae      	ldr	r3, [pc, #696]	; (8005b28 <pd_auto_nego+0x374>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	001a      	movs	r2, r3
 8005876:	4bad      	ldr	r3, [pc, #692]	; (8005b2c <pd_auto_nego+0x378>)
 8005878:	0011      	movs	r1, r2
 800587a:	0018      	movs	r0, r3
 800587c:	f001 fd60 	bl	8007340 <iprintf>
		for(int i = 0; i < num_source_pdos; i++) {
 8005880:	2300      	movs	r3, #0
 8005882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005884:	e00c      	b.n	80058a0 <pd_auto_nego+0xec>
			printf("\tPDO number %d: %lx\n", i+1, source_pdos[i].data);
 8005886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005888:	1c59      	adds	r1, r3, #1
 800588a:	4ba9      	ldr	r3, [pc, #676]	; (8005b30 <pd_auto_nego+0x37c>)
 800588c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800588e:	0092      	lsls	r2, r2, #2
 8005890:	58d2      	ldr	r2, [r2, r3]
 8005892:	4ba8      	ldr	r3, [pc, #672]	; (8005b34 <pd_auto_nego+0x380>)
 8005894:	0018      	movs	r0, r3
 8005896:	f001 fd53 	bl	8007340 <iprintf>
		for(int i = 0; i < num_source_pdos; i++) {
 800589a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800589c:	3301      	adds	r3, #1
 800589e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058a0:	4ba1      	ldr	r3, [pc, #644]	; (8005b28 <pd_auto_nego+0x374>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	001a      	movs	r2, r3
 80058a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058aa:	4293      	cmp	r3, r2
 80058ac:	dbeb      	blt.n	8005886 <pd_auto_nego+0xd2>
		}

		/* ======= if we've made it this far, we have PDOs to parse through ======= */
		//the first PDO is always 5V and has some weird readouts
		//so we'll just never charge if we only have a single PDO
		if(num_source_pdos <= 1) break;
 80058ae:	4b9e      	ldr	r3, [pc, #632]	; (8005b28 <pd_auto_nego+0x374>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d801      	bhi.n	80058bc <pd_auto_nego+0x108>
 80058b8:	f000 fd55 	bl	8006366 <pd_auto_nego+0xbb2>

		//iterate over all the PDOs except the first one
		int8_t select_pdo_index = -1; //our "invalid" signal
 80058bc:	235b      	movs	r3, #91	; 0x5b
 80058be:	18fb      	adds	r3, r7, r3
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	701a      	strb	r2, [r3, #0]
		float max_power = MIN_CHARGE_POWER; //holds the peak power that we can draw from the source
 80058c4:	4b9c      	ldr	r3, [pc, #624]	; (8005b38 <pd_auto_nego+0x384>)
 80058c6:	657b      	str	r3, [r7, #84]	; 0x54
			//initializing this to MIN_CHARGE_POWER forces a contract that's higher than this
		//defining a bunch floating point numbers again
		float pdo_voltage, pdo_vmin, pdo_vmax, pdo_current, pdo_power;
		float imin, imax, pmin, pmax, duty_cycle, i_ripple;
		for(int i = 1; i < num_source_pdos; i++) {
 80058c8:	2301      	movs	r3, #1
 80058ca:	653b      	str	r3, [r7, #80]	; 0x50
 80058cc:	f000 fbca 	bl	8006064 <pd_auto_nego+0x8b0>
			PDOTypedef pdo = source_pdos[i]; //just kinda convenient to manipulate the pdo this way
 80058d0:	4b97      	ldr	r3, [pc, #604]	; (8005b30 <pd_auto_nego+0x37c>)
 80058d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058d4:	0092      	lsls	r2, r2, #2
 80058d6:	58d3      	ldr	r3, [r2, r3]
 80058d8:	61fb      	str	r3, [r7, #28]
			//	(see page 14 of this datasheet: https://www.analog.com/media/en/technical-documentation/data-sheets/3783fb.pdf)
			//in our case, inductor average current is our PDO current
			//and our ripple current is a function of some converter constants and PDO voltage

			//treat the different pdo types differently
			switch(pdo.type.identifier) {
 80058da:	231f      	movs	r3, #31
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	061b      	lsls	r3, r3, #24
 80058e2:	0f9b      	lsrs	r3, r3, #30
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d100      	bne.n	80058ec <pd_auto_nego+0x138>
 80058ea:	e149      	b.n	8005b80 <pd_auto_nego+0x3cc>
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d100      	bne.n	80058f2 <pd_auto_nego+0x13e>
 80058f0:	e276      	b.n	8005de0 <pd_auto_nego+0x62c>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d000      	beq.n	80058f8 <pd_auto_nego+0x144>
						select_pdo_index = i;  // select this PDO
						break;
					}
				}

			default : break;
 80058f6:	e3a1      	b.n	800603c <pd_auto_nego+0x888>
				printf("PDO %d is a FIXED SUPPLY\n", i+1);
 80058f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	4b8f      	ldr	r3, [pc, #572]	; (8005b3c <pd_auto_nego+0x388>)
 80058fe:	0011      	movs	r1, r2
 8005900:	0018      	movs	r0, r3
 8005902:	f001 fd1d 	bl	8007340 <iprintf>
				printf("\tEncoded Voltage: 0x%x\n", pdo.fixed.Voltage);
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	031b      	lsls	r3, r3, #12
 800590a:	0d9b      	lsrs	r3, r3, #22
 800590c:	b29b      	uxth	r3, r3
 800590e:	001a      	movs	r2, r3
 8005910:	4b8b      	ldr	r3, [pc, #556]	; (8005b40 <pd_auto_nego+0x38c>)
 8005912:	0011      	movs	r1, r2
 8005914:	0018      	movs	r0, r3
 8005916:	f001 fd13 	bl	8007340 <iprintf>
				pdo_voltage = pdo.fixed.Voltage * 0.05; //1 LSB -> 50mV
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	031b      	lsls	r3, r3, #12
 800591e:	0d9b      	lsrs	r3, r3, #22
 8005920:	b29b      	uxth	r3, r3
 8005922:	0018      	movs	r0, r3
 8005924:	f7fc fe94 	bl	8002650 <__aeabi_i2d>
 8005928:	4a86      	ldr	r2, [pc, #536]	; (8005b44 <pd_auto_nego+0x390>)
 800592a:	4b87      	ldr	r3, [pc, #540]	; (8005b48 <pd_auto_nego+0x394>)
 800592c:	f7fc f884 	bl	8001a38 <__aeabi_dmul>
 8005930:	0003      	movs	r3, r0
 8005932:	000c      	movs	r4, r1
 8005934:	0018      	movs	r0, r3
 8005936:	0021      	movs	r1, r4
 8005938:	f7fc ff48 	bl	80027cc <__aeabi_d2f>
 800593c:	1c03      	adds	r3, r0, #0
 800593e:	623b      	str	r3, [r7, #32]
				pdo_current = pdo.fixed.Current * 0.01; //1 LSB -> 10mA
 8005940:	231c      	movs	r3, #28
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	059b      	lsls	r3, r3, #22
 8005948:	0d9b      	lsrs	r3, r3, #22
 800594a:	b29b      	uxth	r3, r3
 800594c:	0018      	movs	r0, r3
 800594e:	f7fc fe7f 	bl	8002650 <__aeabi_i2d>
 8005952:	4a7e      	ldr	r2, [pc, #504]	; (8005b4c <pd_auto_nego+0x398>)
 8005954:	4b7e      	ldr	r3, [pc, #504]	; (8005b50 <pd_auto_nego+0x39c>)
 8005956:	f7fc f86f 	bl	8001a38 <__aeabi_dmul>
 800595a:	0003      	movs	r3, r0
 800595c:	000c      	movs	r4, r1
 800595e:	0018      	movs	r0, r3
 8005960:	0021      	movs	r1, r4
 8005962:	f7fc ff33 	bl	80027cc <__aeabi_d2f>
 8005966:	1c03      	adds	r3, r0, #0
 8005968:	643b      	str	r3, [r7, #64]	; 0x40
				printf("\tPDO Voltage: %.2fV\n", pdo_voltage);
 800596a:	6a38      	ldr	r0, [r7, #32]
 800596c:	f7fc fedc 	bl	8002728 <__aeabi_f2d>
 8005970:	0003      	movs	r3, r0
 8005972:	000c      	movs	r4, r1
 8005974:	4977      	ldr	r1, [pc, #476]	; (8005b54 <pd_auto_nego+0x3a0>)
 8005976:	001a      	movs	r2, r3
 8005978:	0023      	movs	r3, r4
 800597a:	0008      	movs	r0, r1
 800597c:	f001 fce0 	bl	8007340 <iprintf>
				printf("\tPDO Current: %.2fA\n", pdo_current);
 8005980:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005982:	f7fc fed1 	bl	8002728 <__aeabi_f2d>
 8005986:	0003      	movs	r3, r0
 8005988:	000c      	movs	r4, r1
 800598a:	4973      	ldr	r1, [pc, #460]	; (8005b58 <pd_auto_nego+0x3a4>)
 800598c:	001a      	movs	r2, r3
 800598e:	0023      	movs	r3, r4
 8005990:	0008      	movs	r0, r1
 8005992:	f001 fcd5 	bl	8007340 <iprintf>
				duty_cycle = (BATTERY_FLOAT_V + DIODE_VF - pdo_voltage)/(BATTERY_FLOAT_V + DIODE_VF);
 8005996:	6a38      	ldr	r0, [r7, #32]
 8005998:	f7fc fec6 	bl	8002728 <__aeabi_f2d>
 800599c:	0003      	movs	r3, r0
 800599e:	000c      	movs	r4, r1
 80059a0:	001a      	movs	r2, r3
 80059a2:	0023      	movs	r3, r4
 80059a4:	486d      	ldr	r0, [pc, #436]	; (8005b5c <pd_auto_nego+0x3a8>)
 80059a6:	496e      	ldr	r1, [pc, #440]	; (8005b60 <pd_auto_nego+0x3ac>)
 80059a8:	f7fc fab8 	bl	8001f1c <__aeabi_dsub>
 80059ac:	0003      	movs	r3, r0
 80059ae:	000c      	movs	r4, r1
 80059b0:	0018      	movs	r0, r3
 80059b2:	0021      	movs	r1, r4
 80059b4:	4a69      	ldr	r2, [pc, #420]	; (8005b5c <pd_auto_nego+0x3a8>)
 80059b6:	4b6a      	ldr	r3, [pc, #424]	; (8005b60 <pd_auto_nego+0x3ac>)
 80059b8:	f7fb fc34 	bl	8001224 <__aeabi_ddiv>
 80059bc:	0003      	movs	r3, r0
 80059be:	000c      	movs	r4, r1
 80059c0:	0018      	movs	r0, r3
 80059c2:	0021      	movs	r1, r4
 80059c4:	f7fc ff02 	bl	80027cc <__aeabi_d2f>
 80059c8:	1c03      	adds	r3, r0, #0
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
				i_ripple = (pdo_voltage*duty_cycle/CHARGER_FSW)/L_INDUCTOR;
 80059cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059ce:	6a38      	ldr	r0, [r7, #32]
 80059d0:	f7fa ff90 	bl	80008f4 <__aeabi_fmul>
 80059d4:	1c03      	adds	r3, r0, #0
 80059d6:	4963      	ldr	r1, [pc, #396]	; (8005b64 <pd_auto_nego+0x3b0>)
 80059d8:	1c18      	adds	r0, r3, #0
 80059da:	f7fa fdb3 	bl	8000544 <__aeabi_fdiv>
 80059de:	1c03      	adds	r3, r0, #0
 80059e0:	1c18      	adds	r0, r3, #0
 80059e2:	f7fc fea1 	bl	8002728 <__aeabi_f2d>
 80059e6:	4a60      	ldr	r2, [pc, #384]	; (8005b68 <pd_auto_nego+0x3b4>)
 80059e8:	4b60      	ldr	r3, [pc, #384]	; (8005b6c <pd_auto_nego+0x3b8>)
 80059ea:	f7fb fc1b 	bl	8001224 <__aeabi_ddiv>
 80059ee:	0003      	movs	r3, r0
 80059f0:	000c      	movs	r4, r1
 80059f2:	0018      	movs	r0, r3
 80059f4:	0021      	movs	r1, r4
 80059f6:	f7fc fee9 	bl	80027cc <__aeabi_d2f>
 80059fa:	1c03      	adds	r3, r0, #0
 80059fc:	63bb      	str	r3, [r7, #56]	; 0x38
				imax = i_ripple/CHI_MIN;
 80059fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a00:	f7fc fe92 	bl	8002728 <__aeabi_f2d>
 8005a04:	4a4f      	ldr	r2, [pc, #316]	; (8005b44 <pd_auto_nego+0x390>)
 8005a06:	4b5a      	ldr	r3, [pc, #360]	; (8005b70 <pd_auto_nego+0x3bc>)
 8005a08:	f7fb fc0c 	bl	8001224 <__aeabi_ddiv>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	000c      	movs	r4, r1
 8005a10:	0018      	movs	r0, r3
 8005a12:	0021      	movs	r1, r4
 8005a14:	f7fc feda 	bl	80027cc <__aeabi_d2f>
 8005a18:	1c03      	adds	r3, r0, #0
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
				imin = i_ripple/CHI_MAX;
 8005a1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a1e:	f7fc fe83 	bl	8002728 <__aeabi_f2d>
 8005a22:	4a48      	ldr	r2, [pc, #288]	; (8005b44 <pd_auto_nego+0x390>)
 8005a24:	4b53      	ldr	r3, [pc, #332]	; (8005b74 <pd_auto_nego+0x3c0>)
 8005a26:	f7fb fbfd 	bl	8001224 <__aeabi_ddiv>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	000c      	movs	r4, r1
 8005a2e:	0018      	movs	r0, r3
 8005a30:	0021      	movs	r1, r4
 8005a32:	f7fc fecb 	bl	80027cc <__aeabi_d2f>
 8005a36:	1c03      	adds	r3, r0, #0
 8005a38:	633b      	str	r3, [r7, #48]	; 0x30
				printf("\tMinimum current given PDO voltage: %.2fA\n", imin);
 8005a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a3c:	f7fc fe74 	bl	8002728 <__aeabi_f2d>
 8005a40:	0003      	movs	r3, r0
 8005a42:	000c      	movs	r4, r1
 8005a44:	494c      	ldr	r1, [pc, #304]	; (8005b78 <pd_auto_nego+0x3c4>)
 8005a46:	001a      	movs	r2, r3
 8005a48:	0023      	movs	r3, r4
 8005a4a:	0008      	movs	r0, r1
 8005a4c:	f001 fc78 	bl	8007340 <iprintf>
				printf("\tMaximum current given PDO voltage: %.2fA\n", imax);
 8005a50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a52:	f7fc fe69 	bl	8002728 <__aeabi_f2d>
 8005a56:	0003      	movs	r3, r0
 8005a58:	000c      	movs	r4, r1
 8005a5a:	4948      	ldr	r1, [pc, #288]	; (8005b7c <pd_auto_nego+0x3c8>)
 8005a5c:	001a      	movs	r2, r3
 8005a5e:	0023      	movs	r3, r4
 8005a60:	0008      	movs	r0, r1
 8005a62:	f001 fc6d 	bl	8007340 <iprintf>
				if(pdo_current < imin) break; //current is too low
 8005a66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005a6a:	f7fa fd25 	bl	80004b8 <__aeabi_fcmplt>
 8005a6e:	1e03      	subs	r3, r0, #0
 8005a70:	d000      	beq.n	8005a74 <pd_auto_nego+0x2c0>
 8005a72:	e2d2      	b.n	800601a <pd_auto_nego+0x866>
				else if (pdo_current > imax) { //if the current is too high
 8005a74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a76:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005a78:	f7fa fd32 	bl	80004e0 <__aeabi_fcmpgt>
 8005a7c:	1e03      	subs	r3, r0, #0
 8005a7e:	d031      	beq.n	8005ae4 <pd_auto_nego+0x330>
					if((imax * pdo_voltage) < max_power) break; //if the maximum power we can use is still too low
 8005a80:	6a39      	ldr	r1, [r7, #32]
 8005a82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a84:	f7fa ff36 	bl	80008f4 <__aeabi_fmul>
 8005a88:	1c03      	adds	r3, r0, #0
 8005a8a:	1c19      	adds	r1, r3, #0
 8005a8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005a8e:	f7fa fd27 	bl	80004e0 <__aeabi_fcmpgt>
 8005a92:	1e03      	subs	r3, r0, #0
 8005a94:	d000      	beq.n	8005a98 <pd_auto_nego+0x2e4>
 8005a96:	e2c2      	b.n	800601e <pd_auto_nego+0x86a>
						max_power = pdo_voltage * imax; //update the maxmimum power that we've found
 8005a98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a9a:	6a38      	ldr	r0, [r7, #32]
 8005a9c:	f7fa ff2a 	bl	80008f4 <__aeabi_fmul>
 8005aa0:	1c03      	adds	r3, r0, #0
 8005aa2:	657b      	str	r3, [r7, #84]	; 0x54
						select_pdo_index = i;  // select this PDO
 8005aa4:	235b      	movs	r3, #91	; 0x5b
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005aaa:	701a      	strb	r2, [r3, #0]
						source_pdos[i].fixed.Current = (uint32_t)(imax / 0.01); //lower our current requirement to our calc'ed max current
 8005aac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005aae:	f7fc fe3b 	bl	8002728 <__aeabi_f2d>
 8005ab2:	4a26      	ldr	r2, [pc, #152]	; (8005b4c <pd_auto_nego+0x398>)
 8005ab4:	4b26      	ldr	r3, [pc, #152]	; (8005b50 <pd_auto_nego+0x39c>)
 8005ab6:	f7fb fbb5 	bl	8001224 <__aeabi_ddiv>
 8005aba:	0003      	movs	r3, r0
 8005abc:	000c      	movs	r4, r1
 8005abe:	0018      	movs	r0, r3
 8005ac0:	0021      	movs	r1, r4
 8005ac2:	f7fa fd21 	bl	8000508 <__aeabi_d2uiz>
 8005ac6:	0003      	movs	r3, r0
 8005ac8:	059b      	lsls	r3, r3, #22
 8005aca:	0d9b      	lsrs	r3, r3, #22
 8005acc:	b298      	uxth	r0, r3
 8005ace:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <pd_auto_nego+0x37c>)
 8005ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad2:	0099      	lsls	r1, r3, #2
 8005ad4:	588b      	ldr	r3, [r1, r2]
 8005ad6:	0580      	lsls	r0, r0, #22
 8005ad8:	0d80      	lsrs	r0, r0, #22
 8005ada:	0a9b      	lsrs	r3, r3, #10
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	4303      	orrs	r3, r0
 8005ae0:	508b      	str	r3, [r1, r2]
						break;
 8005ae2:	e2ab      	b.n	800603c <pd_auto_nego+0x888>
					if((pdo_current * pdo_voltage) < max_power) break; //if the maximum power we can use is still too low
 8005ae4:	6a39      	ldr	r1, [r7, #32]
 8005ae6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005ae8:	f7fa ff04 	bl	80008f4 <__aeabi_fmul>
 8005aec:	1c03      	adds	r3, r0, #0
 8005aee:	1c19      	adds	r1, r3, #0
 8005af0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005af2:	f7fa fcf5 	bl	80004e0 <__aeabi_fcmpgt>
 8005af6:	1e03      	subs	r3, r0, #0
 8005af8:	d000      	beq.n	8005afc <pd_auto_nego+0x348>
 8005afa:	e292      	b.n	8006022 <pd_auto_nego+0x86e>
						max_power = pdo_voltage * pdo_current; //update the maximum power that we've found
 8005afc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005afe:	6a38      	ldr	r0, [r7, #32]
 8005b00:	f7fa fef8 	bl	80008f4 <__aeabi_fmul>
 8005b04:	1c03      	adds	r3, r0, #0
 8005b06:	657b      	str	r3, [r7, #84]	; 0x54
						select_pdo_index = i;  // select this PDO
 8005b08:	235b      	movs	r3, #91	; 0x5b
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b0e:	701a      	strb	r2, [r3, #0]
						break;
 8005b10:	e294      	b.n	800603c <pd_auto_nego+0x888>
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	20000210 	.word	0x20000210
 8005b18:	08009394 	.word	0x08009394
 8005b1c:	000007cf 	.word	0x000007cf
 8005b20:	080093ac 	.word	0x080093ac
 8005b24:	080093c0 	.word	0x080093c0
 8005b28:	200001f1 	.word	0x200001f1
 8005b2c:	080093d4 	.word	0x080093d4
 8005b30:	200001f4 	.word	0x200001f4
 8005b34:	080093f4 	.word	0x080093f4
 8005b38:	419a8f5c 	.word	0x419a8f5c
 8005b3c:	0800940c 	.word	0x0800940c
 8005b40:	08009428 	.word	0x08009428
 8005b44:	9999999a 	.word	0x9999999a
 8005b48:	3fa99999 	.word	0x3fa99999
 8005b4c:	47ae147b 	.word	0x47ae147b
 8005b50:	3f847ae1 	.word	0x3f847ae1
 8005b54:	08009440 	.word	0x08009440
 8005b58:	08009458 	.word	0x08009458
 8005b5c:	33333333 	.word	0x33333333
 8005b60:	40455333 	.word	0x40455333
 8005b64:	48f42400 	.word	0x48f42400
 8005b68:	7cfa26a2 	.word	0x7cfa26a2
 8005b6c:	3ef71194 	.word	0x3ef71194
 8005b70:	3fc99999 	.word	0x3fc99999
 8005b74:	3fd99999 	.word	0x3fd99999
 8005b78:	08009470 	.word	0x08009470
 8005b7c:	0800949c 	.word	0x0800949c
				printf("PDO %d is a BATTERY SUPPLY\n", i+1);
 8005b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	4b8a      	ldr	r3, [pc, #552]	; (8005db0 <pd_auto_nego+0x5fc>)
 8005b86:	0011      	movs	r1, r2
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f001 fbd9 	bl	8007340 <iprintf>
				pdo_vmin = pdo.battery.Min_Voltage * 0.05; //1 LSB -> 50mV
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	031b      	lsls	r3, r3, #12
 8005b92:	0d9b      	lsrs	r3, r3, #22
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	0018      	movs	r0, r3
 8005b98:	f7fc fd5a 	bl	8002650 <__aeabi_i2d>
 8005b9c:	4a85      	ldr	r2, [pc, #532]	; (8005db4 <pd_auto_nego+0x600>)
 8005b9e:	4b86      	ldr	r3, [pc, #536]	; (8005db8 <pd_auto_nego+0x604>)
 8005ba0:	f7fb ff4a 	bl	8001a38 <__aeabi_dmul>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	000c      	movs	r4, r1
 8005ba8:	0018      	movs	r0, r3
 8005baa:	0021      	movs	r1, r4
 8005bac:	f7fc fe0e 	bl	80027cc <__aeabi_d2f>
 8005bb0:	1c03      	adds	r3, r0, #0
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
				pdo_vmax = pdo.battery.Max_Voltage * 0.05; //1 LSB -> 50mV
 8005bb4:	231e      	movs	r3, #30
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	049b      	lsls	r3, r3, #18
 8005bbc:	0d9b      	lsrs	r3, r3, #22
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f7fc fd45 	bl	8002650 <__aeabi_i2d>
 8005bc6:	4a7b      	ldr	r2, [pc, #492]	; (8005db4 <pd_auto_nego+0x600>)
 8005bc8:	4b7b      	ldr	r3, [pc, #492]	; (8005db8 <pd_auto_nego+0x604>)
 8005bca:	f7fb ff35 	bl	8001a38 <__aeabi_dmul>
 8005bce:	0003      	movs	r3, r0
 8005bd0:	000c      	movs	r4, r1
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	0021      	movs	r1, r4
 8005bd6:	f7fc fdf9 	bl	80027cc <__aeabi_d2f>
 8005bda:	1c03      	adds	r3, r0, #0
 8005bdc:	647b      	str	r3, [r7, #68]	; 0x44
				pdo_power = pdo.battery.Operating_Power * 0.25; //1 LSB -> 250mW
 8005bde:	231c      	movs	r3, #28
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	059b      	lsls	r3, r3, #22
 8005be6:	0d9b      	lsrs	r3, r3, #22
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	0018      	movs	r0, r3
 8005bec:	f7fc fd30 	bl	8002650 <__aeabi_i2d>
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	4b72      	ldr	r3, [pc, #456]	; (8005dbc <pd_auto_nego+0x608>)
 8005bf4:	f7fb ff20 	bl	8001a38 <__aeabi_dmul>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	000c      	movs	r4, r1
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	0021      	movs	r1, r4
 8005c00:	f7fc fde4 	bl	80027cc <__aeabi_d2f>
 8005c04:	1c03      	adds	r3, r0, #0
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
				duty_cycle = (BATTERY_FLOAT_V + DIODE_VF - pdo_vmin)/(BATTERY_FLOAT_V + DIODE_VF);
 8005c08:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005c0a:	f7fc fd8d 	bl	8002728 <__aeabi_f2d>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	000c      	movs	r4, r1
 8005c12:	001a      	movs	r2, r3
 8005c14:	0023      	movs	r3, r4
 8005c16:	486a      	ldr	r0, [pc, #424]	; (8005dc0 <pd_auto_nego+0x60c>)
 8005c18:	496a      	ldr	r1, [pc, #424]	; (8005dc4 <pd_auto_nego+0x610>)
 8005c1a:	f7fc f97f 	bl	8001f1c <__aeabi_dsub>
 8005c1e:	0003      	movs	r3, r0
 8005c20:	000c      	movs	r4, r1
 8005c22:	0018      	movs	r0, r3
 8005c24:	0021      	movs	r1, r4
 8005c26:	4a66      	ldr	r2, [pc, #408]	; (8005dc0 <pd_auto_nego+0x60c>)
 8005c28:	4b66      	ldr	r3, [pc, #408]	; (8005dc4 <pd_auto_nego+0x610>)
 8005c2a:	f7fb fafb 	bl	8001224 <__aeabi_ddiv>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	000c      	movs	r4, r1
 8005c32:	0018      	movs	r0, r3
 8005c34:	0021      	movs	r1, r4
 8005c36:	f7fc fdc9 	bl	80027cc <__aeabi_d2f>
 8005c3a:	1c03      	adds	r3, r0, #0
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
				i_ripple = (pdo_vmin*duty_cycle/CHARGER_FSW)/L_INDUCTOR;
 8005c3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005c42:	f7fa fe57 	bl	80008f4 <__aeabi_fmul>
 8005c46:	1c03      	adds	r3, r0, #0
 8005c48:	495f      	ldr	r1, [pc, #380]	; (8005dc8 <pd_auto_nego+0x614>)
 8005c4a:	1c18      	adds	r0, r3, #0
 8005c4c:	f7fa fc7a 	bl	8000544 <__aeabi_fdiv>
 8005c50:	1c03      	adds	r3, r0, #0
 8005c52:	1c18      	adds	r0, r3, #0
 8005c54:	f7fc fd68 	bl	8002728 <__aeabi_f2d>
 8005c58:	4a5c      	ldr	r2, [pc, #368]	; (8005dcc <pd_auto_nego+0x618>)
 8005c5a:	4b5d      	ldr	r3, [pc, #372]	; (8005dd0 <pd_auto_nego+0x61c>)
 8005c5c:	f7fb fae2 	bl	8001224 <__aeabi_ddiv>
 8005c60:	0003      	movs	r3, r0
 8005c62:	000c      	movs	r4, r1
 8005c64:	0018      	movs	r0, r3
 8005c66:	0021      	movs	r1, r4
 8005c68:	f7fc fdb0 	bl	80027cc <__aeabi_d2f>
 8005c6c:	1c03      	adds	r3, r0, #0
 8005c6e:	63bb      	str	r3, [r7, #56]	; 0x38
				pmax = i_ripple*pdo_vmin/CHI_MIN; //maximum power that we should request from the source
 8005c70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005c72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c74:	f7fa fe3e 	bl	80008f4 <__aeabi_fmul>
 8005c78:	1c03      	adds	r3, r0, #0
 8005c7a:	1c18      	adds	r0, r3, #0
 8005c7c:	f7fc fd54 	bl	8002728 <__aeabi_f2d>
 8005c80:	4a4c      	ldr	r2, [pc, #304]	; (8005db4 <pd_auto_nego+0x600>)
 8005c82:	4b54      	ldr	r3, [pc, #336]	; (8005dd4 <pd_auto_nego+0x620>)
 8005c84:	f7fb face 	bl	8001224 <__aeabi_ddiv>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	000c      	movs	r4, r1
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	0021      	movs	r1, r4
 8005c90:	f7fc fd9c 	bl	80027cc <__aeabi_d2f>
 8005c94:	1c03      	adds	r3, r0, #0
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
				duty_cycle = (BATTERY_FLOAT_V + DIODE_VF - pdo_vmax)/(BATTERY_FLOAT_V + DIODE_VF);
 8005c98:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005c9a:	f7fc fd45 	bl	8002728 <__aeabi_f2d>
 8005c9e:	0003      	movs	r3, r0
 8005ca0:	000c      	movs	r4, r1
 8005ca2:	001a      	movs	r2, r3
 8005ca4:	0023      	movs	r3, r4
 8005ca6:	4846      	ldr	r0, [pc, #280]	; (8005dc0 <pd_auto_nego+0x60c>)
 8005ca8:	4946      	ldr	r1, [pc, #280]	; (8005dc4 <pd_auto_nego+0x610>)
 8005caa:	f7fc f937 	bl	8001f1c <__aeabi_dsub>
 8005cae:	0003      	movs	r3, r0
 8005cb0:	000c      	movs	r4, r1
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	0021      	movs	r1, r4
 8005cb6:	4a42      	ldr	r2, [pc, #264]	; (8005dc0 <pd_auto_nego+0x60c>)
 8005cb8:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <pd_auto_nego+0x610>)
 8005cba:	f7fb fab3 	bl	8001224 <__aeabi_ddiv>
 8005cbe:	0003      	movs	r3, r0
 8005cc0:	000c      	movs	r4, r1
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	0021      	movs	r1, r4
 8005cc6:	f7fc fd81 	bl	80027cc <__aeabi_d2f>
 8005cca:	1c03      	adds	r3, r0, #0
 8005ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
				i_ripple = (pdo_vmax*duty_cycle/CHARGER_FSW)/L_INDUCTOR;
 8005cce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cd0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005cd2:	f7fa fe0f 	bl	80008f4 <__aeabi_fmul>
 8005cd6:	1c03      	adds	r3, r0, #0
 8005cd8:	493b      	ldr	r1, [pc, #236]	; (8005dc8 <pd_auto_nego+0x614>)
 8005cda:	1c18      	adds	r0, r3, #0
 8005cdc:	f7fa fc32 	bl	8000544 <__aeabi_fdiv>
 8005ce0:	1c03      	adds	r3, r0, #0
 8005ce2:	1c18      	adds	r0, r3, #0
 8005ce4:	f7fc fd20 	bl	8002728 <__aeabi_f2d>
 8005ce8:	4a38      	ldr	r2, [pc, #224]	; (8005dcc <pd_auto_nego+0x618>)
 8005cea:	4b39      	ldr	r3, [pc, #228]	; (8005dd0 <pd_auto_nego+0x61c>)
 8005cec:	f7fb fa9a 	bl	8001224 <__aeabi_ddiv>
 8005cf0:	0003      	movs	r3, r0
 8005cf2:	000c      	movs	r4, r1
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	0021      	movs	r1, r4
 8005cf8:	f7fc fd68 	bl	80027cc <__aeabi_d2f>
 8005cfc:	1c03      	adds	r3, r0, #0
 8005cfe:	63bb      	str	r3, [r7, #56]	; 0x38
				pmin = i_ripple*pdo_vmax/CHI_MAX; //minimum power that we should request from the source
 8005d00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d04:	f7fa fdf6 	bl	80008f4 <__aeabi_fmul>
 8005d08:	1c03      	adds	r3, r0, #0
 8005d0a:	1c18      	adds	r0, r3, #0
 8005d0c:	f7fc fd0c 	bl	8002728 <__aeabi_f2d>
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <pd_auto_nego+0x600>)
 8005d12:	4b31      	ldr	r3, [pc, #196]	; (8005dd8 <pd_auto_nego+0x624>)
 8005d14:	f7fb fa86 	bl	8001224 <__aeabi_ddiv>
 8005d18:	0003      	movs	r3, r0
 8005d1a:	000c      	movs	r4, r1
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	0021      	movs	r1, r4
 8005d20:	f7fc fd54 	bl	80027cc <__aeabi_d2f>
 8005d24:	1c03      	adds	r3, r0, #0
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
				if(pdo_power < pmin) break; //power is too low
 8005d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d2c:	f7fa fbc4 	bl	80004b8 <__aeabi_fcmplt>
 8005d30:	1e03      	subs	r3, r0, #0
 8005d32:	d000      	beq.n	8005d36 <pd_auto_nego+0x582>
 8005d34:	e177      	b.n	8006026 <pd_auto_nego+0x872>
				else if (pdo_power > pmax) { //if the power is too high
 8005d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d3a:	f7fa fbd1 	bl	80004e0 <__aeabi_fcmpgt>
 8005d3e:	1e03      	subs	r3, r0, #0
 8005d40:	d028      	beq.n	8005d94 <pd_auto_nego+0x5e0>
					if(pmax < max_power) break; //if the maximum power we can use is still too low
 8005d42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d46:	f7fa fbb7 	bl	80004b8 <__aeabi_fcmplt>
 8005d4a:	1e03      	subs	r3, r0, #0
 8005d4c:	d000      	beq.n	8005d50 <pd_auto_nego+0x59c>
 8005d4e:	e16c      	b.n	800602a <pd_auto_nego+0x876>
						max_power = pmax; //update the maximum power that we've found
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	657b      	str	r3, [r7, #84]	; 0x54
						select_pdo_index = i;  // select this PDO
 8005d54:	235b      	movs	r3, #91	; 0x5b
 8005d56:	18fb      	adds	r3, r7, r3
 8005d58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d5a:	701a      	strb	r2, [r3, #0]
						source_pdos[i].battery.Operating_Power = (uint32_t)(pmax / 0.25); //lower our power requirement to our calc'ed max power
 8005d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d5e:	f7fc fce3 	bl	8002728 <__aeabi_f2d>
 8005d62:	2200      	movs	r2, #0
 8005d64:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <pd_auto_nego+0x608>)
 8005d66:	f7fb fa5d 	bl	8001224 <__aeabi_ddiv>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	000c      	movs	r4, r1
 8005d6e:	0018      	movs	r0, r3
 8005d70:	0021      	movs	r1, r4
 8005d72:	f7fa fbc9 	bl	8000508 <__aeabi_d2uiz>
 8005d76:	0003      	movs	r3, r0
 8005d78:	059b      	lsls	r3, r3, #22
 8005d7a:	0d9b      	lsrs	r3, r3, #22
 8005d7c:	b298      	uxth	r0, r3
 8005d7e:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <pd_auto_nego+0x628>)
 8005d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d82:	0099      	lsls	r1, r3, #2
 8005d84:	588b      	ldr	r3, [r1, r2]
 8005d86:	0580      	lsls	r0, r0, #22
 8005d88:	0d80      	lsrs	r0, r0, #22
 8005d8a:	0a9b      	lsrs	r3, r3, #10
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	4303      	orrs	r3, r0
 8005d90:	508b      	str	r3, [r1, r2]
						break;
 8005d92:	e153      	b.n	800603c <pd_auto_nego+0x888>
					if(pdo_power < max_power) break; //if the maximum power we can use is still too low
 8005d94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d98:	f7fa fb8e 	bl	80004b8 <__aeabi_fcmplt>
 8005d9c:	1e03      	subs	r3, r0, #0
 8005d9e:	d000      	beq.n	8005da2 <pd_auto_nego+0x5ee>
 8005da0:	e145      	b.n	800602e <pd_auto_nego+0x87a>
						max_power = pdo_power;
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	657b      	str	r3, [r7, #84]	; 0x54
						select_pdo_index = i;  // select this PDO
 8005da6:	235b      	movs	r3, #91	; 0x5b
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005dac:	701a      	strb	r2, [r3, #0]
						break;
 8005dae:	e145      	b.n	800603c <pd_auto_nego+0x888>
 8005db0:	080094c8 	.word	0x080094c8
 8005db4:	9999999a 	.word	0x9999999a
 8005db8:	3fa99999 	.word	0x3fa99999
 8005dbc:	3fd00000 	.word	0x3fd00000
 8005dc0:	33333333 	.word	0x33333333
 8005dc4:	40455333 	.word	0x40455333
 8005dc8:	48f42400 	.word	0x48f42400
 8005dcc:	7cfa26a2 	.word	0x7cfa26a2
 8005dd0:	3ef71194 	.word	0x3ef71194
 8005dd4:	3fc99999 	.word	0x3fc99999
 8005dd8:	3fd99999 	.word	0x3fd99999
 8005ddc:	200001f4 	.word	0x200001f4
				printf("PDO %d is a VARIABLE SUPPLY\n", i+1);
 8005de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	4bd4      	ldr	r3, [pc, #848]	; (8006138 <pd_auto_nego+0x984>)
 8005de6:	0011      	movs	r1, r2
 8005de8:	0018      	movs	r0, r3
 8005dea:	f001 faa9 	bl	8007340 <iprintf>
				pdo_vmin = pdo.variable.Min_Voltage * 0.05; //1 LSB -> 50mV
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	031b      	lsls	r3, r3, #12
 8005df2:	0d9b      	lsrs	r3, r3, #22
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	0018      	movs	r0, r3
 8005df8:	f7fc fc2a 	bl	8002650 <__aeabi_i2d>
 8005dfc:	4acf      	ldr	r2, [pc, #828]	; (800613c <pd_auto_nego+0x988>)
 8005dfe:	4bd0      	ldr	r3, [pc, #832]	; (8006140 <pd_auto_nego+0x98c>)
 8005e00:	f7fb fe1a 	bl	8001a38 <__aeabi_dmul>
 8005e04:	0003      	movs	r3, r0
 8005e06:	000c      	movs	r4, r1
 8005e08:	0018      	movs	r0, r3
 8005e0a:	0021      	movs	r1, r4
 8005e0c:	f7fc fcde 	bl	80027cc <__aeabi_d2f>
 8005e10:	1c03      	adds	r3, r0, #0
 8005e12:	64bb      	str	r3, [r7, #72]	; 0x48
				pdo_vmax = pdo.variable.Max_Voltage * 0.05; //1 LSB -> 50mV
 8005e14:	231e      	movs	r3, #30
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	049b      	lsls	r3, r3, #18
 8005e1c:	0d9b      	lsrs	r3, r3, #22
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	0018      	movs	r0, r3
 8005e22:	f7fc fc15 	bl	8002650 <__aeabi_i2d>
 8005e26:	4ac5      	ldr	r2, [pc, #788]	; (800613c <pd_auto_nego+0x988>)
 8005e28:	4bc5      	ldr	r3, [pc, #788]	; (8006140 <pd_auto_nego+0x98c>)
 8005e2a:	f7fb fe05 	bl	8001a38 <__aeabi_dmul>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	000c      	movs	r4, r1
 8005e32:	0018      	movs	r0, r3
 8005e34:	0021      	movs	r1, r4
 8005e36:	f7fc fcc9 	bl	80027cc <__aeabi_d2f>
 8005e3a:	1c03      	adds	r3, r0, #0
 8005e3c:	647b      	str	r3, [r7, #68]	; 0x44
				pdo_current = pdo.variable.Operating_Current * 0.01; //1 LSB -> 10mA
 8005e3e:	231c      	movs	r3, #28
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	059b      	lsls	r3, r3, #22
 8005e46:	0d9b      	lsrs	r3, r3, #22
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f7fc fc00 	bl	8002650 <__aeabi_i2d>
 8005e50:	4abc      	ldr	r2, [pc, #752]	; (8006144 <pd_auto_nego+0x990>)
 8005e52:	4bbd      	ldr	r3, [pc, #756]	; (8006148 <pd_auto_nego+0x994>)
 8005e54:	f7fb fdf0 	bl	8001a38 <__aeabi_dmul>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	000c      	movs	r4, r1
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	0021      	movs	r1, r4
 8005e60:	f7fc fcb4 	bl	80027cc <__aeabi_d2f>
 8005e64:	1c03      	adds	r3, r0, #0
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
				duty_cycle = (BATTERY_FLOAT_V + DIODE_VF - pdo_vmin)/(BATTERY_FLOAT_V + DIODE_VF);
 8005e68:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005e6a:	f7fc fc5d 	bl	8002728 <__aeabi_f2d>
 8005e6e:	0003      	movs	r3, r0
 8005e70:	000c      	movs	r4, r1
 8005e72:	001a      	movs	r2, r3
 8005e74:	0023      	movs	r3, r4
 8005e76:	48b5      	ldr	r0, [pc, #724]	; (800614c <pd_auto_nego+0x998>)
 8005e78:	49b5      	ldr	r1, [pc, #724]	; (8006150 <pd_auto_nego+0x99c>)
 8005e7a:	f7fc f84f 	bl	8001f1c <__aeabi_dsub>
 8005e7e:	0003      	movs	r3, r0
 8005e80:	000c      	movs	r4, r1
 8005e82:	0018      	movs	r0, r3
 8005e84:	0021      	movs	r1, r4
 8005e86:	4ab1      	ldr	r2, [pc, #708]	; (800614c <pd_auto_nego+0x998>)
 8005e88:	4bb1      	ldr	r3, [pc, #708]	; (8006150 <pd_auto_nego+0x99c>)
 8005e8a:	f7fb f9cb 	bl	8001224 <__aeabi_ddiv>
 8005e8e:	0003      	movs	r3, r0
 8005e90:	000c      	movs	r4, r1
 8005e92:	0018      	movs	r0, r3
 8005e94:	0021      	movs	r1, r4
 8005e96:	f7fc fc99 	bl	80027cc <__aeabi_d2f>
 8005e9a:	1c03      	adds	r3, r0, #0
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
				i_ripple = (pdo_vmin*duty_cycle/CHARGER_FSW)/L_INDUCTOR;
 8005e9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ea0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005ea2:	f7fa fd27 	bl	80008f4 <__aeabi_fmul>
 8005ea6:	1c03      	adds	r3, r0, #0
 8005ea8:	49aa      	ldr	r1, [pc, #680]	; (8006154 <pd_auto_nego+0x9a0>)
 8005eaa:	1c18      	adds	r0, r3, #0
 8005eac:	f7fa fb4a 	bl	8000544 <__aeabi_fdiv>
 8005eb0:	1c03      	adds	r3, r0, #0
 8005eb2:	1c18      	adds	r0, r3, #0
 8005eb4:	f7fc fc38 	bl	8002728 <__aeabi_f2d>
 8005eb8:	4aa7      	ldr	r2, [pc, #668]	; (8006158 <pd_auto_nego+0x9a4>)
 8005eba:	4ba8      	ldr	r3, [pc, #672]	; (800615c <pd_auto_nego+0x9a8>)
 8005ebc:	f7fb f9b2 	bl	8001224 <__aeabi_ddiv>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	000c      	movs	r4, r1
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	0021      	movs	r1, r4
 8005ec8:	f7fc fc80 	bl	80027cc <__aeabi_d2f>
 8005ecc:	1c03      	adds	r3, r0, #0
 8005ece:	63bb      	str	r3, [r7, #56]	; 0x38
				imax = i_ripple/CHI_MIN;
 8005ed0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ed2:	f7fc fc29 	bl	8002728 <__aeabi_f2d>
 8005ed6:	4a99      	ldr	r2, [pc, #612]	; (800613c <pd_auto_nego+0x988>)
 8005ed8:	4ba1      	ldr	r3, [pc, #644]	; (8006160 <pd_auto_nego+0x9ac>)
 8005eda:	f7fb f9a3 	bl	8001224 <__aeabi_ddiv>
 8005ede:	0003      	movs	r3, r0
 8005ee0:	000c      	movs	r4, r1
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	0021      	movs	r1, r4
 8005ee6:	f7fc fc71 	bl	80027cc <__aeabi_d2f>
 8005eea:	1c03      	adds	r3, r0, #0
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
				duty_cycle = (BATTERY_FLOAT_V + DIODE_VF - pdo_vmax)/(BATTERY_FLOAT_V + DIODE_VF);
 8005eee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005ef0:	f7fc fc1a 	bl	8002728 <__aeabi_f2d>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	000c      	movs	r4, r1
 8005ef8:	001a      	movs	r2, r3
 8005efa:	0023      	movs	r3, r4
 8005efc:	4893      	ldr	r0, [pc, #588]	; (800614c <pd_auto_nego+0x998>)
 8005efe:	4994      	ldr	r1, [pc, #592]	; (8006150 <pd_auto_nego+0x99c>)
 8005f00:	f7fc f80c 	bl	8001f1c <__aeabi_dsub>
 8005f04:	0003      	movs	r3, r0
 8005f06:	000c      	movs	r4, r1
 8005f08:	0018      	movs	r0, r3
 8005f0a:	0021      	movs	r1, r4
 8005f0c:	4a8f      	ldr	r2, [pc, #572]	; (800614c <pd_auto_nego+0x998>)
 8005f0e:	4b90      	ldr	r3, [pc, #576]	; (8006150 <pd_auto_nego+0x99c>)
 8005f10:	f7fb f988 	bl	8001224 <__aeabi_ddiv>
 8005f14:	0003      	movs	r3, r0
 8005f16:	000c      	movs	r4, r1
 8005f18:	0018      	movs	r0, r3
 8005f1a:	0021      	movs	r1, r4
 8005f1c:	f7fc fc56 	bl	80027cc <__aeabi_d2f>
 8005f20:	1c03      	adds	r3, r0, #0
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
				i_ripple = (pdo_vmax*duty_cycle/CHARGER_FSW)/L_INDUCTOR;
 8005f24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005f28:	f7fa fce4 	bl	80008f4 <__aeabi_fmul>
 8005f2c:	1c03      	adds	r3, r0, #0
 8005f2e:	4989      	ldr	r1, [pc, #548]	; (8006154 <pd_auto_nego+0x9a0>)
 8005f30:	1c18      	adds	r0, r3, #0
 8005f32:	f7fa fb07 	bl	8000544 <__aeabi_fdiv>
 8005f36:	1c03      	adds	r3, r0, #0
 8005f38:	1c18      	adds	r0, r3, #0
 8005f3a:	f7fc fbf5 	bl	8002728 <__aeabi_f2d>
 8005f3e:	4a86      	ldr	r2, [pc, #536]	; (8006158 <pd_auto_nego+0x9a4>)
 8005f40:	4b86      	ldr	r3, [pc, #536]	; (800615c <pd_auto_nego+0x9a8>)
 8005f42:	f7fb f96f 	bl	8001224 <__aeabi_ddiv>
 8005f46:	0003      	movs	r3, r0
 8005f48:	000c      	movs	r4, r1
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	0021      	movs	r1, r4
 8005f4e:	f7fc fc3d 	bl	80027cc <__aeabi_d2f>
 8005f52:	1c03      	adds	r3, r0, #0
 8005f54:	63bb      	str	r3, [r7, #56]	; 0x38
				imin = i_ripple/CHI_MAX;
 8005f56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f58:	f7fc fbe6 	bl	8002728 <__aeabi_f2d>
 8005f5c:	4a77      	ldr	r2, [pc, #476]	; (800613c <pd_auto_nego+0x988>)
 8005f5e:	4b81      	ldr	r3, [pc, #516]	; (8006164 <pd_auto_nego+0x9b0>)
 8005f60:	f7fb f960 	bl	8001224 <__aeabi_ddiv>
 8005f64:	0003      	movs	r3, r0
 8005f66:	000c      	movs	r4, r1
 8005f68:	0018      	movs	r0, r3
 8005f6a:	0021      	movs	r1, r4
 8005f6c:	f7fc fc2e 	bl	80027cc <__aeabi_d2f>
 8005f70:	1c03      	adds	r3, r0, #0
 8005f72:	633b      	str	r3, [r7, #48]	; 0x30
				if(pdo_current < imin) break; //current is too low
 8005f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f76:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005f78:	f7fa fa9e 	bl	80004b8 <__aeabi_fcmplt>
 8005f7c:	1e03      	subs	r3, r0, #0
 8005f7e:	d158      	bne.n	8006032 <pd_auto_nego+0x87e>
				else if (pdo_current > imax) { //if the current is too high
 8005f80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005f84:	f7fa faac 	bl	80004e0 <__aeabi_fcmpgt>
 8005f88:	1e03      	subs	r3, r0, #0
 8005f8a:	d030      	beq.n	8005fee <pd_auto_nego+0x83a>
					if((imax*pdo_vmin) < max_power) break; //if the maximum power we can use is still too low
 8005f8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005f90:	f7fa fcb0 	bl	80008f4 <__aeabi_fmul>
 8005f94:	1c03      	adds	r3, r0, #0
 8005f96:	1c19      	adds	r1, r3, #0
 8005f98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005f9a:	f7fa faa1 	bl	80004e0 <__aeabi_fcmpgt>
 8005f9e:	1e03      	subs	r3, r0, #0
 8005fa0:	d149      	bne.n	8006036 <pd_auto_nego+0x882>
						max_power = imax*pdo_vmin; //update the maximum power that we've found
 8005fa2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005fa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005fa6:	f7fa fca5 	bl	80008f4 <__aeabi_fmul>
 8005faa:	1c03      	adds	r3, r0, #0
 8005fac:	657b      	str	r3, [r7, #84]	; 0x54
						select_pdo_index = i;  // select this PDO
 8005fae:	235b      	movs	r3, #91	; 0x5b
 8005fb0:	18fb      	adds	r3, r7, r3
 8005fb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fb4:	701a      	strb	r2, [r3, #0]
						source_pdos[i].variable.Operating_Current = (uint32_t)(imax/0.01); //lower our power requirement to our calc'ed max power
 8005fb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005fb8:	f7fc fbb6 	bl	8002728 <__aeabi_f2d>
 8005fbc:	4a61      	ldr	r2, [pc, #388]	; (8006144 <pd_auto_nego+0x990>)
 8005fbe:	4b62      	ldr	r3, [pc, #392]	; (8006148 <pd_auto_nego+0x994>)
 8005fc0:	f7fb f930 	bl	8001224 <__aeabi_ddiv>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	000c      	movs	r4, r1
 8005fc8:	0018      	movs	r0, r3
 8005fca:	0021      	movs	r1, r4
 8005fcc:	f7fa fa9c 	bl	8000508 <__aeabi_d2uiz>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	059b      	lsls	r3, r3, #22
 8005fd4:	0d9b      	lsrs	r3, r3, #22
 8005fd6:	b298      	uxth	r0, r3
 8005fd8:	4a63      	ldr	r2, [pc, #396]	; (8006168 <pd_auto_nego+0x9b4>)
 8005fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fdc:	0099      	lsls	r1, r3, #2
 8005fde:	588b      	ldr	r3, [r1, r2]
 8005fe0:	0580      	lsls	r0, r0, #22
 8005fe2:	0d80      	lsrs	r0, r0, #22
 8005fe4:	0a9b      	lsrs	r3, r3, #10
 8005fe6:	029b      	lsls	r3, r3, #10
 8005fe8:	4303      	orrs	r3, r0
 8005fea:	508b      	str	r3, [r1, r2]
						break;
 8005fec:	e026      	b.n	800603c <pd_auto_nego+0x888>
					if((pdo_current*pdo_vmin) < max_power) break; //if the maximum power we can use is still too low
 8005fee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ff0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005ff2:	f7fa fc7f 	bl	80008f4 <__aeabi_fmul>
 8005ff6:	1c03      	adds	r3, r0, #0
 8005ff8:	1c19      	adds	r1, r3, #0
 8005ffa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005ffc:	f7fa fa70 	bl	80004e0 <__aeabi_fcmpgt>
 8006000:	1e03      	subs	r3, r0, #0
 8006002:	d11a      	bne.n	800603a <pd_auto_nego+0x886>
						max_power = pdo_vmin*pdo_current;
 8006004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006006:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006008:	f7fa fc74 	bl	80008f4 <__aeabi_fmul>
 800600c:	1c03      	adds	r3, r0, #0
 800600e:	657b      	str	r3, [r7, #84]	; 0x54
						select_pdo_index = i;  // select this PDO
 8006010:	235b      	movs	r3, #91	; 0x5b
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006016:	701a      	strb	r2, [r3, #0]
						break;
 8006018:	e010      	b.n	800603c <pd_auto_nego+0x888>
				if(pdo_current < imin) break; //current is too low
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	e00e      	b.n	800603c <pd_auto_nego+0x888>
					if((imax * pdo_voltage) < max_power) break; //if the maximum power we can use is still too low
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	e00c      	b.n	800603c <pd_auto_nego+0x888>
					if((pdo_current * pdo_voltage) < max_power) break; //if the maximum power we can use is still too low
 8006022:	46c0      	nop			; (mov r8, r8)
 8006024:	e00a      	b.n	800603c <pd_auto_nego+0x888>
				if(pdo_power < pmin) break; //power is too low
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	e008      	b.n	800603c <pd_auto_nego+0x888>
					if(pmax < max_power) break; //if the maximum power we can use is still too low
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	e006      	b.n	800603c <pd_auto_nego+0x888>
					if(pdo_power < max_power) break; //if the maximum power we can use is still too low
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	e004      	b.n	800603c <pd_auto_nego+0x888>
				if(pdo_current < imin) break; //current is too low
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	e002      	b.n	800603c <pd_auto_nego+0x888>
					if((imax*pdo_vmin) < max_power) break; //if the maximum power we can use is still too low
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	e000      	b.n	800603c <pd_auto_nego+0x888>
					if((pdo_current*pdo_vmin) < max_power) break; //if the maximum power we can use is still too low
 800603a:	46c0      	nop			; (mov r8, r8)
			}

			printf("Max power available %.2f from index %d\n", max_power, select_pdo_index + 1);
 800603c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800603e:	f7fc fb73 	bl	8002728 <__aeabi_f2d>
 8006042:	0004      	movs	r4, r0
 8006044:	000d      	movs	r5, r1
 8006046:	235b      	movs	r3, #91	; 0x5b
 8006048:	18fb      	adds	r3, r7, r3
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b25b      	sxtb	r3, r3
 800604e:	3301      	adds	r3, #1
 8006050:	4946      	ldr	r1, [pc, #280]	; (800616c <pd_auto_nego+0x9b8>)
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	0022      	movs	r2, r4
 8006056:	002b      	movs	r3, r5
 8006058:	0008      	movs	r0, r1
 800605a:	f001 f971 	bl	8007340 <iprintf>
		for(int i = 1; i < num_source_pdos; i++) {
 800605e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006060:	3301      	adds	r3, #1
 8006062:	653b      	str	r3, [r7, #80]	; 0x50
 8006064:	4b42      	ldr	r3, [pc, #264]	; (8006170 <pd_auto_nego+0x9bc>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	001a      	movs	r2, r3
 800606c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606e:	4293      	cmp	r3, r2
 8006070:	da00      	bge.n	8006074 <pd_auto_nego+0x8c0>
 8006072:	e42d      	b.n	80058d0 <pd_auto_nego+0x11c>
		}
		if(select_pdo_index < 0) return HAL_TIMEOUT; //none of the PDOs worked, so return this
 8006074:	235b      	movs	r3, #91	; 0x5b
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b7f      	cmp	r3, #127	; 0x7f
 800607c:	d901      	bls.n	8006082 <pd_auto_nego+0x8ce>
 800607e:	2303      	movs	r3, #3
 8006080:	e179      	b.n	8006376 <pd_auto_nego+0xbc2>

		/* ======= Alright, so we've picked a PDO by now ==== */
		printf("Trying to negotiate index %d\n", select_pdo_index+1); //since PDOs are 1-indexed (compared to the array)
 8006082:	245b      	movs	r4, #91	; 0x5b
 8006084:	193b      	adds	r3, r7, r4
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	b25b      	sxtb	r3, r3
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	4b39      	ldr	r3, [pc, #228]	; (8006174 <pd_auto_nego+0x9c0>)
 800608e:	0011      	movs	r1, r2
 8006090:	0018      	movs	r0, r3
 8006092:	f001 f955 	bl	8007340 <iprintf>

		//reset the accept and reject flags
		accept_received = false;
 8006096:	4b38      	ldr	r3, [pc, #224]	; (8006178 <pd_auto_nego+0x9c4>)
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
		reject_received = false;
 800609c:	4b37      	ldr	r3, [pc, #220]	; (800617c <pd_auto_nego+0x9c8>)
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
		status = pd_request_pdo_num(select_pdo_index+1); //ask for the PDO we picked
 80060a2:	193b      	adds	r3, r7, r4
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	254f      	movs	r5, #79	; 0x4f
 80060ac:	197c      	adds	r4, r7, r5
 80060ae:	0018      	movs	r0, r3
 80060b0:	f7ff fb32 	bl	8005718 <pd_request_pdo_num>
 80060b4:	0003      	movs	r3, r0
 80060b6:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK) return status;
 80060b8:	197b      	adds	r3, r7, r5
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <pd_auto_nego+0x914>
 80060c0:	234f      	movs	r3, #79	; 0x4f
 80060c2:	18fb      	adds	r3, r7, r3
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	e156      	b.n	8006376 <pd_auto_nego+0xbc2>

		//wait for an accept, reject, or a timeout
		timeout_counter = HAL_GetTick();
 80060c8:	f7fc fc5e 	bl	8002988 <HAL_GetTick>
 80060cc:	0003      	movs	r3, r0
 80060ce:	663b      	str	r3, [r7, #96]	; 0x60
		while((HAL_GetTick() - timeout_counter) < NEGO_WAIT_TIME && !accept_received && !reject_received);
 80060d0:	46c0      	nop			; (mov r8, r8)
 80060d2:	f7fc fc59 	bl	8002988 <HAL_GetTick>
 80060d6:	0002      	movs	r2, r0
 80060d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	4a28      	ldr	r2, [pc, #160]	; (8006180 <pd_auto_nego+0x9cc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d80f      	bhi.n	8006102 <pd_auto_nego+0x94e>
 80060e2:	4b25      	ldr	r3, [pc, #148]	; (8006178 <pd_auto_nego+0x9c4>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2201      	movs	r2, #1
 80060ea:	4053      	eors	r3, r2
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <pd_auto_nego+0x94e>
 80060f2:	4b22      	ldr	r3, [pc, #136]	; (800617c <pd_auto_nego+0x9c8>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2201      	movs	r2, #1
 80060fa:	4053      	eors	r3, r2
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e7      	bne.n	80060d2 <pd_auto_nego+0x91e>

		if(accept_received) {
 8006102:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <pd_auto_nego+0x9c4>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d100      	bne.n	800610e <pd_auto_nego+0x95a>
 800610c:	e10b      	b.n	8006326 <pd_auto_nego+0xb72>
			printf("Accepted Received!\n");
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <pd_auto_nego+0x9d0>)
 8006110:	0018      	movs	r0, r3
 8006112:	f001 f98f 	bl	8007434 <puts>

			//grab the RDO that we're using
			RDOTypedef rdo;
			status = pd_read_rdo(&rdo);
 8006116:	254f      	movs	r5, #79	; 0x4f
 8006118:	197c      	adds	r4, r7, r5
 800611a:	2314      	movs	r3, #20
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	0018      	movs	r0, r3
 8006120:	f7ff fa6c 	bl	80055fc <pd_read_rdo>
 8006124:	0003      	movs	r3, r0
 8006126:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK) return status;
 8006128:	197b      	adds	r3, r7, r5
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d02b      	beq.n	8006188 <pd_auto_nego+0x9d4>
 8006130:	234f      	movs	r3, #79	; 0x4f
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	e11e      	b.n	8006376 <pd_auto_nego+0xbc2>
 8006138:	080094e4 	.word	0x080094e4
 800613c:	9999999a 	.word	0x9999999a
 8006140:	3fa99999 	.word	0x3fa99999
 8006144:	47ae147b 	.word	0x47ae147b
 8006148:	3f847ae1 	.word	0x3f847ae1
 800614c:	33333333 	.word	0x33333333
 8006150:	40455333 	.word	0x40455333
 8006154:	48f42400 	.word	0x48f42400
 8006158:	7cfa26a2 	.word	0x7cfa26a2
 800615c:	3ef71194 	.word	0x3ef71194
 8006160:	3fc99999 	.word	0x3fc99999
 8006164:	3fd99999 	.word	0x3fd99999
 8006168:	200001f4 	.word	0x200001f4
 800616c:	08009504 	.word	0x08009504
 8006170:	200001f1 	.word	0x200001f1
 8006174:	0800952c 	.word	0x0800952c
 8006178:	20000211 	.word	0x20000211
 800617c:	20000212 	.word	0x20000212
 8006180:	000007cf 	.word	0x000007cf
 8006184:	0800954c 	.word	0x0800954c
			printf("Here's the RDO: 0x%lx\n", rdo.data);
 8006188:	2414      	movs	r4, #20
 800618a:	193b      	adds	r3, r7, r4
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4b7c      	ldr	r3, [pc, #496]	; (8006380 <pd_auto_nego+0xbcc>)
 8006190:	0011      	movs	r1, r2
 8006192:	0018      	movs	r0, r3
 8006194:	f001 f8d4 	bl	8007340 <iprintf>

			//and grab the PDO that it corresponds to
			PDOTypedef pdo = source_pdos[rdo.index.obj_pos - 1];
 8006198:	193b      	adds	r3, r7, r4
 800619a:	78db      	ldrb	r3, [r3, #3]
 800619c:	065b      	lsls	r3, r3, #25
 800619e:	0f5b      	lsrs	r3, r3, #29
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	1e5a      	subs	r2, r3, #1
 80061a4:	4b77      	ldr	r3, [pc, #476]	; (8006384 <pd_auto_nego+0xbd0>)
 80061a6:	0092      	lsls	r2, r2, #2
 80061a8:	58d3      	ldr	r3, [r2, r3]
 80061aa:	613b      	str	r3, [r7, #16]

			switch(pdo.type.identifier) {
 80061ac:	2313      	movs	r3, #19
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	061b      	lsls	r3, r3, #24
 80061b4:	0f9b      	lsrs	r3, r3, #30
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d03c      	beq.n	8006236 <pd_auto_nego+0xa82>
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d07a      	beq.n	80062b6 <pd_auto_nego+0xb02>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d000      	beq.n	80061c6 <pd_auto_nego+0xa12>
 80061c4:	e0af      	b.n	8006326 <pd_auto_nego+0xb72>
			case SUPPLY_FIXED :
				*voltage = pdo.fixed.Voltage * 0.05;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	031b      	lsls	r3, r3, #12
 80061ca:	0d9b      	lsrs	r3, r3, #22
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	0018      	movs	r0, r3
 80061d0:	f7fc fa3e 	bl	8002650 <__aeabi_i2d>
 80061d4:	4a6c      	ldr	r2, [pc, #432]	; (8006388 <pd_auto_nego+0xbd4>)
 80061d6:	4b6d      	ldr	r3, [pc, #436]	; (800638c <pd_auto_nego+0xbd8>)
 80061d8:	f7fb fc2e 	bl	8001a38 <__aeabi_dmul>
 80061dc:	0003      	movs	r3, r0
 80061de:	000c      	movs	r4, r1
 80061e0:	0018      	movs	r0, r3
 80061e2:	0021      	movs	r1, r4
 80061e4:	f7fc faf2 	bl	80027cc <__aeabi_d2f>
 80061e8:	1c02      	adds	r2, r0, #0
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]
				*current = rdo.fix_var.op_current * 0.01;
 80061ee:	2314      	movs	r3, #20
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	031b      	lsls	r3, r3, #12
 80061f6:	0d9b      	lsrs	r3, r3, #22
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	0018      	movs	r0, r3
 80061fc:	f7fc fa28 	bl	8002650 <__aeabi_i2d>
 8006200:	4a63      	ldr	r2, [pc, #396]	; (8006390 <pd_auto_nego+0xbdc>)
 8006202:	4b64      	ldr	r3, [pc, #400]	; (8006394 <pd_auto_nego+0xbe0>)
 8006204:	f7fb fc18 	bl	8001a38 <__aeabi_dmul>
 8006208:	0003      	movs	r3, r0
 800620a:	000c      	movs	r4, r1
 800620c:	0018      	movs	r0, r3
 800620e:	0021      	movs	r1, r4
 8006210:	f7fc fadc 	bl	80027cc <__aeabi_d2f>
 8006214:	1c02      	adds	r2, r0, #0
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	601a      	str	r2, [r3, #0]
				*power = (*voltage) * (*current);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	1c19      	adds	r1, r3, #0
 8006224:	1c10      	adds	r0, r2, #0
 8006226:	f7fa fb65 	bl	80008f4 <__aeabi_fmul>
 800622a:	1c03      	adds	r3, r0, #0
 800622c:	1c1a      	adds	r2, r3, #0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]
				return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e09f      	b.n	8006376 <pd_auto_nego+0xbc2>
			case SUPPLY_BATT:
				*voltage = pdo.battery.Min_Voltage * 0.05; //conservative
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	031b      	lsls	r3, r3, #12
 800623a:	0d9b      	lsrs	r3, r3, #22
 800623c:	b29b      	uxth	r3, r3
 800623e:	0018      	movs	r0, r3
 8006240:	f7fc fa06 	bl	8002650 <__aeabi_i2d>
 8006244:	4a50      	ldr	r2, [pc, #320]	; (8006388 <pd_auto_nego+0xbd4>)
 8006246:	4b51      	ldr	r3, [pc, #324]	; (800638c <pd_auto_nego+0xbd8>)
 8006248:	f7fb fbf6 	bl	8001a38 <__aeabi_dmul>
 800624c:	0003      	movs	r3, r0
 800624e:	000c      	movs	r4, r1
 8006250:	0018      	movs	r0, r3
 8006252:	0021      	movs	r1, r4
 8006254:	f7fc faba 	bl	80027cc <__aeabi_d2f>
 8006258:	1c02      	adds	r2, r0, #0
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	601a      	str	r2, [r3, #0]
				*power = rdo.batt.op_power * 0.25;
 800625e:	2314      	movs	r3, #20
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	031b      	lsls	r3, r3, #12
 8006266:	0d9b      	lsrs	r3, r3, #22
 8006268:	b29b      	uxth	r3, r3
 800626a:	0018      	movs	r0, r3
 800626c:	f7fc f9f0 	bl	8002650 <__aeabi_i2d>
 8006270:	2200      	movs	r2, #0
 8006272:	4b49      	ldr	r3, [pc, #292]	; (8006398 <pd_auto_nego+0xbe4>)
 8006274:	f7fb fbe0 	bl	8001a38 <__aeabi_dmul>
 8006278:	0003      	movs	r3, r0
 800627a:	000c      	movs	r4, r1
 800627c:	0018      	movs	r0, r3
 800627e:	0021      	movs	r1, r4
 8006280:	f7fc faa4 	bl	80027cc <__aeabi_d2f>
 8006284:	1c02      	adds	r2, r0, #0
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
				*current = *power / pdo.battery.Max_Voltage; //also conservative
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681c      	ldr	r4, [r3, #0]
 800628e:	2312      	movs	r3, #18
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	049b      	lsls	r3, r3, #18
 8006296:	0d9b      	lsrs	r3, r3, #22
 8006298:	b29b      	uxth	r3, r3
 800629a:	0018      	movs	r0, r3
 800629c:	f7fa fc5c 	bl	8000b58 <__aeabi_i2f>
 80062a0:	1c03      	adds	r3, r0, #0
 80062a2:	1c19      	adds	r1, r3, #0
 80062a4:	1c20      	adds	r0, r4, #0
 80062a6:	f7fa f94d 	bl	8000544 <__aeabi_fdiv>
 80062aa:	1c03      	adds	r3, r0, #0
 80062ac:	1c1a      	adds	r2, r3, #0
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	601a      	str	r2, [r3, #0]
				return HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e05f      	b.n	8006376 <pd_auto_nego+0xbc2>
			case SUPPLY_VAR:
				*voltage = pdo.variable.Min_Voltage * 0.05; //conservative
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	031b      	lsls	r3, r3, #12
 80062ba:	0d9b      	lsrs	r3, r3, #22
 80062bc:	b29b      	uxth	r3, r3
 80062be:	0018      	movs	r0, r3
 80062c0:	f7fc f9c6 	bl	8002650 <__aeabi_i2d>
 80062c4:	4a30      	ldr	r2, [pc, #192]	; (8006388 <pd_auto_nego+0xbd4>)
 80062c6:	4b31      	ldr	r3, [pc, #196]	; (800638c <pd_auto_nego+0xbd8>)
 80062c8:	f7fb fbb6 	bl	8001a38 <__aeabi_dmul>
 80062cc:	0003      	movs	r3, r0
 80062ce:	000c      	movs	r4, r1
 80062d0:	0018      	movs	r0, r3
 80062d2:	0021      	movs	r1, r4
 80062d4:	f7fc fa7a 	bl	80027cc <__aeabi_d2f>
 80062d8:	1c02      	adds	r2, r0, #0
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]
				*current = rdo.fix_var.op_current * 0.01;
 80062de:	2314      	movs	r3, #20
 80062e0:	18fb      	adds	r3, r7, r3
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	031b      	lsls	r3, r3, #12
 80062e6:	0d9b      	lsrs	r3, r3, #22
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	0018      	movs	r0, r3
 80062ec:	f7fc f9b0 	bl	8002650 <__aeabi_i2d>
 80062f0:	4a27      	ldr	r2, [pc, #156]	; (8006390 <pd_auto_nego+0xbdc>)
 80062f2:	4b28      	ldr	r3, [pc, #160]	; (8006394 <pd_auto_nego+0xbe0>)
 80062f4:	f7fb fba0 	bl	8001a38 <__aeabi_dmul>
 80062f8:	0003      	movs	r3, r0
 80062fa:	000c      	movs	r4, r1
 80062fc:	0018      	movs	r0, r3
 80062fe:	0021      	movs	r1, r4
 8006300:	f7fc fa64 	bl	80027cc <__aeabi_d2f>
 8006304:	1c02      	adds	r2, r0, #0
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	601a      	str	r2, [r3, #0]
				*power = (*voltage) * (*current);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1c19      	adds	r1, r3, #0
 8006314:	1c10      	adds	r0, r2, #0
 8006316:	f7fa faed 	bl	80008f4 <__aeabi_fmul>
 800631a:	1c03      	adds	r3, r0, #0
 800631c:	1c1a      	adds	r2, r3, #0
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
				return HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	e027      	b.n	8006376 <pd_auto_nego+0xbc2>
			}
		}

		if(reject_received) printf("Reject received!\n");
 8006326:	4b1d      	ldr	r3, [pc, #116]	; (800639c <pd_auto_nego+0xbe8>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <pd_auto_nego+0xb86>
 8006330:	4b1b      	ldr	r3, [pc, #108]	; (80063a0 <pd_auto_nego+0xbec>)
 8006332:	0018      	movs	r0, r3
 8006334:	f001 f87e 	bl	8007434 <puts>
 8006338:	e003      	b.n	8006342 <pd_auto_nego+0xb8e>
		else printf("Accept/Reject Timed Out!\n");
 800633a:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <pd_auto_nego+0xbf0>)
 800633c:	0018      	movs	r0, r3
 800633e:	f001 f879 	bl	8007434 <puts>

		//if we timed out or got a reject (for some weird reason) retry the negotiation again
		retry_counter--;
 8006342:	2167      	movs	r1, #103	; 0x67
 8006344:	187b      	adds	r3, r7, r1
 8006346:	781a      	ldrb	r2, [r3, #0]
 8006348:	187b      	adds	r3, r7, r1
 800634a:	3a01      	subs	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
		if(retry_counter == 0) break;
 800634e:	187b      	adds	r3, r7, r1
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <pd_auto_nego+0xbb6>
		timeout_counter = HAL_GetTick(); //reset the timeout counter if we're retrying again
 8006356:	f7fc fb17 	bl	8002988 <HAL_GetTick>
 800635a:	0003      	movs	r3, r0
 800635c:	663b      	str	r3, [r7, #96]	; 0x60
	while(true) {
 800635e:	f7ff fa43 	bl	80057e8 <pd_auto_nego+0x34>
		if(retry_counter == 0) break;
 8006362:	46c0      	nop			; (mov r8, r8)
 8006364:	e002      	b.n	800636c <pd_auto_nego+0xbb8>
		if(num_source_pdos <= 1) break;
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	e000      	b.n	800636c <pd_auto_nego+0xbb8>
		if(retry_counter == 0) break;
 800636a:	46c0      	nop			; (mov r8, r8)
	}
	printf("Negotiation Failed!\n");
 800636c:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <pd_auto_nego+0xbf4>)
 800636e:	0018      	movs	r0, r3
 8006370:	f001 f860 	bl	8007434 <puts>
	return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	b01a      	add	sp, #104	; 0x68
 800637c:	bdb0      	pop	{r4, r5, r7, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	08009560 	.word	0x08009560
 8006384:	200001f4 	.word	0x200001f4
 8006388:	9999999a 	.word	0x9999999a
 800638c:	3fa99999 	.word	0x3fa99999
 8006390:	47ae147b 	.word	0x47ae147b
 8006394:	3f847ae1 	.word	0x3f847ae1
 8006398:	3fd00000 	.word	0x3fd00000
 800639c:	20000212 	.word	0x20000212
 80063a0:	08009578 	.word	0x08009578
 80063a4:	0800958c 	.word	0x0800958c
 80063a8:	080095a8 	.word	0x080095a8

080063ac <pd_attached>:

bool pd_attached() {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
	return attached;
 80063b0:	4b02      	ldr	r3, [pc, #8]	; (80063bc <pd_attached+0x10>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	b2db      	uxtb	r3, r3
}
 80063b6:	0018      	movs	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20000214 	.word	0x20000214

080063c0 <pd_onAttach>:

HAL_StatusTypeDef pd_onAttach() {
 80063c0:	b590      	push	{r4, r7, lr}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	//read from the PORT_STATUS_1 register to make sure we're connected to a source
	uint8_t ps1_reg;
	status = i2c_read_reg(STUSB_ADDR, PORT_STATUS_1_REG, &ps1_reg);
 80063c6:	1dfc      	adds	r4, r7, #7
 80063c8:	1dbb      	adds	r3, r7, #6
 80063ca:	001a      	movs	r2, r3
 80063cc:	210e      	movs	r1, #14
 80063ce:	2050      	movs	r0, #80	; 0x50
 80063d0:	f7fe fe12 	bl	8004ff8 <i2c_read_reg>
 80063d4:	0003      	movs	r3, r0
 80063d6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80063d8:	1dfb      	adds	r3, r7, #7
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <pd_onAttach+0x26>
 80063e0:	1dfb      	adds	r3, r7, #7
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	e027      	b.n	8006436 <pd_onAttach+0x76>

	//if we're attached and attached to a source
	if((ps1_reg & PS1_CONNECTION_BITS) == ATTACHED_SOURCE) {
 80063e6:	1dbb      	adds	r3, r7, #6
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	001a      	movs	r2, r3
 80063ec:	23e0      	movs	r3, #224	; 0xe0
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d113      	bne.n	800641c <pd_onAttach+0x5c>
		status = pd_init(); //initialize the STUSB4500
 80063f4:	1dfc      	adds	r4, r7, #7
 80063f6:	f7ff f892 	bl	800551e <pd_init>
 80063fa:	0003      	movs	r3, r0
 80063fc:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK) return status;
 80063fe:	1dfb      	adds	r3, r7, #7
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <pd_onAttach+0x4c>
 8006406:	1dfb      	adds	r3, r7, #7
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	e014      	b.n	8006436 <pd_onAttach+0x76>

		attached = true; //set the attached flag
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <pd_onAttach+0x80>)
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]
		printf("Attached!\n");
 8006412:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <pd_onAttach+0x84>)
 8006414:	0018      	movs	r0, r3
 8006416:	f001 f80d 	bl	8007434 <puts>
 800641a:	e00a      	b.n	8006432 <pd_onAttach+0x72>
	} else {
		attached = false;
 800641c:	4b08      	ldr	r3, [pc, #32]	; (8006440 <pd_onAttach+0x80>)
 800641e:	2200      	movs	r2, #0
 8006420:	701a      	strb	r2, [r3, #0]
		printf("Attached, but not to a source! PORT_STATUS_1 reg contents: 0x%x\n", ps1_reg);
 8006422:	1dbb      	adds	r3, r7, #6
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	001a      	movs	r2, r3
 8006428:	4b07      	ldr	r3, [pc, #28]	; (8006448 <pd_onAttach+0x88>)
 800642a:	0011      	movs	r1, r2
 800642c:	0018      	movs	r0, r3
 800642e:	f000 ff87 	bl	8007340 <iprintf>
	}
	return status;
 8006432:	1dfb      	adds	r3, r7, #7
 8006434:	781b      	ldrb	r3, [r3, #0]
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b003      	add	sp, #12
 800643c:	bd90      	pop	{r4, r7, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	20000214 	.word	0x20000214
 8006444:	080095bc 	.word	0x080095bc
 8006448:	080095c8 	.word	0x080095c8

0800644c <pd_onDetach>:

HAL_StatusTypeDef pd_onDetach() {
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
	//just reset the flags and stuff on the detach event
	if(attached == true) {
 8006452:	4b11      	ldr	r3, [pc, #68]	; (8006498 <pd_onDetach+0x4c>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d017      	beq.n	800648c <pd_onDetach+0x40>
		attached = false;
 800645c:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <pd_onDetach+0x4c>)
 800645e:	2200      	movs	r2, #0
 8006460:	701a      	strb	r2, [r3, #0]
		num_source_pdos = 0;
 8006462:	4b0e      	ldr	r3, [pc, #56]	; (800649c <pd_onDetach+0x50>)
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++) source_pdos[i].data = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	607b      	str	r3, [r7, #4]
 800646c:	e007      	b.n	800647e <pd_onDetach+0x32>
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <pd_onDetach+0x54>)
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	0092      	lsls	r2, r2, #2
 8006474:	2100      	movs	r1, #0
 8006476:	50d1      	str	r1, [r2, r3]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3301      	adds	r3, #1
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b07      	cmp	r3, #7
 8006482:	ddf4      	ble.n	800646e <pd_onDetach+0x22>
		printf("Detached!\n");
 8006484:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <pd_onDetach+0x58>)
 8006486:	0018      	movs	r0, r3
 8006488:	f000 ffd4 	bl	8007434 <puts>
	}
	return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	0018      	movs	r0, r3
 8006490:	46bd      	mov	sp, r7
 8006492:	b002      	add	sp, #8
 8006494:	bd80      	pop	{r7, pc}
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	20000214 	.word	0x20000214
 800649c:	200001f1 	.word	0x200001f1
 80064a0:	200001f4 	.word	0x200001f4
 80064a4:	0800960c 	.word	0x0800960c

080064a8 <pd_onAlert>:

HAL_StatusTypeDef pd_onAlert() {
 80064a8:	b5b0      	push	{r4, r5, r7, lr}
 80064aa:	b090      	sub	sp, #64	; 0x40
 80064ac:	af00      	add	r7, sp, #0
	if(!attached) return HAL_OK; //just return early if the function call isn't relevant
 80064ae:	4ba2      	ldr	r3, [pc, #648]	; (8006738 <pd_onAlert+0x290>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2201      	movs	r2, #1
 80064b6:	4053      	eors	r3, r2
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <pd_onAlert+0x1a>
 80064be:	2300      	movs	r3, #0
 80064c0:	e135      	b.n	800672e <pd_onAlert+0x286>
	HAL_StatusTypeDef status;

	//read ALERT_STATUS_1 and ALERT_STATUS_1_MASK (invert this) and bitwise AND them together
	//left with the interrupt sources that we care about
	uint8_t alert_regs[2]; //goes STATUS, then MASK
	status = i2c_read_regs(STUSB_ADDR, ALERT_STATUS_1_REG, 2, alert_regs);
 80064c2:	253f      	movs	r5, #63	; 0x3f
 80064c4:	197c      	adds	r4, r7, r5
 80064c6:	2334      	movs	r3, #52	; 0x34
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	2202      	movs	r2, #2
 80064cc:	210b      	movs	r1, #11
 80064ce:	2050      	movs	r0, #80	; 0x50
 80064d0:	f7fe fe12 	bl	80050f8 <i2c_read_regs>
 80064d4:	0003      	movs	r3, r0
 80064d6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return status;
 80064d8:	197b      	adds	r3, r7, r5
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <pd_onAlert+0x40>
 80064e0:	233f      	movs	r3, #63	; 0x3f
 80064e2:	18fb      	adds	r3, r7, r3
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	e122      	b.n	800672e <pd_onAlert+0x286>
	Alt_S1Reg_Map alert_sources;
	alert_sources.data = alert_regs[0] & ~alert_regs[1]; //invert since 0 UNmasks the interrupt
 80064e8:	2234      	movs	r2, #52	; 0x34
 80064ea:	18bb      	adds	r3, r7, r2
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	b25b      	sxtb	r3, r3
 80064f0:	18ba      	adds	r2, r7, r2
 80064f2:	7852      	ldrb	r2, [r2, #1]
 80064f4:	b252      	sxtb	r2, r2
 80064f6:	43d2      	mvns	r2, r2
 80064f8:	b252      	sxtb	r2, r2
 80064fa:	4013      	ands	r3, r2
 80064fc:	b25b      	sxtb	r3, r3
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	2130      	movs	r1, #48	; 0x30
 8006502:	187b      	adds	r3, r7, r1
 8006504:	701a      	strb	r2, [r3, #0]

	//if there's an alert due to a hard reset
	if(alert_sources.map.hreset_mask) {
 8006506:	187b      	adds	r3, r7, r1
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	227f      	movs	r2, #127	; 0x7f
 800650c:	4393      	bics	r3, r2
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <pd_onAlert+0x74>
		printf("Received Hard Reset!\n");
 8006514:	4b89      	ldr	r3, [pc, #548]	; (800673c <pd_onAlert+0x294>)
 8006516:	0018      	movs	r0, r3
 8006518:	f000 ff8c 	bl	8007434 <puts>
		//should take care of things itself
		// I THINK??? (i hope lol)
	}

	//if there's some event involving VBUS
	if(alert_sources.map.tcmon_mask) {
 800651c:	2330      	movs	r3, #48	; 0x30
 800651e:	18fb      	adds	r3, r7, r3
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2220      	movs	r2, #32
 8006524:	4013      	ands	r3, r2
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d016      	beq.n	800655a <pd_onAlert+0xb2>
		printf("VBus Event!\n");
 800652c:	4b84      	ldr	r3, [pc, #528]	; (8006740 <pd_onAlert+0x298>)
 800652e:	0018      	movs	r0, r3
 8006530:	f000 ff80 	bl	8007434 <puts>
		uint8_t tcmon_regs[2];
		status = i2c_read_regs(STUSB_ADDR, TYPEC_MON_STATUS_0_REG, 2, tcmon_regs);
 8006534:	253f      	movs	r5, #63	; 0x3f
 8006536:	197c      	adds	r4, r7, r5
 8006538:	232c      	movs	r3, #44	; 0x2c
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	2202      	movs	r2, #2
 800653e:	210f      	movs	r1, #15
 8006540:	2050      	movs	r0, #80	; 0x50
 8006542:	f7fe fdd9 	bl	80050f8 <i2c_read_regs>
 8006546:	0003      	movs	r3, r0
 8006548:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK) return status;
 800654a:	197b      	adds	r3, r7, r5
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <pd_onAlert+0xb2>
 8006552:	233f      	movs	r3, #63	; 0x3f
 8006554:	18fb      	adds	r3, r7, r3
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	e0e9      	b.n	800672e <pd_onAlert+0x286>
		//will most likely update a flag variable when the VBUS goes valid
		//just like how we're doing when we receive protocol events
	}

	//if there's some hardware fault with the CC lines
	if(alert_sources.map.ccfault_mask) {
 800655a:	2330      	movs	r3, #48	; 0x30
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2210      	movs	r2, #16
 8006562:	4013      	ands	r3, r2
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <pd_onAlert+0xf0>
		printf("CC Fault Event!\n");
 800656a:	4b76      	ldr	r3, [pc, #472]	; (8006744 <pd_onAlert+0x29c>)
 800656c:	0018      	movs	r0, r3
 800656e:	f000 ff61 	bl	8007434 <puts>
		uint8_t ccfault_regs[2];
		status = i2c_read_regs(STUSB_ADDR, CC_FAULT_STATUS_0_REG, 2, ccfault_regs);
 8006572:	253f      	movs	r5, #63	; 0x3f
 8006574:	197c      	adds	r4, r7, r5
 8006576:	2328      	movs	r3, #40	; 0x28
 8006578:	18fb      	adds	r3, r7, r3
 800657a:	2202      	movs	r2, #2
 800657c:	2112      	movs	r1, #18
 800657e:	2050      	movs	r0, #80	; 0x50
 8006580:	f7fe fdba 	bl	80050f8 <i2c_read_regs>
 8006584:	0003      	movs	r3, r0
 8006586:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK) return status;
 8006588:	197b      	adds	r3, r7, r5
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <pd_onAlert+0xf0>
 8006590:	233f      	movs	r3, #63	; 0x3f
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	e0ca      	b.n	800672e <pd_onAlert+0x286>

		//TODO: figure out how to handle these cc line hardware faults
	}

	//if there's a protocol event
	if(alert_sources.map.prt_mask) {
 8006598:	2330      	movs	r3, #48	; 0x30
 800659a:	18fb      	adds	r3, r7, r3
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2202      	movs	r2, #2
 80065a0:	4013      	ands	r3, r2
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d100      	bne.n	80065aa <pd_onAlert+0x102>
 80065a8:	e0be      	b.n	8006728 <pd_onAlert+0x280>

		//read from the protocol status register
		uint8_t prt_reg;
		status = i2c_read_reg(STUSB_ADDR, PROTOCOL_STATUS_REG, &prt_reg);
 80065aa:	253f      	movs	r5, #63	; 0x3f
 80065ac:	197c      	adds	r4, r7, r5
 80065ae:	2327      	movs	r3, #39	; 0x27
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	001a      	movs	r2, r3
 80065b4:	2116      	movs	r1, #22
 80065b6:	2050      	movs	r0, #80	; 0x50
 80065b8:	f7fe fd1e 	bl	8004ff8 <i2c_read_reg>
 80065bc:	0003      	movs	r3, r0
 80065be:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK) return status;
 80065c0:	197b      	adds	r3, r7, r5
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <pd_onAlert+0x128>
 80065c8:	233f      	movs	r3, #63	; 0x3f
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	e0ae      	b.n	800672e <pd_onAlert+0x286>

		//if we've received a new message from the source
		if(prt_reg & PRTL_MESSAGE_RECEIVED) {
 80065d0:	2327      	movs	r3, #39	; 0x27
 80065d2:	18fb      	adds	r3, r7, r3
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	001a      	movs	r2, r3
 80065d8:	2304      	movs	r3, #4
 80065da:	4013      	ands	r3, r2
 80065dc:	d100      	bne.n	80065e0 <pd_onAlert+0x138>
 80065de:	e0a3      	b.n	8006728 <pd_onAlert+0x280>

			//read the RX_HEADER registers
			uint8_t header_regs[2];
			PDHeaderTypedef header;
			status = i2c_read_regs(STUSB_ADDR, RX_HEADER_REG, 2, header_regs);
 80065e0:	253f      	movs	r5, #63	; 0x3f
 80065e2:	197c      	adds	r4, r7, r5
 80065e4:	2324      	movs	r3, #36	; 0x24
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	2202      	movs	r2, #2
 80065ea:	2131      	movs	r1, #49	; 0x31
 80065ec:	2050      	movs	r0, #80	; 0x50
 80065ee:	f7fe fd83 	bl	80050f8 <i2c_read_regs>
 80065f2:	0003      	movs	r3, r0
 80065f4:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK) return status;
 80065f6:	197b      	adds	r3, r7, r5
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <pd_onAlert+0x15e>
 80065fe:	233f      	movs	r3, #63	; 0x3f
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	e093      	b.n	800672e <pd_onAlert+0x286>
			header.data = (header_regs[1] << 8) | header_regs[0];
 8006606:	2124      	movs	r1, #36	; 0x24
 8006608:	187b      	adds	r3, r7, r1
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	b21a      	sxth	r2, r3
 8006610:	187b      	adds	r3, r7, r1
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b21b      	sxth	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b21b      	sxth	r3, r3
 800661a:	b29a      	uxth	r2, r3
 800661c:	2120      	movs	r1, #32
 800661e:	187b      	adds	r3, r7, r1
 8006620:	801a      	strh	r2, [r3, #0]

			//determine if the header is a data or control message
			if(header.map.num_objects == 0) {
 8006622:	187b      	adds	r3, r7, r1
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2270      	movs	r2, #112	; 0x70
 8006628:	4013      	ands	r3, r2
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d123      	bne.n	8006678 <pd_onAlert+0x1d0>
				//control message
				//simply update the flag variables here
				if(header.map.message_type == CONTROL_ACCEPT) {
 8006630:	2320      	movs	r3, #32
 8006632:	18fb      	adds	r3, r7, r3
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	221f      	movs	r2, #31
 8006638:	4013      	ands	r3, r2
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b03      	cmp	r3, #3
 800663e:	d103      	bne.n	8006648 <pd_onAlert+0x1a0>
					accept_received = true;
 8006640:	4b41      	ldr	r3, [pc, #260]	; (8006748 <pd_onAlert+0x2a0>)
 8006642:	2201      	movs	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e06f      	b.n	8006728 <pd_onAlert+0x280>
				} else if(header.map.message_type == CONTROL_REJECT) {
 8006648:	2320      	movs	r3, #32
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	221f      	movs	r2, #31
 8006650:	4013      	ands	r3, r2
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b04      	cmp	r3, #4
 8006656:	d103      	bne.n	8006660 <pd_onAlert+0x1b8>
					reject_received = true;
 8006658:	4b3c      	ldr	r3, [pc, #240]	; (800674c <pd_onAlert+0x2a4>)
 800665a:	2201      	movs	r2, #1
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	e063      	b.n	8006728 <pd_onAlert+0x280>
				} else if(header.map.message_type == CONTROL_PSRDY) {
 8006660:	2320      	movs	r3, #32
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	221f      	movs	r2, #31
 8006668:	4013      	ands	r3, r2
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b06      	cmp	r3, #6
 800666e:	d15b      	bne.n	8006728 <pd_onAlert+0x280>
					psready_received = true;
 8006670:	4b37      	ldr	r3, [pc, #220]	; (8006750 <pd_onAlert+0x2a8>)
 8006672:	2201      	movs	r2, #1
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e057      	b.n	8006728 <pd_onAlert+0x280>
				}
			} else {
				//data message
				//if it's a source capabiliites message
				if(header.map.message_type == DATA_SOURCECAP) {
 8006678:	2320      	movs	r3, #32
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	221f      	movs	r2, #31
 8006680:	4013      	ands	r3, r2
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	d14f      	bne.n	8006728 <pd_onAlert+0x280>
					//read the number of bytes received
					uint8_t num_objects;
					num_objects = header.map.num_objects;
 8006688:	2320      	movs	r3, #32
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	065b      	lsls	r3, r3, #25
 8006690:	0f5b      	lsrs	r3, r3, #29
 8006692:	b2da      	uxtb	r2, r3
 8006694:	2337      	movs	r3, #55	; 0x37
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	701a      	strb	r2, [r3, #0]

					//read the received data objects
					// 4 bytes per object
					uint8_t rx_data_objects[28];
					status = i2c_read_regs(STUSB_ADDR, RX_DATA_OBJ_REG, 28/*num_objects << 2*/, rx_data_objects);
 800669a:	253f      	movs	r5, #63	; 0x3f
 800669c:	197c      	adds	r4, r7, r5
 800669e:	1d3b      	adds	r3, r7, #4
 80066a0:	221c      	movs	r2, #28
 80066a2:	2133      	movs	r1, #51	; 0x33
 80066a4:	2050      	movs	r0, #80	; 0x50
 80066a6:	f7fe fd27 	bl	80050f8 <i2c_read_regs>
 80066aa:	0003      	movs	r3, r0
 80066ac:	7023      	strb	r3, [r4, #0]
					if(status != HAL_OK) return status;
 80066ae:	197b      	adds	r3, r7, r5
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <pd_onAlert+0x218>
 80066b6:	233f      	movs	r3, #63	; 0x3f
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	781b      	ldrb	r3, [r3, #0]
			if(status != HAL_OK) return status;
 80066bc:	46c0      	nop			; (mov r8, r8)
 80066be:	e036      	b.n	800672e <pd_onAlert+0x286>

					//stitch the PDOs together and store them into the static pdo array
					for(int i = 0; i < num_objects; i++) {
 80066c0:	2300      	movs	r3, #0
 80066c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80066c4:	e022      	b.n	800670c <pd_onAlert+0x264>
						source_pdos[i].data = 	(rx_data_objects[(i<<2)]) |
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	1d3a      	adds	r2, r7, #4
 80066cc:	5cd3      	ldrb	r3, [r2, r3]
 80066ce:	0019      	movs	r1, r3
												(rx_data_objects[(i<<2) + 1] << 8)  |
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	3301      	adds	r3, #1
 80066d6:	1d3a      	adds	r2, r7, #4
 80066d8:	5cd3      	ldrb	r3, [r2, r3]
 80066da:	021b      	lsls	r3, r3, #8
						source_pdos[i].data = 	(rx_data_objects[(i<<2)]) |
 80066dc:	000a      	movs	r2, r1
 80066de:	431a      	orrs	r2, r3
												(rx_data_objects[(i<<2) + 2] << 16) |
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	3302      	adds	r3, #2
 80066e6:	1d39      	adds	r1, r7, #4
 80066e8:	5ccb      	ldrb	r3, [r1, r3]
 80066ea:	041b      	lsls	r3, r3, #16
												(rx_data_objects[(i<<2) + 1] << 8)  |
 80066ec:	431a      	orrs	r2, r3
												(rx_data_objects[(i<<2) + 3] << 24);
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	3303      	adds	r3, #3
 80066f4:	1d39      	adds	r1, r7, #4
 80066f6:	5ccb      	ldrb	r3, [r1, r3]
 80066f8:	061b      	lsls	r3, r3, #24
												(rx_data_objects[(i<<2) + 2] << 16) |
 80066fa:	4313      	orrs	r3, r2
 80066fc:	0019      	movs	r1, r3
						source_pdos[i].data = 	(rx_data_objects[(i<<2)]) |
 80066fe:	4b15      	ldr	r3, [pc, #84]	; (8006754 <pd_onAlert+0x2ac>)
 8006700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006702:	0092      	lsls	r2, r2, #2
 8006704:	50d1      	str	r1, [r2, r3]
					for(int i = 0; i < num_objects; i++) {
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	3301      	adds	r3, #1
 800670a:	63bb      	str	r3, [r7, #56]	; 0x38
 800670c:	2337      	movs	r3, #55	; 0x37
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006714:	429a      	cmp	r2, r3
 8006716:	dbd6      	blt.n	80066c6 <pd_onAlert+0x21e>
					}

					num_source_pdos = num_objects; //and update the `num_source_pdos` as well
 8006718:	4b0f      	ldr	r3, [pc, #60]	; (8006758 <pd_onAlert+0x2b0>)
 800671a:	2237      	movs	r2, #55	; 0x37
 800671c:	18ba      	adds	r2, r7, r2
 800671e:	7812      	ldrb	r2, [r2, #0]
 8006720:	701a      	strb	r2, [r3, #0]
					pdo_received = true; //update the flag
 8006722:	4b0e      	ldr	r3, [pc, #56]	; (800675c <pd_onAlert+0x2b4>)
 8006724:	2201      	movs	r2, #1
 8006726:	701a      	strb	r2, [r3, #0]
				} //source capabilities
			} //data message
		} //protocol event message received
	} //protocol event

	return status;
 8006728:	233f      	movs	r3, #63	; 0x3f
 800672a:	18fb      	adds	r3, r7, r3
 800672c:	781b      	ldrb	r3, [r3, #0]
}
 800672e:	0018      	movs	r0, r3
 8006730:	46bd      	mov	sp, r7
 8006732:	b010      	add	sp, #64	; 0x40
 8006734:	bdb0      	pop	{r4, r5, r7, pc}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	20000214 	.word	0x20000214
 800673c:	08009618 	.word	0x08009618
 8006740:	08009630 	.word	0x08009630
 8006744:	0800963c 	.word	0x0800963c
 8006748:	20000211 	.word	0x20000211
 800674c:	20000212 	.word	0x20000212
 8006750:	20000213 	.word	0x20000213
 8006754:	200001f4 	.word	0x200001f4
 8006758:	200001f1 	.word	0x200001f1
 800675c:	20000210 	.word	0x20000210

08006760 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	e00a      	b.n	8006788 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006772:	e000      	b.n	8006776 <_read+0x16>
 8006774:	bf00      	nop
 8006776:	0001      	movs	r1, r0
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	60ba      	str	r2, [r7, #8]
 800677e:	b2ca      	uxtb	r2, r1
 8006780:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	3301      	adds	r3, #1
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	dbf0      	blt.n	8006772 <_read+0x12>
	}

return len;
 8006790:	687b      	ldr	r3, [r7, #4]
}
 8006792:	0018      	movs	r0, r3
 8006794:	46bd      	mov	sp, r7
 8006796:	b006      	add	sp, #24
 8006798:	bd80      	pop	{r7, pc}

0800679a <_close>:
	}
	return len;
}

int _close(int file)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
	return -1;
 80067a2:	2301      	movs	r3, #1
 80067a4:	425b      	negs	r3, r3
}
 80067a6:	0018      	movs	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b002      	add	sp, #8
 80067ac:	bd80      	pop	{r7, pc}

080067ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2280      	movs	r2, #128	; 0x80
 80067bc:	0192      	lsls	r2, r2, #6
 80067be:	605a      	str	r2, [r3, #4]
	return 0;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	0018      	movs	r0, r3
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b002      	add	sp, #8
 80067c8:	bd80      	pop	{r7, pc}

080067ca <_isatty>:

int _isatty(int file)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
	return 1;
 80067d2:	2301      	movs	r3, #1
}
 80067d4:	0018      	movs	r0, r3
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}

080067dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
	return 0;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	0018      	movs	r0, r3
 80067ec:	46bd      	mov	sp, r7
 80067ee:	b004      	add	sp, #16
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80067fc:	4b11      	ldr	r3, [pc, #68]	; (8006844 <_sbrk+0x50>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d102      	bne.n	800680a <_sbrk+0x16>
		heap_end = &end;
 8006804:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <_sbrk+0x50>)
 8006806:	4a10      	ldr	r2, [pc, #64]	; (8006848 <_sbrk+0x54>)
 8006808:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800680a:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <_sbrk+0x50>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006810:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <_sbrk+0x50>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	18d3      	adds	r3, r2, r3
 8006818:	466a      	mov	r2, sp
 800681a:	4293      	cmp	r3, r2
 800681c:	d907      	bls.n	800682e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800681e:	f000 f8ff 	bl	8006a20 <__errno>
 8006822:	0003      	movs	r3, r0
 8006824:	220c      	movs	r2, #12
 8006826:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006828:	2301      	movs	r3, #1
 800682a:	425b      	negs	r3, r3
 800682c:	e006      	b.n	800683c <_sbrk+0x48>
	}

	heap_end += incr;
 800682e:	4b05      	ldr	r3, [pc, #20]	; (8006844 <_sbrk+0x50>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	18d2      	adds	r2, r2, r3
 8006836:	4b03      	ldr	r3, [pc, #12]	; (8006844 <_sbrk+0x50>)
 8006838:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800683a:	68fb      	ldr	r3, [r7, #12]
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b004      	add	sp, #16
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000218 	.word	0x20000218
 8006848:	200002f0 	.word	0x200002f0

0800684c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8006850:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <SystemInit+0x70>)
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	4b19      	ldr	r3, [pc, #100]	; (80068bc <SystemInit+0x70>)
 8006856:	2101      	movs	r1, #1
 8006858:	430a      	orrs	r2, r1
 800685a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800685c:	4b17      	ldr	r3, [pc, #92]	; (80068bc <SystemInit+0x70>)
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	4b16      	ldr	r3, [pc, #88]	; (80068bc <SystemInit+0x70>)
 8006862:	4917      	ldr	r1, [pc, #92]	; (80068c0 <SystemInit+0x74>)
 8006864:	400a      	ands	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8006868:	4b14      	ldr	r3, [pc, #80]	; (80068bc <SystemInit+0x70>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4b13      	ldr	r3, [pc, #76]	; (80068bc <SystemInit+0x70>)
 800686e:	4915      	ldr	r1, [pc, #84]	; (80068c4 <SystemInit+0x78>)
 8006870:	400a      	ands	r2, r1
 8006872:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006874:	4b11      	ldr	r3, [pc, #68]	; (80068bc <SystemInit+0x70>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	4b10      	ldr	r3, [pc, #64]	; (80068bc <SystemInit+0x70>)
 800687a:	4913      	ldr	r1, [pc, #76]	; (80068c8 <SystemInit+0x7c>)
 800687c:	400a      	ands	r2, r1
 800687e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8006880:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <SystemInit+0x70>)
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	4b0d      	ldr	r3, [pc, #52]	; (80068bc <SystemInit+0x70>)
 8006886:	4911      	ldr	r1, [pc, #68]	; (80068cc <SystemInit+0x80>)
 8006888:	400a      	ands	r2, r1
 800688a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <SystemInit+0x70>)
 800688e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006890:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <SystemInit+0x70>)
 8006892:	210f      	movs	r1, #15
 8006894:	438a      	bics	r2, r1
 8006896:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8006898:	4b08      	ldr	r3, [pc, #32]	; (80068bc <SystemInit+0x70>)
 800689a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800689c:	4b07      	ldr	r3, [pc, #28]	; (80068bc <SystemInit+0x70>)
 800689e:	490c      	ldr	r1, [pc, #48]	; (80068d0 <SystemInit+0x84>)
 80068a0:	400a      	ands	r2, r1
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <SystemInit+0x70>)
 80068a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a8:	4b04      	ldr	r3, [pc, #16]	; (80068bc <SystemInit+0x70>)
 80068aa:	2101      	movs	r1, #1
 80068ac:	438a      	bics	r2, r1
 80068ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80068b0:	4b02      	ldr	r3, [pc, #8]	; (80068bc <SystemInit+0x70>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	609a      	str	r2, [r3, #8]

}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40021000 	.word	0x40021000
 80068c0:	08ffb80c 	.word	0x08ffb80c
 80068c4:	fef6ffff 	.word	0xfef6ffff
 80068c8:	fffbffff 	.word	0xfffbffff
 80068cc:	ffc0ffff 	.word	0xffc0ffff
 80068d0:	fffcfe2c 	.word	0xfffcfe2c

080068d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80068d8:	4b14      	ldr	r3, [pc, #80]	; (800692c <MX_USART2_UART_Init+0x58>)
 80068da:	4a15      	ldr	r2, [pc, #84]	; (8006930 <MX_USART2_UART_Init+0x5c>)
 80068dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <MX_USART2_UART_Init+0x58>)
 80068e0:	22e1      	movs	r2, #225	; 0xe1
 80068e2:	0252      	lsls	r2, r2, #9
 80068e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80068e6:	4b11      	ldr	r3, [pc, #68]	; (800692c <MX_USART2_UART_Init+0x58>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068ec:	4b0f      	ldr	r3, [pc, #60]	; (800692c <MX_USART2_UART_Init+0x58>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068f2:	4b0e      	ldr	r3, [pc, #56]	; (800692c <MX_USART2_UART_Init+0x58>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80068f8:	4b0c      	ldr	r3, [pc, #48]	; (800692c <MX_USART2_UART_Init+0x58>)
 80068fa:	220c      	movs	r2, #12
 80068fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068fe:	4b0b      	ldr	r3, [pc, #44]	; (800692c <MX_USART2_UART_Init+0x58>)
 8006900:	2200      	movs	r2, #0
 8006902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006904:	4b09      	ldr	r3, [pc, #36]	; (800692c <MX_USART2_UART_Init+0x58>)
 8006906:	2200      	movs	r2, #0
 8006908:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800690a:	4b08      	ldr	r3, [pc, #32]	; (800692c <MX_USART2_UART_Init+0x58>)
 800690c:	2200      	movs	r2, #0
 800690e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <MX_USART2_UART_Init+0x58>)
 8006912:	2200      	movs	r2, #0
 8006914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006916:	4b05      	ldr	r3, [pc, #20]	; (800692c <MX_USART2_UART_Init+0x58>)
 8006918:	0018      	movs	r0, r3
 800691a:	f7fd fe31 	bl	8004580 <HAL_UART_Init>
 800691e:	1e03      	subs	r3, r0, #0
 8006920:	d001      	beq.n	8006926 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006922:	f7fe fda7 	bl	8005474 <Error_Handler>
  }

}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000278 	.word	0x20000278
 8006930:	40004400 	.word	0x40004400

08006934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	; 0x28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800693c:	2314      	movs	r3, #20
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	0018      	movs	r0, r3
 8006942:	2314      	movs	r3, #20
 8006944:	001a      	movs	r2, r3
 8006946:	2100      	movs	r1, #0
 8006948:	f000 f894 	bl	8006a74 <memset>
  if(uartHandle->Instance==USART2)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1c      	ldr	r2, [pc, #112]	; (80069c4 <HAL_UART_MspInit+0x90>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d132      	bne.n	80069bc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006956:	4b1c      	ldr	r3, [pc, #112]	; (80069c8 <HAL_UART_MspInit+0x94>)
 8006958:	69da      	ldr	r2, [r3, #28]
 800695a:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <HAL_UART_MspInit+0x94>)
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	0289      	lsls	r1, r1, #10
 8006960:	430a      	orrs	r2, r1
 8006962:	61da      	str	r2, [r3, #28]
 8006964:	4b18      	ldr	r3, [pc, #96]	; (80069c8 <HAL_UART_MspInit+0x94>)
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	2380      	movs	r3, #128	; 0x80
 800696a:	029b      	lsls	r3, r3, #10
 800696c:	4013      	ands	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <HAL_UART_MspInit+0x94>)
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <HAL_UART_MspInit+0x94>)
 8006978:	2180      	movs	r1, #128	; 0x80
 800697a:	0289      	lsls	r1, r1, #10
 800697c:	430a      	orrs	r2, r1
 800697e:	615a      	str	r2, [r3, #20]
 8006980:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <HAL_UART_MspInit+0x94>)
 8006982:	695a      	ldr	r2, [r3, #20]
 8006984:	2380      	movs	r3, #128	; 0x80
 8006986:	029b      	lsls	r3, r3, #10
 8006988:	4013      	ands	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800698e:	2114      	movs	r1, #20
 8006990:	187b      	adds	r3, r7, r1
 8006992:	220c      	movs	r2, #12
 8006994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006996:	187b      	adds	r3, r7, r1
 8006998:	2202      	movs	r2, #2
 800699a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699c:	187b      	adds	r3, r7, r1
 800699e:	2200      	movs	r2, #0
 80069a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069a2:	187b      	adds	r3, r7, r1
 80069a4:	2203      	movs	r2, #3
 80069a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80069a8:	187b      	adds	r3, r7, r1
 80069aa:	2201      	movs	r2, #1
 80069ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ae:	187a      	adds	r2, r7, r1
 80069b0:	2390      	movs	r3, #144	; 0x90
 80069b2:	05db      	lsls	r3, r3, #23
 80069b4:	0011      	movs	r1, r2
 80069b6:	0018      	movs	r0, r3
 80069b8:	f7fc f8e8 	bl	8002b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80069bc:	46c0      	nop			; (mov r8, r8)
 80069be:	46bd      	mov	sp, r7
 80069c0:	b00a      	add	sp, #40	; 0x28
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40004400 	.word	0x40004400
 80069c8:	40021000 	.word	0x40021000

080069cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80069cc:	480d      	ldr	r0, [pc, #52]	; (8006a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80069ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80069d0:	480d      	ldr	r0, [pc, #52]	; (8006a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80069d2:	490e      	ldr	r1, [pc, #56]	; (8006a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80069d4:	4a0e      	ldr	r2, [pc, #56]	; (8006a10 <LoopForever+0xe>)
  movs r3, #0
 80069d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069d8:	e002      	b.n	80069e0 <LoopCopyDataInit>

080069da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069de:	3304      	adds	r3, #4

080069e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069e4:	d3f9      	bcc.n	80069da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069e6:	4a0b      	ldr	r2, [pc, #44]	; (8006a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80069e8:	4c0b      	ldr	r4, [pc, #44]	; (8006a18 <LoopForever+0x16>)
  movs r3, #0
 80069ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069ec:	e001      	b.n	80069f2 <LoopFillZerobss>

080069ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069f0:	3204      	adds	r2, #4

080069f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069f4:	d3fb      	bcc.n	80069ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80069f6:	f7ff ff29 	bl	800684c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80069fa:	f000 f817 	bl	8006a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80069fe:	f7fe fc29 	bl	8005254 <main>

08006a02 <LoopForever>:

LoopForever:
    b LoopForever
 8006a02:	e7fe      	b.n	8006a02 <LoopForever>
  ldr   r0, =_estack
 8006a04:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a0c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8006a10:	08009a70 	.word	0x08009a70
  ldr r2, =_sbss
 8006a14:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8006a18:	200002ec 	.word	0x200002ec

08006a1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a1c:	e7fe      	b.n	8006a1c <ADC1_COMP_IRQHandler>
	...

08006a20 <__errno>:
 8006a20:	4b01      	ldr	r3, [pc, #4]	; (8006a28 <__errno+0x8>)
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	4770      	bx	lr
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	20000004 	.word	0x20000004

08006a2c <__libc_init_array>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	2600      	movs	r6, #0
 8006a30:	4d0c      	ldr	r5, [pc, #48]	; (8006a64 <__libc_init_array+0x38>)
 8006a32:	4c0d      	ldr	r4, [pc, #52]	; (8006a68 <__libc_init_array+0x3c>)
 8006a34:	1b64      	subs	r4, r4, r5
 8006a36:	10a4      	asrs	r4, r4, #2
 8006a38:	42a6      	cmp	r6, r4
 8006a3a:	d109      	bne.n	8006a50 <__libc_init_array+0x24>
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	f002 fc21 	bl	8009284 <_init>
 8006a42:	4d0a      	ldr	r5, [pc, #40]	; (8006a6c <__libc_init_array+0x40>)
 8006a44:	4c0a      	ldr	r4, [pc, #40]	; (8006a70 <__libc_init_array+0x44>)
 8006a46:	1b64      	subs	r4, r4, r5
 8006a48:	10a4      	asrs	r4, r4, #2
 8006a4a:	42a6      	cmp	r6, r4
 8006a4c:	d105      	bne.n	8006a5a <__libc_init_array+0x2e>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	00b3      	lsls	r3, r6, #2
 8006a52:	58eb      	ldr	r3, [r5, r3]
 8006a54:	4798      	blx	r3
 8006a56:	3601      	adds	r6, #1
 8006a58:	e7ee      	b.n	8006a38 <__libc_init_array+0xc>
 8006a5a:	00b3      	lsls	r3, r6, #2
 8006a5c:	58eb      	ldr	r3, [r5, r3]
 8006a5e:	4798      	blx	r3
 8006a60:	3601      	adds	r6, #1
 8006a62:	e7f2      	b.n	8006a4a <__libc_init_array+0x1e>
 8006a64:	08009a68 	.word	0x08009a68
 8006a68:	08009a68 	.word	0x08009a68
 8006a6c:	08009a68 	.word	0x08009a68
 8006a70:	08009a6c 	.word	0x08009a6c

08006a74 <memset>:
 8006a74:	0003      	movs	r3, r0
 8006a76:	1812      	adds	r2, r2, r0
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d100      	bne.n	8006a7e <memset+0xa>
 8006a7c:	4770      	bx	lr
 8006a7e:	7019      	strb	r1, [r3, #0]
 8006a80:	3301      	adds	r3, #1
 8006a82:	e7f9      	b.n	8006a78 <memset+0x4>

08006a84 <__cvt>:
 8006a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a86:	b08b      	sub	sp, #44	; 0x2c
 8006a88:	0014      	movs	r4, r2
 8006a8a:	1e1d      	subs	r5, r3, #0
 8006a8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006a8e:	da53      	bge.n	8006b38 <__cvt+0xb4>
 8006a90:	2480      	movs	r4, #128	; 0x80
 8006a92:	0624      	lsls	r4, r4, #24
 8006a94:	191b      	adds	r3, r3, r4
 8006a96:	001d      	movs	r5, r3
 8006a98:	0014      	movs	r4, r2
 8006a9a:	232d      	movs	r3, #45	; 0x2d
 8006a9c:	700b      	strb	r3, [r1, #0]
 8006a9e:	2320      	movs	r3, #32
 8006aa0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	439e      	bics	r6, r3
 8006aa6:	2e46      	cmp	r6, #70	; 0x46
 8006aa8:	d007      	beq.n	8006aba <__cvt+0x36>
 8006aaa:	0033      	movs	r3, r6
 8006aac:	3b45      	subs	r3, #69	; 0x45
 8006aae:	4259      	negs	r1, r3
 8006ab0:	414b      	adcs	r3, r1
 8006ab2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006ab4:	3a01      	subs	r2, #1
 8006ab6:	18cb      	adds	r3, r1, r3
 8006ab8:	9310      	str	r3, [sp, #64]	; 0x40
 8006aba:	ab09      	add	r3, sp, #36	; 0x24
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	ab08      	add	r3, sp, #32
 8006ac0:	9303      	str	r3, [sp, #12]
 8006ac2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ac4:	9200      	str	r2, [sp, #0]
 8006ac6:	9302      	str	r3, [sp, #8]
 8006ac8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006aca:	0022      	movs	r2, r4
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	002b      	movs	r3, r5
 8006ad0:	f000 fe0c 	bl	80076ec <_dtoa_r>
 8006ad4:	0007      	movs	r7, r0
 8006ad6:	2e47      	cmp	r6, #71	; 0x47
 8006ad8:	d102      	bne.n	8006ae0 <__cvt+0x5c>
 8006ada:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006adc:	07db      	lsls	r3, r3, #31
 8006ade:	d524      	bpl.n	8006b2a <__cvt+0xa6>
 8006ae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ae2:	18fb      	adds	r3, r7, r3
 8006ae4:	9307      	str	r3, [sp, #28]
 8006ae6:	2e46      	cmp	r6, #70	; 0x46
 8006ae8:	d114      	bne.n	8006b14 <__cvt+0x90>
 8006aea:	783b      	ldrb	r3, [r7, #0]
 8006aec:	2b30      	cmp	r3, #48	; 0x30
 8006aee:	d10c      	bne.n	8006b0a <__cvt+0x86>
 8006af0:	2200      	movs	r2, #0
 8006af2:	2300      	movs	r3, #0
 8006af4:	0020      	movs	r0, r4
 8006af6:	0029      	movs	r1, r5
 8006af8:	f7f9 fc9e 	bl	8000438 <__aeabi_dcmpeq>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d104      	bne.n	8006b0a <__cvt+0x86>
 8006b00:	2301      	movs	r3, #1
 8006b02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b04:	1a9b      	subs	r3, r3, r2
 8006b06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b0c:	9a07      	ldr	r2, [sp, #28]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	18d3      	adds	r3, r2, r3
 8006b12:	9307      	str	r3, [sp, #28]
 8006b14:	2200      	movs	r2, #0
 8006b16:	2300      	movs	r3, #0
 8006b18:	0020      	movs	r0, r4
 8006b1a:	0029      	movs	r1, r5
 8006b1c:	f7f9 fc8c 	bl	8000438 <__aeabi_dcmpeq>
 8006b20:	2230      	movs	r2, #48	; 0x30
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d00d      	beq.n	8006b42 <__cvt+0xbe>
 8006b26:	9b07      	ldr	r3, [sp, #28]
 8006b28:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2a:	0038      	movs	r0, r7
 8006b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b30:	1bdb      	subs	r3, r3, r7
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	b00b      	add	sp, #44	; 0x2c
 8006b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e7af      	b.n	8006a9c <__cvt+0x18>
 8006b3c:	1c59      	adds	r1, r3, #1
 8006b3e:	9109      	str	r1, [sp, #36]	; 0x24
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b44:	9907      	ldr	r1, [sp, #28]
 8006b46:	428b      	cmp	r3, r1
 8006b48:	d3f8      	bcc.n	8006b3c <__cvt+0xb8>
 8006b4a:	e7ee      	b.n	8006b2a <__cvt+0xa6>

08006b4c <__exponent>:
 8006b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4e:	1c83      	adds	r3, r0, #2
 8006b50:	b085      	sub	sp, #20
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	0006      	movs	r6, r0
 8006b56:	000c      	movs	r4, r1
 8006b58:	7002      	strb	r2, [r0, #0]
 8006b5a:	232b      	movs	r3, #43	; 0x2b
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	da01      	bge.n	8006b64 <__exponent+0x18>
 8006b60:	232d      	movs	r3, #45	; 0x2d
 8006b62:	424c      	negs	r4, r1
 8006b64:	7073      	strb	r3, [r6, #1]
 8006b66:	2c09      	cmp	r4, #9
 8006b68:	dd22      	ble.n	8006bb0 <__exponent+0x64>
 8006b6a:	ab02      	add	r3, sp, #8
 8006b6c:	1ddd      	adds	r5, r3, #7
 8006b6e:	0020      	movs	r0, r4
 8006b70:	210a      	movs	r1, #10
 8006b72:	f7f9 fc4b 	bl	800040c <__aeabi_idivmod>
 8006b76:	1e6f      	subs	r7, r5, #1
 8006b78:	3130      	adds	r1, #48	; 0x30
 8006b7a:	7039      	strb	r1, [r7, #0]
 8006b7c:	0020      	movs	r0, r4
 8006b7e:	210a      	movs	r1, #10
 8006b80:	f7f9 fb5e 	bl	8000240 <__divsi3>
 8006b84:	0004      	movs	r4, r0
 8006b86:	2809      	cmp	r0, #9
 8006b88:	dc0b      	bgt.n	8006ba2 <__exponent+0x56>
 8006b8a:	3d02      	subs	r5, #2
 8006b8c:	3430      	adds	r4, #48	; 0x30
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	702c      	strb	r4, [r5, #0]
 8006b92:	aa02      	add	r2, sp, #8
 8006b94:	3207      	adds	r2, #7
 8006b96:	0018      	movs	r0, r3
 8006b98:	42aa      	cmp	r2, r5
 8006b9a:	d804      	bhi.n	8006ba6 <__exponent+0x5a>
 8006b9c:	1b80      	subs	r0, r0, r6
 8006b9e:	b005      	add	sp, #20
 8006ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba2:	003d      	movs	r5, r7
 8006ba4:	e7e3      	b.n	8006b6e <__exponent+0x22>
 8006ba6:	782a      	ldrb	r2, [r5, #0]
 8006ba8:	3501      	adds	r5, #1
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	e7f0      	b.n	8006b92 <__exponent+0x46>
 8006bb0:	2330      	movs	r3, #48	; 0x30
 8006bb2:	18e4      	adds	r4, r4, r3
 8006bb4:	70b3      	strb	r3, [r6, #2]
 8006bb6:	1d30      	adds	r0, r6, #4
 8006bb8:	70f4      	strb	r4, [r6, #3]
 8006bba:	e7ef      	b.n	8006b9c <__exponent+0x50>

08006bbc <_printf_float>:
 8006bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bbe:	b095      	sub	sp, #84	; 0x54
 8006bc0:	000c      	movs	r4, r1
 8006bc2:	920a      	str	r2, [sp, #40]	; 0x28
 8006bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bc6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006bc8:	9009      	str	r0, [sp, #36]	; 0x24
 8006bca:	f001 fcfb 	bl	80085c4 <_localeconv_r>
 8006bce:	6803      	ldr	r3, [r0, #0]
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8006bd4:	f7f9 fa98 	bl	8000108 <strlen>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9312      	str	r3, [sp, #72]	; 0x48
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	900e      	str	r0, [sp, #56]	; 0x38
 8006be0:	930d      	str	r3, [sp, #52]	; 0x34
 8006be2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006be4:	7e27      	ldrb	r7, [r4, #24]
 8006be6:	682b      	ldr	r3, [r5, #0]
 8006be8:	2207      	movs	r2, #7
 8006bea:	05c9      	lsls	r1, r1, #23
 8006bec:	d545      	bpl.n	8006c7a <_printf_float+0xbe>
 8006bee:	189b      	adds	r3, r3, r2
 8006bf0:	4393      	bics	r3, r2
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	3208      	adds	r2, #8
 8006bf6:	602a      	str	r2, [r5, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	64a2      	str	r2, [r4, #72]	; 0x48
 8006bfe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006c00:	2201      	movs	r2, #1
 8006c02:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006c04:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8006c06:	006b      	lsls	r3, r5, #1
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c0c:	4252      	negs	r2, r2
 8006c0e:	4bac      	ldr	r3, [pc, #688]	; (8006ec0 <_printf_float+0x304>)
 8006c10:	0030      	movs	r0, r6
 8006c12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c14:	f7fb fcca 	bl	80025ac <__aeabi_dcmpun>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d130      	bne.n	8006c7e <_printf_float+0xc2>
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4ba8      	ldr	r3, [pc, #672]	; (8006ec0 <_printf_float+0x304>)
 8006c20:	4252      	negs	r2, r2
 8006c22:	0030      	movs	r0, r6
 8006c24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c26:	f7f9 fc17 	bl	8000458 <__aeabi_dcmple>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d127      	bne.n	8006c7e <_printf_float+0xc2>
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2300      	movs	r3, #0
 8006c32:	0030      	movs	r0, r6
 8006c34:	0029      	movs	r1, r5
 8006c36:	f7f9 fc05 	bl	8000444 <__aeabi_dcmplt>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d003      	beq.n	8006c46 <_printf_float+0x8a>
 8006c3e:	0023      	movs	r3, r4
 8006c40:	222d      	movs	r2, #45	; 0x2d
 8006c42:	3343      	adds	r3, #67	; 0x43
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	4d9f      	ldr	r5, [pc, #636]	; (8006ec4 <_printf_float+0x308>)
 8006c48:	2f47      	cmp	r7, #71	; 0x47
 8006c4a:	d800      	bhi.n	8006c4e <_printf_float+0x92>
 8006c4c:	4d9e      	ldr	r5, [pc, #632]	; (8006ec8 <_printf_float+0x30c>)
 8006c4e:	2303      	movs	r3, #3
 8006c50:	2600      	movs	r6, #0
 8006c52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	3301      	adds	r3, #1
 8006c58:	439a      	bics	r2, r3
 8006c5a:	6022      	str	r2, [r4, #0]
 8006c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c5e:	aa13      	add	r2, sp, #76	; 0x4c
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	0021      	movs	r1, r4
 8006c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c68:	f000 f9f4 	bl	8007054 <_printf_common>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d000      	beq.n	8006c72 <_printf_float+0xb6>
 8006c70:	e093      	b.n	8006d9a <_printf_float+0x1de>
 8006c72:	2001      	movs	r0, #1
 8006c74:	4240      	negs	r0, r0
 8006c76:	b015      	add	sp, #84	; 0x54
 8006c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c7a:	3307      	adds	r3, #7
 8006c7c:	e7b8      	b.n	8006bf0 <_printf_float+0x34>
 8006c7e:	0032      	movs	r2, r6
 8006c80:	002b      	movs	r3, r5
 8006c82:	0030      	movs	r0, r6
 8006c84:	0029      	movs	r1, r5
 8006c86:	f7fb fc91 	bl	80025ac <__aeabi_dcmpun>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d004      	beq.n	8006c98 <_printf_float+0xdc>
 8006c8e:	4d8f      	ldr	r5, [pc, #572]	; (8006ecc <_printf_float+0x310>)
 8006c90:	2f47      	cmp	r7, #71	; 0x47
 8006c92:	d8dc      	bhi.n	8006c4e <_printf_float+0x92>
 8006c94:	4d8e      	ldr	r5, [pc, #568]	; (8006ed0 <_printf_float+0x314>)
 8006c96:	e7da      	b.n	8006c4e <_printf_float+0x92>
 8006c98:	2380      	movs	r3, #128	; 0x80
 8006c9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c9c:	6862      	ldr	r2, [r4, #4]
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	1c51      	adds	r1, r2, #1
 8006ca4:	d143      	bne.n	8006d2e <_printf_float+0x172>
 8006ca6:	3207      	adds	r2, #7
 8006ca8:	6062      	str	r2, [r4, #4]
 8006caa:	aa12      	add	r2, sp, #72	; 0x48
 8006cac:	2100      	movs	r1, #0
 8006cae:	9205      	str	r2, [sp, #20]
 8006cb0:	aa11      	add	r2, sp, #68	; 0x44
 8006cb2:	9203      	str	r2, [sp, #12]
 8006cb4:	2223      	movs	r2, #35	; 0x23
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	9106      	str	r1, [sp, #24]
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	a908      	add	r1, sp, #32
 8006cbe:	6863      	ldr	r3, [r4, #4]
 8006cc0:	1852      	adds	r2, r2, r1
 8006cc2:	9202      	str	r2, [sp, #8]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	0032      	movs	r2, r6
 8006cc8:	002b      	movs	r3, r5
 8006cca:	9704      	str	r7, [sp, #16]
 8006ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cce:	f7ff fed9 	bl	8006a84 <__cvt>
 8006cd2:	2320      	movs	r3, #32
 8006cd4:	003a      	movs	r2, r7
 8006cd6:	0005      	movs	r5, r0
 8006cd8:	439a      	bics	r2, r3
 8006cda:	2a47      	cmp	r2, #71	; 0x47
 8006cdc:	d107      	bne.n	8006cee <_printf_float+0x132>
 8006cde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ce0:	1cda      	adds	r2, r3, #3
 8006ce2:	db02      	blt.n	8006cea <_printf_float+0x12e>
 8006ce4:	6862      	ldr	r2, [r4, #4]
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	dd45      	ble.n	8006d76 <_printf_float+0x1ba>
 8006cea:	3f02      	subs	r7, #2
 8006cec:	b2ff      	uxtb	r7, r7
 8006cee:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006cf0:	2f65      	cmp	r7, #101	; 0x65
 8006cf2:	d825      	bhi.n	8006d40 <_printf_float+0x184>
 8006cf4:	0020      	movs	r0, r4
 8006cf6:	3901      	subs	r1, #1
 8006cf8:	003a      	movs	r2, r7
 8006cfa:	3050      	adds	r0, #80	; 0x50
 8006cfc:	9111      	str	r1, [sp, #68]	; 0x44
 8006cfe:	f7ff ff25 	bl	8006b4c <__exponent>
 8006d02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d04:	0006      	movs	r6, r0
 8006d06:	1813      	adds	r3, r2, r0
 8006d08:	6123      	str	r3, [r4, #16]
 8006d0a:	2a01      	cmp	r2, #1
 8006d0c:	dc02      	bgt.n	8006d14 <_printf_float+0x158>
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	07d2      	lsls	r2, r2, #31
 8006d12:	d501      	bpl.n	8006d18 <_printf_float+0x15c>
 8006d14:	3301      	adds	r3, #1
 8006d16:	6123      	str	r3, [r4, #16]
 8006d18:	2323      	movs	r3, #35	; 0x23
 8006d1a:	aa08      	add	r2, sp, #32
 8006d1c:	189b      	adds	r3, r3, r2
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d09b      	beq.n	8006c5c <_printf_float+0xa0>
 8006d24:	0023      	movs	r3, r4
 8006d26:	222d      	movs	r2, #45	; 0x2d
 8006d28:	3343      	adds	r3, #67	; 0x43
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	e796      	b.n	8006c5c <_printf_float+0xa0>
 8006d2e:	2f67      	cmp	r7, #103	; 0x67
 8006d30:	d100      	bne.n	8006d34 <_printf_float+0x178>
 8006d32:	e176      	b.n	8007022 <_printf_float+0x466>
 8006d34:	2f47      	cmp	r7, #71	; 0x47
 8006d36:	d1b8      	bne.n	8006caa <_printf_float+0xee>
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	d1b6      	bne.n	8006caa <_printf_float+0xee>
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	e7b3      	b.n	8006ca8 <_printf_float+0xec>
 8006d40:	2f66      	cmp	r7, #102	; 0x66
 8006d42:	d119      	bne.n	8006d78 <_printf_float+0x1bc>
 8006d44:	6863      	ldr	r3, [r4, #4]
 8006d46:	2900      	cmp	r1, #0
 8006d48:	dd0c      	ble.n	8006d64 <_printf_float+0x1a8>
 8006d4a:	6121      	str	r1, [r4, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d102      	bne.n	8006d56 <_printf_float+0x19a>
 8006d50:	6822      	ldr	r2, [r4, #0]
 8006d52:	07d2      	lsls	r2, r2, #31
 8006d54:	d502      	bpl.n	8006d5c <_printf_float+0x1a0>
 8006d56:	3301      	adds	r3, #1
 8006d58:	185b      	adds	r3, r3, r1
 8006d5a:	6123      	str	r3, [r4, #16]
 8006d5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d5e:	2600      	movs	r6, #0
 8006d60:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d62:	e7d9      	b.n	8006d18 <_printf_float+0x15c>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <_printf_float+0x1b4>
 8006d68:	2201      	movs	r2, #1
 8006d6a:	6821      	ldr	r1, [r4, #0]
 8006d6c:	4211      	tst	r1, r2
 8006d6e:	d000      	beq.n	8006d72 <_printf_float+0x1b6>
 8006d70:	1c9a      	adds	r2, r3, #2
 8006d72:	6122      	str	r2, [r4, #16]
 8006d74:	e7f2      	b.n	8006d5c <_printf_float+0x1a0>
 8006d76:	2767      	movs	r7, #103	; 0x67
 8006d78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	db05      	blt.n	8006d8c <_printf_float+0x1d0>
 8006d80:	6822      	ldr	r2, [r4, #0]
 8006d82:	6123      	str	r3, [r4, #16]
 8006d84:	07d2      	lsls	r2, r2, #31
 8006d86:	d5e9      	bpl.n	8006d5c <_printf_float+0x1a0>
 8006d88:	3301      	adds	r3, #1
 8006d8a:	e7e6      	b.n	8006d5a <_printf_float+0x19e>
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	dc01      	bgt.n	8006d96 <_printf_float+0x1da>
 8006d92:	1849      	adds	r1, r1, r1
 8006d94:	1ac9      	subs	r1, r1, r3
 8006d96:	1852      	adds	r2, r2, r1
 8006d98:	e7eb      	b.n	8006d72 <_printf_float+0x1b6>
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	0553      	lsls	r3, r2, #21
 8006d9e:	d408      	bmi.n	8006db2 <_printf_float+0x1f6>
 8006da0:	6923      	ldr	r3, [r4, #16]
 8006da2:	002a      	movs	r2, r5
 8006da4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006da8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006daa:	47a8      	blx	r5
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d129      	bne.n	8006e04 <_printf_float+0x248>
 8006db0:	e75f      	b.n	8006c72 <_printf_float+0xb6>
 8006db2:	2f65      	cmp	r7, #101	; 0x65
 8006db4:	d800      	bhi.n	8006db8 <_printf_float+0x1fc>
 8006db6:	e0e0      	b.n	8006f7a <_printf_float+0x3be>
 8006db8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006dba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f7f9 fb3a 	bl	8000438 <__aeabi_dcmpeq>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d034      	beq.n	8006e32 <_printf_float+0x276>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	4a42      	ldr	r2, [pc, #264]	; (8006ed4 <_printf_float+0x318>)
 8006dcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006dce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006dd2:	47a8      	blx	r5
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d100      	bne.n	8006dda <_printf_float+0x21e>
 8006dd8:	e74b      	b.n	8006c72 <_printf_float+0xb6>
 8006dda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dde:	4293      	cmp	r3, r2
 8006de0:	db02      	blt.n	8006de8 <_printf_float+0x22c>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	07db      	lsls	r3, r3, #31
 8006de6:	d50d      	bpl.n	8006e04 <_printf_float+0x248>
 8006de8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006df2:	47a8      	blx	r5
 8006df4:	2500      	movs	r5, #0
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	d100      	bne.n	8006dfc <_printf_float+0x240>
 8006dfa:	e73a      	b.n	8006c72 <_printf_float+0xb6>
 8006dfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	42ab      	cmp	r3, r5
 8006e02:	dc0a      	bgt.n	8006e1a <_printf_float+0x25e>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	079b      	lsls	r3, r3, #30
 8006e08:	d500      	bpl.n	8006e0c <_printf_float+0x250>
 8006e0a:	e108      	b.n	800701e <_printf_float+0x462>
 8006e0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e0e:	68e0      	ldr	r0, [r4, #12]
 8006e10:	4298      	cmp	r0, r3
 8006e12:	db00      	blt.n	8006e16 <_printf_float+0x25a>
 8006e14:	e72f      	b.n	8006c76 <_printf_float+0xba>
 8006e16:	0018      	movs	r0, r3
 8006e18:	e72d      	b.n	8006c76 <_printf_float+0xba>
 8006e1a:	0022      	movs	r2, r4
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	321a      	adds	r2, #26
 8006e20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e26:	47b0      	blx	r6
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d100      	bne.n	8006e2e <_printf_float+0x272>
 8006e2c:	e721      	b.n	8006c72 <_printf_float+0xb6>
 8006e2e:	3501      	adds	r5, #1
 8006e30:	e7e4      	b.n	8006dfc <_printf_float+0x240>
 8006e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	dc2d      	bgt.n	8006e94 <_printf_float+0x2d8>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4a26      	ldr	r2, [pc, #152]	; (8006ed4 <_printf_float+0x318>)
 8006e3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e42:	47b0      	blx	r6
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d100      	bne.n	8006e4a <_printf_float+0x28e>
 8006e48:	e713      	b.n	8006c72 <_printf_float+0xb6>
 8006e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <_printf_float+0x2a0>
 8006e50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <_printf_float+0x2a0>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	07db      	lsls	r3, r3, #31
 8006e5a:	d5d3      	bpl.n	8006e04 <_printf_float+0x248>
 8006e5c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e66:	47b0      	blx	r6
 8006e68:	2600      	movs	r6, #0
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	d100      	bne.n	8006e70 <_printf_float+0x2b4>
 8006e6e:	e700      	b.n	8006c72 <_printf_float+0xb6>
 8006e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e72:	425b      	negs	r3, r3
 8006e74:	42b3      	cmp	r3, r6
 8006e76:	dc01      	bgt.n	8006e7c <_printf_float+0x2c0>
 8006e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e7a:	e792      	b.n	8006da2 <_printf_float+0x1e6>
 8006e7c:	0022      	movs	r2, r4
 8006e7e:	2301      	movs	r3, #1
 8006e80:	321a      	adds	r2, #26
 8006e82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e86:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006e88:	47b8      	blx	r7
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	d100      	bne.n	8006e90 <_printf_float+0x2d4>
 8006e8e:	e6f0      	b.n	8006c72 <_printf_float+0xb6>
 8006e90:	3601      	adds	r6, #1
 8006e92:	e7ed      	b.n	8006e70 <_printf_float+0x2b4>
 8006e94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e96:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006e98:	429f      	cmp	r7, r3
 8006e9a:	dd00      	ble.n	8006e9e <_printf_float+0x2e2>
 8006e9c:	001f      	movs	r7, r3
 8006e9e:	2f00      	cmp	r7, #0
 8006ea0:	dd08      	ble.n	8006eb4 <_printf_float+0x2f8>
 8006ea2:	003b      	movs	r3, r7
 8006ea4:	002a      	movs	r2, r5
 8006ea6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eaa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006eac:	47b0      	blx	r6
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	d100      	bne.n	8006eb4 <_printf_float+0x2f8>
 8006eb2:	e6de      	b.n	8006c72 <_printf_float+0xb6>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8006eb8:	43fb      	mvns	r3, r7
 8006eba:	17db      	asrs	r3, r3, #31
 8006ebc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ebe:	e018      	b.n	8006ef2 <_printf_float+0x336>
 8006ec0:	7fefffff 	.word	0x7fefffff
 8006ec4:	080097ac 	.word	0x080097ac
 8006ec8:	080097a8 	.word	0x080097a8
 8006ecc:	080097b4 	.word	0x080097b4
 8006ed0:	080097b0 	.word	0x080097b0
 8006ed4:	080097b8 	.word	0x080097b8
 8006ed8:	0022      	movs	r2, r4
 8006eda:	2301      	movs	r3, #1
 8006edc:	321a      	adds	r2, #26
 8006ede:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ee2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ee4:	47b0      	blx	r6
 8006ee6:	1c43      	adds	r3, r0, #1
 8006ee8:	d100      	bne.n	8006eec <_printf_float+0x330>
 8006eea:	e6c2      	b.n	8006c72 <_printf_float+0xb6>
 8006eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eee:	3301      	adds	r3, #1
 8006ef0:	930d      	str	r3, [sp, #52]	; 0x34
 8006ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ef4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8006ef6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ef8:	403b      	ands	r3, r7
 8006efa:	1af3      	subs	r3, r6, r3
 8006efc:	4293      	cmp	r3, r2
 8006efe:	dceb      	bgt.n	8006ed8 <_printf_float+0x31c>
 8006f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f04:	19ad      	adds	r5, r5, r6
 8006f06:	4293      	cmp	r3, r2
 8006f08:	db10      	blt.n	8006f2c <_printf_float+0x370>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	07db      	lsls	r3, r3, #31
 8006f0e:	d40d      	bmi.n	8006f2c <_printf_float+0x370>
 8006f10:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006f12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f14:	1bbe      	subs	r6, r7, r6
 8006f16:	1aff      	subs	r7, r7, r3
 8006f18:	42b7      	cmp	r7, r6
 8006f1a:	dd00      	ble.n	8006f1e <_printf_float+0x362>
 8006f1c:	0037      	movs	r7, r6
 8006f1e:	2f00      	cmp	r7, #0
 8006f20:	dc0d      	bgt.n	8006f3e <_printf_float+0x382>
 8006f22:	43fe      	mvns	r6, r7
 8006f24:	17f3      	asrs	r3, r6, #31
 8006f26:	2500      	movs	r5, #0
 8006f28:	930c      	str	r3, [sp, #48]	; 0x30
 8006f2a:	e01c      	b.n	8006f66 <_printf_float+0x3aa>
 8006f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f34:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006f36:	47b8      	blx	r7
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d1e9      	bne.n	8006f10 <_printf_float+0x354>
 8006f3c:	e699      	b.n	8006c72 <_printf_float+0xb6>
 8006f3e:	003b      	movs	r3, r7
 8006f40:	002a      	movs	r2, r5
 8006f42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006f48:	47a8      	blx	r5
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	d1e9      	bne.n	8006f22 <_printf_float+0x366>
 8006f4e:	e690      	b.n	8006c72 <_printf_float+0xb6>
 8006f50:	0022      	movs	r2, r4
 8006f52:	2301      	movs	r3, #1
 8006f54:	321a      	adds	r2, #26
 8006f56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f5a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006f5c:	47b0      	blx	r6
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d100      	bne.n	8006f64 <_printf_float+0x3a8>
 8006f62:	e686      	b.n	8006c72 <_printf_float+0xb6>
 8006f64:	3501      	adds	r5, #1
 8006f66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	003a      	movs	r2, r7
 8006f70:	400a      	ands	r2, r1
 8006f72:	1a9b      	subs	r3, r3, r2
 8006f74:	42ab      	cmp	r3, r5
 8006f76:	dceb      	bgt.n	8006f50 <_printf_float+0x394>
 8006f78:	e744      	b.n	8006e04 <_printf_float+0x248>
 8006f7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	dc02      	bgt.n	8006f86 <_printf_float+0x3ca>
 8006f80:	2301      	movs	r3, #1
 8006f82:	421a      	tst	r2, r3
 8006f84:	d032      	beq.n	8006fec <_printf_float+0x430>
 8006f86:	2301      	movs	r3, #1
 8006f88:	002a      	movs	r2, r5
 8006f8a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f8e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006f90:	47b8      	blx	r7
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	d100      	bne.n	8006f98 <_printf_float+0x3dc>
 8006f96:	e66c      	b.n	8006c72 <_printf_float+0xb6>
 8006f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fa0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006fa2:	3501      	adds	r5, #1
 8006fa4:	47b8      	blx	r7
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	d100      	bne.n	8006fac <_printf_float+0x3f0>
 8006faa:	e662      	b.n	8006c72 <_printf_float+0xb6>
 8006fac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006fae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006fb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	1e5f      	subs	r7, r3, #1
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f7f9 fa3e 	bl	8000438 <__aeabi_dcmpeq>
 8006fbc:	003b      	movs	r3, r7
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d014      	beq.n	8006fec <_printf_float+0x430>
 8006fc2:	2500      	movs	r5, #0
 8006fc4:	e00a      	b.n	8006fdc <_printf_float+0x420>
 8006fc6:	0022      	movs	r2, r4
 8006fc8:	2301      	movs	r3, #1
 8006fca:	321a      	adds	r2, #26
 8006fcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006fce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fd0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006fd2:	47b8      	blx	r7
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d100      	bne.n	8006fda <_printf_float+0x41e>
 8006fd8:	e64b      	b.n	8006c72 <_printf_float+0xb6>
 8006fda:	3501      	adds	r5, #1
 8006fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	dcf0      	bgt.n	8006fc6 <_printf_float+0x40a>
 8006fe4:	0022      	movs	r2, r4
 8006fe6:	0033      	movs	r3, r6
 8006fe8:	3250      	adds	r2, #80	; 0x50
 8006fea:	e6db      	b.n	8006da4 <_printf_float+0x1e8>
 8006fec:	002a      	movs	r2, r5
 8006fee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ff4:	47a8      	blx	r5
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d1f4      	bne.n	8006fe4 <_printf_float+0x428>
 8006ffa:	e63a      	b.n	8006c72 <_printf_float+0xb6>
 8006ffc:	0022      	movs	r2, r4
 8006ffe:	2301      	movs	r3, #1
 8007000:	3219      	adds	r2, #25
 8007002:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007006:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007008:	47b0      	blx	r6
 800700a:	1c43      	adds	r3, r0, #1
 800700c:	d100      	bne.n	8007010 <_printf_float+0x454>
 800700e:	e630      	b.n	8006c72 <_printf_float+0xb6>
 8007010:	3501      	adds	r5, #1
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	42ab      	cmp	r3, r5
 800701a:	dcef      	bgt.n	8006ffc <_printf_float+0x440>
 800701c:	e6f6      	b.n	8006e0c <_printf_float+0x250>
 800701e:	2500      	movs	r5, #0
 8007020:	e7f7      	b.n	8007012 <_printf_float+0x456>
 8007022:	2a00      	cmp	r2, #0
 8007024:	d100      	bne.n	8007028 <_printf_float+0x46c>
 8007026:	e689      	b.n	8006d3c <_printf_float+0x180>
 8007028:	2100      	movs	r1, #0
 800702a:	9106      	str	r1, [sp, #24]
 800702c:	a912      	add	r1, sp, #72	; 0x48
 800702e:	9105      	str	r1, [sp, #20]
 8007030:	a911      	add	r1, sp, #68	; 0x44
 8007032:	9103      	str	r1, [sp, #12]
 8007034:	2123      	movs	r1, #35	; 0x23
 8007036:	a808      	add	r0, sp, #32
 8007038:	1809      	adds	r1, r1, r0
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	9200      	str	r2, [sp, #0]
 8007040:	002b      	movs	r3, r5
 8007042:	9704      	str	r7, [sp, #16]
 8007044:	9102      	str	r1, [sp, #8]
 8007046:	0032      	movs	r2, r6
 8007048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800704a:	f7ff fd1b 	bl	8006a84 <__cvt>
 800704e:	0005      	movs	r5, r0
 8007050:	e645      	b.n	8006cde <_printf_float+0x122>
 8007052:	46c0      	nop			; (mov r8, r8)

08007054 <_printf_common>:
 8007054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007056:	0015      	movs	r5, r2
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	688a      	ldr	r2, [r1, #8]
 800705c:	690b      	ldr	r3, [r1, #16]
 800705e:	9000      	str	r0, [sp, #0]
 8007060:	000c      	movs	r4, r1
 8007062:	4293      	cmp	r3, r2
 8007064:	da00      	bge.n	8007068 <_printf_common+0x14>
 8007066:	0013      	movs	r3, r2
 8007068:	0022      	movs	r2, r4
 800706a:	602b      	str	r3, [r5, #0]
 800706c:	3243      	adds	r2, #67	; 0x43
 800706e:	7812      	ldrb	r2, [r2, #0]
 8007070:	2a00      	cmp	r2, #0
 8007072:	d001      	beq.n	8007078 <_printf_common+0x24>
 8007074:	3301      	adds	r3, #1
 8007076:	602b      	str	r3, [r5, #0]
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	069b      	lsls	r3, r3, #26
 800707c:	d502      	bpl.n	8007084 <_printf_common+0x30>
 800707e:	682b      	ldr	r3, [r5, #0]
 8007080:	3302      	adds	r3, #2
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	2706      	movs	r7, #6
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	401f      	ands	r7, r3
 800708a:	d027      	beq.n	80070dc <_printf_common+0x88>
 800708c:	0023      	movs	r3, r4
 800708e:	3343      	adds	r3, #67	; 0x43
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	1e5a      	subs	r2, r3, #1
 8007094:	4193      	sbcs	r3, r2
 8007096:	6822      	ldr	r2, [r4, #0]
 8007098:	0692      	lsls	r2, r2, #26
 800709a:	d430      	bmi.n	80070fe <_printf_common+0xaa>
 800709c:	0022      	movs	r2, r4
 800709e:	9901      	ldr	r1, [sp, #4]
 80070a0:	3243      	adds	r2, #67	; 0x43
 80070a2:	9800      	ldr	r0, [sp, #0]
 80070a4:	9e08      	ldr	r6, [sp, #32]
 80070a6:	47b0      	blx	r6
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d025      	beq.n	80070f8 <_printf_common+0xa4>
 80070ac:	2306      	movs	r3, #6
 80070ae:	6820      	ldr	r0, [r4, #0]
 80070b0:	682a      	ldr	r2, [r5, #0]
 80070b2:	68e1      	ldr	r1, [r4, #12]
 80070b4:	4003      	ands	r3, r0
 80070b6:	2500      	movs	r5, #0
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d103      	bne.n	80070c4 <_printf_common+0x70>
 80070bc:	1a8d      	subs	r5, r1, r2
 80070be:	43eb      	mvns	r3, r5
 80070c0:	17db      	asrs	r3, r3, #31
 80070c2:	401d      	ands	r5, r3
 80070c4:	68a3      	ldr	r3, [r4, #8]
 80070c6:	6922      	ldr	r2, [r4, #16]
 80070c8:	4293      	cmp	r3, r2
 80070ca:	dd01      	ble.n	80070d0 <_printf_common+0x7c>
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	18ed      	adds	r5, r5, r3
 80070d0:	2700      	movs	r7, #0
 80070d2:	42bd      	cmp	r5, r7
 80070d4:	d120      	bne.n	8007118 <_printf_common+0xc4>
 80070d6:	2000      	movs	r0, #0
 80070d8:	e010      	b.n	80070fc <_printf_common+0xa8>
 80070da:	3701      	adds	r7, #1
 80070dc:	68e3      	ldr	r3, [r4, #12]
 80070de:	682a      	ldr	r2, [r5, #0]
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	42bb      	cmp	r3, r7
 80070e4:	ddd2      	ble.n	800708c <_printf_common+0x38>
 80070e6:	0022      	movs	r2, r4
 80070e8:	2301      	movs	r3, #1
 80070ea:	3219      	adds	r2, #25
 80070ec:	9901      	ldr	r1, [sp, #4]
 80070ee:	9800      	ldr	r0, [sp, #0]
 80070f0:	9e08      	ldr	r6, [sp, #32]
 80070f2:	47b0      	blx	r6
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d1f0      	bne.n	80070da <_printf_common+0x86>
 80070f8:	2001      	movs	r0, #1
 80070fa:	4240      	negs	r0, r0
 80070fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070fe:	2030      	movs	r0, #48	; 0x30
 8007100:	18e1      	adds	r1, r4, r3
 8007102:	3143      	adds	r1, #67	; 0x43
 8007104:	7008      	strb	r0, [r1, #0]
 8007106:	0021      	movs	r1, r4
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	3145      	adds	r1, #69	; 0x45
 800710c:	7809      	ldrb	r1, [r1, #0]
 800710e:	18a2      	adds	r2, r4, r2
 8007110:	3243      	adds	r2, #67	; 0x43
 8007112:	3302      	adds	r3, #2
 8007114:	7011      	strb	r1, [r2, #0]
 8007116:	e7c1      	b.n	800709c <_printf_common+0x48>
 8007118:	0022      	movs	r2, r4
 800711a:	2301      	movs	r3, #1
 800711c:	321a      	adds	r2, #26
 800711e:	9901      	ldr	r1, [sp, #4]
 8007120:	9800      	ldr	r0, [sp, #0]
 8007122:	9e08      	ldr	r6, [sp, #32]
 8007124:	47b0      	blx	r6
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	d0e6      	beq.n	80070f8 <_printf_common+0xa4>
 800712a:	3701      	adds	r7, #1
 800712c:	e7d1      	b.n	80070d2 <_printf_common+0x7e>
	...

08007130 <_printf_i>:
 8007130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007132:	b089      	sub	sp, #36	; 0x24
 8007134:	9204      	str	r2, [sp, #16]
 8007136:	000a      	movs	r2, r1
 8007138:	3243      	adds	r2, #67	; 0x43
 800713a:	9305      	str	r3, [sp, #20]
 800713c:	9003      	str	r0, [sp, #12]
 800713e:	9202      	str	r2, [sp, #8]
 8007140:	7e0a      	ldrb	r2, [r1, #24]
 8007142:	000c      	movs	r4, r1
 8007144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007146:	2a6e      	cmp	r2, #110	; 0x6e
 8007148:	d100      	bne.n	800714c <_printf_i+0x1c>
 800714a:	e086      	b.n	800725a <_printf_i+0x12a>
 800714c:	d81f      	bhi.n	800718e <_printf_i+0x5e>
 800714e:	2a63      	cmp	r2, #99	; 0x63
 8007150:	d033      	beq.n	80071ba <_printf_i+0x8a>
 8007152:	d808      	bhi.n	8007166 <_printf_i+0x36>
 8007154:	2a00      	cmp	r2, #0
 8007156:	d100      	bne.n	800715a <_printf_i+0x2a>
 8007158:	e08c      	b.n	8007274 <_printf_i+0x144>
 800715a:	2a58      	cmp	r2, #88	; 0x58
 800715c:	d04d      	beq.n	80071fa <_printf_i+0xca>
 800715e:	0025      	movs	r5, r4
 8007160:	3542      	adds	r5, #66	; 0x42
 8007162:	702a      	strb	r2, [r5, #0]
 8007164:	e030      	b.n	80071c8 <_printf_i+0x98>
 8007166:	2a64      	cmp	r2, #100	; 0x64
 8007168:	d001      	beq.n	800716e <_printf_i+0x3e>
 800716a:	2a69      	cmp	r2, #105	; 0x69
 800716c:	d1f7      	bne.n	800715e <_printf_i+0x2e>
 800716e:	6819      	ldr	r1, [r3, #0]
 8007170:	6825      	ldr	r5, [r4, #0]
 8007172:	1d0a      	adds	r2, r1, #4
 8007174:	0628      	lsls	r0, r5, #24
 8007176:	d529      	bpl.n	80071cc <_printf_i+0x9c>
 8007178:	6808      	ldr	r0, [r1, #0]
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	2800      	cmp	r0, #0
 800717e:	da03      	bge.n	8007188 <_printf_i+0x58>
 8007180:	232d      	movs	r3, #45	; 0x2d
 8007182:	9a02      	ldr	r2, [sp, #8]
 8007184:	4240      	negs	r0, r0
 8007186:	7013      	strb	r3, [r2, #0]
 8007188:	4e6b      	ldr	r6, [pc, #428]	; (8007338 <_printf_i+0x208>)
 800718a:	270a      	movs	r7, #10
 800718c:	e04f      	b.n	800722e <_printf_i+0xfe>
 800718e:	2a73      	cmp	r2, #115	; 0x73
 8007190:	d074      	beq.n	800727c <_printf_i+0x14c>
 8007192:	d808      	bhi.n	80071a6 <_printf_i+0x76>
 8007194:	2a6f      	cmp	r2, #111	; 0x6f
 8007196:	d01f      	beq.n	80071d8 <_printf_i+0xa8>
 8007198:	2a70      	cmp	r2, #112	; 0x70
 800719a:	d1e0      	bne.n	800715e <_printf_i+0x2e>
 800719c:	2220      	movs	r2, #32
 800719e:	6809      	ldr	r1, [r1, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	6022      	str	r2, [r4, #0]
 80071a4:	e003      	b.n	80071ae <_printf_i+0x7e>
 80071a6:	2a75      	cmp	r2, #117	; 0x75
 80071a8:	d016      	beq.n	80071d8 <_printf_i+0xa8>
 80071aa:	2a78      	cmp	r2, #120	; 0x78
 80071ac:	d1d7      	bne.n	800715e <_printf_i+0x2e>
 80071ae:	0022      	movs	r2, r4
 80071b0:	2178      	movs	r1, #120	; 0x78
 80071b2:	3245      	adds	r2, #69	; 0x45
 80071b4:	7011      	strb	r1, [r2, #0]
 80071b6:	4e61      	ldr	r6, [pc, #388]	; (800733c <_printf_i+0x20c>)
 80071b8:	e022      	b.n	8007200 <_printf_i+0xd0>
 80071ba:	0025      	movs	r5, r4
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	3542      	adds	r5, #66	; 0x42
 80071c0:	1d11      	adds	r1, r2, #4
 80071c2:	6019      	str	r1, [r3, #0]
 80071c4:	6813      	ldr	r3, [r2, #0]
 80071c6:	702b      	strb	r3, [r5, #0]
 80071c8:	2301      	movs	r3, #1
 80071ca:	e065      	b.n	8007298 <_printf_i+0x168>
 80071cc:	6808      	ldr	r0, [r1, #0]
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	0669      	lsls	r1, r5, #25
 80071d2:	d5d3      	bpl.n	800717c <_printf_i+0x4c>
 80071d4:	b200      	sxth	r0, r0
 80071d6:	e7d1      	b.n	800717c <_printf_i+0x4c>
 80071d8:	6819      	ldr	r1, [r3, #0]
 80071da:	6825      	ldr	r5, [r4, #0]
 80071dc:	1d08      	adds	r0, r1, #4
 80071de:	6018      	str	r0, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	062e      	lsls	r6, r5, #24
 80071e4:	d505      	bpl.n	80071f2 <_printf_i+0xc2>
 80071e6:	4e54      	ldr	r6, [pc, #336]	; (8007338 <_printf_i+0x208>)
 80071e8:	2708      	movs	r7, #8
 80071ea:	2a6f      	cmp	r2, #111	; 0x6f
 80071ec:	d01b      	beq.n	8007226 <_printf_i+0xf6>
 80071ee:	270a      	movs	r7, #10
 80071f0:	e019      	b.n	8007226 <_printf_i+0xf6>
 80071f2:	066d      	lsls	r5, r5, #25
 80071f4:	d5f7      	bpl.n	80071e6 <_printf_i+0xb6>
 80071f6:	b280      	uxth	r0, r0
 80071f8:	e7f5      	b.n	80071e6 <_printf_i+0xb6>
 80071fa:	3145      	adds	r1, #69	; 0x45
 80071fc:	4e4e      	ldr	r6, [pc, #312]	; (8007338 <_printf_i+0x208>)
 80071fe:	700a      	strb	r2, [r1, #0]
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	6822      	ldr	r2, [r4, #0]
 8007204:	1d01      	adds	r1, r0, #4
 8007206:	6800      	ldr	r0, [r0, #0]
 8007208:	6019      	str	r1, [r3, #0]
 800720a:	0615      	lsls	r5, r2, #24
 800720c:	d521      	bpl.n	8007252 <_printf_i+0x122>
 800720e:	07d3      	lsls	r3, r2, #31
 8007210:	d502      	bpl.n	8007218 <_printf_i+0xe8>
 8007212:	2320      	movs	r3, #32
 8007214:	431a      	orrs	r2, r3
 8007216:	6022      	str	r2, [r4, #0]
 8007218:	2710      	movs	r7, #16
 800721a:	2800      	cmp	r0, #0
 800721c:	d103      	bne.n	8007226 <_printf_i+0xf6>
 800721e:	2320      	movs	r3, #32
 8007220:	6822      	ldr	r2, [r4, #0]
 8007222:	439a      	bics	r2, r3
 8007224:	6022      	str	r2, [r4, #0]
 8007226:	0023      	movs	r3, r4
 8007228:	2200      	movs	r2, #0
 800722a:	3343      	adds	r3, #67	; 0x43
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	6863      	ldr	r3, [r4, #4]
 8007230:	60a3      	str	r3, [r4, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	db58      	blt.n	80072e8 <_printf_i+0x1b8>
 8007236:	2204      	movs	r2, #4
 8007238:	6821      	ldr	r1, [r4, #0]
 800723a:	4391      	bics	r1, r2
 800723c:	6021      	str	r1, [r4, #0]
 800723e:	2800      	cmp	r0, #0
 8007240:	d154      	bne.n	80072ec <_printf_i+0x1bc>
 8007242:	9d02      	ldr	r5, [sp, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d05a      	beq.n	80072fe <_printf_i+0x1ce>
 8007248:	0025      	movs	r5, r4
 800724a:	7833      	ldrb	r3, [r6, #0]
 800724c:	3542      	adds	r5, #66	; 0x42
 800724e:	702b      	strb	r3, [r5, #0]
 8007250:	e055      	b.n	80072fe <_printf_i+0x1ce>
 8007252:	0655      	lsls	r5, r2, #25
 8007254:	d5db      	bpl.n	800720e <_printf_i+0xde>
 8007256:	b280      	uxth	r0, r0
 8007258:	e7d9      	b.n	800720e <_printf_i+0xde>
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	680d      	ldr	r5, [r1, #0]
 800725e:	1d10      	adds	r0, r2, #4
 8007260:	6949      	ldr	r1, [r1, #20]
 8007262:	6018      	str	r0, [r3, #0]
 8007264:	6813      	ldr	r3, [r2, #0]
 8007266:	062e      	lsls	r6, r5, #24
 8007268:	d501      	bpl.n	800726e <_printf_i+0x13e>
 800726a:	6019      	str	r1, [r3, #0]
 800726c:	e002      	b.n	8007274 <_printf_i+0x144>
 800726e:	066d      	lsls	r5, r5, #25
 8007270:	d5fb      	bpl.n	800726a <_printf_i+0x13a>
 8007272:	8019      	strh	r1, [r3, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	9d02      	ldr	r5, [sp, #8]
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	e04f      	b.n	800731c <_printf_i+0x1ec>
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	1d11      	adds	r1, r2, #4
 8007280:	6019      	str	r1, [r3, #0]
 8007282:	6815      	ldr	r5, [r2, #0]
 8007284:	2100      	movs	r1, #0
 8007286:	6862      	ldr	r2, [r4, #4]
 8007288:	0028      	movs	r0, r5
 800728a:	f001 fa1d 	bl	80086c8 <memchr>
 800728e:	2800      	cmp	r0, #0
 8007290:	d001      	beq.n	8007296 <_printf_i+0x166>
 8007292:	1b40      	subs	r0, r0, r5
 8007294:	6060      	str	r0, [r4, #4]
 8007296:	6863      	ldr	r3, [r4, #4]
 8007298:	6123      	str	r3, [r4, #16]
 800729a:	2300      	movs	r3, #0
 800729c:	9a02      	ldr	r2, [sp, #8]
 800729e:	7013      	strb	r3, [r2, #0]
 80072a0:	e03c      	b.n	800731c <_printf_i+0x1ec>
 80072a2:	6923      	ldr	r3, [r4, #16]
 80072a4:	002a      	movs	r2, r5
 80072a6:	9904      	ldr	r1, [sp, #16]
 80072a8:	9803      	ldr	r0, [sp, #12]
 80072aa:	9d05      	ldr	r5, [sp, #20]
 80072ac:	47a8      	blx	r5
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d03e      	beq.n	8007330 <_printf_i+0x200>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	079b      	lsls	r3, r3, #30
 80072b6:	d415      	bmi.n	80072e4 <_printf_i+0x1b4>
 80072b8:	9b07      	ldr	r3, [sp, #28]
 80072ba:	68e0      	ldr	r0, [r4, #12]
 80072bc:	4298      	cmp	r0, r3
 80072be:	da39      	bge.n	8007334 <_printf_i+0x204>
 80072c0:	0018      	movs	r0, r3
 80072c2:	e037      	b.n	8007334 <_printf_i+0x204>
 80072c4:	0022      	movs	r2, r4
 80072c6:	2301      	movs	r3, #1
 80072c8:	3219      	adds	r2, #25
 80072ca:	9904      	ldr	r1, [sp, #16]
 80072cc:	9803      	ldr	r0, [sp, #12]
 80072ce:	9e05      	ldr	r6, [sp, #20]
 80072d0:	47b0      	blx	r6
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	d02c      	beq.n	8007330 <_printf_i+0x200>
 80072d6:	3501      	adds	r5, #1
 80072d8:	68e3      	ldr	r3, [r4, #12]
 80072da:	9a07      	ldr	r2, [sp, #28]
 80072dc:	1a9b      	subs	r3, r3, r2
 80072de:	42ab      	cmp	r3, r5
 80072e0:	dcf0      	bgt.n	80072c4 <_printf_i+0x194>
 80072e2:	e7e9      	b.n	80072b8 <_printf_i+0x188>
 80072e4:	2500      	movs	r5, #0
 80072e6:	e7f7      	b.n	80072d8 <_printf_i+0x1a8>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d0ad      	beq.n	8007248 <_printf_i+0x118>
 80072ec:	9d02      	ldr	r5, [sp, #8]
 80072ee:	0039      	movs	r1, r7
 80072f0:	f7f8 ffa2 	bl	8000238 <__aeabi_uidivmod>
 80072f4:	5c73      	ldrb	r3, [r6, r1]
 80072f6:	3d01      	subs	r5, #1
 80072f8:	702b      	strb	r3, [r5, #0]
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d1f7      	bne.n	80072ee <_printf_i+0x1be>
 80072fe:	2f08      	cmp	r7, #8
 8007300:	d109      	bne.n	8007316 <_printf_i+0x1e6>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	07db      	lsls	r3, r3, #31
 8007306:	d506      	bpl.n	8007316 <_printf_i+0x1e6>
 8007308:	6863      	ldr	r3, [r4, #4]
 800730a:	6922      	ldr	r2, [r4, #16]
 800730c:	4293      	cmp	r3, r2
 800730e:	dc02      	bgt.n	8007316 <_printf_i+0x1e6>
 8007310:	2330      	movs	r3, #48	; 0x30
 8007312:	3d01      	subs	r5, #1
 8007314:	702b      	strb	r3, [r5, #0]
 8007316:	9b02      	ldr	r3, [sp, #8]
 8007318:	1b5b      	subs	r3, r3, r5
 800731a:	6123      	str	r3, [r4, #16]
 800731c:	9b05      	ldr	r3, [sp, #20]
 800731e:	aa07      	add	r2, sp, #28
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	0021      	movs	r1, r4
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	9803      	ldr	r0, [sp, #12]
 8007328:	f7ff fe94 	bl	8007054 <_printf_common>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d1b8      	bne.n	80072a2 <_printf_i+0x172>
 8007330:	2001      	movs	r0, #1
 8007332:	4240      	negs	r0, r0
 8007334:	b009      	add	sp, #36	; 0x24
 8007336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007338:	080097ba 	.word	0x080097ba
 800733c:	080097cb 	.word	0x080097cb

08007340 <iprintf>:
 8007340:	b40f      	push	{r0, r1, r2, r3}
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <iprintf+0x30>)
 8007344:	b513      	push	{r0, r1, r4, lr}
 8007346:	681c      	ldr	r4, [r3, #0]
 8007348:	2c00      	cmp	r4, #0
 800734a:	d005      	beq.n	8007358 <iprintf+0x18>
 800734c:	69a3      	ldr	r3, [r4, #24]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d102      	bne.n	8007358 <iprintf+0x18>
 8007352:	0020      	movs	r0, r4
 8007354:	f001 f8a2 	bl	800849c <__sinit>
 8007358:	ab05      	add	r3, sp, #20
 800735a:	9a04      	ldr	r2, [sp, #16]
 800735c:	68a1      	ldr	r1, [r4, #8]
 800735e:	0020      	movs	r0, r4
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	f001 fd89 	bl	8008e78 <_vfiprintf_r>
 8007366:	bc16      	pop	{r1, r2, r4}
 8007368:	bc08      	pop	{r3}
 800736a:	b004      	add	sp, #16
 800736c:	4718      	bx	r3
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	20000004 	.word	0x20000004

08007374 <_puts_r>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	0005      	movs	r5, r0
 8007378:	000e      	movs	r6, r1
 800737a:	2800      	cmp	r0, #0
 800737c:	d004      	beq.n	8007388 <_puts_r+0x14>
 800737e:	6983      	ldr	r3, [r0, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <_puts_r+0x14>
 8007384:	f001 f88a 	bl	800849c <__sinit>
 8007388:	69ab      	ldr	r3, [r5, #24]
 800738a:	68ac      	ldr	r4, [r5, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d102      	bne.n	8007396 <_puts_r+0x22>
 8007390:	0028      	movs	r0, r5
 8007392:	f001 f883 	bl	800849c <__sinit>
 8007396:	4b24      	ldr	r3, [pc, #144]	; (8007428 <_puts_r+0xb4>)
 8007398:	429c      	cmp	r4, r3
 800739a:	d10f      	bne.n	80073bc <_puts_r+0x48>
 800739c:	686c      	ldr	r4, [r5, #4]
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	071b      	lsls	r3, r3, #28
 80073a2:	d502      	bpl.n	80073aa <_puts_r+0x36>
 80073a4:	6923      	ldr	r3, [r4, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d11f      	bne.n	80073ea <_puts_r+0x76>
 80073aa:	0021      	movs	r1, r4
 80073ac:	0028      	movs	r0, r5
 80073ae:	f000 f8a1 	bl	80074f4 <__swsetup_r>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d019      	beq.n	80073ea <_puts_r+0x76>
 80073b6:	2001      	movs	r0, #1
 80073b8:	4240      	negs	r0, r0
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	4b1b      	ldr	r3, [pc, #108]	; (800742c <_puts_r+0xb8>)
 80073be:	429c      	cmp	r4, r3
 80073c0:	d101      	bne.n	80073c6 <_puts_r+0x52>
 80073c2:	68ac      	ldr	r4, [r5, #8]
 80073c4:	e7eb      	b.n	800739e <_puts_r+0x2a>
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <_puts_r+0xbc>)
 80073c8:	429c      	cmp	r4, r3
 80073ca:	d1e8      	bne.n	800739e <_puts_r+0x2a>
 80073cc:	68ec      	ldr	r4, [r5, #12]
 80073ce:	e7e6      	b.n	800739e <_puts_r+0x2a>
 80073d0:	3601      	adds	r6, #1
 80073d2:	60a3      	str	r3, [r4, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	da04      	bge.n	80073e2 <_puts_r+0x6e>
 80073d8:	69a2      	ldr	r2, [r4, #24]
 80073da:	429a      	cmp	r2, r3
 80073dc:	dc16      	bgt.n	800740c <_puts_r+0x98>
 80073de:	290a      	cmp	r1, #10
 80073e0:	d014      	beq.n	800740c <_puts_r+0x98>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	6022      	str	r2, [r4, #0]
 80073e8:	7019      	strb	r1, [r3, #0]
 80073ea:	68a3      	ldr	r3, [r4, #8]
 80073ec:	7831      	ldrb	r1, [r6, #0]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	2900      	cmp	r1, #0
 80073f2:	d1ed      	bne.n	80073d0 <_puts_r+0x5c>
 80073f4:	60a3      	str	r3, [r4, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da0f      	bge.n	800741a <_puts_r+0xa6>
 80073fa:	0022      	movs	r2, r4
 80073fc:	310a      	adds	r1, #10
 80073fe:	0028      	movs	r0, r5
 8007400:	f000 f822 	bl	8007448 <__swbuf_r>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d0d6      	beq.n	80073b6 <_puts_r+0x42>
 8007408:	200a      	movs	r0, #10
 800740a:	e7d6      	b.n	80073ba <_puts_r+0x46>
 800740c:	0022      	movs	r2, r4
 800740e:	0028      	movs	r0, r5
 8007410:	f000 f81a 	bl	8007448 <__swbuf_r>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d1e8      	bne.n	80073ea <_puts_r+0x76>
 8007418:	e7cd      	b.n	80073b6 <_puts_r+0x42>
 800741a:	200a      	movs	r0, #10
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	6022      	str	r2, [r4, #0]
 8007422:	7018      	strb	r0, [r3, #0]
 8007424:	e7c9      	b.n	80073ba <_puts_r+0x46>
 8007426:	46c0      	nop			; (mov r8, r8)
 8007428:	0800980c 	.word	0x0800980c
 800742c:	0800982c 	.word	0x0800982c
 8007430:	080097ec 	.word	0x080097ec

08007434 <puts>:
 8007434:	b510      	push	{r4, lr}
 8007436:	4b03      	ldr	r3, [pc, #12]	; (8007444 <puts+0x10>)
 8007438:	0001      	movs	r1, r0
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	f7ff ff9a 	bl	8007374 <_puts_r>
 8007440:	bd10      	pop	{r4, pc}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	20000004 	.word	0x20000004

08007448 <__swbuf_r>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	0005      	movs	r5, r0
 800744c:	000e      	movs	r6, r1
 800744e:	0014      	movs	r4, r2
 8007450:	2800      	cmp	r0, #0
 8007452:	d004      	beq.n	800745e <__swbuf_r+0x16>
 8007454:	6983      	ldr	r3, [r0, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <__swbuf_r+0x16>
 800745a:	f001 f81f 	bl	800849c <__sinit>
 800745e:	4b22      	ldr	r3, [pc, #136]	; (80074e8 <__swbuf_r+0xa0>)
 8007460:	429c      	cmp	r4, r3
 8007462:	d12d      	bne.n	80074c0 <__swbuf_r+0x78>
 8007464:	686c      	ldr	r4, [r5, #4]
 8007466:	69a3      	ldr	r3, [r4, #24]
 8007468:	60a3      	str	r3, [r4, #8]
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	071b      	lsls	r3, r3, #28
 800746e:	d531      	bpl.n	80074d4 <__swbuf_r+0x8c>
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d02e      	beq.n	80074d4 <__swbuf_r+0x8c>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	6922      	ldr	r2, [r4, #16]
 800747a:	b2f7      	uxtb	r7, r6
 800747c:	1a98      	subs	r0, r3, r2
 800747e:	6963      	ldr	r3, [r4, #20]
 8007480:	b2f6      	uxtb	r6, r6
 8007482:	4283      	cmp	r3, r0
 8007484:	dc05      	bgt.n	8007492 <__swbuf_r+0x4a>
 8007486:	0021      	movs	r1, r4
 8007488:	0028      	movs	r0, r5
 800748a:	f000 ff99 	bl	80083c0 <_fflush_r>
 800748e:	2800      	cmp	r0, #0
 8007490:	d126      	bne.n	80074e0 <__swbuf_r+0x98>
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	3001      	adds	r0, #1
 8007496:	3b01      	subs	r3, #1
 8007498:	60a3      	str	r3, [r4, #8]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	701f      	strb	r7, [r3, #0]
 80074a2:	6963      	ldr	r3, [r4, #20]
 80074a4:	4283      	cmp	r3, r0
 80074a6:	d004      	beq.n	80074b2 <__swbuf_r+0x6a>
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	07db      	lsls	r3, r3, #31
 80074ac:	d51a      	bpl.n	80074e4 <__swbuf_r+0x9c>
 80074ae:	2e0a      	cmp	r6, #10
 80074b0:	d118      	bne.n	80074e4 <__swbuf_r+0x9c>
 80074b2:	0021      	movs	r1, r4
 80074b4:	0028      	movs	r0, r5
 80074b6:	f000 ff83 	bl	80083c0 <_fflush_r>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d012      	beq.n	80074e4 <__swbuf_r+0x9c>
 80074be:	e00f      	b.n	80074e0 <__swbuf_r+0x98>
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <__swbuf_r+0xa4>)
 80074c2:	429c      	cmp	r4, r3
 80074c4:	d101      	bne.n	80074ca <__swbuf_r+0x82>
 80074c6:	68ac      	ldr	r4, [r5, #8]
 80074c8:	e7cd      	b.n	8007466 <__swbuf_r+0x1e>
 80074ca:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <__swbuf_r+0xa8>)
 80074cc:	429c      	cmp	r4, r3
 80074ce:	d1ca      	bne.n	8007466 <__swbuf_r+0x1e>
 80074d0:	68ec      	ldr	r4, [r5, #12]
 80074d2:	e7c8      	b.n	8007466 <__swbuf_r+0x1e>
 80074d4:	0021      	movs	r1, r4
 80074d6:	0028      	movs	r0, r5
 80074d8:	f000 f80c 	bl	80074f4 <__swsetup_r>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d0ca      	beq.n	8007476 <__swbuf_r+0x2e>
 80074e0:	2601      	movs	r6, #1
 80074e2:	4276      	negs	r6, r6
 80074e4:	0030      	movs	r0, r6
 80074e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e8:	0800980c 	.word	0x0800980c
 80074ec:	0800982c 	.word	0x0800982c
 80074f0:	080097ec 	.word	0x080097ec

080074f4 <__swsetup_r>:
 80074f4:	4b36      	ldr	r3, [pc, #216]	; (80075d0 <__swsetup_r+0xdc>)
 80074f6:	b570      	push	{r4, r5, r6, lr}
 80074f8:	681d      	ldr	r5, [r3, #0]
 80074fa:	0006      	movs	r6, r0
 80074fc:	000c      	movs	r4, r1
 80074fe:	2d00      	cmp	r5, #0
 8007500:	d005      	beq.n	800750e <__swsetup_r+0x1a>
 8007502:	69ab      	ldr	r3, [r5, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <__swsetup_r+0x1a>
 8007508:	0028      	movs	r0, r5
 800750a:	f000 ffc7 	bl	800849c <__sinit>
 800750e:	4b31      	ldr	r3, [pc, #196]	; (80075d4 <__swsetup_r+0xe0>)
 8007510:	429c      	cmp	r4, r3
 8007512:	d10f      	bne.n	8007534 <__swsetup_r+0x40>
 8007514:	686c      	ldr	r4, [r5, #4]
 8007516:	230c      	movs	r3, #12
 8007518:	5ee2      	ldrsh	r2, [r4, r3]
 800751a:	b293      	uxth	r3, r2
 800751c:	0719      	lsls	r1, r3, #28
 800751e:	d42d      	bmi.n	800757c <__swsetup_r+0x88>
 8007520:	06d9      	lsls	r1, r3, #27
 8007522:	d411      	bmi.n	8007548 <__swsetup_r+0x54>
 8007524:	2309      	movs	r3, #9
 8007526:	2001      	movs	r0, #1
 8007528:	6033      	str	r3, [r6, #0]
 800752a:	3337      	adds	r3, #55	; 0x37
 800752c:	4313      	orrs	r3, r2
 800752e:	81a3      	strh	r3, [r4, #12]
 8007530:	4240      	negs	r0, r0
 8007532:	bd70      	pop	{r4, r5, r6, pc}
 8007534:	4b28      	ldr	r3, [pc, #160]	; (80075d8 <__swsetup_r+0xe4>)
 8007536:	429c      	cmp	r4, r3
 8007538:	d101      	bne.n	800753e <__swsetup_r+0x4a>
 800753a:	68ac      	ldr	r4, [r5, #8]
 800753c:	e7eb      	b.n	8007516 <__swsetup_r+0x22>
 800753e:	4b27      	ldr	r3, [pc, #156]	; (80075dc <__swsetup_r+0xe8>)
 8007540:	429c      	cmp	r4, r3
 8007542:	d1e8      	bne.n	8007516 <__swsetup_r+0x22>
 8007544:	68ec      	ldr	r4, [r5, #12]
 8007546:	e7e6      	b.n	8007516 <__swsetup_r+0x22>
 8007548:	075b      	lsls	r3, r3, #29
 800754a:	d513      	bpl.n	8007574 <__swsetup_r+0x80>
 800754c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800754e:	2900      	cmp	r1, #0
 8007550:	d008      	beq.n	8007564 <__swsetup_r+0x70>
 8007552:	0023      	movs	r3, r4
 8007554:	3344      	adds	r3, #68	; 0x44
 8007556:	4299      	cmp	r1, r3
 8007558:	d002      	beq.n	8007560 <__swsetup_r+0x6c>
 800755a:	0030      	movs	r0, r6
 800755c:	f001 fbbc 	bl	8008cd8 <_free_r>
 8007560:	2300      	movs	r3, #0
 8007562:	6363      	str	r3, [r4, #52]	; 0x34
 8007564:	2224      	movs	r2, #36	; 0x24
 8007566:	89a3      	ldrh	r3, [r4, #12]
 8007568:	4393      	bics	r3, r2
 800756a:	81a3      	strh	r3, [r4, #12]
 800756c:	2300      	movs	r3, #0
 800756e:	6063      	str	r3, [r4, #4]
 8007570:	6923      	ldr	r3, [r4, #16]
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	2308      	movs	r3, #8
 8007576:	89a2      	ldrh	r2, [r4, #12]
 8007578:	4313      	orrs	r3, r2
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10b      	bne.n	800759a <__swsetup_r+0xa6>
 8007582:	21a0      	movs	r1, #160	; 0xa0
 8007584:	2280      	movs	r2, #128	; 0x80
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	0089      	lsls	r1, r1, #2
 800758a:	0092      	lsls	r2, r2, #2
 800758c:	400b      	ands	r3, r1
 800758e:	4293      	cmp	r3, r2
 8007590:	d003      	beq.n	800759a <__swsetup_r+0xa6>
 8007592:	0021      	movs	r1, r4
 8007594:	0030      	movs	r0, r6
 8007596:	f001 f849 	bl	800862c <__smakebuf_r>
 800759a:	2301      	movs	r3, #1
 800759c:	89a2      	ldrh	r2, [r4, #12]
 800759e:	4013      	ands	r3, r2
 80075a0:	d011      	beq.n	80075c6 <__swsetup_r+0xd2>
 80075a2:	2300      	movs	r3, #0
 80075a4:	60a3      	str	r3, [r4, #8]
 80075a6:	6963      	ldr	r3, [r4, #20]
 80075a8:	425b      	negs	r3, r3
 80075aa:	61a3      	str	r3, [r4, #24]
 80075ac:	2000      	movs	r0, #0
 80075ae:	6923      	ldr	r3, [r4, #16]
 80075b0:	4283      	cmp	r3, r0
 80075b2:	d1be      	bne.n	8007532 <__swsetup_r+0x3e>
 80075b4:	230c      	movs	r3, #12
 80075b6:	5ee2      	ldrsh	r2, [r4, r3]
 80075b8:	0613      	lsls	r3, r2, #24
 80075ba:	d5ba      	bpl.n	8007532 <__swsetup_r+0x3e>
 80075bc:	2340      	movs	r3, #64	; 0x40
 80075be:	4313      	orrs	r3, r2
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	3801      	subs	r0, #1
 80075c4:	e7b5      	b.n	8007532 <__swsetup_r+0x3e>
 80075c6:	0792      	lsls	r2, r2, #30
 80075c8:	d400      	bmi.n	80075cc <__swsetup_r+0xd8>
 80075ca:	6963      	ldr	r3, [r4, #20]
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	e7ed      	b.n	80075ac <__swsetup_r+0xb8>
 80075d0:	20000004 	.word	0x20000004
 80075d4:	0800980c 	.word	0x0800980c
 80075d8:	0800982c 	.word	0x0800982c
 80075dc:	080097ec 	.word	0x080097ec

080075e0 <quorem>:
 80075e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e2:	6903      	ldr	r3, [r0, #16]
 80075e4:	690c      	ldr	r4, [r1, #16]
 80075e6:	b089      	sub	sp, #36	; 0x24
 80075e8:	0007      	movs	r7, r0
 80075ea:	9105      	str	r1, [sp, #20]
 80075ec:	2600      	movs	r6, #0
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	db65      	blt.n	80076be <quorem+0xde>
 80075f2:	000b      	movs	r3, r1
 80075f4:	3c01      	subs	r4, #1
 80075f6:	3314      	adds	r3, #20
 80075f8:	00a5      	lsls	r5, r4, #2
 80075fa:	9303      	str	r3, [sp, #12]
 80075fc:	195b      	adds	r3, r3, r5
 80075fe:	9304      	str	r3, [sp, #16]
 8007600:	0003      	movs	r3, r0
 8007602:	3314      	adds	r3, #20
 8007604:	9302      	str	r3, [sp, #8]
 8007606:	195d      	adds	r5, r3, r5
 8007608:	9b04      	ldr	r3, [sp, #16]
 800760a:	6828      	ldr	r0, [r5, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	1c59      	adds	r1, r3, #1
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	f7f8 fd8b 	bl	800012c <__udivsi3>
 8007616:	9001      	str	r0, [sp, #4]
 8007618:	42b0      	cmp	r0, r6
 800761a:	d029      	beq.n	8007670 <quorem+0x90>
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	9802      	ldr	r0, [sp, #8]
 8007620:	469c      	mov	ip, r3
 8007622:	9606      	str	r6, [sp, #24]
 8007624:	4662      	mov	r2, ip
 8007626:	ca08      	ldmia	r2!, {r3}
 8007628:	4694      	mov	ip, r2
 800762a:	9a01      	ldr	r2, [sp, #4]
 800762c:	b299      	uxth	r1, r3
 800762e:	4351      	muls	r1, r2
 8007630:	0c1b      	lsrs	r3, r3, #16
 8007632:	4353      	muls	r3, r2
 8007634:	1989      	adds	r1, r1, r6
 8007636:	0c0a      	lsrs	r2, r1, #16
 8007638:	189b      	adds	r3, r3, r2
 800763a:	9307      	str	r3, [sp, #28]
 800763c:	0c1e      	lsrs	r6, r3, #16
 800763e:	6803      	ldr	r3, [r0, #0]
 8007640:	b289      	uxth	r1, r1
 8007642:	b29a      	uxth	r2, r3
 8007644:	9b06      	ldr	r3, [sp, #24]
 8007646:	18d2      	adds	r2, r2, r3
 8007648:	6803      	ldr	r3, [r0, #0]
 800764a:	1a52      	subs	r2, r2, r1
 800764c:	0c19      	lsrs	r1, r3, #16
 800764e:	466b      	mov	r3, sp
 8007650:	8b9b      	ldrh	r3, [r3, #28]
 8007652:	1acb      	subs	r3, r1, r3
 8007654:	1411      	asrs	r1, r2, #16
 8007656:	185b      	adds	r3, r3, r1
 8007658:	1419      	asrs	r1, r3, #16
 800765a:	b292      	uxth	r2, r2
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	431a      	orrs	r2, r3
 8007660:	9b04      	ldr	r3, [sp, #16]
 8007662:	9106      	str	r1, [sp, #24]
 8007664:	c004      	stmia	r0!, {r2}
 8007666:	4563      	cmp	r3, ip
 8007668:	d2dc      	bcs.n	8007624 <quorem+0x44>
 800766a:	682b      	ldr	r3, [r5, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d02d      	beq.n	80076cc <quorem+0xec>
 8007670:	9905      	ldr	r1, [sp, #20]
 8007672:	0038      	movs	r0, r7
 8007674:	f001 fa50 	bl	8008b18 <__mcmp>
 8007678:	2800      	cmp	r0, #0
 800767a:	db1f      	blt.n	80076bc <quorem+0xdc>
 800767c:	2500      	movs	r5, #0
 800767e:	9b01      	ldr	r3, [sp, #4]
 8007680:	9802      	ldr	r0, [sp, #8]
 8007682:	3301      	adds	r3, #1
 8007684:	9903      	ldr	r1, [sp, #12]
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	6802      	ldr	r2, [r0, #0]
 800768a:	c908      	ldmia	r1!, {r3}
 800768c:	b292      	uxth	r2, r2
 800768e:	1955      	adds	r5, r2, r5
 8007690:	b29a      	uxth	r2, r3
 8007692:	1aaa      	subs	r2, r5, r2
 8007694:	6805      	ldr	r5, [r0, #0]
 8007696:	0c1b      	lsrs	r3, r3, #16
 8007698:	0c2d      	lsrs	r5, r5, #16
 800769a:	1aeb      	subs	r3, r5, r3
 800769c:	1415      	asrs	r5, r2, #16
 800769e:	195b      	adds	r3, r3, r5
 80076a0:	141d      	asrs	r5, r3, #16
 80076a2:	b292      	uxth	r2, r2
 80076a4:	041b      	lsls	r3, r3, #16
 80076a6:	4313      	orrs	r3, r2
 80076a8:	c008      	stmia	r0!, {r3}
 80076aa:	9b04      	ldr	r3, [sp, #16]
 80076ac:	428b      	cmp	r3, r1
 80076ae:	d2eb      	bcs.n	8007688 <quorem+0xa8>
 80076b0:	9a02      	ldr	r2, [sp, #8]
 80076b2:	00a3      	lsls	r3, r4, #2
 80076b4:	18d3      	adds	r3, r2, r3
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	d011      	beq.n	80076e0 <quorem+0x100>
 80076bc:	9e01      	ldr	r6, [sp, #4]
 80076be:	0030      	movs	r0, r6
 80076c0:	b009      	add	sp, #36	; 0x24
 80076c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <quorem+0xf4>
 80076ca:	3c01      	subs	r4, #1
 80076cc:	9b02      	ldr	r3, [sp, #8]
 80076ce:	3d04      	subs	r5, #4
 80076d0:	42ab      	cmp	r3, r5
 80076d2:	d3f7      	bcc.n	80076c4 <quorem+0xe4>
 80076d4:	613c      	str	r4, [r7, #16]
 80076d6:	e7cb      	b.n	8007670 <quorem+0x90>
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	2a00      	cmp	r2, #0
 80076dc:	d104      	bne.n	80076e8 <quorem+0x108>
 80076de:	3c01      	subs	r4, #1
 80076e0:	9a02      	ldr	r2, [sp, #8]
 80076e2:	3b04      	subs	r3, #4
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d3f7      	bcc.n	80076d8 <quorem+0xf8>
 80076e8:	613c      	str	r4, [r7, #16]
 80076ea:	e7e7      	b.n	80076bc <quorem+0xdc>

080076ec <_dtoa_r>:
 80076ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ee:	0016      	movs	r6, r2
 80076f0:	001f      	movs	r7, r3
 80076f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076f4:	b09b      	sub	sp, #108	; 0x6c
 80076f6:	9002      	str	r0, [sp, #8]
 80076f8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80076fa:	9606      	str	r6, [sp, #24]
 80076fc:	9707      	str	r7, [sp, #28]
 80076fe:	2c00      	cmp	r4, #0
 8007700:	d108      	bne.n	8007714 <_dtoa_r+0x28>
 8007702:	2010      	movs	r0, #16
 8007704:	f000 ffd6 	bl	80086b4 <malloc>
 8007708:	9b02      	ldr	r3, [sp, #8]
 800770a:	6258      	str	r0, [r3, #36]	; 0x24
 800770c:	6044      	str	r4, [r0, #4]
 800770e:	6084      	str	r4, [r0, #8]
 8007710:	6004      	str	r4, [r0, #0]
 8007712:	60c4      	str	r4, [r0, #12]
 8007714:	9b02      	ldr	r3, [sp, #8]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	6819      	ldr	r1, [r3, #0]
 800771a:	2900      	cmp	r1, #0
 800771c:	d00b      	beq.n	8007736 <_dtoa_r+0x4a>
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	2301      	movs	r3, #1
 8007722:	4093      	lsls	r3, r2
 8007724:	604a      	str	r2, [r1, #4]
 8007726:	608b      	str	r3, [r1, #8]
 8007728:	9802      	ldr	r0, [sp, #8]
 800772a:	f001 f819 	bl	8008760 <_Bfree>
 800772e:	2200      	movs	r2, #0
 8007730:	9b02      	ldr	r3, [sp, #8]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	2f00      	cmp	r7, #0
 8007738:	da20      	bge.n	800777c <_dtoa_r+0x90>
 800773a:	2301      	movs	r3, #1
 800773c:	602b      	str	r3, [r5, #0]
 800773e:	007b      	lsls	r3, r7, #1
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	9307      	str	r3, [sp, #28]
 8007744:	9c07      	ldr	r4, [sp, #28]
 8007746:	4bb2      	ldr	r3, [pc, #712]	; (8007a10 <_dtoa_r+0x324>)
 8007748:	0022      	movs	r2, r4
 800774a:	9317      	str	r3, [sp, #92]	; 0x5c
 800774c:	401a      	ands	r2, r3
 800774e:	429a      	cmp	r2, r3
 8007750:	d117      	bne.n	8007782 <_dtoa_r+0x96>
 8007752:	4bb0      	ldr	r3, [pc, #704]	; (8007a14 <_dtoa_r+0x328>)
 8007754:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	9b06      	ldr	r3, [sp, #24]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <_dtoa_r+0x7a>
 800775e:	0324      	lsls	r4, r4, #12
 8007760:	d101      	bne.n	8007766 <_dtoa_r+0x7a>
 8007762:	f000 fd87 	bl	8008274 <_dtoa_r+0xb88>
 8007766:	4bac      	ldr	r3, [pc, #688]	; (8007a18 <_dtoa_r+0x32c>)
 8007768:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800776a:	9308      	str	r3, [sp, #32]
 800776c:	2a00      	cmp	r2, #0
 800776e:	d002      	beq.n	8007776 <_dtoa_r+0x8a>
 8007770:	4baa      	ldr	r3, [pc, #680]	; (8007a1c <_dtoa_r+0x330>)
 8007772:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	9808      	ldr	r0, [sp, #32]
 8007778:	b01b      	add	sp, #108	; 0x6c
 800777a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800777c:	2300      	movs	r3, #0
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	e7e0      	b.n	8007744 <_dtoa_r+0x58>
 8007782:	9e06      	ldr	r6, [sp, #24]
 8007784:	9f07      	ldr	r7, [sp, #28]
 8007786:	2200      	movs	r2, #0
 8007788:	2300      	movs	r3, #0
 800778a:	0030      	movs	r0, r6
 800778c:	0039      	movs	r1, r7
 800778e:	f7f8 fe53 	bl	8000438 <__aeabi_dcmpeq>
 8007792:	1e05      	subs	r5, r0, #0
 8007794:	d00b      	beq.n	80077ae <_dtoa_r+0xc2>
 8007796:	2301      	movs	r3, #1
 8007798:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	4ba0      	ldr	r3, [pc, #640]	; (8007a20 <_dtoa_r+0x334>)
 800779e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077a0:	9308      	str	r3, [sp, #32]
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	d0e7      	beq.n	8007776 <_dtoa_r+0x8a>
 80077a6:	4a9f      	ldr	r2, [pc, #636]	; (8007a24 <_dtoa_r+0x338>)
 80077a8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80077aa:	600a      	str	r2, [r1, #0]
 80077ac:	e7e3      	b.n	8007776 <_dtoa_r+0x8a>
 80077ae:	ab18      	add	r3, sp, #96	; 0x60
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	ab19      	add	r3, sp, #100	; 0x64
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	0032      	movs	r2, r6
 80077b8:	003b      	movs	r3, r7
 80077ba:	9802      	ldr	r0, [sp, #8]
 80077bc:	f001 fa2a 	bl	8008c14 <__d2b>
 80077c0:	0063      	lsls	r3, r4, #1
 80077c2:	9003      	str	r0, [sp, #12]
 80077c4:	0d5b      	lsrs	r3, r3, #21
 80077c6:	d074      	beq.n	80078b2 <_dtoa_r+0x1c6>
 80077c8:	033a      	lsls	r2, r7, #12
 80077ca:	4c97      	ldr	r4, [pc, #604]	; (8007a28 <_dtoa_r+0x33c>)
 80077cc:	0b12      	lsrs	r2, r2, #12
 80077ce:	4314      	orrs	r4, r2
 80077d0:	0021      	movs	r1, r4
 80077d2:	4a96      	ldr	r2, [pc, #600]	; (8007a2c <_dtoa_r+0x340>)
 80077d4:	0030      	movs	r0, r6
 80077d6:	9516      	str	r5, [sp, #88]	; 0x58
 80077d8:	189e      	adds	r6, r3, r2
 80077da:	2200      	movs	r2, #0
 80077dc:	4b94      	ldr	r3, [pc, #592]	; (8007a30 <_dtoa_r+0x344>)
 80077de:	f7fa fb9d 	bl	8001f1c <__aeabi_dsub>
 80077e2:	4a94      	ldr	r2, [pc, #592]	; (8007a34 <_dtoa_r+0x348>)
 80077e4:	4b94      	ldr	r3, [pc, #592]	; (8007a38 <_dtoa_r+0x34c>)
 80077e6:	f7fa f927 	bl	8001a38 <__aeabi_dmul>
 80077ea:	4a94      	ldr	r2, [pc, #592]	; (8007a3c <_dtoa_r+0x350>)
 80077ec:	4b94      	ldr	r3, [pc, #592]	; (8007a40 <_dtoa_r+0x354>)
 80077ee:	f7f9 f9fd 	bl	8000bec <__aeabi_dadd>
 80077f2:	0004      	movs	r4, r0
 80077f4:	0030      	movs	r0, r6
 80077f6:	000d      	movs	r5, r1
 80077f8:	f7fa ff2a 	bl	8002650 <__aeabi_i2d>
 80077fc:	4a91      	ldr	r2, [pc, #580]	; (8007a44 <_dtoa_r+0x358>)
 80077fe:	4b92      	ldr	r3, [pc, #584]	; (8007a48 <_dtoa_r+0x35c>)
 8007800:	f7fa f91a 	bl	8001a38 <__aeabi_dmul>
 8007804:	0002      	movs	r2, r0
 8007806:	000b      	movs	r3, r1
 8007808:	0020      	movs	r0, r4
 800780a:	0029      	movs	r1, r5
 800780c:	f7f9 f9ee 	bl	8000bec <__aeabi_dadd>
 8007810:	0004      	movs	r4, r0
 8007812:	000d      	movs	r5, r1
 8007814:	f7fa fee6 	bl	80025e4 <__aeabi_d2iz>
 8007818:	2200      	movs	r2, #0
 800781a:	0007      	movs	r7, r0
 800781c:	2300      	movs	r3, #0
 800781e:	0020      	movs	r0, r4
 8007820:	0029      	movs	r1, r5
 8007822:	f7f8 fe0f 	bl	8000444 <__aeabi_dcmplt>
 8007826:	2800      	cmp	r0, #0
 8007828:	d009      	beq.n	800783e <_dtoa_r+0x152>
 800782a:	0038      	movs	r0, r7
 800782c:	f7fa ff10 	bl	8002650 <__aeabi_i2d>
 8007830:	002b      	movs	r3, r5
 8007832:	0022      	movs	r2, r4
 8007834:	f7f8 fe00 	bl	8000438 <__aeabi_dcmpeq>
 8007838:	4243      	negs	r3, r0
 800783a:	4158      	adcs	r0, r3
 800783c:	1a3f      	subs	r7, r7, r0
 800783e:	2301      	movs	r3, #1
 8007840:	9314      	str	r3, [sp, #80]	; 0x50
 8007842:	2f16      	cmp	r7, #22
 8007844:	d80d      	bhi.n	8007862 <_dtoa_r+0x176>
 8007846:	4981      	ldr	r1, [pc, #516]	; (8007a4c <_dtoa_r+0x360>)
 8007848:	00fb      	lsls	r3, r7, #3
 800784a:	18c9      	adds	r1, r1, r3
 800784c:	6808      	ldr	r0, [r1, #0]
 800784e:	6849      	ldr	r1, [r1, #4]
 8007850:	9a06      	ldr	r2, [sp, #24]
 8007852:	9b07      	ldr	r3, [sp, #28]
 8007854:	f7f8 fe0a 	bl	800046c <__aeabi_dcmpgt>
 8007858:	2800      	cmp	r0, #0
 800785a:	d046      	beq.n	80078ea <_dtoa_r+0x1fe>
 800785c:	2300      	movs	r3, #0
 800785e:	3f01      	subs	r7, #1
 8007860:	9314      	str	r3, [sp, #80]	; 0x50
 8007862:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007864:	1b9e      	subs	r6, r3, r6
 8007866:	2300      	movs	r3, #0
 8007868:	930a      	str	r3, [sp, #40]	; 0x28
 800786a:	0033      	movs	r3, r6
 800786c:	3b01      	subs	r3, #1
 800786e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007870:	d504      	bpl.n	800787c <_dtoa_r+0x190>
 8007872:	2301      	movs	r3, #1
 8007874:	1b9b      	subs	r3, r3, r6
 8007876:	930a      	str	r3, [sp, #40]	; 0x28
 8007878:	2300      	movs	r3, #0
 800787a:	930b      	str	r3, [sp, #44]	; 0x2c
 800787c:	2f00      	cmp	r7, #0
 800787e:	db36      	blt.n	80078ee <_dtoa_r+0x202>
 8007880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007882:	9711      	str	r7, [sp, #68]	; 0x44
 8007884:	19db      	adds	r3, r3, r7
 8007886:	930b      	str	r3, [sp, #44]	; 0x2c
 8007888:	2300      	movs	r3, #0
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800788e:	2401      	movs	r4, #1
 8007890:	2b09      	cmp	r3, #9
 8007892:	d900      	bls.n	8007896 <_dtoa_r+0x1aa>
 8007894:	e084      	b.n	80079a0 <_dtoa_r+0x2b4>
 8007896:	2b05      	cmp	r3, #5
 8007898:	dd02      	ble.n	80078a0 <_dtoa_r+0x1b4>
 800789a:	2400      	movs	r4, #0
 800789c:	3b04      	subs	r3, #4
 800789e:	9320      	str	r3, [sp, #128]	; 0x80
 80078a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078a2:	1e98      	subs	r0, r3, #2
 80078a4:	2803      	cmp	r0, #3
 80078a6:	d900      	bls.n	80078aa <_dtoa_r+0x1be>
 80078a8:	e084      	b.n	80079b4 <_dtoa_r+0x2c8>
 80078aa:	f7f8 fc35 	bl	8000118 <__gnu_thumb1_case_uqi>
 80078ae:	7775      	.short	0x7775
 80078b0:	6a28      	.short	0x6a28
 80078b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80078b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078b6:	189e      	adds	r6, r3, r2
 80078b8:	4b65      	ldr	r3, [pc, #404]	; (8007a50 <_dtoa_r+0x364>)
 80078ba:	18f2      	adds	r2, r6, r3
 80078bc:	2a20      	cmp	r2, #32
 80078be:	dd0f      	ble.n	80078e0 <_dtoa_r+0x1f4>
 80078c0:	2340      	movs	r3, #64	; 0x40
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	409c      	lsls	r4, r3
 80078c6:	4b63      	ldr	r3, [pc, #396]	; (8007a54 <_dtoa_r+0x368>)
 80078c8:	9806      	ldr	r0, [sp, #24]
 80078ca:	18f3      	adds	r3, r6, r3
 80078cc:	40d8      	lsrs	r0, r3
 80078ce:	4320      	orrs	r0, r4
 80078d0:	f7fa fef8 	bl	80026c4 <__aeabi_ui2d>
 80078d4:	2301      	movs	r3, #1
 80078d6:	4c60      	ldr	r4, [pc, #384]	; (8007a58 <_dtoa_r+0x36c>)
 80078d8:	3e01      	subs	r6, #1
 80078da:	1909      	adds	r1, r1, r4
 80078dc:	9316      	str	r3, [sp, #88]	; 0x58
 80078de:	e77c      	b.n	80077da <_dtoa_r+0xee>
 80078e0:	2320      	movs	r3, #32
 80078e2:	9806      	ldr	r0, [sp, #24]
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	4098      	lsls	r0, r3
 80078e8:	e7f2      	b.n	80078d0 <_dtoa_r+0x1e4>
 80078ea:	9014      	str	r0, [sp, #80]	; 0x50
 80078ec:	e7b9      	b.n	8007862 <_dtoa_r+0x176>
 80078ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f0:	1bdb      	subs	r3, r3, r7
 80078f2:	930a      	str	r3, [sp, #40]	; 0x28
 80078f4:	427b      	negs	r3, r7
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	2300      	movs	r3, #0
 80078fa:	9311      	str	r3, [sp, #68]	; 0x44
 80078fc:	e7c6      	b.n	800788c <_dtoa_r+0x1a0>
 80078fe:	2301      	movs	r3, #1
 8007900:	930d      	str	r3, [sp, #52]	; 0x34
 8007902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007904:	2b00      	cmp	r3, #0
 8007906:	dd59      	ble.n	80079bc <_dtoa_r+0x2d0>
 8007908:	930c      	str	r3, [sp, #48]	; 0x30
 800790a:	9309      	str	r3, [sp, #36]	; 0x24
 800790c:	9a02      	ldr	r2, [sp, #8]
 800790e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007910:	2200      	movs	r2, #0
 8007912:	606a      	str	r2, [r5, #4]
 8007914:	3204      	adds	r2, #4
 8007916:	0010      	movs	r0, r2
 8007918:	3014      	adds	r0, #20
 800791a:	6869      	ldr	r1, [r5, #4]
 800791c:	4298      	cmp	r0, r3
 800791e:	d952      	bls.n	80079c6 <_dtoa_r+0x2da>
 8007920:	9802      	ldr	r0, [sp, #8]
 8007922:	f000 fee5 	bl	80086f0 <_Balloc>
 8007926:	9b02      	ldr	r3, [sp, #8]
 8007928:	6028      	str	r0, [r5, #0]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	9308      	str	r3, [sp, #32]
 8007930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007932:	2b0e      	cmp	r3, #14
 8007934:	d900      	bls.n	8007938 <_dtoa_r+0x24c>
 8007936:	e10a      	b.n	8007b4e <_dtoa_r+0x462>
 8007938:	2c00      	cmp	r4, #0
 800793a:	d100      	bne.n	800793e <_dtoa_r+0x252>
 800793c:	e107      	b.n	8007b4e <_dtoa_r+0x462>
 800793e:	9b06      	ldr	r3, [sp, #24]
 8007940:	9c07      	ldr	r4, [sp, #28]
 8007942:	9312      	str	r3, [sp, #72]	; 0x48
 8007944:	9413      	str	r4, [sp, #76]	; 0x4c
 8007946:	2f00      	cmp	r7, #0
 8007948:	dc00      	bgt.n	800794c <_dtoa_r+0x260>
 800794a:	e089      	b.n	8007a60 <_dtoa_r+0x374>
 800794c:	210f      	movs	r1, #15
 800794e:	003a      	movs	r2, r7
 8007950:	4b3e      	ldr	r3, [pc, #248]	; (8007a4c <_dtoa_r+0x360>)
 8007952:	400a      	ands	r2, r1
 8007954:	00d2      	lsls	r2, r2, #3
 8007956:	189b      	adds	r3, r3, r2
 8007958:	681d      	ldr	r5, [r3, #0]
 800795a:	685e      	ldr	r6, [r3, #4]
 800795c:	2302      	movs	r3, #2
 800795e:	113c      	asrs	r4, r7, #4
 8007960:	930e      	str	r3, [sp, #56]	; 0x38
 8007962:	06e3      	lsls	r3, r4, #27
 8007964:	d50b      	bpl.n	800797e <_dtoa_r+0x292>
 8007966:	4b3d      	ldr	r3, [pc, #244]	; (8007a5c <_dtoa_r+0x370>)
 8007968:	400c      	ands	r4, r1
 800796a:	6a1a      	ldr	r2, [r3, #32]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007970:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007972:	f7f9 fc57 	bl	8001224 <__aeabi_ddiv>
 8007976:	2303      	movs	r3, #3
 8007978:	9006      	str	r0, [sp, #24]
 800797a:	9107      	str	r1, [sp, #28]
 800797c:	930e      	str	r3, [sp, #56]	; 0x38
 800797e:	2300      	movs	r3, #0
 8007980:	e03a      	b.n	80079f8 <_dtoa_r+0x30c>
 8007982:	2301      	movs	r3, #1
 8007984:	930d      	str	r3, [sp, #52]	; 0x34
 8007986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007988:	18fb      	adds	r3, r7, r3
 800798a:	930c      	str	r3, [sp, #48]	; 0x30
 800798c:	3301      	adds	r3, #1
 800798e:	9309      	str	r3, [sp, #36]	; 0x24
 8007990:	2b00      	cmp	r3, #0
 8007992:	dcbb      	bgt.n	800790c <_dtoa_r+0x220>
 8007994:	2301      	movs	r3, #1
 8007996:	e7b9      	b.n	800790c <_dtoa_r+0x220>
 8007998:	2300      	movs	r3, #0
 800799a:	e7b1      	b.n	8007900 <_dtoa_r+0x214>
 800799c:	2300      	movs	r3, #0
 800799e:	e7f1      	b.n	8007984 <_dtoa_r+0x298>
 80079a0:	2300      	movs	r3, #0
 80079a2:	940d      	str	r4, [sp, #52]	; 0x34
 80079a4:	9320      	str	r3, [sp, #128]	; 0x80
 80079a6:	3b01      	subs	r3, #1
 80079a8:	2200      	movs	r2, #0
 80079aa:	930c      	str	r3, [sp, #48]	; 0x30
 80079ac:	9309      	str	r3, [sp, #36]	; 0x24
 80079ae:	3313      	adds	r3, #19
 80079b0:	9221      	str	r2, [sp, #132]	; 0x84
 80079b2:	e7ab      	b.n	800790c <_dtoa_r+0x220>
 80079b4:	2301      	movs	r3, #1
 80079b6:	930d      	str	r3, [sp, #52]	; 0x34
 80079b8:	3b02      	subs	r3, #2
 80079ba:	e7f5      	b.n	80079a8 <_dtoa_r+0x2bc>
 80079bc:	2301      	movs	r3, #1
 80079be:	930c      	str	r3, [sp, #48]	; 0x30
 80079c0:	9309      	str	r3, [sp, #36]	; 0x24
 80079c2:	001a      	movs	r2, r3
 80079c4:	e7f4      	b.n	80079b0 <_dtoa_r+0x2c4>
 80079c6:	3101      	adds	r1, #1
 80079c8:	6069      	str	r1, [r5, #4]
 80079ca:	0052      	lsls	r2, r2, #1
 80079cc:	e7a3      	b.n	8007916 <_dtoa_r+0x22a>
 80079ce:	2301      	movs	r3, #1
 80079d0:	421c      	tst	r4, r3
 80079d2:	d00e      	beq.n	80079f2 <_dtoa_r+0x306>
 80079d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079d6:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <_dtoa_r+0x370>)
 80079d8:	3301      	adds	r3, #1
 80079da:	930e      	str	r3, [sp, #56]	; 0x38
 80079dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079de:	0028      	movs	r0, r5
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	189b      	adds	r3, r3, r2
 80079e4:	0031      	movs	r1, r6
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f7fa f825 	bl	8001a38 <__aeabi_dmul>
 80079ee:	0005      	movs	r5, r0
 80079f0:	000e      	movs	r6, r1
 80079f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079f4:	1064      	asrs	r4, r4, #1
 80079f6:	3301      	adds	r3, #1
 80079f8:	9310      	str	r3, [sp, #64]	; 0x40
 80079fa:	2c00      	cmp	r4, #0
 80079fc:	d1e7      	bne.n	80079ce <_dtoa_r+0x2e2>
 80079fe:	9806      	ldr	r0, [sp, #24]
 8007a00:	9907      	ldr	r1, [sp, #28]
 8007a02:	002a      	movs	r2, r5
 8007a04:	0033      	movs	r3, r6
 8007a06:	f7f9 fc0d 	bl	8001224 <__aeabi_ddiv>
 8007a0a:	9006      	str	r0, [sp, #24]
 8007a0c:	9107      	str	r1, [sp, #28]
 8007a0e:	e042      	b.n	8007a96 <_dtoa_r+0x3aa>
 8007a10:	7ff00000 	.word	0x7ff00000
 8007a14:	0000270f 	.word	0x0000270f
 8007a18:	080097e5 	.word	0x080097e5
 8007a1c:	080097e8 	.word	0x080097e8
 8007a20:	080097b8 	.word	0x080097b8
 8007a24:	080097b9 	.word	0x080097b9
 8007a28:	3ff00000 	.word	0x3ff00000
 8007a2c:	fffffc01 	.word	0xfffffc01
 8007a30:	3ff80000 	.word	0x3ff80000
 8007a34:	636f4361 	.word	0x636f4361
 8007a38:	3fd287a7 	.word	0x3fd287a7
 8007a3c:	8b60c8b3 	.word	0x8b60c8b3
 8007a40:	3fc68a28 	.word	0x3fc68a28
 8007a44:	509f79fb 	.word	0x509f79fb
 8007a48:	3fd34413 	.word	0x3fd34413
 8007a4c:	08009878 	.word	0x08009878
 8007a50:	00000432 	.word	0x00000432
 8007a54:	00000412 	.word	0x00000412
 8007a58:	fe100000 	.word	0xfe100000
 8007a5c:	08009850 	.word	0x08009850
 8007a60:	2302      	movs	r3, #2
 8007a62:	930e      	str	r3, [sp, #56]	; 0x38
 8007a64:	2f00      	cmp	r7, #0
 8007a66:	d016      	beq.n	8007a96 <_dtoa_r+0x3aa>
 8007a68:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007a6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007a6c:	427c      	negs	r4, r7
 8007a6e:	330d      	adds	r3, #13
 8007a70:	4023      	ands	r3, r4
 8007a72:	4ace      	ldr	r2, [pc, #824]	; (8007dac <_dtoa_r+0x6c0>)
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	18d3      	adds	r3, r2, r3
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f7f9 ffdc 	bl	8001a38 <__aeabi_dmul>
 8007a80:	2300      	movs	r3, #0
 8007a82:	2601      	movs	r6, #1
 8007a84:	001d      	movs	r5, r3
 8007a86:	9006      	str	r0, [sp, #24]
 8007a88:	9107      	str	r1, [sp, #28]
 8007a8a:	1124      	asrs	r4, r4, #4
 8007a8c:	2c00      	cmp	r4, #0
 8007a8e:	d000      	beq.n	8007a92 <_dtoa_r+0x3a6>
 8007a90:	e08c      	b.n	8007bac <_dtoa_r+0x4c0>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1b9      	bne.n	8007a0a <_dtoa_r+0x31e>
 8007a96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d100      	bne.n	8007a9e <_dtoa_r+0x3b2>
 8007a9c:	e096      	b.n	8007bcc <_dtoa_r+0x4e0>
 8007a9e:	9c06      	ldr	r4, [sp, #24]
 8007aa0:	9d07      	ldr	r5, [sp, #28]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	4bc2      	ldr	r3, [pc, #776]	; (8007db0 <_dtoa_r+0x6c4>)
 8007aa6:	0020      	movs	r0, r4
 8007aa8:	0029      	movs	r1, r5
 8007aaa:	f7f8 fccb 	bl	8000444 <__aeabi_dcmplt>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d100      	bne.n	8007ab4 <_dtoa_r+0x3c8>
 8007ab2:	e08b      	b.n	8007bcc <_dtoa_r+0x4e0>
 8007ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d100      	bne.n	8007abc <_dtoa_r+0x3d0>
 8007aba:	e087      	b.n	8007bcc <_dtoa_r+0x4e0>
 8007abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	dd41      	ble.n	8007b46 <_dtoa_r+0x45a>
 8007ac2:	4bbc      	ldr	r3, [pc, #752]	; (8007db4 <_dtoa_r+0x6c8>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	0020      	movs	r0, r4
 8007ac8:	0029      	movs	r1, r5
 8007aca:	f7f9 ffb5 	bl	8001a38 <__aeabi_dmul>
 8007ace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ad0:	9006      	str	r0, [sp, #24]
 8007ad2:	9107      	str	r1, [sp, #28]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	930e      	str	r3, [sp, #56]	; 0x38
 8007ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ada:	1e7e      	subs	r6, r7, #1
 8007adc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007ade:	9310      	str	r3, [sp, #64]	; 0x40
 8007ae0:	f7fa fdb6 	bl	8002650 <__aeabi_i2d>
 8007ae4:	9a06      	ldr	r2, [sp, #24]
 8007ae6:	9b07      	ldr	r3, [sp, #28]
 8007ae8:	f7f9 ffa6 	bl	8001a38 <__aeabi_dmul>
 8007aec:	2200      	movs	r2, #0
 8007aee:	4bb2      	ldr	r3, [pc, #712]	; (8007db8 <_dtoa_r+0x6cc>)
 8007af0:	f7f9 f87c 	bl	8000bec <__aeabi_dadd>
 8007af4:	4ab1      	ldr	r2, [pc, #708]	; (8007dbc <_dtoa_r+0x6d0>)
 8007af6:	900e      	str	r0, [sp, #56]	; 0x38
 8007af8:	910f      	str	r1, [sp, #60]	; 0x3c
 8007afa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007afc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007afe:	4694      	mov	ip, r2
 8007b00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b02:	4463      	add	r3, ip
 8007b04:	9315      	str	r3, [sp, #84]	; 0x54
 8007b06:	001d      	movs	r5, r3
 8007b08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d161      	bne.n	8007bd2 <_dtoa_r+0x4e6>
 8007b0e:	9806      	ldr	r0, [sp, #24]
 8007b10:	9907      	ldr	r1, [sp, #28]
 8007b12:	2200      	movs	r2, #0
 8007b14:	4baa      	ldr	r3, [pc, #680]	; (8007dc0 <_dtoa_r+0x6d4>)
 8007b16:	f7fa fa01 	bl	8001f1c <__aeabi_dsub>
 8007b1a:	0022      	movs	r2, r4
 8007b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b1e:	9006      	str	r0, [sp, #24]
 8007b20:	9107      	str	r1, [sp, #28]
 8007b22:	f7f8 fca3 	bl	800046c <__aeabi_dcmpgt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d000      	beq.n	8007b2c <_dtoa_r+0x440>
 8007b2a:	e2a8      	b.n	800807e <_dtoa_r+0x992>
 8007b2c:	48a5      	ldr	r0, [pc, #660]	; (8007dc4 <_dtoa_r+0x6d8>)
 8007b2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b30:	4684      	mov	ip, r0
 8007b32:	4461      	add	r1, ip
 8007b34:	000b      	movs	r3, r1
 8007b36:	9806      	ldr	r0, [sp, #24]
 8007b38:	9907      	ldr	r1, [sp, #28]
 8007b3a:	0022      	movs	r2, r4
 8007b3c:	f7f8 fc82 	bl	8000444 <__aeabi_dcmplt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d000      	beq.n	8007b46 <_dtoa_r+0x45a>
 8007b44:	e295      	b.n	8008072 <_dtoa_r+0x986>
 8007b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007b4a:	9306      	str	r3, [sp, #24]
 8007b4c:	9407      	str	r4, [sp, #28]
 8007b4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	da00      	bge.n	8007b56 <_dtoa_r+0x46a>
 8007b54:	e15c      	b.n	8007e10 <_dtoa_r+0x724>
 8007b56:	2f0e      	cmp	r7, #14
 8007b58:	dd00      	ble.n	8007b5c <_dtoa_r+0x470>
 8007b5a:	e159      	b.n	8007e10 <_dtoa_r+0x724>
 8007b5c:	4b93      	ldr	r3, [pc, #588]	; (8007dac <_dtoa_r+0x6c0>)
 8007b5e:	00fa      	lsls	r2, r7, #3
 8007b60:	189b      	adds	r3, r3, r2
 8007b62:	685c      	ldr	r4, [r3, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	9405      	str	r4, [sp, #20]
 8007b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	db00      	blt.n	8007b72 <_dtoa_r+0x486>
 8007b70:	e0d8      	b.n	8007d24 <_dtoa_r+0x638>
 8007b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dd00      	ble.n	8007b7a <_dtoa_r+0x48e>
 8007b78:	e0d4      	b.n	8007d24 <_dtoa_r+0x638>
 8007b7a:	d000      	beq.n	8007b7e <_dtoa_r+0x492>
 8007b7c:	e27d      	b.n	800807a <_dtoa_r+0x98e>
 8007b7e:	9804      	ldr	r0, [sp, #16]
 8007b80:	9905      	ldr	r1, [sp, #20]
 8007b82:	2200      	movs	r2, #0
 8007b84:	4b8e      	ldr	r3, [pc, #568]	; (8007dc0 <_dtoa_r+0x6d4>)
 8007b86:	f7f9 ff57 	bl	8001a38 <__aeabi_dmul>
 8007b8a:	9a06      	ldr	r2, [sp, #24]
 8007b8c:	9b07      	ldr	r3, [sp, #28]
 8007b8e:	f7f8 fc77 	bl	8000480 <__aeabi_dcmpge>
 8007b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	001e      	movs	r6, r3
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d000      	beq.n	8007b9e <_dtoa_r+0x4b2>
 8007b9c:	e24f      	b.n	800803e <_dtoa_r+0x952>
 8007b9e:	9b08      	ldr	r3, [sp, #32]
 8007ba0:	9a08      	ldr	r2, [sp, #32]
 8007ba2:	1c5d      	adds	r5, r3, #1
 8007ba4:	2331      	movs	r3, #49	; 0x31
 8007ba6:	3701      	adds	r7, #1
 8007ba8:	7013      	strb	r3, [r2, #0]
 8007baa:	e24b      	b.n	8008044 <_dtoa_r+0x958>
 8007bac:	4234      	tst	r4, r6
 8007bae:	d00a      	beq.n	8007bc6 <_dtoa_r+0x4da>
 8007bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bb2:	4a85      	ldr	r2, [pc, #532]	; (8007dc8 <_dtoa_r+0x6dc>)
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	930e      	str	r3, [sp, #56]	; 0x38
 8007bb8:	00eb      	lsls	r3, r5, #3
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f7f9 ff3a 	bl	8001a38 <__aeabi_dmul>
 8007bc4:	0033      	movs	r3, r6
 8007bc6:	1064      	asrs	r4, r4, #1
 8007bc8:	3501      	adds	r5, #1
 8007bca:	e75f      	b.n	8007a8c <_dtoa_r+0x3a0>
 8007bcc:	003e      	movs	r6, r7
 8007bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd0:	e784      	b.n	8007adc <_dtoa_r+0x3f0>
 8007bd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007bd6:	1e5a      	subs	r2, r3, #1
 8007bd8:	4b74      	ldr	r3, [pc, #464]	; (8007dac <_dtoa_r+0x6c0>)
 8007bda:	00d2      	lsls	r2, r2, #3
 8007bdc:	189b      	adds	r3, r3, r2
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2900      	cmp	r1, #0
 8007be4:	d049      	beq.n	8007c7a <_dtoa_r+0x58e>
 8007be6:	2000      	movs	r0, #0
 8007be8:	4978      	ldr	r1, [pc, #480]	; (8007dcc <_dtoa_r+0x6e0>)
 8007bea:	f7f9 fb1b 	bl	8001224 <__aeabi_ddiv>
 8007bee:	002b      	movs	r3, r5
 8007bf0:	0022      	movs	r2, r4
 8007bf2:	f7fa f993 	bl	8001f1c <__aeabi_dsub>
 8007bf6:	9b08      	ldr	r3, [sp, #32]
 8007bf8:	900e      	str	r0, [sp, #56]	; 0x38
 8007bfa:	910f      	str	r1, [sp, #60]	; 0x3c
 8007bfc:	9315      	str	r3, [sp, #84]	; 0x54
 8007bfe:	9806      	ldr	r0, [sp, #24]
 8007c00:	9907      	ldr	r1, [sp, #28]
 8007c02:	f7fa fcef 	bl	80025e4 <__aeabi_d2iz>
 8007c06:	0004      	movs	r4, r0
 8007c08:	f7fa fd22 	bl	8002650 <__aeabi_i2d>
 8007c0c:	0002      	movs	r2, r0
 8007c0e:	000b      	movs	r3, r1
 8007c10:	9806      	ldr	r0, [sp, #24]
 8007c12:	9907      	ldr	r1, [sp, #28]
 8007c14:	f7fa f982 	bl	8001f1c <__aeabi_dsub>
 8007c18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c1a:	3430      	adds	r4, #48	; 0x30
 8007c1c:	1c5d      	adds	r5, r3, #1
 8007c1e:	701c      	strb	r4, [r3, #0]
 8007c20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c24:	9006      	str	r0, [sp, #24]
 8007c26:	9107      	str	r1, [sp, #28]
 8007c28:	f7f8 fc0c 	bl	8000444 <__aeabi_dcmplt>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d16c      	bne.n	8007d0a <_dtoa_r+0x61e>
 8007c30:	9a06      	ldr	r2, [sp, #24]
 8007c32:	9b07      	ldr	r3, [sp, #28]
 8007c34:	2000      	movs	r0, #0
 8007c36:	495e      	ldr	r1, [pc, #376]	; (8007db0 <_dtoa_r+0x6c4>)
 8007c38:	f7fa f970 	bl	8001f1c <__aeabi_dsub>
 8007c3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c40:	f7f8 fc00 	bl	8000444 <__aeabi_dcmplt>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d000      	beq.n	8007c4a <_dtoa_r+0x55e>
 8007c48:	e0c3      	b.n	8007dd2 <_dtoa_r+0x6e6>
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c4e:	1aeb      	subs	r3, r5, r3
 8007c50:	429a      	cmp	r2, r3
 8007c52:	dc00      	bgt.n	8007c56 <_dtoa_r+0x56a>
 8007c54:	e777      	b.n	8007b46 <_dtoa_r+0x45a>
 8007c56:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007c58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4b55      	ldr	r3, [pc, #340]	; (8007db4 <_dtoa_r+0x6c8>)
 8007c5e:	f7f9 feeb 	bl	8001a38 <__aeabi_dmul>
 8007c62:	2200      	movs	r2, #0
 8007c64:	900e      	str	r0, [sp, #56]	; 0x38
 8007c66:	910f      	str	r1, [sp, #60]	; 0x3c
 8007c68:	9806      	ldr	r0, [sp, #24]
 8007c6a:	9907      	ldr	r1, [sp, #28]
 8007c6c:	4b51      	ldr	r3, [pc, #324]	; (8007db4 <_dtoa_r+0x6c8>)
 8007c6e:	f7f9 fee3 	bl	8001a38 <__aeabi_dmul>
 8007c72:	9515      	str	r5, [sp, #84]	; 0x54
 8007c74:	9006      	str	r0, [sp, #24]
 8007c76:	9107      	str	r1, [sp, #28]
 8007c78:	e7c1      	b.n	8007bfe <_dtoa_r+0x512>
 8007c7a:	0020      	movs	r0, r4
 8007c7c:	0029      	movs	r1, r5
 8007c7e:	f7f9 fedb 	bl	8001a38 <__aeabi_dmul>
 8007c82:	9c08      	ldr	r4, [sp, #32]
 8007c84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c86:	0023      	movs	r3, r4
 8007c88:	4694      	mov	ip, r2
 8007c8a:	900e      	str	r0, [sp, #56]	; 0x38
 8007c8c:	910f      	str	r1, [sp, #60]	; 0x3c
 8007c8e:	4463      	add	r3, ip
 8007c90:	9315      	str	r3, [sp, #84]	; 0x54
 8007c92:	9806      	ldr	r0, [sp, #24]
 8007c94:	9907      	ldr	r1, [sp, #28]
 8007c96:	f7fa fca5 	bl	80025e4 <__aeabi_d2iz>
 8007c9a:	0005      	movs	r5, r0
 8007c9c:	f7fa fcd8 	bl	8002650 <__aeabi_i2d>
 8007ca0:	000b      	movs	r3, r1
 8007ca2:	0002      	movs	r2, r0
 8007ca4:	9806      	ldr	r0, [sp, #24]
 8007ca6:	9907      	ldr	r1, [sp, #28]
 8007ca8:	f7fa f938 	bl	8001f1c <__aeabi_dsub>
 8007cac:	3530      	adds	r5, #48	; 0x30
 8007cae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cb0:	7025      	strb	r5, [r4, #0]
 8007cb2:	3401      	adds	r4, #1
 8007cb4:	9006      	str	r0, [sp, #24]
 8007cb6:	9107      	str	r1, [sp, #28]
 8007cb8:	42a3      	cmp	r3, r4
 8007cba:	d12a      	bne.n	8007d12 <_dtoa_r+0x626>
 8007cbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007cbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007cc0:	9a08      	ldr	r2, [sp, #32]
 8007cc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cc4:	4694      	mov	ip, r2
 8007cc6:	4463      	add	r3, ip
 8007cc8:	2200      	movs	r2, #0
 8007cca:	001d      	movs	r5, r3
 8007ccc:	4b3f      	ldr	r3, [pc, #252]	; (8007dcc <_dtoa_r+0x6e0>)
 8007cce:	f7f8 ff8d 	bl	8000bec <__aeabi_dadd>
 8007cd2:	0002      	movs	r2, r0
 8007cd4:	000b      	movs	r3, r1
 8007cd6:	9806      	ldr	r0, [sp, #24]
 8007cd8:	9907      	ldr	r1, [sp, #28]
 8007cda:	f7f8 fbc7 	bl	800046c <__aeabi_dcmpgt>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d000      	beq.n	8007ce4 <_dtoa_r+0x5f8>
 8007ce2:	e076      	b.n	8007dd2 <_dtoa_r+0x6e6>
 8007ce4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ce8:	2000      	movs	r0, #0
 8007cea:	4938      	ldr	r1, [pc, #224]	; (8007dcc <_dtoa_r+0x6e0>)
 8007cec:	f7fa f916 	bl	8001f1c <__aeabi_dsub>
 8007cf0:	0002      	movs	r2, r0
 8007cf2:	000b      	movs	r3, r1
 8007cf4:	9806      	ldr	r0, [sp, #24]
 8007cf6:	9907      	ldr	r1, [sp, #28]
 8007cf8:	f7f8 fba4 	bl	8000444 <__aeabi_dcmplt>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d100      	bne.n	8007d02 <_dtoa_r+0x616>
 8007d00:	e721      	b.n	8007b46 <_dtoa_r+0x45a>
 8007d02:	1e6b      	subs	r3, r5, #1
 8007d04:	781a      	ldrb	r2, [r3, #0]
 8007d06:	2a30      	cmp	r2, #48	; 0x30
 8007d08:	d001      	beq.n	8007d0e <_dtoa_r+0x622>
 8007d0a:	0037      	movs	r7, r6
 8007d0c:	e03f      	b.n	8007d8e <_dtoa_r+0x6a2>
 8007d0e:	001d      	movs	r5, r3
 8007d10:	e7f7      	b.n	8007d02 <_dtoa_r+0x616>
 8007d12:	9806      	ldr	r0, [sp, #24]
 8007d14:	9907      	ldr	r1, [sp, #28]
 8007d16:	2200      	movs	r2, #0
 8007d18:	4b26      	ldr	r3, [pc, #152]	; (8007db4 <_dtoa_r+0x6c8>)
 8007d1a:	f7f9 fe8d 	bl	8001a38 <__aeabi_dmul>
 8007d1e:	9006      	str	r0, [sp, #24]
 8007d20:	9107      	str	r1, [sp, #28]
 8007d22:	e7b6      	b.n	8007c92 <_dtoa_r+0x5a6>
 8007d24:	9e08      	ldr	r6, [sp, #32]
 8007d26:	9a04      	ldr	r2, [sp, #16]
 8007d28:	9b05      	ldr	r3, [sp, #20]
 8007d2a:	9806      	ldr	r0, [sp, #24]
 8007d2c:	9907      	ldr	r1, [sp, #28]
 8007d2e:	f7f9 fa79 	bl	8001224 <__aeabi_ddiv>
 8007d32:	f7fa fc57 	bl	80025e4 <__aeabi_d2iz>
 8007d36:	0004      	movs	r4, r0
 8007d38:	f7fa fc8a 	bl	8002650 <__aeabi_i2d>
 8007d3c:	9a04      	ldr	r2, [sp, #16]
 8007d3e:	9b05      	ldr	r3, [sp, #20]
 8007d40:	f7f9 fe7a 	bl	8001a38 <__aeabi_dmul>
 8007d44:	0002      	movs	r2, r0
 8007d46:	000b      	movs	r3, r1
 8007d48:	9806      	ldr	r0, [sp, #24]
 8007d4a:	9907      	ldr	r1, [sp, #28]
 8007d4c:	f7fa f8e6 	bl	8001f1c <__aeabi_dsub>
 8007d50:	0023      	movs	r3, r4
 8007d52:	3330      	adds	r3, #48	; 0x30
 8007d54:	7033      	strb	r3, [r6, #0]
 8007d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d58:	9b08      	ldr	r3, [sp, #32]
 8007d5a:	1c75      	adds	r5, r6, #1
 8007d5c:	1aeb      	subs	r3, r5, r3
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d148      	bne.n	8007df4 <_dtoa_r+0x708>
 8007d62:	0002      	movs	r2, r0
 8007d64:	000b      	movs	r3, r1
 8007d66:	f7f8 ff41 	bl	8000bec <__aeabi_dadd>
 8007d6a:	9a04      	ldr	r2, [sp, #16]
 8007d6c:	9b05      	ldr	r3, [sp, #20]
 8007d6e:	9006      	str	r0, [sp, #24]
 8007d70:	9107      	str	r1, [sp, #28]
 8007d72:	f7f8 fb7b 	bl	800046c <__aeabi_dcmpgt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d12a      	bne.n	8007dd0 <_dtoa_r+0x6e4>
 8007d7a:	9a04      	ldr	r2, [sp, #16]
 8007d7c:	9b05      	ldr	r3, [sp, #20]
 8007d7e:	9806      	ldr	r0, [sp, #24]
 8007d80:	9907      	ldr	r1, [sp, #28]
 8007d82:	f7f8 fb59 	bl	8000438 <__aeabi_dcmpeq>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d001      	beq.n	8007d8e <_dtoa_r+0x6a2>
 8007d8a:	07e3      	lsls	r3, r4, #31
 8007d8c:	d420      	bmi.n	8007dd0 <_dtoa_r+0x6e4>
 8007d8e:	9903      	ldr	r1, [sp, #12]
 8007d90:	9802      	ldr	r0, [sp, #8]
 8007d92:	f000 fce5 	bl	8008760 <_Bfree>
 8007d96:	2300      	movs	r3, #0
 8007d98:	702b      	strb	r3, [r5, #0]
 8007d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d9c:	3701      	adds	r7, #1
 8007d9e:	601f      	str	r7, [r3, #0]
 8007da0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d100      	bne.n	8007da8 <_dtoa_r+0x6bc>
 8007da6:	e4e6      	b.n	8007776 <_dtoa_r+0x8a>
 8007da8:	601d      	str	r5, [r3, #0]
 8007daa:	e4e4      	b.n	8007776 <_dtoa_r+0x8a>
 8007dac:	08009878 	.word	0x08009878
 8007db0:	3ff00000 	.word	0x3ff00000
 8007db4:	40240000 	.word	0x40240000
 8007db8:	401c0000 	.word	0x401c0000
 8007dbc:	fcc00000 	.word	0xfcc00000
 8007dc0:	40140000 	.word	0x40140000
 8007dc4:	7cc00000 	.word	0x7cc00000
 8007dc8:	08009850 	.word	0x08009850
 8007dcc:	3fe00000 	.word	0x3fe00000
 8007dd0:	003e      	movs	r6, r7
 8007dd2:	1e6b      	subs	r3, r5, #1
 8007dd4:	781a      	ldrb	r2, [r3, #0]
 8007dd6:	2a39      	cmp	r2, #57	; 0x39
 8007dd8:	d106      	bne.n	8007de8 <_dtoa_r+0x6fc>
 8007dda:	9a08      	ldr	r2, [sp, #32]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d107      	bne.n	8007df0 <_dtoa_r+0x704>
 8007de0:	2330      	movs	r3, #48	; 0x30
 8007de2:	7013      	strb	r3, [r2, #0]
 8007de4:	0013      	movs	r3, r2
 8007de6:	3601      	adds	r6, #1
 8007de8:	781a      	ldrb	r2, [r3, #0]
 8007dea:	3201      	adds	r2, #1
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	e78c      	b.n	8007d0a <_dtoa_r+0x61e>
 8007df0:	001d      	movs	r5, r3
 8007df2:	e7ee      	b.n	8007dd2 <_dtoa_r+0x6e6>
 8007df4:	2200      	movs	r2, #0
 8007df6:	4ba4      	ldr	r3, [pc, #656]	; (8008088 <_dtoa_r+0x99c>)
 8007df8:	f7f9 fe1e 	bl	8001a38 <__aeabi_dmul>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9006      	str	r0, [sp, #24]
 8007e02:	9107      	str	r1, [sp, #28]
 8007e04:	002e      	movs	r6, r5
 8007e06:	f7f8 fb17 	bl	8000438 <__aeabi_dcmpeq>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d08b      	beq.n	8007d26 <_dtoa_r+0x63a>
 8007e0e:	e7be      	b.n	8007d8e <_dtoa_r+0x6a2>
 8007e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	d100      	bne.n	8007e18 <_dtoa_r+0x72c>
 8007e16:	e0da      	b.n	8007fce <_dtoa_r+0x8e2>
 8007e18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e1a:	2a01      	cmp	r2, #1
 8007e1c:	dd00      	ble.n	8007e20 <_dtoa_r+0x734>
 8007e1e:	e0bd      	b.n	8007f9c <_dtoa_r+0x8b0>
 8007e20:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e22:	2a00      	cmp	r2, #0
 8007e24:	d100      	bne.n	8007e28 <_dtoa_r+0x73c>
 8007e26:	e0b5      	b.n	8007f94 <_dtoa_r+0x8a8>
 8007e28:	4a98      	ldr	r2, [pc, #608]	; (800808c <_dtoa_r+0x9a0>)
 8007e2a:	189b      	adds	r3, r3, r2
 8007e2c:	9d04      	ldr	r5, [sp, #16]
 8007e2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e32:	2101      	movs	r1, #1
 8007e34:	18d2      	adds	r2, r2, r3
 8007e36:	920a      	str	r2, [sp, #40]	; 0x28
 8007e38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e3a:	9802      	ldr	r0, [sp, #8]
 8007e3c:	18d3      	adds	r3, r2, r3
 8007e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e40:	f000 fd2e 	bl	80088a0 <__i2b>
 8007e44:	0006      	movs	r6, r0
 8007e46:	2c00      	cmp	r4, #0
 8007e48:	dd0e      	ble.n	8007e68 <_dtoa_r+0x77c>
 8007e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	dd0b      	ble.n	8007e68 <_dtoa_r+0x77c>
 8007e50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e52:	0023      	movs	r3, r4
 8007e54:	4294      	cmp	r4, r2
 8007e56:	dd00      	ble.n	8007e5a <_dtoa_r+0x76e>
 8007e58:	0013      	movs	r3, r2
 8007e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e5c:	1ae4      	subs	r4, r4, r3
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	920a      	str	r2, [sp, #40]	; 0x28
 8007e62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e68:	9b04      	ldr	r3, [sp, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d01f      	beq.n	8007eae <_dtoa_r+0x7c2>
 8007e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d100      	bne.n	8007e76 <_dtoa_r+0x78a>
 8007e74:	e0af      	b.n	8007fd6 <_dtoa_r+0x8ea>
 8007e76:	2d00      	cmp	r5, #0
 8007e78:	d011      	beq.n	8007e9e <_dtoa_r+0x7b2>
 8007e7a:	0031      	movs	r1, r6
 8007e7c:	002a      	movs	r2, r5
 8007e7e:	9802      	ldr	r0, [sp, #8]
 8007e80:	f000 fda6 	bl	80089d0 <__pow5mult>
 8007e84:	9a03      	ldr	r2, [sp, #12]
 8007e86:	0001      	movs	r1, r0
 8007e88:	0006      	movs	r6, r0
 8007e8a:	9802      	ldr	r0, [sp, #8]
 8007e8c:	f000 fd11 	bl	80088b2 <__multiply>
 8007e90:	9903      	ldr	r1, [sp, #12]
 8007e92:	9010      	str	r0, [sp, #64]	; 0x40
 8007e94:	9802      	ldr	r0, [sp, #8]
 8007e96:	f000 fc63 	bl	8008760 <_Bfree>
 8007e9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e9c:	9303      	str	r3, [sp, #12]
 8007e9e:	9b04      	ldr	r3, [sp, #16]
 8007ea0:	1b5a      	subs	r2, r3, r5
 8007ea2:	d004      	beq.n	8007eae <_dtoa_r+0x7c2>
 8007ea4:	9903      	ldr	r1, [sp, #12]
 8007ea6:	9802      	ldr	r0, [sp, #8]
 8007ea8:	f000 fd92 	bl	80089d0 <__pow5mult>
 8007eac:	9003      	str	r0, [sp, #12]
 8007eae:	2101      	movs	r1, #1
 8007eb0:	9802      	ldr	r0, [sp, #8]
 8007eb2:	f000 fcf5 	bl	80088a0 <__i2b>
 8007eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007eb8:	9004      	str	r0, [sp, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d100      	bne.n	8007ec0 <_dtoa_r+0x7d4>
 8007ebe:	e1e3      	b.n	8008288 <_dtoa_r+0xb9c>
 8007ec0:	001a      	movs	r2, r3
 8007ec2:	0001      	movs	r1, r0
 8007ec4:	9802      	ldr	r0, [sp, #8]
 8007ec6:	f000 fd83 	bl	80089d0 <__pow5mult>
 8007eca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ecc:	9004      	str	r0, [sp, #16]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	dd00      	ble.n	8007ed4 <_dtoa_r+0x7e8>
 8007ed2:	e082      	b.n	8007fda <_dtoa_r+0x8ee>
 8007ed4:	2500      	movs	r5, #0
 8007ed6:	9b06      	ldr	r3, [sp, #24]
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	d10e      	bne.n	8007efa <_dtoa_r+0x80e>
 8007edc:	9b07      	ldr	r3, [sp, #28]
 8007ede:	031b      	lsls	r3, r3, #12
 8007ee0:	42ab      	cmp	r3, r5
 8007ee2:	d10a      	bne.n	8007efa <_dtoa_r+0x80e>
 8007ee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ee6:	9a07      	ldr	r2, [sp, #28]
 8007ee8:	4213      	tst	r3, r2
 8007eea:	d006      	beq.n	8007efa <_dtoa_r+0x80e>
 8007eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eee:	3501      	adds	r5, #1
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007efa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007efc:	2001      	movs	r0, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d16c      	bne.n	8007fdc <_dtoa_r+0x8f0>
 8007f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f04:	1818      	adds	r0, r3, r0
 8007f06:	231f      	movs	r3, #31
 8007f08:	4018      	ands	r0, r3
 8007f0a:	d07e      	beq.n	800800a <_dtoa_r+0x91e>
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	1a1b      	subs	r3, r3, r0
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	dd70      	ble.n	8007ff6 <_dtoa_r+0x90a>
 8007f14:	231c      	movs	r3, #28
 8007f16:	1a18      	subs	r0, r3, r0
 8007f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1a:	1824      	adds	r4, r4, r0
 8007f1c:	181b      	adds	r3, r3, r0
 8007f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f22:	181b      	adds	r3, r3, r0
 8007f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dd05      	ble.n	8007f38 <_dtoa_r+0x84c>
 8007f2c:	001a      	movs	r2, r3
 8007f2e:	9903      	ldr	r1, [sp, #12]
 8007f30:	9802      	ldr	r0, [sp, #8]
 8007f32:	f000 fd9f 	bl	8008a74 <__lshift>
 8007f36:	9003      	str	r0, [sp, #12]
 8007f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dd05      	ble.n	8007f4a <_dtoa_r+0x85e>
 8007f3e:	001a      	movs	r2, r3
 8007f40:	9904      	ldr	r1, [sp, #16]
 8007f42:	9802      	ldr	r0, [sp, #8]
 8007f44:	f000 fd96 	bl	8008a74 <__lshift>
 8007f48:	9004      	str	r0, [sp, #16]
 8007f4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d05e      	beq.n	800800e <_dtoa_r+0x922>
 8007f50:	9904      	ldr	r1, [sp, #16]
 8007f52:	9803      	ldr	r0, [sp, #12]
 8007f54:	f000 fde0 	bl	8008b18 <__mcmp>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	da58      	bge.n	800800e <_dtoa_r+0x922>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	220a      	movs	r2, #10
 8007f60:	9903      	ldr	r1, [sp, #12]
 8007f62:	9802      	ldr	r0, [sp, #8]
 8007f64:	f000 fc15 	bl	8008792 <__multadd>
 8007f68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f6a:	3f01      	subs	r7, #1
 8007f6c:	9003      	str	r0, [sp, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d100      	bne.n	8007f74 <_dtoa_r+0x888>
 8007f72:	e190      	b.n	8008296 <_dtoa_r+0xbaa>
 8007f74:	2300      	movs	r3, #0
 8007f76:	0031      	movs	r1, r6
 8007f78:	220a      	movs	r2, #10
 8007f7a:	9802      	ldr	r0, [sp, #8]
 8007f7c:	f000 fc09 	bl	8008792 <__multadd>
 8007f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f82:	0006      	movs	r6, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	dd00      	ble.n	8007f8a <_dtoa_r+0x89e>
 8007f88:	e088      	b.n	800809c <_dtoa_r+0x9b0>
 8007f8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	dc00      	bgt.n	8007f92 <_dtoa_r+0x8a6>
 8007f90:	e084      	b.n	800809c <_dtoa_r+0x9b0>
 8007f92:	e044      	b.n	800801e <_dtoa_r+0x932>
 8007f94:	2336      	movs	r3, #54	; 0x36
 8007f96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	e747      	b.n	8007e2c <_dtoa_r+0x740>
 8007f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9e:	1e5d      	subs	r5, r3, #1
 8007fa0:	9b04      	ldr	r3, [sp, #16]
 8007fa2:	42ab      	cmp	r3, r5
 8007fa4:	db08      	blt.n	8007fb8 <_dtoa_r+0x8cc>
 8007fa6:	1b5d      	subs	r5, r3, r5
 8007fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	da0c      	bge.n	8007fc8 <_dtoa_r+0x8dc>
 8007fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fb2:	1a9c      	subs	r4, r3, r2
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	e73b      	b.n	8007e30 <_dtoa_r+0x744>
 8007fb8:	9b04      	ldr	r3, [sp, #16]
 8007fba:	9504      	str	r5, [sp, #16]
 8007fbc:	1aea      	subs	r2, r5, r3
 8007fbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fc0:	2500      	movs	r5, #0
 8007fc2:	189b      	adds	r3, r3, r2
 8007fc4:	9311      	str	r3, [sp, #68]	; 0x44
 8007fc6:	e7ef      	b.n	8007fa8 <_dtoa_r+0x8bc>
 8007fc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fcc:	e730      	b.n	8007e30 <_dtoa_r+0x744>
 8007fce:	9d04      	ldr	r5, [sp, #16]
 8007fd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fd2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007fd4:	e737      	b.n	8007e46 <_dtoa_r+0x75a>
 8007fd6:	9a04      	ldr	r2, [sp, #16]
 8007fd8:	e764      	b.n	8007ea4 <_dtoa_r+0x7b8>
 8007fda:	2500      	movs	r5, #0
 8007fdc:	9b04      	ldr	r3, [sp, #16]
 8007fde:	9a04      	ldr	r2, [sp, #16]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	9310      	str	r3, [sp, #64]	; 0x40
 8007fe4:	3303      	adds	r3, #3
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	18d3      	adds	r3, r2, r3
 8007fea:	6858      	ldr	r0, [r3, #4]
 8007fec:	f000 fc0f 	bl	800880e <__hi0bits>
 8007ff0:	2320      	movs	r3, #32
 8007ff2:	1a18      	subs	r0, r3, r0
 8007ff4:	e785      	b.n	8007f02 <_dtoa_r+0x816>
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d095      	beq.n	8007f26 <_dtoa_r+0x83a>
 8007ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ffc:	331c      	adds	r3, #28
 8007ffe:	18d2      	adds	r2, r2, r3
 8008000:	920a      	str	r2, [sp, #40]	; 0x28
 8008002:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008004:	18e4      	adds	r4, r4, r3
 8008006:	18d3      	adds	r3, r2, r3
 8008008:	e78c      	b.n	8007f24 <_dtoa_r+0x838>
 800800a:	0003      	movs	r3, r0
 800800c:	e7f5      	b.n	8007ffa <_dtoa_r+0x90e>
 800800e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	dc3d      	bgt.n	8008090 <_dtoa_r+0x9a4>
 8008014:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008016:	2b02      	cmp	r3, #2
 8008018:	dd3a      	ble.n	8008090 <_dtoa_r+0x9a4>
 800801a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801c:	930c      	str	r3, [sp, #48]	; 0x30
 800801e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10c      	bne.n	800803e <_dtoa_r+0x952>
 8008024:	9904      	ldr	r1, [sp, #16]
 8008026:	2205      	movs	r2, #5
 8008028:	9802      	ldr	r0, [sp, #8]
 800802a:	f000 fbb2 	bl	8008792 <__multadd>
 800802e:	9004      	str	r0, [sp, #16]
 8008030:	0001      	movs	r1, r0
 8008032:	9803      	ldr	r0, [sp, #12]
 8008034:	f000 fd70 	bl	8008b18 <__mcmp>
 8008038:	2800      	cmp	r0, #0
 800803a:	dd00      	ble.n	800803e <_dtoa_r+0x952>
 800803c:	e5af      	b.n	8007b9e <_dtoa_r+0x4b2>
 800803e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008040:	9d08      	ldr	r5, [sp, #32]
 8008042:	43df      	mvns	r7, r3
 8008044:	2300      	movs	r3, #0
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	9904      	ldr	r1, [sp, #16]
 800804a:	9802      	ldr	r0, [sp, #8]
 800804c:	f000 fb88 	bl	8008760 <_Bfree>
 8008050:	2e00      	cmp	r6, #0
 8008052:	d100      	bne.n	8008056 <_dtoa_r+0x96a>
 8008054:	e69b      	b.n	8007d8e <_dtoa_r+0x6a2>
 8008056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	d005      	beq.n	8008068 <_dtoa_r+0x97c>
 800805c:	42b3      	cmp	r3, r6
 800805e:	d003      	beq.n	8008068 <_dtoa_r+0x97c>
 8008060:	0019      	movs	r1, r3
 8008062:	9802      	ldr	r0, [sp, #8]
 8008064:	f000 fb7c 	bl	8008760 <_Bfree>
 8008068:	0031      	movs	r1, r6
 800806a:	9802      	ldr	r0, [sp, #8]
 800806c:	f000 fb78 	bl	8008760 <_Bfree>
 8008070:	e68d      	b.n	8007d8e <_dtoa_r+0x6a2>
 8008072:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	001e      	movs	r6, r3
 8008078:	e7e1      	b.n	800803e <_dtoa_r+0x952>
 800807a:	2300      	movs	r3, #0
 800807c:	e7fa      	b.n	8008074 <_dtoa_r+0x988>
 800807e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008080:	0037      	movs	r7, r6
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	001e      	movs	r6, r3
 8008086:	e58a      	b.n	8007b9e <_dtoa_r+0x4b2>
 8008088:	40240000 	.word	0x40240000
 800808c:	00000433 	.word	0x00000433
 8008090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008092:	2b00      	cmp	r3, #0
 8008094:	d100      	bne.n	8008098 <_dtoa_r+0x9ac>
 8008096:	e0b2      	b.n	80081fe <_dtoa_r+0xb12>
 8008098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809a:	930c      	str	r3, [sp, #48]	; 0x30
 800809c:	2c00      	cmp	r4, #0
 800809e:	dd05      	ble.n	80080ac <_dtoa_r+0x9c0>
 80080a0:	0031      	movs	r1, r6
 80080a2:	0022      	movs	r2, r4
 80080a4:	9802      	ldr	r0, [sp, #8]
 80080a6:	f000 fce5 	bl	8008a74 <__lshift>
 80080aa:	0006      	movs	r6, r0
 80080ac:	0030      	movs	r0, r6
 80080ae:	2d00      	cmp	r5, #0
 80080b0:	d011      	beq.n	80080d6 <_dtoa_r+0x9ea>
 80080b2:	6871      	ldr	r1, [r6, #4]
 80080b4:	9802      	ldr	r0, [sp, #8]
 80080b6:	f000 fb1b 	bl	80086f0 <_Balloc>
 80080ba:	0031      	movs	r1, r6
 80080bc:	0004      	movs	r4, r0
 80080be:	6933      	ldr	r3, [r6, #16]
 80080c0:	310c      	adds	r1, #12
 80080c2:	1c9a      	adds	r2, r3, #2
 80080c4:	0092      	lsls	r2, r2, #2
 80080c6:	300c      	adds	r0, #12
 80080c8:	f000 fb09 	bl	80086de <memcpy>
 80080cc:	2201      	movs	r2, #1
 80080ce:	0021      	movs	r1, r4
 80080d0:	9802      	ldr	r0, [sp, #8]
 80080d2:	f000 fccf 	bl	8008a74 <__lshift>
 80080d6:	9609      	str	r6, [sp, #36]	; 0x24
 80080d8:	0006      	movs	r6, r0
 80080da:	9b08      	ldr	r3, [sp, #32]
 80080dc:	930a      	str	r3, [sp, #40]	; 0x28
 80080de:	9904      	ldr	r1, [sp, #16]
 80080e0:	9803      	ldr	r0, [sp, #12]
 80080e2:	f7ff fa7d 	bl	80075e0 <quorem>
 80080e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080e8:	900d      	str	r0, [sp, #52]	; 0x34
 80080ea:	0004      	movs	r4, r0
 80080ec:	9803      	ldr	r0, [sp, #12]
 80080ee:	f000 fd13 	bl	8008b18 <__mcmp>
 80080f2:	0032      	movs	r2, r6
 80080f4:	9010      	str	r0, [sp, #64]	; 0x40
 80080f6:	9904      	ldr	r1, [sp, #16]
 80080f8:	9802      	ldr	r0, [sp, #8]
 80080fa:	f000 fd27 	bl	8008b4c <__mdiff>
 80080fe:	2301      	movs	r3, #1
 8008100:	930b      	str	r3, [sp, #44]	; 0x2c
 8008102:	68c3      	ldr	r3, [r0, #12]
 8008104:	3430      	adds	r4, #48	; 0x30
 8008106:	0005      	movs	r5, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d104      	bne.n	8008116 <_dtoa_r+0xa2a>
 800810c:	0001      	movs	r1, r0
 800810e:	9803      	ldr	r0, [sp, #12]
 8008110:	f000 fd02 	bl	8008b18 <__mcmp>
 8008114:	900b      	str	r0, [sp, #44]	; 0x2c
 8008116:	0029      	movs	r1, r5
 8008118:	9802      	ldr	r0, [sp, #8]
 800811a:	f000 fb21 	bl	8008760 <_Bfree>
 800811e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008120:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008122:	4313      	orrs	r3, r2
 8008124:	d10e      	bne.n	8008144 <_dtoa_r+0xa58>
 8008126:	9a06      	ldr	r2, [sp, #24]
 8008128:	3301      	adds	r3, #1
 800812a:	4213      	tst	r3, r2
 800812c:	d10a      	bne.n	8008144 <_dtoa_r+0xa58>
 800812e:	2c39      	cmp	r4, #57	; 0x39
 8008130:	d026      	beq.n	8008180 <_dtoa_r+0xa94>
 8008132:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008134:	2b00      	cmp	r3, #0
 8008136:	dd01      	ble.n	800813c <_dtoa_r+0xa50>
 8008138:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800813a:	3431      	adds	r4, #49	; 0x31
 800813c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813e:	1c5d      	adds	r5, r3, #1
 8008140:	701c      	strb	r4, [r3, #0]
 8008142:	e781      	b.n	8008048 <_dtoa_r+0x95c>
 8008144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008146:	2b00      	cmp	r3, #0
 8008148:	db07      	blt.n	800815a <_dtoa_r+0xa6e>
 800814a:	001d      	movs	r5, r3
 800814c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800814e:	431d      	orrs	r5, r3
 8008150:	d122      	bne.n	8008198 <_dtoa_r+0xaac>
 8008152:	2301      	movs	r3, #1
 8008154:	9a06      	ldr	r2, [sp, #24]
 8008156:	4213      	tst	r3, r2
 8008158:	d11e      	bne.n	8008198 <_dtoa_r+0xaac>
 800815a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800815c:	2b00      	cmp	r3, #0
 800815e:	dded      	ble.n	800813c <_dtoa_r+0xa50>
 8008160:	9903      	ldr	r1, [sp, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	9802      	ldr	r0, [sp, #8]
 8008166:	f000 fc85 	bl	8008a74 <__lshift>
 800816a:	9904      	ldr	r1, [sp, #16]
 800816c:	9003      	str	r0, [sp, #12]
 800816e:	f000 fcd3 	bl	8008b18 <__mcmp>
 8008172:	2800      	cmp	r0, #0
 8008174:	dc02      	bgt.n	800817c <_dtoa_r+0xa90>
 8008176:	d1e1      	bne.n	800813c <_dtoa_r+0xa50>
 8008178:	07e3      	lsls	r3, r4, #31
 800817a:	d5df      	bpl.n	800813c <_dtoa_r+0xa50>
 800817c:	2c39      	cmp	r4, #57	; 0x39
 800817e:	d1db      	bne.n	8008138 <_dtoa_r+0xa4c>
 8008180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008184:	1c5d      	adds	r5, r3, #1
 8008186:	2339      	movs	r3, #57	; 0x39
 8008188:	7013      	strb	r3, [r2, #0]
 800818a:	1e6b      	subs	r3, r5, #1
 800818c:	781a      	ldrb	r2, [r3, #0]
 800818e:	2a39      	cmp	r2, #57	; 0x39
 8008190:	d067      	beq.n	8008262 <_dtoa_r+0xb76>
 8008192:	3201      	adds	r2, #1
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e757      	b.n	8008048 <_dtoa_r+0x95c>
 8008198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819a:	1c5d      	adds	r5, r3, #1
 800819c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dd04      	ble.n	80081ac <_dtoa_r+0xac0>
 80081a2:	2c39      	cmp	r4, #57	; 0x39
 80081a4:	d0ec      	beq.n	8008180 <_dtoa_r+0xa94>
 80081a6:	3401      	adds	r4, #1
 80081a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081aa:	e7c9      	b.n	8008140 <_dtoa_r+0xa54>
 80081ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081b0:	701c      	strb	r4, [r3, #0]
 80081b2:	9b08      	ldr	r3, [sp, #32]
 80081b4:	1aeb      	subs	r3, r5, r3
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d03e      	beq.n	8008238 <_dtoa_r+0xb4c>
 80081ba:	2300      	movs	r3, #0
 80081bc:	220a      	movs	r2, #10
 80081be:	9903      	ldr	r1, [sp, #12]
 80081c0:	9802      	ldr	r0, [sp, #8]
 80081c2:	f000 fae6 	bl	8008792 <__multadd>
 80081c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c8:	9003      	str	r0, [sp, #12]
 80081ca:	42b3      	cmp	r3, r6
 80081cc:	d109      	bne.n	80081e2 <_dtoa_r+0xaf6>
 80081ce:	2300      	movs	r3, #0
 80081d0:	220a      	movs	r2, #10
 80081d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081d4:	9802      	ldr	r0, [sp, #8]
 80081d6:	f000 fadc 	bl	8008792 <__multadd>
 80081da:	9009      	str	r0, [sp, #36]	; 0x24
 80081dc:	0006      	movs	r6, r0
 80081de:	950a      	str	r5, [sp, #40]	; 0x28
 80081e0:	e77d      	b.n	80080de <_dtoa_r+0x9f2>
 80081e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081e4:	2300      	movs	r3, #0
 80081e6:	220a      	movs	r2, #10
 80081e8:	9802      	ldr	r0, [sp, #8]
 80081ea:	f000 fad2 	bl	8008792 <__multadd>
 80081ee:	2300      	movs	r3, #0
 80081f0:	9009      	str	r0, [sp, #36]	; 0x24
 80081f2:	220a      	movs	r2, #10
 80081f4:	0031      	movs	r1, r6
 80081f6:	9802      	ldr	r0, [sp, #8]
 80081f8:	f000 facb 	bl	8008792 <__multadd>
 80081fc:	e7ee      	b.n	80081dc <_dtoa_r+0xaf0>
 80081fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008200:	930c      	str	r3, [sp, #48]	; 0x30
 8008202:	9b08      	ldr	r3, [sp, #32]
 8008204:	9306      	str	r3, [sp, #24]
 8008206:	9904      	ldr	r1, [sp, #16]
 8008208:	9803      	ldr	r0, [sp, #12]
 800820a:	f7ff f9e9 	bl	80075e0 <quorem>
 800820e:	9b06      	ldr	r3, [sp, #24]
 8008210:	3030      	adds	r0, #48	; 0x30
 8008212:	1c5d      	adds	r5, r3, #1
 8008214:	7018      	strb	r0, [r3, #0]
 8008216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008218:	9b08      	ldr	r3, [sp, #32]
 800821a:	0004      	movs	r4, r0
 800821c:	1aeb      	subs	r3, r5, r3
 800821e:	429a      	cmp	r2, r3
 8008220:	dd08      	ble.n	8008234 <_dtoa_r+0xb48>
 8008222:	2300      	movs	r3, #0
 8008224:	220a      	movs	r2, #10
 8008226:	9903      	ldr	r1, [sp, #12]
 8008228:	9802      	ldr	r0, [sp, #8]
 800822a:	f000 fab2 	bl	8008792 <__multadd>
 800822e:	9506      	str	r5, [sp, #24]
 8008230:	9003      	str	r0, [sp, #12]
 8008232:	e7e8      	b.n	8008206 <_dtoa_r+0xb1a>
 8008234:	2300      	movs	r3, #0
 8008236:	9309      	str	r3, [sp, #36]	; 0x24
 8008238:	9903      	ldr	r1, [sp, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	9802      	ldr	r0, [sp, #8]
 800823e:	f000 fc19 	bl	8008a74 <__lshift>
 8008242:	9904      	ldr	r1, [sp, #16]
 8008244:	9003      	str	r0, [sp, #12]
 8008246:	f000 fc67 	bl	8008b18 <__mcmp>
 800824a:	2800      	cmp	r0, #0
 800824c:	dc9d      	bgt.n	800818a <_dtoa_r+0xa9e>
 800824e:	d101      	bne.n	8008254 <_dtoa_r+0xb68>
 8008250:	07e3      	lsls	r3, r4, #31
 8008252:	d49a      	bmi.n	800818a <_dtoa_r+0xa9e>
 8008254:	1e6b      	subs	r3, r5, #1
 8008256:	781a      	ldrb	r2, [r3, #0]
 8008258:	2a30      	cmp	r2, #48	; 0x30
 800825a:	d000      	beq.n	800825e <_dtoa_r+0xb72>
 800825c:	e6f4      	b.n	8008048 <_dtoa_r+0x95c>
 800825e:	001d      	movs	r5, r3
 8008260:	e7f8      	b.n	8008254 <_dtoa_r+0xb68>
 8008262:	9a08      	ldr	r2, [sp, #32]
 8008264:	429a      	cmp	r2, r3
 8008266:	d103      	bne.n	8008270 <_dtoa_r+0xb84>
 8008268:	2331      	movs	r3, #49	; 0x31
 800826a:	3701      	adds	r7, #1
 800826c:	7013      	strb	r3, [r2, #0]
 800826e:	e6eb      	b.n	8008048 <_dtoa_r+0x95c>
 8008270:	001d      	movs	r5, r3
 8008272:	e78a      	b.n	800818a <_dtoa_r+0xa9e>
 8008274:	4b0b      	ldr	r3, [pc, #44]	; (80082a4 <_dtoa_r+0xbb8>)
 8008276:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008278:	9308      	str	r3, [sp, #32]
 800827a:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <_dtoa_r+0xbbc>)
 800827c:	2a00      	cmp	r2, #0
 800827e:	d001      	beq.n	8008284 <_dtoa_r+0xb98>
 8008280:	f7ff fa77 	bl	8007772 <_dtoa_r+0x86>
 8008284:	f7ff fa77 	bl	8007776 <_dtoa_r+0x8a>
 8008288:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800828a:	2b01      	cmp	r3, #1
 800828c:	dc00      	bgt.n	8008290 <_dtoa_r+0xba4>
 800828e:	e621      	b.n	8007ed4 <_dtoa_r+0x7e8>
 8008290:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008292:	2001      	movs	r0, #1
 8008294:	e635      	b.n	8007f02 <_dtoa_r+0x816>
 8008296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008298:	2b00      	cmp	r3, #0
 800829a:	dcb2      	bgt.n	8008202 <_dtoa_r+0xb16>
 800829c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800829e:	2b02      	cmp	r3, #2
 80082a0:	ddaf      	ble.n	8008202 <_dtoa_r+0xb16>
 80082a2:	e6bc      	b.n	800801e <_dtoa_r+0x932>
 80082a4:	080097dc 	.word	0x080097dc
 80082a8:	080097e4 	.word	0x080097e4

080082ac <__sflush_r>:
 80082ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ae:	898a      	ldrh	r2, [r1, #12]
 80082b0:	0005      	movs	r5, r0
 80082b2:	000c      	movs	r4, r1
 80082b4:	0713      	lsls	r3, r2, #28
 80082b6:	d460      	bmi.n	800837a <__sflush_r+0xce>
 80082b8:	684b      	ldr	r3, [r1, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dc04      	bgt.n	80082c8 <__sflush_r+0x1c>
 80082be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dc01      	bgt.n	80082c8 <__sflush_r+0x1c>
 80082c4:	2000      	movs	r0, #0
 80082c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80082ca:	2f00      	cmp	r7, #0
 80082cc:	d0fa      	beq.n	80082c4 <__sflush_r+0x18>
 80082ce:	2300      	movs	r3, #0
 80082d0:	682e      	ldr	r6, [r5, #0]
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	2380      	movs	r3, #128	; 0x80
 80082d6:	015b      	lsls	r3, r3, #5
 80082d8:	6a21      	ldr	r1, [r4, #32]
 80082da:	401a      	ands	r2, r3
 80082dc:	d034      	beq.n	8008348 <__sflush_r+0x9c>
 80082de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	075b      	lsls	r3, r3, #29
 80082e4:	d506      	bpl.n	80082f4 <__sflush_r+0x48>
 80082e6:	6863      	ldr	r3, [r4, #4]
 80082e8:	1ac0      	subs	r0, r0, r3
 80082ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <__sflush_r+0x48>
 80082f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f2:	1ac0      	subs	r0, r0, r3
 80082f4:	0002      	movs	r2, r0
 80082f6:	6a21      	ldr	r1, [r4, #32]
 80082f8:	2300      	movs	r3, #0
 80082fa:	0028      	movs	r0, r5
 80082fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80082fe:	47b8      	blx	r7
 8008300:	89a1      	ldrh	r1, [r4, #12]
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	d106      	bne.n	8008314 <__sflush_r+0x68>
 8008306:	682b      	ldr	r3, [r5, #0]
 8008308:	2b1d      	cmp	r3, #29
 800830a:	d830      	bhi.n	800836e <__sflush_r+0xc2>
 800830c:	4a2b      	ldr	r2, [pc, #172]	; (80083bc <__sflush_r+0x110>)
 800830e:	40da      	lsrs	r2, r3
 8008310:	07d3      	lsls	r3, r2, #31
 8008312:	d52c      	bpl.n	800836e <__sflush_r+0xc2>
 8008314:	2300      	movs	r3, #0
 8008316:	6063      	str	r3, [r4, #4]
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	6023      	str	r3, [r4, #0]
 800831c:	04cb      	lsls	r3, r1, #19
 800831e:	d505      	bpl.n	800832c <__sflush_r+0x80>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <__sflush_r+0x7e>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d100      	bne.n	800832c <__sflush_r+0x80>
 800832a:	6560      	str	r0, [r4, #84]	; 0x54
 800832c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800832e:	602e      	str	r6, [r5, #0]
 8008330:	2900      	cmp	r1, #0
 8008332:	d0c7      	beq.n	80082c4 <__sflush_r+0x18>
 8008334:	0023      	movs	r3, r4
 8008336:	3344      	adds	r3, #68	; 0x44
 8008338:	4299      	cmp	r1, r3
 800833a:	d002      	beq.n	8008342 <__sflush_r+0x96>
 800833c:	0028      	movs	r0, r5
 800833e:	f000 fccb 	bl	8008cd8 <_free_r>
 8008342:	2000      	movs	r0, #0
 8008344:	6360      	str	r0, [r4, #52]	; 0x34
 8008346:	e7be      	b.n	80082c6 <__sflush_r+0x1a>
 8008348:	2301      	movs	r3, #1
 800834a:	0028      	movs	r0, r5
 800834c:	47b8      	blx	r7
 800834e:	1c43      	adds	r3, r0, #1
 8008350:	d1c6      	bne.n	80082e0 <__sflush_r+0x34>
 8008352:	682b      	ldr	r3, [r5, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0c3      	beq.n	80082e0 <__sflush_r+0x34>
 8008358:	2b1d      	cmp	r3, #29
 800835a:	d001      	beq.n	8008360 <__sflush_r+0xb4>
 800835c:	2b16      	cmp	r3, #22
 800835e:	d101      	bne.n	8008364 <__sflush_r+0xb8>
 8008360:	602e      	str	r6, [r5, #0]
 8008362:	e7af      	b.n	80082c4 <__sflush_r+0x18>
 8008364:	2340      	movs	r3, #64	; 0x40
 8008366:	89a2      	ldrh	r2, [r4, #12]
 8008368:	4313      	orrs	r3, r2
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	e7ab      	b.n	80082c6 <__sflush_r+0x1a>
 800836e:	2340      	movs	r3, #64	; 0x40
 8008370:	430b      	orrs	r3, r1
 8008372:	2001      	movs	r0, #1
 8008374:	81a3      	strh	r3, [r4, #12]
 8008376:	4240      	negs	r0, r0
 8008378:	e7a5      	b.n	80082c6 <__sflush_r+0x1a>
 800837a:	690f      	ldr	r7, [r1, #16]
 800837c:	2f00      	cmp	r7, #0
 800837e:	d0a1      	beq.n	80082c4 <__sflush_r+0x18>
 8008380:	680b      	ldr	r3, [r1, #0]
 8008382:	600f      	str	r7, [r1, #0]
 8008384:	1bdb      	subs	r3, r3, r7
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	2300      	movs	r3, #0
 800838a:	0792      	lsls	r2, r2, #30
 800838c:	d100      	bne.n	8008390 <__sflush_r+0xe4>
 800838e:	694b      	ldr	r3, [r1, #20]
 8008390:	60a3      	str	r3, [r4, #8]
 8008392:	9b01      	ldr	r3, [sp, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	dc00      	bgt.n	800839a <__sflush_r+0xee>
 8008398:	e794      	b.n	80082c4 <__sflush_r+0x18>
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	003a      	movs	r2, r7
 800839e:	6a21      	ldr	r1, [r4, #32]
 80083a0:	0028      	movs	r0, r5
 80083a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083a4:	47b0      	blx	r6
 80083a6:	2800      	cmp	r0, #0
 80083a8:	dc03      	bgt.n	80083b2 <__sflush_r+0x106>
 80083aa:	2340      	movs	r3, #64	; 0x40
 80083ac:	89a2      	ldrh	r2, [r4, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	e7df      	b.n	8008372 <__sflush_r+0xc6>
 80083b2:	9b01      	ldr	r3, [sp, #4]
 80083b4:	183f      	adds	r7, r7, r0
 80083b6:	1a1b      	subs	r3, r3, r0
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	e7ea      	b.n	8008392 <__sflush_r+0xe6>
 80083bc:	20400001 	.word	0x20400001

080083c0 <_fflush_r>:
 80083c0:	690b      	ldr	r3, [r1, #16]
 80083c2:	b570      	push	{r4, r5, r6, lr}
 80083c4:	0005      	movs	r5, r0
 80083c6:	000c      	movs	r4, r1
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <_fflush_r+0x10>
 80083cc:	2000      	movs	r0, #0
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d004      	beq.n	80083de <_fflush_r+0x1e>
 80083d4:	6983      	ldr	r3, [r0, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <_fflush_r+0x1e>
 80083da:	f000 f85f 	bl	800849c <__sinit>
 80083de:	4b0b      	ldr	r3, [pc, #44]	; (800840c <_fflush_r+0x4c>)
 80083e0:	429c      	cmp	r4, r3
 80083e2:	d109      	bne.n	80083f8 <_fflush_r+0x38>
 80083e4:	686c      	ldr	r4, [r5, #4]
 80083e6:	220c      	movs	r2, #12
 80083e8:	5ea3      	ldrsh	r3, [r4, r2]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0ee      	beq.n	80083cc <_fflush_r+0xc>
 80083ee:	0021      	movs	r1, r4
 80083f0:	0028      	movs	r0, r5
 80083f2:	f7ff ff5b 	bl	80082ac <__sflush_r>
 80083f6:	e7ea      	b.n	80083ce <_fflush_r+0xe>
 80083f8:	4b05      	ldr	r3, [pc, #20]	; (8008410 <_fflush_r+0x50>)
 80083fa:	429c      	cmp	r4, r3
 80083fc:	d101      	bne.n	8008402 <_fflush_r+0x42>
 80083fe:	68ac      	ldr	r4, [r5, #8]
 8008400:	e7f1      	b.n	80083e6 <_fflush_r+0x26>
 8008402:	4b04      	ldr	r3, [pc, #16]	; (8008414 <_fflush_r+0x54>)
 8008404:	429c      	cmp	r4, r3
 8008406:	d1ee      	bne.n	80083e6 <_fflush_r+0x26>
 8008408:	68ec      	ldr	r4, [r5, #12]
 800840a:	e7ec      	b.n	80083e6 <_fflush_r+0x26>
 800840c:	0800980c 	.word	0x0800980c
 8008410:	0800982c 	.word	0x0800982c
 8008414:	080097ec 	.word	0x080097ec

08008418 <std>:
 8008418:	2300      	movs	r3, #0
 800841a:	b510      	push	{r4, lr}
 800841c:	0004      	movs	r4, r0
 800841e:	6003      	str	r3, [r0, #0]
 8008420:	6043      	str	r3, [r0, #4]
 8008422:	6083      	str	r3, [r0, #8]
 8008424:	8181      	strh	r1, [r0, #12]
 8008426:	6643      	str	r3, [r0, #100]	; 0x64
 8008428:	81c2      	strh	r2, [r0, #14]
 800842a:	6103      	str	r3, [r0, #16]
 800842c:	6143      	str	r3, [r0, #20]
 800842e:	6183      	str	r3, [r0, #24]
 8008430:	0019      	movs	r1, r3
 8008432:	2208      	movs	r2, #8
 8008434:	305c      	adds	r0, #92	; 0x5c
 8008436:	f7fe fb1d 	bl	8006a74 <memset>
 800843a:	4b05      	ldr	r3, [pc, #20]	; (8008450 <std+0x38>)
 800843c:	6224      	str	r4, [r4, #32]
 800843e:	6263      	str	r3, [r4, #36]	; 0x24
 8008440:	4b04      	ldr	r3, [pc, #16]	; (8008454 <std+0x3c>)
 8008442:	62a3      	str	r3, [r4, #40]	; 0x28
 8008444:	4b04      	ldr	r3, [pc, #16]	; (8008458 <std+0x40>)
 8008446:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <std+0x44>)
 800844a:	6323      	str	r3, [r4, #48]	; 0x30
 800844c:	bd10      	pop	{r4, pc}
 800844e:	46c0      	nop			; (mov r8, r8)
 8008450:	080090c9 	.word	0x080090c9
 8008454:	080090f1 	.word	0x080090f1
 8008458:	08009129 	.word	0x08009129
 800845c:	08009155 	.word	0x08009155

08008460 <_cleanup_r>:
 8008460:	b510      	push	{r4, lr}
 8008462:	4902      	ldr	r1, [pc, #8]	; (800846c <_cleanup_r+0xc>)
 8008464:	f000 f88c 	bl	8008580 <_fwalk_reent>
 8008468:	bd10      	pop	{r4, pc}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	080083c1 	.word	0x080083c1

08008470 <__sfmoreglue>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	2568      	movs	r5, #104	; 0x68
 8008474:	1e4a      	subs	r2, r1, #1
 8008476:	4355      	muls	r5, r2
 8008478:	000e      	movs	r6, r1
 800847a:	0029      	movs	r1, r5
 800847c:	3174      	adds	r1, #116	; 0x74
 800847e:	f000 fc75 	bl	8008d6c <_malloc_r>
 8008482:	1e04      	subs	r4, r0, #0
 8008484:	d008      	beq.n	8008498 <__sfmoreglue+0x28>
 8008486:	2100      	movs	r1, #0
 8008488:	002a      	movs	r2, r5
 800848a:	6001      	str	r1, [r0, #0]
 800848c:	6046      	str	r6, [r0, #4]
 800848e:	300c      	adds	r0, #12
 8008490:	60a0      	str	r0, [r4, #8]
 8008492:	3268      	adds	r2, #104	; 0x68
 8008494:	f7fe faee 	bl	8006a74 <memset>
 8008498:	0020      	movs	r0, r4
 800849a:	bd70      	pop	{r4, r5, r6, pc}

0800849c <__sinit>:
 800849c:	6983      	ldr	r3, [r0, #24]
 800849e:	b513      	push	{r0, r1, r4, lr}
 80084a0:	0004      	movs	r4, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d128      	bne.n	80084f8 <__sinit+0x5c>
 80084a6:	6483      	str	r3, [r0, #72]	; 0x48
 80084a8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80084aa:	6503      	str	r3, [r0, #80]	; 0x50
 80084ac:	4b13      	ldr	r3, [pc, #76]	; (80084fc <__sinit+0x60>)
 80084ae:	4a14      	ldr	r2, [pc, #80]	; (8008500 <__sinit+0x64>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6282      	str	r2, [r0, #40]	; 0x28
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	4298      	cmp	r0, r3
 80084b8:	d101      	bne.n	80084be <__sinit+0x22>
 80084ba:	2301      	movs	r3, #1
 80084bc:	6183      	str	r3, [r0, #24]
 80084be:	0020      	movs	r0, r4
 80084c0:	f000 f820 	bl	8008504 <__sfp>
 80084c4:	6060      	str	r0, [r4, #4]
 80084c6:	0020      	movs	r0, r4
 80084c8:	f000 f81c 	bl	8008504 <__sfp>
 80084cc:	60a0      	str	r0, [r4, #8]
 80084ce:	0020      	movs	r0, r4
 80084d0:	f000 f818 	bl	8008504 <__sfp>
 80084d4:	2200      	movs	r2, #0
 80084d6:	60e0      	str	r0, [r4, #12]
 80084d8:	2104      	movs	r1, #4
 80084da:	6860      	ldr	r0, [r4, #4]
 80084dc:	f7ff ff9c 	bl	8008418 <std>
 80084e0:	2201      	movs	r2, #1
 80084e2:	2109      	movs	r1, #9
 80084e4:	68a0      	ldr	r0, [r4, #8]
 80084e6:	f7ff ff97 	bl	8008418 <std>
 80084ea:	2202      	movs	r2, #2
 80084ec:	2112      	movs	r1, #18
 80084ee:	68e0      	ldr	r0, [r4, #12]
 80084f0:	f7ff ff92 	bl	8008418 <std>
 80084f4:	2301      	movs	r3, #1
 80084f6:	61a3      	str	r3, [r4, #24]
 80084f8:	bd13      	pop	{r0, r1, r4, pc}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	080097a4 	.word	0x080097a4
 8008500:	08008461 	.word	0x08008461

08008504 <__sfp>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <__sfp+0x74>)
 8008508:	0007      	movs	r7, r0
 800850a:	681e      	ldr	r6, [r3, #0]
 800850c:	69b3      	ldr	r3, [r6, #24]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <__sfp+0x14>
 8008512:	0030      	movs	r0, r6
 8008514:	f7ff ffc2 	bl	800849c <__sinit>
 8008518:	3648      	adds	r6, #72	; 0x48
 800851a:	68b4      	ldr	r4, [r6, #8]
 800851c:	6873      	ldr	r3, [r6, #4]
 800851e:	3b01      	subs	r3, #1
 8008520:	d504      	bpl.n	800852c <__sfp+0x28>
 8008522:	6833      	ldr	r3, [r6, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <__sfp+0x34>
 8008528:	6836      	ldr	r6, [r6, #0]
 800852a:	e7f6      	b.n	800851a <__sfp+0x16>
 800852c:	220c      	movs	r2, #12
 800852e:	5ea5      	ldrsh	r5, [r4, r2]
 8008530:	2d00      	cmp	r5, #0
 8008532:	d00d      	beq.n	8008550 <__sfp+0x4c>
 8008534:	3468      	adds	r4, #104	; 0x68
 8008536:	e7f2      	b.n	800851e <__sfp+0x1a>
 8008538:	2104      	movs	r1, #4
 800853a:	0038      	movs	r0, r7
 800853c:	f7ff ff98 	bl	8008470 <__sfmoreglue>
 8008540:	6030      	str	r0, [r6, #0]
 8008542:	2800      	cmp	r0, #0
 8008544:	d1f0      	bne.n	8008528 <__sfp+0x24>
 8008546:	230c      	movs	r3, #12
 8008548:	0004      	movs	r4, r0
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	0020      	movs	r0, r4
 800854e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008550:	0020      	movs	r0, r4
 8008552:	4b0a      	ldr	r3, [pc, #40]	; (800857c <__sfp+0x78>)
 8008554:	6665      	str	r5, [r4, #100]	; 0x64
 8008556:	6025      	str	r5, [r4, #0]
 8008558:	6065      	str	r5, [r4, #4]
 800855a:	60a5      	str	r5, [r4, #8]
 800855c:	60e3      	str	r3, [r4, #12]
 800855e:	6125      	str	r5, [r4, #16]
 8008560:	6165      	str	r5, [r4, #20]
 8008562:	61a5      	str	r5, [r4, #24]
 8008564:	2208      	movs	r2, #8
 8008566:	0029      	movs	r1, r5
 8008568:	305c      	adds	r0, #92	; 0x5c
 800856a:	f7fe fa83 	bl	8006a74 <memset>
 800856e:	6365      	str	r5, [r4, #52]	; 0x34
 8008570:	63a5      	str	r5, [r4, #56]	; 0x38
 8008572:	64a5      	str	r5, [r4, #72]	; 0x48
 8008574:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008576:	e7e9      	b.n	800854c <__sfp+0x48>
 8008578:	080097a4 	.word	0x080097a4
 800857c:	ffff0001 	.word	0xffff0001

08008580 <_fwalk_reent>:
 8008580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008582:	0004      	movs	r4, r0
 8008584:	0007      	movs	r7, r0
 8008586:	2600      	movs	r6, #0
 8008588:	9101      	str	r1, [sp, #4]
 800858a:	3448      	adds	r4, #72	; 0x48
 800858c:	2c00      	cmp	r4, #0
 800858e:	d101      	bne.n	8008594 <_fwalk_reent+0x14>
 8008590:	0030      	movs	r0, r6
 8008592:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008594:	6863      	ldr	r3, [r4, #4]
 8008596:	68a5      	ldr	r5, [r4, #8]
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	9b00      	ldr	r3, [sp, #0]
 800859c:	3b01      	subs	r3, #1
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	d501      	bpl.n	80085a6 <_fwalk_reent+0x26>
 80085a2:	6824      	ldr	r4, [r4, #0]
 80085a4:	e7f2      	b.n	800858c <_fwalk_reent+0xc>
 80085a6:	89ab      	ldrh	r3, [r5, #12]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d908      	bls.n	80085be <_fwalk_reent+0x3e>
 80085ac:	220e      	movs	r2, #14
 80085ae:	5eab      	ldrsh	r3, [r5, r2]
 80085b0:	3301      	adds	r3, #1
 80085b2:	d004      	beq.n	80085be <_fwalk_reent+0x3e>
 80085b4:	0029      	movs	r1, r5
 80085b6:	0038      	movs	r0, r7
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	4798      	blx	r3
 80085bc:	4306      	orrs	r6, r0
 80085be:	3568      	adds	r5, #104	; 0x68
 80085c0:	e7eb      	b.n	800859a <_fwalk_reent+0x1a>
	...

080085c4 <_localeconv_r>:
 80085c4:	4b03      	ldr	r3, [pc, #12]	; (80085d4 <_localeconv_r+0x10>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6a18      	ldr	r0, [r3, #32]
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d100      	bne.n	80085d0 <_localeconv_r+0xc>
 80085ce:	4802      	ldr	r0, [pc, #8]	; (80085d8 <_localeconv_r+0x14>)
 80085d0:	30f0      	adds	r0, #240	; 0xf0
 80085d2:	4770      	bx	lr
 80085d4:	20000004 	.word	0x20000004
 80085d8:	20000068 	.word	0x20000068

080085dc <__swhatbuf_r>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	000e      	movs	r6, r1
 80085e0:	001d      	movs	r5, r3
 80085e2:	230e      	movs	r3, #14
 80085e4:	5ec9      	ldrsh	r1, [r1, r3]
 80085e6:	b096      	sub	sp, #88	; 0x58
 80085e8:	0014      	movs	r4, r2
 80085ea:	2900      	cmp	r1, #0
 80085ec:	da07      	bge.n	80085fe <__swhatbuf_r+0x22>
 80085ee:	2300      	movs	r3, #0
 80085f0:	602b      	str	r3, [r5, #0]
 80085f2:	89b3      	ldrh	r3, [r6, #12]
 80085f4:	061b      	lsls	r3, r3, #24
 80085f6:	d411      	bmi.n	800861c <__swhatbuf_r+0x40>
 80085f8:	2380      	movs	r3, #128	; 0x80
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	e00f      	b.n	800861e <__swhatbuf_r+0x42>
 80085fe:	466a      	mov	r2, sp
 8008600:	f000 fdd4 	bl	80091ac <_fstat_r>
 8008604:	2800      	cmp	r0, #0
 8008606:	dbf2      	blt.n	80085ee <__swhatbuf_r+0x12>
 8008608:	22f0      	movs	r2, #240	; 0xf0
 800860a:	9b01      	ldr	r3, [sp, #4]
 800860c:	0212      	lsls	r2, r2, #8
 800860e:	4013      	ands	r3, r2
 8008610:	4a05      	ldr	r2, [pc, #20]	; (8008628 <__swhatbuf_r+0x4c>)
 8008612:	189b      	adds	r3, r3, r2
 8008614:	425a      	negs	r2, r3
 8008616:	4153      	adcs	r3, r2
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	e7ed      	b.n	80085f8 <__swhatbuf_r+0x1c>
 800861c:	2340      	movs	r3, #64	; 0x40
 800861e:	2000      	movs	r0, #0
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	b016      	add	sp, #88	; 0x58
 8008624:	bd70      	pop	{r4, r5, r6, pc}
 8008626:	46c0      	nop			; (mov r8, r8)
 8008628:	ffffe000 	.word	0xffffe000

0800862c <__smakebuf_r>:
 800862c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800862e:	2602      	movs	r6, #2
 8008630:	898b      	ldrh	r3, [r1, #12]
 8008632:	0005      	movs	r5, r0
 8008634:	000c      	movs	r4, r1
 8008636:	4233      	tst	r3, r6
 8008638:	d006      	beq.n	8008648 <__smakebuf_r+0x1c>
 800863a:	0023      	movs	r3, r4
 800863c:	3347      	adds	r3, #71	; 0x47
 800863e:	6023      	str	r3, [r4, #0]
 8008640:	6123      	str	r3, [r4, #16]
 8008642:	2301      	movs	r3, #1
 8008644:	6163      	str	r3, [r4, #20]
 8008646:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008648:	ab01      	add	r3, sp, #4
 800864a:	466a      	mov	r2, sp
 800864c:	f7ff ffc6 	bl	80085dc <__swhatbuf_r>
 8008650:	9900      	ldr	r1, [sp, #0]
 8008652:	0007      	movs	r7, r0
 8008654:	0028      	movs	r0, r5
 8008656:	f000 fb89 	bl	8008d6c <_malloc_r>
 800865a:	2800      	cmp	r0, #0
 800865c:	d108      	bne.n	8008670 <__smakebuf_r+0x44>
 800865e:	220c      	movs	r2, #12
 8008660:	5ea3      	ldrsh	r3, [r4, r2]
 8008662:	059a      	lsls	r2, r3, #22
 8008664:	d4ef      	bmi.n	8008646 <__smakebuf_r+0x1a>
 8008666:	2203      	movs	r2, #3
 8008668:	4393      	bics	r3, r2
 800866a:	431e      	orrs	r6, r3
 800866c:	81a6      	strh	r6, [r4, #12]
 800866e:	e7e4      	b.n	800863a <__smakebuf_r+0xe>
 8008670:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <__smakebuf_r+0x84>)
 8008672:	62ab      	str	r3, [r5, #40]	; 0x28
 8008674:	2380      	movs	r3, #128	; 0x80
 8008676:	89a2      	ldrh	r2, [r4, #12]
 8008678:	6020      	str	r0, [r4, #0]
 800867a:	4313      	orrs	r3, r2
 800867c:	81a3      	strh	r3, [r4, #12]
 800867e:	9b00      	ldr	r3, [sp, #0]
 8008680:	6120      	str	r0, [r4, #16]
 8008682:	6163      	str	r3, [r4, #20]
 8008684:	9b01      	ldr	r3, [sp, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00d      	beq.n	80086a6 <__smakebuf_r+0x7a>
 800868a:	230e      	movs	r3, #14
 800868c:	5ee1      	ldrsh	r1, [r4, r3]
 800868e:	0028      	movs	r0, r5
 8008690:	f000 fd9e 	bl	80091d0 <_isatty_r>
 8008694:	2800      	cmp	r0, #0
 8008696:	d006      	beq.n	80086a6 <__smakebuf_r+0x7a>
 8008698:	2203      	movs	r2, #3
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	4393      	bics	r3, r2
 800869e:	001a      	movs	r2, r3
 80086a0:	2301      	movs	r3, #1
 80086a2:	4313      	orrs	r3, r2
 80086a4:	81a3      	strh	r3, [r4, #12]
 80086a6:	89a0      	ldrh	r0, [r4, #12]
 80086a8:	4338      	orrs	r0, r7
 80086aa:	81a0      	strh	r0, [r4, #12]
 80086ac:	e7cb      	b.n	8008646 <__smakebuf_r+0x1a>
 80086ae:	46c0      	nop			; (mov r8, r8)
 80086b0:	08008461 	.word	0x08008461

080086b4 <malloc>:
 80086b4:	b510      	push	{r4, lr}
 80086b6:	4b03      	ldr	r3, [pc, #12]	; (80086c4 <malloc+0x10>)
 80086b8:	0001      	movs	r1, r0
 80086ba:	6818      	ldr	r0, [r3, #0]
 80086bc:	f000 fb56 	bl	8008d6c <_malloc_r>
 80086c0:	bd10      	pop	{r4, pc}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	20000004 	.word	0x20000004

080086c8 <memchr>:
 80086c8:	b2c9      	uxtb	r1, r1
 80086ca:	1882      	adds	r2, r0, r2
 80086cc:	4290      	cmp	r0, r2
 80086ce:	d101      	bne.n	80086d4 <memchr+0xc>
 80086d0:	2000      	movs	r0, #0
 80086d2:	4770      	bx	lr
 80086d4:	7803      	ldrb	r3, [r0, #0]
 80086d6:	428b      	cmp	r3, r1
 80086d8:	d0fb      	beq.n	80086d2 <memchr+0xa>
 80086da:	3001      	adds	r0, #1
 80086dc:	e7f6      	b.n	80086cc <memchr+0x4>

080086de <memcpy>:
 80086de:	2300      	movs	r3, #0
 80086e0:	b510      	push	{r4, lr}
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d100      	bne.n	80086e8 <memcpy+0xa>
 80086e6:	bd10      	pop	{r4, pc}
 80086e8:	5ccc      	ldrb	r4, [r1, r3]
 80086ea:	54c4      	strb	r4, [r0, r3]
 80086ec:	3301      	adds	r3, #1
 80086ee:	e7f8      	b.n	80086e2 <memcpy+0x4>

080086f0 <_Balloc>:
 80086f0:	b570      	push	{r4, r5, r6, lr}
 80086f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086f4:	0004      	movs	r4, r0
 80086f6:	000d      	movs	r5, r1
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	d107      	bne.n	800870c <_Balloc+0x1c>
 80086fc:	2010      	movs	r0, #16
 80086fe:	f7ff ffd9 	bl	80086b4 <malloc>
 8008702:	6260      	str	r0, [r4, #36]	; 0x24
 8008704:	6046      	str	r6, [r0, #4]
 8008706:	6086      	str	r6, [r0, #8]
 8008708:	6006      	str	r6, [r0, #0]
 800870a:	60c6      	str	r6, [r0, #12]
 800870c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800870e:	68f3      	ldr	r3, [r6, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d013      	beq.n	800873c <_Balloc+0x4c>
 8008714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008716:	00aa      	lsls	r2, r5, #2
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	189b      	adds	r3, r3, r2
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	2800      	cmp	r0, #0
 8008720:	d118      	bne.n	8008754 <_Balloc+0x64>
 8008722:	2101      	movs	r1, #1
 8008724:	000e      	movs	r6, r1
 8008726:	40ae      	lsls	r6, r5
 8008728:	1d72      	adds	r2, r6, #5
 800872a:	0092      	lsls	r2, r2, #2
 800872c:	0020      	movs	r0, r4
 800872e:	f000 fac5 	bl	8008cbc <_calloc_r>
 8008732:	2800      	cmp	r0, #0
 8008734:	d00c      	beq.n	8008750 <_Balloc+0x60>
 8008736:	6045      	str	r5, [r0, #4]
 8008738:	6086      	str	r6, [r0, #8]
 800873a:	e00d      	b.n	8008758 <_Balloc+0x68>
 800873c:	2221      	movs	r2, #33	; 0x21
 800873e:	2104      	movs	r1, #4
 8008740:	0020      	movs	r0, r4
 8008742:	f000 fabb 	bl	8008cbc <_calloc_r>
 8008746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008748:	60f0      	str	r0, [r6, #12]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e1      	bne.n	8008714 <_Balloc+0x24>
 8008750:	2000      	movs	r0, #0
 8008752:	bd70      	pop	{r4, r5, r6, pc}
 8008754:	6802      	ldr	r2, [r0, #0]
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	2300      	movs	r3, #0
 800875a:	6103      	str	r3, [r0, #16]
 800875c:	60c3      	str	r3, [r0, #12]
 800875e:	e7f8      	b.n	8008752 <_Balloc+0x62>

08008760 <_Bfree>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008764:	0006      	movs	r6, r0
 8008766:	000d      	movs	r5, r1
 8008768:	2c00      	cmp	r4, #0
 800876a:	d107      	bne.n	800877c <_Bfree+0x1c>
 800876c:	2010      	movs	r0, #16
 800876e:	f7ff ffa1 	bl	80086b4 <malloc>
 8008772:	6270      	str	r0, [r6, #36]	; 0x24
 8008774:	6044      	str	r4, [r0, #4]
 8008776:	6084      	str	r4, [r0, #8]
 8008778:	6004      	str	r4, [r0, #0]
 800877a:	60c4      	str	r4, [r0, #12]
 800877c:	2d00      	cmp	r5, #0
 800877e:	d007      	beq.n	8008790 <_Bfree+0x30>
 8008780:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008782:	686a      	ldr	r2, [r5, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	0092      	lsls	r2, r2, #2
 8008788:	189b      	adds	r3, r3, r2
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	602a      	str	r2, [r5, #0]
 800878e:	601d      	str	r5, [r3, #0]
 8008790:	bd70      	pop	{r4, r5, r6, pc}

08008792 <__multadd>:
 8008792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008794:	001e      	movs	r6, r3
 8008796:	2314      	movs	r3, #20
 8008798:	469c      	mov	ip, r3
 800879a:	0007      	movs	r7, r0
 800879c:	000c      	movs	r4, r1
 800879e:	2000      	movs	r0, #0
 80087a0:	690d      	ldr	r5, [r1, #16]
 80087a2:	448c      	add	ip, r1
 80087a4:	4663      	mov	r3, ip
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3001      	adds	r0, #1
 80087aa:	b299      	uxth	r1, r3
 80087ac:	4663      	mov	r3, ip
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4351      	muls	r1, r2
 80087b2:	0c1b      	lsrs	r3, r3, #16
 80087b4:	4353      	muls	r3, r2
 80087b6:	1989      	adds	r1, r1, r6
 80087b8:	0c0e      	lsrs	r6, r1, #16
 80087ba:	199b      	adds	r3, r3, r6
 80087bc:	b289      	uxth	r1, r1
 80087be:	0c1e      	lsrs	r6, r3, #16
 80087c0:	041b      	lsls	r3, r3, #16
 80087c2:	185b      	adds	r3, r3, r1
 80087c4:	4661      	mov	r1, ip
 80087c6:	c108      	stmia	r1!, {r3}
 80087c8:	468c      	mov	ip, r1
 80087ca:	4285      	cmp	r5, r0
 80087cc:	dcea      	bgt.n	80087a4 <__multadd+0x12>
 80087ce:	2e00      	cmp	r6, #0
 80087d0:	d01b      	beq.n	800880a <__multadd+0x78>
 80087d2:	68a3      	ldr	r3, [r4, #8]
 80087d4:	42ab      	cmp	r3, r5
 80087d6:	dc12      	bgt.n	80087fe <__multadd+0x6c>
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	0038      	movs	r0, r7
 80087dc:	1c59      	adds	r1, r3, #1
 80087de:	f7ff ff87 	bl	80086f0 <_Balloc>
 80087e2:	0021      	movs	r1, r4
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	9001      	str	r0, [sp, #4]
 80087e8:	1c9a      	adds	r2, r3, #2
 80087ea:	0092      	lsls	r2, r2, #2
 80087ec:	310c      	adds	r1, #12
 80087ee:	300c      	adds	r0, #12
 80087f0:	f7ff ff75 	bl	80086de <memcpy>
 80087f4:	0021      	movs	r1, r4
 80087f6:	0038      	movs	r0, r7
 80087f8:	f7ff ffb2 	bl	8008760 <_Bfree>
 80087fc:	9c01      	ldr	r4, [sp, #4]
 80087fe:	1d2b      	adds	r3, r5, #4
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	18e3      	adds	r3, r4, r3
 8008804:	3501      	adds	r5, #1
 8008806:	605e      	str	r6, [r3, #4]
 8008808:	6125      	str	r5, [r4, #16]
 800880a:	0020      	movs	r0, r4
 800880c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800880e <__hi0bits>:
 800880e:	0003      	movs	r3, r0
 8008810:	0c02      	lsrs	r2, r0, #16
 8008812:	2000      	movs	r0, #0
 8008814:	4282      	cmp	r2, r0
 8008816:	d101      	bne.n	800881c <__hi0bits+0xe>
 8008818:	041b      	lsls	r3, r3, #16
 800881a:	3010      	adds	r0, #16
 800881c:	0e1a      	lsrs	r2, r3, #24
 800881e:	d101      	bne.n	8008824 <__hi0bits+0x16>
 8008820:	3008      	adds	r0, #8
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	0f1a      	lsrs	r2, r3, #28
 8008826:	d101      	bne.n	800882c <__hi0bits+0x1e>
 8008828:	3004      	adds	r0, #4
 800882a:	011b      	lsls	r3, r3, #4
 800882c:	0f9a      	lsrs	r2, r3, #30
 800882e:	d101      	bne.n	8008834 <__hi0bits+0x26>
 8008830:	3002      	adds	r0, #2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	2b00      	cmp	r3, #0
 8008836:	db03      	blt.n	8008840 <__hi0bits+0x32>
 8008838:	3001      	adds	r0, #1
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	d400      	bmi.n	8008840 <__hi0bits+0x32>
 800883e:	2020      	movs	r0, #32
 8008840:	4770      	bx	lr

08008842 <__lo0bits>:
 8008842:	2207      	movs	r2, #7
 8008844:	6803      	ldr	r3, [r0, #0]
 8008846:	b510      	push	{r4, lr}
 8008848:	0001      	movs	r1, r0
 800884a:	401a      	ands	r2, r3
 800884c:	d00d      	beq.n	800886a <__lo0bits+0x28>
 800884e:	2401      	movs	r4, #1
 8008850:	2000      	movs	r0, #0
 8008852:	4223      	tst	r3, r4
 8008854:	d105      	bne.n	8008862 <__lo0bits+0x20>
 8008856:	3002      	adds	r0, #2
 8008858:	4203      	tst	r3, r0
 800885a:	d003      	beq.n	8008864 <__lo0bits+0x22>
 800885c:	40e3      	lsrs	r3, r4
 800885e:	0020      	movs	r0, r4
 8008860:	600b      	str	r3, [r1, #0]
 8008862:	bd10      	pop	{r4, pc}
 8008864:	089b      	lsrs	r3, r3, #2
 8008866:	600b      	str	r3, [r1, #0]
 8008868:	e7fb      	b.n	8008862 <__lo0bits+0x20>
 800886a:	b29c      	uxth	r4, r3
 800886c:	0010      	movs	r0, r2
 800886e:	2c00      	cmp	r4, #0
 8008870:	d101      	bne.n	8008876 <__lo0bits+0x34>
 8008872:	2010      	movs	r0, #16
 8008874:	0c1b      	lsrs	r3, r3, #16
 8008876:	b2da      	uxtb	r2, r3
 8008878:	2a00      	cmp	r2, #0
 800887a:	d101      	bne.n	8008880 <__lo0bits+0x3e>
 800887c:	3008      	adds	r0, #8
 800887e:	0a1b      	lsrs	r3, r3, #8
 8008880:	071a      	lsls	r2, r3, #28
 8008882:	d101      	bne.n	8008888 <__lo0bits+0x46>
 8008884:	3004      	adds	r0, #4
 8008886:	091b      	lsrs	r3, r3, #4
 8008888:	079a      	lsls	r2, r3, #30
 800888a:	d101      	bne.n	8008890 <__lo0bits+0x4e>
 800888c:	3002      	adds	r0, #2
 800888e:	089b      	lsrs	r3, r3, #2
 8008890:	07da      	lsls	r2, r3, #31
 8008892:	d4e8      	bmi.n	8008866 <__lo0bits+0x24>
 8008894:	085b      	lsrs	r3, r3, #1
 8008896:	d001      	beq.n	800889c <__lo0bits+0x5a>
 8008898:	3001      	adds	r0, #1
 800889a:	e7e4      	b.n	8008866 <__lo0bits+0x24>
 800889c:	2020      	movs	r0, #32
 800889e:	e7e0      	b.n	8008862 <__lo0bits+0x20>

080088a0 <__i2b>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	000c      	movs	r4, r1
 80088a4:	2101      	movs	r1, #1
 80088a6:	f7ff ff23 	bl	80086f0 <_Balloc>
 80088aa:	2301      	movs	r3, #1
 80088ac:	6144      	str	r4, [r0, #20]
 80088ae:	6103      	str	r3, [r0, #16]
 80088b0:	bd10      	pop	{r4, pc}

080088b2 <__multiply>:
 80088b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088b4:	690b      	ldr	r3, [r1, #16]
 80088b6:	0014      	movs	r4, r2
 80088b8:	6912      	ldr	r2, [r2, #16]
 80088ba:	b089      	sub	sp, #36	; 0x24
 80088bc:	000d      	movs	r5, r1
 80088be:	4293      	cmp	r3, r2
 80088c0:	da01      	bge.n	80088c6 <__multiply+0x14>
 80088c2:	0025      	movs	r5, r4
 80088c4:	000c      	movs	r4, r1
 80088c6:	692f      	ldr	r7, [r5, #16]
 80088c8:	6926      	ldr	r6, [r4, #16]
 80088ca:	6869      	ldr	r1, [r5, #4]
 80088cc:	19bb      	adds	r3, r7, r6
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	68ab      	ldr	r3, [r5, #8]
 80088d2:	19ba      	adds	r2, r7, r6
 80088d4:	4293      	cmp	r3, r2
 80088d6:	da00      	bge.n	80088da <__multiply+0x28>
 80088d8:	3101      	adds	r1, #1
 80088da:	f7ff ff09 	bl	80086f0 <_Balloc>
 80088de:	0002      	movs	r2, r0
 80088e0:	19bb      	adds	r3, r7, r6
 80088e2:	3214      	adds	r2, #20
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	18d3      	adds	r3, r2, r3
 80088e8:	469c      	mov	ip, r3
 80088ea:	2100      	movs	r1, #0
 80088ec:	0013      	movs	r3, r2
 80088ee:	9004      	str	r0, [sp, #16]
 80088f0:	4563      	cmp	r3, ip
 80088f2:	d31d      	bcc.n	8008930 <__multiply+0x7e>
 80088f4:	3514      	adds	r5, #20
 80088f6:	00bf      	lsls	r7, r7, #2
 80088f8:	19eb      	adds	r3, r5, r7
 80088fa:	3414      	adds	r4, #20
 80088fc:	00b6      	lsls	r6, r6, #2
 80088fe:	9305      	str	r3, [sp, #20]
 8008900:	19a3      	adds	r3, r4, r6
 8008902:	9503      	str	r5, [sp, #12]
 8008904:	9401      	str	r4, [sp, #4]
 8008906:	9307      	str	r3, [sp, #28]
 8008908:	9b07      	ldr	r3, [sp, #28]
 800890a:	9901      	ldr	r1, [sp, #4]
 800890c:	4299      	cmp	r1, r3
 800890e:	d311      	bcc.n	8008934 <__multiply+0x82>
 8008910:	9b02      	ldr	r3, [sp, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd06      	ble.n	8008924 <__multiply+0x72>
 8008916:	2304      	movs	r3, #4
 8008918:	425b      	negs	r3, r3
 800891a:	449c      	add	ip, r3
 800891c:	4663      	mov	r3, ip
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d051      	beq.n	80089c8 <__multiply+0x116>
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	9a02      	ldr	r2, [sp, #8]
 8008928:	0018      	movs	r0, r3
 800892a:	611a      	str	r2, [r3, #16]
 800892c:	b009      	add	sp, #36	; 0x24
 800892e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008930:	c302      	stmia	r3!, {r1}
 8008932:	e7dd      	b.n	80088f0 <__multiply+0x3e>
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	b298      	uxth	r0, r3
 800893a:	2800      	cmp	r0, #0
 800893c:	d01c      	beq.n	8008978 <__multiply+0xc6>
 800893e:	0015      	movs	r5, r2
 8008940:	2600      	movs	r6, #0
 8008942:	9f03      	ldr	r7, [sp, #12]
 8008944:	cf02      	ldmia	r7!, {r1}
 8008946:	682c      	ldr	r4, [r5, #0]
 8008948:	b28b      	uxth	r3, r1
 800894a:	4343      	muls	r3, r0
 800894c:	0c09      	lsrs	r1, r1, #16
 800894e:	4341      	muls	r1, r0
 8008950:	b2a4      	uxth	r4, r4
 8008952:	191b      	adds	r3, r3, r4
 8008954:	199b      	adds	r3, r3, r6
 8008956:	000e      	movs	r6, r1
 8008958:	6829      	ldr	r1, [r5, #0]
 800895a:	9506      	str	r5, [sp, #24]
 800895c:	0c09      	lsrs	r1, r1, #16
 800895e:	1871      	adds	r1, r6, r1
 8008960:	0c1e      	lsrs	r6, r3, #16
 8008962:	1989      	adds	r1, r1, r6
 8008964:	0c0e      	lsrs	r6, r1, #16
 8008966:	b29b      	uxth	r3, r3
 8008968:	0409      	lsls	r1, r1, #16
 800896a:	430b      	orrs	r3, r1
 800896c:	c508      	stmia	r5!, {r3}
 800896e:	9b05      	ldr	r3, [sp, #20]
 8008970:	42bb      	cmp	r3, r7
 8008972:	d8e7      	bhi.n	8008944 <__multiply+0x92>
 8008974:	9b06      	ldr	r3, [sp, #24]
 8008976:	605e      	str	r6, [r3, #4]
 8008978:	9b01      	ldr	r3, [sp, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	0c1d      	lsrs	r5, r3, #16
 800897e:	d01e      	beq.n	80089be <__multiply+0x10c>
 8008980:	0010      	movs	r0, r2
 8008982:	2700      	movs	r7, #0
 8008984:	6813      	ldr	r3, [r2, #0]
 8008986:	9e03      	ldr	r6, [sp, #12]
 8008988:	6831      	ldr	r1, [r6, #0]
 800898a:	6804      	ldr	r4, [r0, #0]
 800898c:	b289      	uxth	r1, r1
 800898e:	4369      	muls	r1, r5
 8008990:	0c24      	lsrs	r4, r4, #16
 8008992:	1909      	adds	r1, r1, r4
 8008994:	19c9      	adds	r1, r1, r7
 8008996:	040f      	lsls	r7, r1, #16
 8008998:	b29b      	uxth	r3, r3
 800899a:	433b      	orrs	r3, r7
 800899c:	6003      	str	r3, [r0, #0]
 800899e:	ce80      	ldmia	r6!, {r7}
 80089a0:	6843      	ldr	r3, [r0, #4]
 80089a2:	0c3f      	lsrs	r7, r7, #16
 80089a4:	436f      	muls	r7, r5
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	18fb      	adds	r3, r7, r3
 80089aa:	0c09      	lsrs	r1, r1, #16
 80089ac:	185b      	adds	r3, r3, r1
 80089ae:	9905      	ldr	r1, [sp, #20]
 80089b0:	9006      	str	r0, [sp, #24]
 80089b2:	0c1f      	lsrs	r7, r3, #16
 80089b4:	3004      	adds	r0, #4
 80089b6:	42b1      	cmp	r1, r6
 80089b8:	d8e6      	bhi.n	8008988 <__multiply+0xd6>
 80089ba:	9906      	ldr	r1, [sp, #24]
 80089bc:	604b      	str	r3, [r1, #4]
 80089be:	9b01      	ldr	r3, [sp, #4]
 80089c0:	3204      	adds	r2, #4
 80089c2:	3304      	adds	r3, #4
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	e79f      	b.n	8008908 <__multiply+0x56>
 80089c8:	9b02      	ldr	r3, [sp, #8]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	e79f      	b.n	8008910 <__multiply+0x5e>

080089d0 <__pow5mult>:
 80089d0:	2303      	movs	r3, #3
 80089d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089d4:	4013      	ands	r3, r2
 80089d6:	0005      	movs	r5, r0
 80089d8:	000e      	movs	r6, r1
 80089da:	0014      	movs	r4, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d008      	beq.n	80089f2 <__pow5mult+0x22>
 80089e0:	4922      	ldr	r1, [pc, #136]	; (8008a6c <__pow5mult+0x9c>)
 80089e2:	3b01      	subs	r3, #1
 80089e4:	009a      	lsls	r2, r3, #2
 80089e6:	5852      	ldr	r2, [r2, r1]
 80089e8:	2300      	movs	r3, #0
 80089ea:	0031      	movs	r1, r6
 80089ec:	f7ff fed1 	bl	8008792 <__multadd>
 80089f0:	0006      	movs	r6, r0
 80089f2:	10a3      	asrs	r3, r4, #2
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	d036      	beq.n	8008a66 <__pow5mult+0x96>
 80089f8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80089fa:	2c00      	cmp	r4, #0
 80089fc:	d107      	bne.n	8008a0e <__pow5mult+0x3e>
 80089fe:	2010      	movs	r0, #16
 8008a00:	f7ff fe58 	bl	80086b4 <malloc>
 8008a04:	6268      	str	r0, [r5, #36]	; 0x24
 8008a06:	6044      	str	r4, [r0, #4]
 8008a08:	6084      	str	r4, [r0, #8]
 8008a0a:	6004      	str	r4, [r0, #0]
 8008a0c:	60c4      	str	r4, [r0, #12]
 8008a0e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008a10:	68bc      	ldr	r4, [r7, #8]
 8008a12:	2c00      	cmp	r4, #0
 8008a14:	d107      	bne.n	8008a26 <__pow5mult+0x56>
 8008a16:	4916      	ldr	r1, [pc, #88]	; (8008a70 <__pow5mult+0xa0>)
 8008a18:	0028      	movs	r0, r5
 8008a1a:	f7ff ff41 	bl	80088a0 <__i2b>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	0004      	movs	r4, r0
 8008a22:	60b8      	str	r0, [r7, #8]
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	2201      	movs	r2, #1
 8008a28:	9b01      	ldr	r3, [sp, #4]
 8008a2a:	4213      	tst	r3, r2
 8008a2c:	d00a      	beq.n	8008a44 <__pow5mult+0x74>
 8008a2e:	0031      	movs	r1, r6
 8008a30:	0022      	movs	r2, r4
 8008a32:	0028      	movs	r0, r5
 8008a34:	f7ff ff3d 	bl	80088b2 <__multiply>
 8008a38:	0007      	movs	r7, r0
 8008a3a:	0031      	movs	r1, r6
 8008a3c:	0028      	movs	r0, r5
 8008a3e:	f7ff fe8f 	bl	8008760 <_Bfree>
 8008a42:	003e      	movs	r6, r7
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	105b      	asrs	r3, r3, #1
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	d00c      	beq.n	8008a66 <__pow5mult+0x96>
 8008a4c:	6820      	ldr	r0, [r4, #0]
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d107      	bne.n	8008a62 <__pow5mult+0x92>
 8008a52:	0022      	movs	r2, r4
 8008a54:	0021      	movs	r1, r4
 8008a56:	0028      	movs	r0, r5
 8008a58:	f7ff ff2b 	bl	80088b2 <__multiply>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	6020      	str	r0, [r4, #0]
 8008a60:	6003      	str	r3, [r0, #0]
 8008a62:	0004      	movs	r4, r0
 8008a64:	e7df      	b.n	8008a26 <__pow5mult+0x56>
 8008a66:	0030      	movs	r0, r6
 8008a68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	08009940 	.word	0x08009940
 8008a70:	00000271 	.word	0x00000271

08008a74 <__lshift>:
 8008a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a76:	000d      	movs	r5, r1
 8008a78:	0017      	movs	r7, r2
 8008a7a:	692b      	ldr	r3, [r5, #16]
 8008a7c:	1154      	asrs	r4, r2, #5
 8008a7e:	b085      	sub	sp, #20
 8008a80:	18e3      	adds	r3, r4, r3
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	3301      	adds	r3, #1
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	6849      	ldr	r1, [r1, #4]
 8008a8a:	68ab      	ldr	r3, [r5, #8]
 8008a8c:	9002      	str	r0, [sp, #8]
 8008a8e:	9a00      	ldr	r2, [sp, #0]
 8008a90:	4293      	cmp	r3, r2
 8008a92:	db35      	blt.n	8008b00 <__lshift+0x8c>
 8008a94:	9802      	ldr	r0, [sp, #8]
 8008a96:	f7ff fe2b 	bl	80086f0 <_Balloc>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	0002      	movs	r2, r0
 8008a9e:	0006      	movs	r6, r0
 8008aa0:	0019      	movs	r1, r3
 8008aa2:	3214      	adds	r2, #20
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	db2e      	blt.n	8008b06 <__lshift+0x92>
 8008aa8:	43e3      	mvns	r3, r4
 8008aaa:	17db      	asrs	r3, r3, #31
 8008aac:	401c      	ands	r4, r3
 8008aae:	002b      	movs	r3, r5
 8008ab0:	00a4      	lsls	r4, r4, #2
 8008ab2:	1914      	adds	r4, r2, r4
 8008ab4:	692a      	ldr	r2, [r5, #16]
 8008ab6:	3314      	adds	r3, #20
 8008ab8:	0092      	lsls	r2, r2, #2
 8008aba:	189a      	adds	r2, r3, r2
 8008abc:	4694      	mov	ip, r2
 8008abe:	221f      	movs	r2, #31
 8008ac0:	4017      	ands	r7, r2
 8008ac2:	d024      	beq.n	8008b0e <__lshift+0x9a>
 8008ac4:	3201      	adds	r2, #1
 8008ac6:	1bd2      	subs	r2, r2, r7
 8008ac8:	9203      	str	r2, [sp, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	6819      	ldr	r1, [r3, #0]
 8008ace:	0020      	movs	r0, r4
 8008ad0:	40b9      	lsls	r1, r7
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	c404      	stmia	r4!, {r2}
 8008ad6:	cb04      	ldmia	r3!, {r2}
 8008ad8:	9903      	ldr	r1, [sp, #12]
 8008ada:	40ca      	lsrs	r2, r1
 8008adc:	459c      	cmp	ip, r3
 8008ade:	d8f5      	bhi.n	8008acc <__lshift+0x58>
 8008ae0:	6042      	str	r2, [r0, #4]
 8008ae2:	2a00      	cmp	r2, #0
 8008ae4:	d002      	beq.n	8008aec <__lshift+0x78>
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	3302      	adds	r3, #2
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	9b00      	ldr	r3, [sp, #0]
 8008aee:	9802      	ldr	r0, [sp, #8]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	6133      	str	r3, [r6, #16]
 8008af4:	0029      	movs	r1, r5
 8008af6:	f7ff fe33 	bl	8008760 <_Bfree>
 8008afa:	0030      	movs	r0, r6
 8008afc:	b005      	add	sp, #20
 8008afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b00:	3101      	adds	r1, #1
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	e7c3      	b.n	8008a8e <__lshift+0x1a>
 8008b06:	0098      	lsls	r0, r3, #2
 8008b08:	5011      	str	r1, [r2, r0]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	e7ca      	b.n	8008aa4 <__lshift+0x30>
 8008b0e:	cb04      	ldmia	r3!, {r2}
 8008b10:	c404      	stmia	r4!, {r2}
 8008b12:	459c      	cmp	ip, r3
 8008b14:	d8fb      	bhi.n	8008b0e <__lshift+0x9a>
 8008b16:	e7e9      	b.n	8008aec <__lshift+0x78>

08008b18 <__mcmp>:
 8008b18:	690a      	ldr	r2, [r1, #16]
 8008b1a:	6903      	ldr	r3, [r0, #16]
 8008b1c:	b530      	push	{r4, r5, lr}
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	d10d      	bne.n	8008b3e <__mcmp+0x26>
 8008b22:	0092      	lsls	r2, r2, #2
 8008b24:	3014      	adds	r0, #20
 8008b26:	3114      	adds	r1, #20
 8008b28:	1884      	adds	r4, r0, r2
 8008b2a:	1889      	adds	r1, r1, r2
 8008b2c:	3c04      	subs	r4, #4
 8008b2e:	3904      	subs	r1, #4
 8008b30:	6825      	ldr	r5, [r4, #0]
 8008b32:	680a      	ldr	r2, [r1, #0]
 8008b34:	4295      	cmp	r5, r2
 8008b36:	d004      	beq.n	8008b42 <__mcmp+0x2a>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	4295      	cmp	r5, r2
 8008b3c:	d304      	bcc.n	8008b48 <__mcmp+0x30>
 8008b3e:	0018      	movs	r0, r3
 8008b40:	bd30      	pop	{r4, r5, pc}
 8008b42:	42a0      	cmp	r0, r4
 8008b44:	d3f2      	bcc.n	8008b2c <__mcmp+0x14>
 8008b46:	e7fa      	b.n	8008b3e <__mcmp+0x26>
 8008b48:	425b      	negs	r3, r3
 8008b4a:	e7f8      	b.n	8008b3e <__mcmp+0x26>

08008b4c <__mdiff>:
 8008b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b4e:	000d      	movs	r5, r1
 8008b50:	b085      	sub	sp, #20
 8008b52:	0007      	movs	r7, r0
 8008b54:	0011      	movs	r1, r2
 8008b56:	0028      	movs	r0, r5
 8008b58:	0014      	movs	r4, r2
 8008b5a:	f7ff ffdd 	bl	8008b18 <__mcmp>
 8008b5e:	1e06      	subs	r6, r0, #0
 8008b60:	d108      	bne.n	8008b74 <__mdiff+0x28>
 8008b62:	0001      	movs	r1, r0
 8008b64:	0038      	movs	r0, r7
 8008b66:	f7ff fdc3 	bl	80086f0 <_Balloc>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	6146      	str	r6, [r0, #20]
 8008b6e:	6103      	str	r3, [r0, #16]
 8008b70:	b005      	add	sp, #20
 8008b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b74:	2301      	movs	r3, #1
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	db04      	blt.n	8008b86 <__mdiff+0x3a>
 8008b7c:	0023      	movs	r3, r4
 8008b7e:	002c      	movs	r4, r5
 8008b80:	001d      	movs	r5, r3
 8008b82:	2300      	movs	r3, #0
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	6861      	ldr	r1, [r4, #4]
 8008b88:	0038      	movs	r0, r7
 8008b8a:	f7ff fdb1 	bl	80086f0 <_Balloc>
 8008b8e:	002f      	movs	r7, r5
 8008b90:	2200      	movs	r2, #0
 8008b92:	9b01      	ldr	r3, [sp, #4]
 8008b94:	6926      	ldr	r6, [r4, #16]
 8008b96:	60c3      	str	r3, [r0, #12]
 8008b98:	3414      	adds	r4, #20
 8008b9a:	00b3      	lsls	r3, r6, #2
 8008b9c:	18e3      	adds	r3, r4, r3
 8008b9e:	9302      	str	r3, [sp, #8]
 8008ba0:	692b      	ldr	r3, [r5, #16]
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	18fb      	adds	r3, r7, r3
 8008ba8:	9303      	str	r3, [sp, #12]
 8008baa:	0003      	movs	r3, r0
 8008bac:	4694      	mov	ip, r2
 8008bae:	3314      	adds	r3, #20
 8008bb0:	cc20      	ldmia	r4!, {r5}
 8008bb2:	cf04      	ldmia	r7!, {r2}
 8008bb4:	9201      	str	r2, [sp, #4]
 8008bb6:	b2aa      	uxth	r2, r5
 8008bb8:	4494      	add	ip, r2
 8008bba:	466a      	mov	r2, sp
 8008bbc:	4661      	mov	r1, ip
 8008bbe:	8892      	ldrh	r2, [r2, #4]
 8008bc0:	0c2d      	lsrs	r5, r5, #16
 8008bc2:	1a8a      	subs	r2, r1, r2
 8008bc4:	9901      	ldr	r1, [sp, #4]
 8008bc6:	0c09      	lsrs	r1, r1, #16
 8008bc8:	1a69      	subs	r1, r5, r1
 8008bca:	1415      	asrs	r5, r2, #16
 8008bcc:	1949      	adds	r1, r1, r5
 8008bce:	140d      	asrs	r5, r1, #16
 8008bd0:	b292      	uxth	r2, r2
 8008bd2:	0409      	lsls	r1, r1, #16
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	9a03      	ldr	r2, [sp, #12]
 8008bda:	46ac      	mov	ip, r5
 8008bdc:	3304      	adds	r3, #4
 8008bde:	42ba      	cmp	r2, r7
 8008be0:	d8e6      	bhi.n	8008bb0 <__mdiff+0x64>
 8008be2:	9902      	ldr	r1, [sp, #8]
 8008be4:	001a      	movs	r2, r3
 8008be6:	428c      	cmp	r4, r1
 8008be8:	d305      	bcc.n	8008bf6 <__mdiff+0xaa>
 8008bea:	3a04      	subs	r2, #4
 8008bec:	6813      	ldr	r3, [r2, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00e      	beq.n	8008c10 <__mdiff+0xc4>
 8008bf2:	6106      	str	r6, [r0, #16]
 8008bf4:	e7bc      	b.n	8008b70 <__mdiff+0x24>
 8008bf6:	cc04      	ldmia	r4!, {r2}
 8008bf8:	b291      	uxth	r1, r2
 8008bfa:	4461      	add	r1, ip
 8008bfc:	140d      	asrs	r5, r1, #16
 8008bfe:	0c12      	lsrs	r2, r2, #16
 8008c00:	1952      	adds	r2, r2, r5
 8008c02:	1415      	asrs	r5, r2, #16
 8008c04:	b289      	uxth	r1, r1
 8008c06:	0412      	lsls	r2, r2, #16
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	46ac      	mov	ip, r5
 8008c0c:	c304      	stmia	r3!, {r2}
 8008c0e:	e7e8      	b.n	8008be2 <__mdiff+0x96>
 8008c10:	3e01      	subs	r6, #1
 8008c12:	e7ea      	b.n	8008bea <__mdiff+0x9e>

08008c14 <__d2b>:
 8008c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c16:	001d      	movs	r5, r3
 8008c18:	2101      	movs	r1, #1
 8008c1a:	0014      	movs	r4, r2
 8008c1c:	9f08      	ldr	r7, [sp, #32]
 8008c1e:	f7ff fd67 	bl	80086f0 <_Balloc>
 8008c22:	032b      	lsls	r3, r5, #12
 8008c24:	006d      	lsls	r5, r5, #1
 8008c26:	0006      	movs	r6, r0
 8008c28:	0b1b      	lsrs	r3, r3, #12
 8008c2a:	0d6d      	lsrs	r5, r5, #21
 8008c2c:	d124      	bne.n	8008c78 <__d2b+0x64>
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	2c00      	cmp	r4, #0
 8008c32:	d027      	beq.n	8008c84 <__d2b+0x70>
 8008c34:	4668      	mov	r0, sp
 8008c36:	9400      	str	r4, [sp, #0]
 8008c38:	f7ff fe03 	bl	8008842 <__lo0bits>
 8008c3c:	9c00      	ldr	r4, [sp, #0]
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d01e      	beq.n	8008c80 <__d2b+0x6c>
 8008c42:	9b01      	ldr	r3, [sp, #4]
 8008c44:	2120      	movs	r1, #32
 8008c46:	001a      	movs	r2, r3
 8008c48:	1a09      	subs	r1, r1, r0
 8008c4a:	408a      	lsls	r2, r1
 8008c4c:	40c3      	lsrs	r3, r0
 8008c4e:	4322      	orrs	r2, r4
 8008c50:	6172      	str	r2, [r6, #20]
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	9c01      	ldr	r4, [sp, #4]
 8008c56:	61b4      	str	r4, [r6, #24]
 8008c58:	1e63      	subs	r3, r4, #1
 8008c5a:	419c      	sbcs	r4, r3
 8008c5c:	3401      	adds	r4, #1
 8008c5e:	6134      	str	r4, [r6, #16]
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	d018      	beq.n	8008c96 <__d2b+0x82>
 8008c64:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <__d2b+0x9c>)
 8008c66:	18ed      	adds	r5, r5, r3
 8008c68:	2335      	movs	r3, #53	; 0x35
 8008c6a:	182d      	adds	r5, r5, r0
 8008c6c:	603d      	str	r5, [r7, #0]
 8008c6e:	1a18      	subs	r0, r3, r0
 8008c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c72:	6018      	str	r0, [r3, #0]
 8008c74:	0030      	movs	r0, r6
 8008c76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c78:	2280      	movs	r2, #128	; 0x80
 8008c7a:	0352      	lsls	r2, r2, #13
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	e7d6      	b.n	8008c2e <__d2b+0x1a>
 8008c80:	6174      	str	r4, [r6, #20]
 8008c82:	e7e7      	b.n	8008c54 <__d2b+0x40>
 8008c84:	a801      	add	r0, sp, #4
 8008c86:	f7ff fddc 	bl	8008842 <__lo0bits>
 8008c8a:	2401      	movs	r4, #1
 8008c8c:	9b01      	ldr	r3, [sp, #4]
 8008c8e:	6134      	str	r4, [r6, #16]
 8008c90:	6173      	str	r3, [r6, #20]
 8008c92:	3020      	adds	r0, #32
 8008c94:	e7e4      	b.n	8008c60 <__d2b+0x4c>
 8008c96:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <__d2b+0xa0>)
 8008c98:	18c0      	adds	r0, r0, r3
 8008c9a:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <__d2b+0xa4>)
 8008c9c:	6038      	str	r0, [r7, #0]
 8008c9e:	18e3      	adds	r3, r4, r3
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	18f3      	adds	r3, r6, r3
 8008ca4:	6958      	ldr	r0, [r3, #20]
 8008ca6:	f7ff fdb2 	bl	800880e <__hi0bits>
 8008caa:	0164      	lsls	r4, r4, #5
 8008cac:	1a20      	subs	r0, r4, r0
 8008cae:	e7df      	b.n	8008c70 <__d2b+0x5c>
 8008cb0:	fffffbcd 	.word	0xfffffbcd
 8008cb4:	fffffbce 	.word	0xfffffbce
 8008cb8:	3fffffff 	.word	0x3fffffff

08008cbc <_calloc_r>:
 8008cbc:	434a      	muls	r2, r1
 8008cbe:	b570      	push	{r4, r5, r6, lr}
 8008cc0:	0011      	movs	r1, r2
 8008cc2:	0014      	movs	r4, r2
 8008cc4:	f000 f852 	bl	8008d6c <_malloc_r>
 8008cc8:	1e05      	subs	r5, r0, #0
 8008cca:	d003      	beq.n	8008cd4 <_calloc_r+0x18>
 8008ccc:	0022      	movs	r2, r4
 8008cce:	2100      	movs	r1, #0
 8008cd0:	f7fd fed0 	bl	8006a74 <memset>
 8008cd4:	0028      	movs	r0, r5
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}

08008cd8 <_free_r>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	0005      	movs	r5, r0
 8008cdc:	2900      	cmp	r1, #0
 8008cde:	d010      	beq.n	8008d02 <_free_r+0x2a>
 8008ce0:	1f0c      	subs	r4, r1, #4
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	da00      	bge.n	8008cea <_free_r+0x12>
 8008ce8:	18e4      	adds	r4, r4, r3
 8008cea:	0028      	movs	r0, r5
 8008cec:	f000 faa8 	bl	8009240 <__malloc_lock>
 8008cf0:	4a1d      	ldr	r2, [pc, #116]	; (8008d68 <_free_r+0x90>)
 8008cf2:	6813      	ldr	r3, [r2, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d105      	bne.n	8008d04 <_free_r+0x2c>
 8008cf8:	6063      	str	r3, [r4, #4]
 8008cfa:	6014      	str	r4, [r2, #0]
 8008cfc:	0028      	movs	r0, r5
 8008cfe:	f000 faa0 	bl	8009242 <__malloc_unlock>
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	d909      	bls.n	8008d1c <_free_r+0x44>
 8008d08:	6821      	ldr	r1, [r4, #0]
 8008d0a:	1860      	adds	r0, r4, r1
 8008d0c:	4283      	cmp	r3, r0
 8008d0e:	d1f3      	bne.n	8008cf8 <_free_r+0x20>
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	1841      	adds	r1, r0, r1
 8008d16:	6021      	str	r1, [r4, #0]
 8008d18:	e7ee      	b.n	8008cf8 <_free_r+0x20>
 8008d1a:	0013      	movs	r3, r2
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	2a00      	cmp	r2, #0
 8008d20:	d001      	beq.n	8008d26 <_free_r+0x4e>
 8008d22:	42a2      	cmp	r2, r4
 8008d24:	d9f9      	bls.n	8008d1a <_free_r+0x42>
 8008d26:	6819      	ldr	r1, [r3, #0]
 8008d28:	1858      	adds	r0, r3, r1
 8008d2a:	42a0      	cmp	r0, r4
 8008d2c:	d10b      	bne.n	8008d46 <_free_r+0x6e>
 8008d2e:	6820      	ldr	r0, [r4, #0]
 8008d30:	1809      	adds	r1, r1, r0
 8008d32:	1858      	adds	r0, r3, r1
 8008d34:	6019      	str	r1, [r3, #0]
 8008d36:	4282      	cmp	r2, r0
 8008d38:	d1e0      	bne.n	8008cfc <_free_r+0x24>
 8008d3a:	6810      	ldr	r0, [r2, #0]
 8008d3c:	6852      	ldr	r2, [r2, #4]
 8008d3e:	1841      	adds	r1, r0, r1
 8008d40:	6019      	str	r1, [r3, #0]
 8008d42:	605a      	str	r2, [r3, #4]
 8008d44:	e7da      	b.n	8008cfc <_free_r+0x24>
 8008d46:	42a0      	cmp	r0, r4
 8008d48:	d902      	bls.n	8008d50 <_free_r+0x78>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	602b      	str	r3, [r5, #0]
 8008d4e:	e7d5      	b.n	8008cfc <_free_r+0x24>
 8008d50:	6821      	ldr	r1, [r4, #0]
 8008d52:	1860      	adds	r0, r4, r1
 8008d54:	4282      	cmp	r2, r0
 8008d56:	d103      	bne.n	8008d60 <_free_r+0x88>
 8008d58:	6810      	ldr	r0, [r2, #0]
 8008d5a:	6852      	ldr	r2, [r2, #4]
 8008d5c:	1841      	adds	r1, r0, r1
 8008d5e:	6021      	str	r1, [r4, #0]
 8008d60:	6062      	str	r2, [r4, #4]
 8008d62:	605c      	str	r4, [r3, #4]
 8008d64:	e7ca      	b.n	8008cfc <_free_r+0x24>
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	2000021c 	.word	0x2000021c

08008d6c <_malloc_r>:
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	b570      	push	{r4, r5, r6, lr}
 8008d70:	1ccd      	adds	r5, r1, #3
 8008d72:	439d      	bics	r5, r3
 8008d74:	3508      	adds	r5, #8
 8008d76:	0006      	movs	r6, r0
 8008d78:	2d0c      	cmp	r5, #12
 8008d7a:	d21e      	bcs.n	8008dba <_malloc_r+0x4e>
 8008d7c:	250c      	movs	r5, #12
 8008d7e:	42a9      	cmp	r1, r5
 8008d80:	d81d      	bhi.n	8008dbe <_malloc_r+0x52>
 8008d82:	0030      	movs	r0, r6
 8008d84:	f000 fa5c 	bl	8009240 <__malloc_lock>
 8008d88:	4a25      	ldr	r2, [pc, #148]	; (8008e20 <_malloc_r+0xb4>)
 8008d8a:	6814      	ldr	r4, [r2, #0]
 8008d8c:	0021      	movs	r1, r4
 8008d8e:	2900      	cmp	r1, #0
 8008d90:	d119      	bne.n	8008dc6 <_malloc_r+0x5a>
 8008d92:	4c24      	ldr	r4, [pc, #144]	; (8008e24 <_malloc_r+0xb8>)
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d103      	bne.n	8008da2 <_malloc_r+0x36>
 8008d9a:	0030      	movs	r0, r6
 8008d9c:	f000 f982 	bl	80090a4 <_sbrk_r>
 8008da0:	6020      	str	r0, [r4, #0]
 8008da2:	0029      	movs	r1, r5
 8008da4:	0030      	movs	r0, r6
 8008da6:	f000 f97d 	bl	80090a4 <_sbrk_r>
 8008daa:	1c43      	adds	r3, r0, #1
 8008dac:	d12b      	bne.n	8008e06 <_malloc_r+0x9a>
 8008dae:	230c      	movs	r3, #12
 8008db0:	0030      	movs	r0, r6
 8008db2:	6033      	str	r3, [r6, #0]
 8008db4:	f000 fa45 	bl	8009242 <__malloc_unlock>
 8008db8:	e003      	b.n	8008dc2 <_malloc_r+0x56>
 8008dba:	2d00      	cmp	r5, #0
 8008dbc:	dadf      	bge.n	8008d7e <_malloc_r+0x12>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	6033      	str	r3, [r6, #0]
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	bd70      	pop	{r4, r5, r6, pc}
 8008dc6:	680b      	ldr	r3, [r1, #0]
 8008dc8:	1b5b      	subs	r3, r3, r5
 8008dca:	d419      	bmi.n	8008e00 <_malloc_r+0x94>
 8008dcc:	2b0b      	cmp	r3, #11
 8008dce:	d903      	bls.n	8008dd8 <_malloc_r+0x6c>
 8008dd0:	600b      	str	r3, [r1, #0]
 8008dd2:	18cc      	adds	r4, r1, r3
 8008dd4:	6025      	str	r5, [r4, #0]
 8008dd6:	e003      	b.n	8008de0 <_malloc_r+0x74>
 8008dd8:	684b      	ldr	r3, [r1, #4]
 8008dda:	428c      	cmp	r4, r1
 8008ddc:	d10d      	bne.n	8008dfa <_malloc_r+0x8e>
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	0030      	movs	r0, r6
 8008de2:	f000 fa2e 	bl	8009242 <__malloc_unlock>
 8008de6:	0020      	movs	r0, r4
 8008de8:	2207      	movs	r2, #7
 8008dea:	300b      	adds	r0, #11
 8008dec:	1d23      	adds	r3, r4, #4
 8008dee:	4390      	bics	r0, r2
 8008df0:	1ac3      	subs	r3, r0, r3
 8008df2:	d0e7      	beq.n	8008dc4 <_malloc_r+0x58>
 8008df4:	425a      	negs	r2, r3
 8008df6:	50e2      	str	r2, [r4, r3]
 8008df8:	e7e4      	b.n	8008dc4 <_malloc_r+0x58>
 8008dfa:	6063      	str	r3, [r4, #4]
 8008dfc:	000c      	movs	r4, r1
 8008dfe:	e7ef      	b.n	8008de0 <_malloc_r+0x74>
 8008e00:	000c      	movs	r4, r1
 8008e02:	6849      	ldr	r1, [r1, #4]
 8008e04:	e7c3      	b.n	8008d8e <_malloc_r+0x22>
 8008e06:	2303      	movs	r3, #3
 8008e08:	1cc4      	adds	r4, r0, #3
 8008e0a:	439c      	bics	r4, r3
 8008e0c:	42a0      	cmp	r0, r4
 8008e0e:	d0e1      	beq.n	8008dd4 <_malloc_r+0x68>
 8008e10:	1a21      	subs	r1, r4, r0
 8008e12:	0030      	movs	r0, r6
 8008e14:	f000 f946 	bl	80090a4 <_sbrk_r>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d1db      	bne.n	8008dd4 <_malloc_r+0x68>
 8008e1c:	e7c7      	b.n	8008dae <_malloc_r+0x42>
 8008e1e:	46c0      	nop			; (mov r8, r8)
 8008e20:	2000021c 	.word	0x2000021c
 8008e24:	20000220 	.word	0x20000220

08008e28 <__sfputc_r>:
 8008e28:	6893      	ldr	r3, [r2, #8]
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	6093      	str	r3, [r2, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	da04      	bge.n	8008e3e <__sfputc_r+0x16>
 8008e34:	6994      	ldr	r4, [r2, #24]
 8008e36:	42a3      	cmp	r3, r4
 8008e38:	db07      	blt.n	8008e4a <__sfputc_r+0x22>
 8008e3a:	290a      	cmp	r1, #10
 8008e3c:	d005      	beq.n	8008e4a <__sfputc_r+0x22>
 8008e3e:	6813      	ldr	r3, [r2, #0]
 8008e40:	1c58      	adds	r0, r3, #1
 8008e42:	6010      	str	r0, [r2, #0]
 8008e44:	7019      	strb	r1, [r3, #0]
 8008e46:	0008      	movs	r0, r1
 8008e48:	bd10      	pop	{r4, pc}
 8008e4a:	f7fe fafd 	bl	8007448 <__swbuf_r>
 8008e4e:	0001      	movs	r1, r0
 8008e50:	e7f9      	b.n	8008e46 <__sfputc_r+0x1e>

08008e52 <__sfputs_r>:
 8008e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e54:	0006      	movs	r6, r0
 8008e56:	000f      	movs	r7, r1
 8008e58:	0014      	movs	r4, r2
 8008e5a:	18d5      	adds	r5, r2, r3
 8008e5c:	42ac      	cmp	r4, r5
 8008e5e:	d101      	bne.n	8008e64 <__sfputs_r+0x12>
 8008e60:	2000      	movs	r0, #0
 8008e62:	e007      	b.n	8008e74 <__sfputs_r+0x22>
 8008e64:	7821      	ldrb	r1, [r4, #0]
 8008e66:	003a      	movs	r2, r7
 8008e68:	0030      	movs	r0, r6
 8008e6a:	f7ff ffdd 	bl	8008e28 <__sfputc_r>
 8008e6e:	3401      	adds	r4, #1
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d1f3      	bne.n	8008e5c <__sfputs_r+0xa>
 8008e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e78 <_vfiprintf_r>:
 8008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7a:	b0a1      	sub	sp, #132	; 0x84
 8008e7c:	9003      	str	r0, [sp, #12]
 8008e7e:	000f      	movs	r7, r1
 8008e80:	0016      	movs	r6, r2
 8008e82:	001d      	movs	r5, r3
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d005      	beq.n	8008e94 <_vfiprintf_r+0x1c>
 8008e88:	6983      	ldr	r3, [r0, #24]
 8008e8a:	9305      	str	r3, [sp, #20]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <_vfiprintf_r+0x1c>
 8008e90:	f7ff fb04 	bl	800849c <__sinit>
 8008e94:	4b7b      	ldr	r3, [pc, #492]	; (8009084 <_vfiprintf_r+0x20c>)
 8008e96:	429f      	cmp	r7, r3
 8008e98:	d15c      	bne.n	8008f54 <_vfiprintf_r+0xdc>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	685f      	ldr	r7, [r3, #4]
 8008e9e:	89bb      	ldrh	r3, [r7, #12]
 8008ea0:	071b      	lsls	r3, r3, #28
 8008ea2:	d563      	bpl.n	8008f6c <_vfiprintf_r+0xf4>
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d060      	beq.n	8008f6c <_vfiprintf_r+0xf4>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	ac08      	add	r4, sp, #32
 8008eae:	6163      	str	r3, [r4, #20]
 8008eb0:	3320      	adds	r3, #32
 8008eb2:	7663      	strb	r3, [r4, #25]
 8008eb4:	3310      	adds	r3, #16
 8008eb6:	76a3      	strb	r3, [r4, #26]
 8008eb8:	9507      	str	r5, [sp, #28]
 8008eba:	0035      	movs	r5, r6
 8008ebc:	782b      	ldrb	r3, [r5, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <_vfiprintf_r+0x4e>
 8008ec2:	2b25      	cmp	r3, #37	; 0x25
 8008ec4:	d15c      	bne.n	8008f80 <_vfiprintf_r+0x108>
 8008ec6:	1bab      	subs	r3, r5, r6
 8008ec8:	9305      	str	r3, [sp, #20]
 8008eca:	d00c      	beq.n	8008ee6 <_vfiprintf_r+0x6e>
 8008ecc:	0032      	movs	r2, r6
 8008ece:	0039      	movs	r1, r7
 8008ed0:	9803      	ldr	r0, [sp, #12]
 8008ed2:	f7ff ffbe 	bl	8008e52 <__sfputs_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d100      	bne.n	8008edc <_vfiprintf_r+0x64>
 8008eda:	e0c4      	b.n	8009066 <_vfiprintf_r+0x1ee>
 8008edc:	6962      	ldr	r2, [r4, #20]
 8008ede:	9b05      	ldr	r3, [sp, #20]
 8008ee0:	4694      	mov	ip, r2
 8008ee2:	4463      	add	r3, ip
 8008ee4:	6163      	str	r3, [r4, #20]
 8008ee6:	782b      	ldrb	r3, [r5, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d100      	bne.n	8008eee <_vfiprintf_r+0x76>
 8008eec:	e0bb      	b.n	8009066 <_vfiprintf_r+0x1ee>
 8008eee:	2201      	movs	r2, #1
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4252      	negs	r2, r2
 8008ef4:	6062      	str	r2, [r4, #4]
 8008ef6:	a904      	add	r1, sp, #16
 8008ef8:	3254      	adds	r2, #84	; 0x54
 8008efa:	1852      	adds	r2, r2, r1
 8008efc:	1c6e      	adds	r6, r5, #1
 8008efe:	6023      	str	r3, [r4, #0]
 8008f00:	60e3      	str	r3, [r4, #12]
 8008f02:	60a3      	str	r3, [r4, #8]
 8008f04:	7013      	strb	r3, [r2, #0]
 8008f06:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f08:	7831      	ldrb	r1, [r6, #0]
 8008f0a:	2205      	movs	r2, #5
 8008f0c:	485e      	ldr	r0, [pc, #376]	; (8009088 <_vfiprintf_r+0x210>)
 8008f0e:	f7ff fbdb 	bl	80086c8 <memchr>
 8008f12:	1c75      	adds	r5, r6, #1
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d135      	bne.n	8008f84 <_vfiprintf_r+0x10c>
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	06d3      	lsls	r3, r2, #27
 8008f1c:	d504      	bpl.n	8008f28 <_vfiprintf_r+0xb0>
 8008f1e:	2353      	movs	r3, #83	; 0x53
 8008f20:	a904      	add	r1, sp, #16
 8008f22:	185b      	adds	r3, r3, r1
 8008f24:	2120      	movs	r1, #32
 8008f26:	7019      	strb	r1, [r3, #0]
 8008f28:	0713      	lsls	r3, r2, #28
 8008f2a:	d504      	bpl.n	8008f36 <_vfiprintf_r+0xbe>
 8008f2c:	2353      	movs	r3, #83	; 0x53
 8008f2e:	a904      	add	r1, sp, #16
 8008f30:	185b      	adds	r3, r3, r1
 8008f32:	212b      	movs	r1, #43	; 0x2b
 8008f34:	7019      	strb	r1, [r3, #0]
 8008f36:	7833      	ldrb	r3, [r6, #0]
 8008f38:	2b2a      	cmp	r3, #42	; 0x2a
 8008f3a:	d02c      	beq.n	8008f96 <_vfiprintf_r+0x11e>
 8008f3c:	0035      	movs	r5, r6
 8008f3e:	2100      	movs	r1, #0
 8008f40:	200a      	movs	r0, #10
 8008f42:	68e3      	ldr	r3, [r4, #12]
 8008f44:	782a      	ldrb	r2, [r5, #0]
 8008f46:	1c6e      	adds	r6, r5, #1
 8008f48:	3a30      	subs	r2, #48	; 0x30
 8008f4a:	2a09      	cmp	r2, #9
 8008f4c:	d964      	bls.n	8009018 <_vfiprintf_r+0x1a0>
 8008f4e:	2900      	cmp	r1, #0
 8008f50:	d02e      	beq.n	8008fb0 <_vfiprintf_r+0x138>
 8008f52:	e026      	b.n	8008fa2 <_vfiprintf_r+0x12a>
 8008f54:	4b4d      	ldr	r3, [pc, #308]	; (800908c <_vfiprintf_r+0x214>)
 8008f56:	429f      	cmp	r7, r3
 8008f58:	d102      	bne.n	8008f60 <_vfiprintf_r+0xe8>
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	689f      	ldr	r7, [r3, #8]
 8008f5e:	e79e      	b.n	8008e9e <_vfiprintf_r+0x26>
 8008f60:	4b4b      	ldr	r3, [pc, #300]	; (8009090 <_vfiprintf_r+0x218>)
 8008f62:	429f      	cmp	r7, r3
 8008f64:	d19b      	bne.n	8008e9e <_vfiprintf_r+0x26>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	68df      	ldr	r7, [r3, #12]
 8008f6a:	e798      	b.n	8008e9e <_vfiprintf_r+0x26>
 8008f6c:	0039      	movs	r1, r7
 8008f6e:	9803      	ldr	r0, [sp, #12]
 8008f70:	f7fe fac0 	bl	80074f4 <__swsetup_r>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d098      	beq.n	8008eaa <_vfiprintf_r+0x32>
 8008f78:	2001      	movs	r0, #1
 8008f7a:	4240      	negs	r0, r0
 8008f7c:	b021      	add	sp, #132	; 0x84
 8008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f80:	3501      	adds	r5, #1
 8008f82:	e79b      	b.n	8008ebc <_vfiprintf_r+0x44>
 8008f84:	4b40      	ldr	r3, [pc, #256]	; (8009088 <_vfiprintf_r+0x210>)
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	1ac0      	subs	r0, r0, r3
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	4083      	lsls	r3, r0
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	002e      	movs	r6, r5
 8008f94:	e7b8      	b.n	8008f08 <_vfiprintf_r+0x90>
 8008f96:	9b07      	ldr	r3, [sp, #28]
 8008f98:	1d19      	adds	r1, r3, #4
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	9107      	str	r1, [sp, #28]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	db01      	blt.n	8008fa6 <_vfiprintf_r+0x12e>
 8008fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fa4:	e004      	b.n	8008fb0 <_vfiprintf_r+0x138>
 8008fa6:	425b      	negs	r3, r3
 8008fa8:	60e3      	str	r3, [r4, #12]
 8008faa:	2302      	movs	r3, #2
 8008fac:	4313      	orrs	r3, r2
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	782b      	ldrb	r3, [r5, #0]
 8008fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8008fb4:	d10a      	bne.n	8008fcc <_vfiprintf_r+0x154>
 8008fb6:	786b      	ldrb	r3, [r5, #1]
 8008fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008fba:	d135      	bne.n	8009028 <_vfiprintf_r+0x1b0>
 8008fbc:	9b07      	ldr	r3, [sp, #28]
 8008fbe:	3502      	adds	r5, #2
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	9207      	str	r2, [sp, #28]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	db2b      	blt.n	8009022 <_vfiprintf_r+0x1aa>
 8008fca:	9309      	str	r3, [sp, #36]	; 0x24
 8008fcc:	4e31      	ldr	r6, [pc, #196]	; (8009094 <_vfiprintf_r+0x21c>)
 8008fce:	7829      	ldrb	r1, [r5, #0]
 8008fd0:	2203      	movs	r2, #3
 8008fd2:	0030      	movs	r0, r6
 8008fd4:	f7ff fb78 	bl	80086c8 <memchr>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d006      	beq.n	8008fea <_vfiprintf_r+0x172>
 8008fdc:	2340      	movs	r3, #64	; 0x40
 8008fde:	1b80      	subs	r0, r0, r6
 8008fe0:	4083      	lsls	r3, r0
 8008fe2:	6822      	ldr	r2, [r4, #0]
 8008fe4:	3501      	adds	r5, #1
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	7829      	ldrb	r1, [r5, #0]
 8008fec:	2206      	movs	r2, #6
 8008fee:	482a      	ldr	r0, [pc, #168]	; (8009098 <_vfiprintf_r+0x220>)
 8008ff0:	1c6e      	adds	r6, r5, #1
 8008ff2:	7621      	strb	r1, [r4, #24]
 8008ff4:	f7ff fb68 	bl	80086c8 <memchr>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d03a      	beq.n	8009072 <_vfiprintf_r+0x1fa>
 8008ffc:	4b27      	ldr	r3, [pc, #156]	; (800909c <_vfiprintf_r+0x224>)
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d125      	bne.n	800904e <_vfiprintf_r+0x1d6>
 8009002:	2207      	movs	r2, #7
 8009004:	9b07      	ldr	r3, [sp, #28]
 8009006:	3307      	adds	r3, #7
 8009008:	4393      	bics	r3, r2
 800900a:	3308      	adds	r3, #8
 800900c:	9307      	str	r3, [sp, #28]
 800900e:	6963      	ldr	r3, [r4, #20]
 8009010:	9a04      	ldr	r2, [sp, #16]
 8009012:	189b      	adds	r3, r3, r2
 8009014:	6163      	str	r3, [r4, #20]
 8009016:	e750      	b.n	8008eba <_vfiprintf_r+0x42>
 8009018:	4343      	muls	r3, r0
 800901a:	2101      	movs	r1, #1
 800901c:	189b      	adds	r3, r3, r2
 800901e:	0035      	movs	r5, r6
 8009020:	e790      	b.n	8008f44 <_vfiprintf_r+0xcc>
 8009022:	2301      	movs	r3, #1
 8009024:	425b      	negs	r3, r3
 8009026:	e7d0      	b.n	8008fca <_vfiprintf_r+0x152>
 8009028:	2300      	movs	r3, #0
 800902a:	200a      	movs	r0, #10
 800902c:	001a      	movs	r2, r3
 800902e:	3501      	adds	r5, #1
 8009030:	6063      	str	r3, [r4, #4]
 8009032:	7829      	ldrb	r1, [r5, #0]
 8009034:	1c6e      	adds	r6, r5, #1
 8009036:	3930      	subs	r1, #48	; 0x30
 8009038:	2909      	cmp	r1, #9
 800903a:	d903      	bls.n	8009044 <_vfiprintf_r+0x1cc>
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0c5      	beq.n	8008fcc <_vfiprintf_r+0x154>
 8009040:	9209      	str	r2, [sp, #36]	; 0x24
 8009042:	e7c3      	b.n	8008fcc <_vfiprintf_r+0x154>
 8009044:	4342      	muls	r2, r0
 8009046:	2301      	movs	r3, #1
 8009048:	1852      	adds	r2, r2, r1
 800904a:	0035      	movs	r5, r6
 800904c:	e7f1      	b.n	8009032 <_vfiprintf_r+0x1ba>
 800904e:	ab07      	add	r3, sp, #28
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	003a      	movs	r2, r7
 8009054:	4b12      	ldr	r3, [pc, #72]	; (80090a0 <_vfiprintf_r+0x228>)
 8009056:	0021      	movs	r1, r4
 8009058:	9803      	ldr	r0, [sp, #12]
 800905a:	f7fd fdaf 	bl	8006bbc <_printf_float>
 800905e:	9004      	str	r0, [sp, #16]
 8009060:	9b04      	ldr	r3, [sp, #16]
 8009062:	3301      	adds	r3, #1
 8009064:	d1d3      	bne.n	800900e <_vfiprintf_r+0x196>
 8009066:	89bb      	ldrh	r3, [r7, #12]
 8009068:	065b      	lsls	r3, r3, #25
 800906a:	d500      	bpl.n	800906e <_vfiprintf_r+0x1f6>
 800906c:	e784      	b.n	8008f78 <_vfiprintf_r+0x100>
 800906e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009070:	e784      	b.n	8008f7c <_vfiprintf_r+0x104>
 8009072:	ab07      	add	r3, sp, #28
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	003a      	movs	r2, r7
 8009078:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <_vfiprintf_r+0x228>)
 800907a:	0021      	movs	r1, r4
 800907c:	9803      	ldr	r0, [sp, #12]
 800907e:	f7fe f857 	bl	8007130 <_printf_i>
 8009082:	e7ec      	b.n	800905e <_vfiprintf_r+0x1e6>
 8009084:	0800980c 	.word	0x0800980c
 8009088:	0800994c 	.word	0x0800994c
 800908c:	0800982c 	.word	0x0800982c
 8009090:	080097ec 	.word	0x080097ec
 8009094:	08009952 	.word	0x08009952
 8009098:	08009956 	.word	0x08009956
 800909c:	08006bbd 	.word	0x08006bbd
 80090a0:	08008e53 	.word	0x08008e53

080090a4 <_sbrk_r>:
 80090a4:	2300      	movs	r3, #0
 80090a6:	b570      	push	{r4, r5, r6, lr}
 80090a8:	4c06      	ldr	r4, [pc, #24]	; (80090c4 <_sbrk_r+0x20>)
 80090aa:	0005      	movs	r5, r0
 80090ac:	0008      	movs	r0, r1
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	f7fd fba0 	bl	80067f4 <_sbrk>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d103      	bne.n	80090c0 <_sbrk_r+0x1c>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d000      	beq.n	80090c0 <_sbrk_r+0x1c>
 80090be:	602b      	str	r3, [r5, #0]
 80090c0:	bd70      	pop	{r4, r5, r6, pc}
 80090c2:	46c0      	nop			; (mov r8, r8)
 80090c4:	200002e8 	.word	0x200002e8

080090c8 <__sread>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	000c      	movs	r4, r1
 80090cc:	250e      	movs	r5, #14
 80090ce:	5f49      	ldrsh	r1, [r1, r5]
 80090d0:	f000 f8b8 	bl	8009244 <_read_r>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	db03      	blt.n	80090e0 <__sread+0x18>
 80090d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80090da:	181b      	adds	r3, r3, r0
 80090dc:	6563      	str	r3, [r4, #84]	; 0x54
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	4a02      	ldr	r2, [pc, #8]	; (80090ec <__sread+0x24>)
 80090e4:	4013      	ands	r3, r2
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	e7f9      	b.n	80090de <__sread+0x16>
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	ffffefff 	.word	0xffffefff

080090f0 <__swrite>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	001f      	movs	r7, r3
 80090f4:	898b      	ldrh	r3, [r1, #12]
 80090f6:	0005      	movs	r5, r0
 80090f8:	000c      	movs	r4, r1
 80090fa:	0016      	movs	r6, r2
 80090fc:	05db      	lsls	r3, r3, #23
 80090fe:	d505      	bpl.n	800910c <__swrite+0x1c>
 8009100:	230e      	movs	r3, #14
 8009102:	5ec9      	ldrsh	r1, [r1, r3]
 8009104:	2200      	movs	r2, #0
 8009106:	2302      	movs	r3, #2
 8009108:	f000 f874 	bl	80091f4 <_lseek_r>
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	4a05      	ldr	r2, [pc, #20]	; (8009124 <__swrite+0x34>)
 8009110:	0028      	movs	r0, r5
 8009112:	4013      	ands	r3, r2
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	0032      	movs	r2, r6
 8009118:	230e      	movs	r3, #14
 800911a:	5ee1      	ldrsh	r1, [r4, r3]
 800911c:	003b      	movs	r3, r7
 800911e:	f000 f81f 	bl	8009160 <_write_r>
 8009122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009124:	ffffefff 	.word	0xffffefff

08009128 <__sseek>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	000c      	movs	r4, r1
 800912c:	250e      	movs	r5, #14
 800912e:	5f49      	ldrsh	r1, [r1, r5]
 8009130:	f000 f860 	bl	80091f4 <_lseek_r>
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	1c42      	adds	r2, r0, #1
 8009138:	d103      	bne.n	8009142 <__sseek+0x1a>
 800913a:	4a05      	ldr	r2, [pc, #20]	; (8009150 <__sseek+0x28>)
 800913c:	4013      	ands	r3, r2
 800913e:	81a3      	strh	r3, [r4, #12]
 8009140:	bd70      	pop	{r4, r5, r6, pc}
 8009142:	2280      	movs	r2, #128	; 0x80
 8009144:	0152      	lsls	r2, r2, #5
 8009146:	4313      	orrs	r3, r2
 8009148:	81a3      	strh	r3, [r4, #12]
 800914a:	6560      	str	r0, [r4, #84]	; 0x54
 800914c:	e7f8      	b.n	8009140 <__sseek+0x18>
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	ffffefff 	.word	0xffffefff

08009154 <__sclose>:
 8009154:	b510      	push	{r4, lr}
 8009156:	230e      	movs	r3, #14
 8009158:	5ec9      	ldrsh	r1, [r1, r3]
 800915a:	f000 f815 	bl	8009188 <_close_r>
 800915e:	bd10      	pop	{r4, pc}

08009160 <_write_r>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	0005      	movs	r5, r0
 8009164:	0008      	movs	r0, r1
 8009166:	0011      	movs	r1, r2
 8009168:	2200      	movs	r2, #0
 800916a:	4c06      	ldr	r4, [pc, #24]	; (8009184 <_write_r+0x24>)
 800916c:	6022      	str	r2, [r4, #0]
 800916e:	001a      	movs	r2, r3
 8009170:	f7fc f842 	bl	80051f8 <_write>
 8009174:	1c43      	adds	r3, r0, #1
 8009176:	d103      	bne.n	8009180 <_write_r+0x20>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d000      	beq.n	8009180 <_write_r+0x20>
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	bd70      	pop	{r4, r5, r6, pc}
 8009182:	46c0      	nop			; (mov r8, r8)
 8009184:	200002e8 	.word	0x200002e8

08009188 <_close_r>:
 8009188:	2300      	movs	r3, #0
 800918a:	b570      	push	{r4, r5, r6, lr}
 800918c:	4c06      	ldr	r4, [pc, #24]	; (80091a8 <_close_r+0x20>)
 800918e:	0005      	movs	r5, r0
 8009190:	0008      	movs	r0, r1
 8009192:	6023      	str	r3, [r4, #0]
 8009194:	f7fd fb01 	bl	800679a <_close>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d103      	bne.n	80091a4 <_close_r+0x1c>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d000      	beq.n	80091a4 <_close_r+0x1c>
 80091a2:	602b      	str	r3, [r5, #0]
 80091a4:	bd70      	pop	{r4, r5, r6, pc}
 80091a6:	46c0      	nop			; (mov r8, r8)
 80091a8:	200002e8 	.word	0x200002e8

080091ac <_fstat_r>:
 80091ac:	2300      	movs	r3, #0
 80091ae:	b570      	push	{r4, r5, r6, lr}
 80091b0:	4c06      	ldr	r4, [pc, #24]	; (80091cc <_fstat_r+0x20>)
 80091b2:	0005      	movs	r5, r0
 80091b4:	0008      	movs	r0, r1
 80091b6:	0011      	movs	r1, r2
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	f7fd faf8 	bl	80067ae <_fstat>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	d103      	bne.n	80091ca <_fstat_r+0x1e>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d000      	beq.n	80091ca <_fstat_r+0x1e>
 80091c8:	602b      	str	r3, [r5, #0]
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
 80091cc:	200002e8 	.word	0x200002e8

080091d0 <_isatty_r>:
 80091d0:	2300      	movs	r3, #0
 80091d2:	b570      	push	{r4, r5, r6, lr}
 80091d4:	4c06      	ldr	r4, [pc, #24]	; (80091f0 <_isatty_r+0x20>)
 80091d6:	0005      	movs	r5, r0
 80091d8:	0008      	movs	r0, r1
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	f7fd faf5 	bl	80067ca <_isatty>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d103      	bne.n	80091ec <_isatty_r+0x1c>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d000      	beq.n	80091ec <_isatty_r+0x1c>
 80091ea:	602b      	str	r3, [r5, #0]
 80091ec:	bd70      	pop	{r4, r5, r6, pc}
 80091ee:	46c0      	nop			; (mov r8, r8)
 80091f0:	200002e8 	.word	0x200002e8

080091f4 <_lseek_r>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	0005      	movs	r5, r0
 80091f8:	0008      	movs	r0, r1
 80091fa:	0011      	movs	r1, r2
 80091fc:	2200      	movs	r2, #0
 80091fe:	4c06      	ldr	r4, [pc, #24]	; (8009218 <_lseek_r+0x24>)
 8009200:	6022      	str	r2, [r4, #0]
 8009202:	001a      	movs	r2, r3
 8009204:	f7fd faea 	bl	80067dc <_lseek>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d103      	bne.n	8009214 <_lseek_r+0x20>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d000      	beq.n	8009214 <_lseek_r+0x20>
 8009212:	602b      	str	r3, [r5, #0]
 8009214:	bd70      	pop	{r4, r5, r6, pc}
 8009216:	46c0      	nop			; (mov r8, r8)
 8009218:	200002e8 	.word	0x200002e8

0800921c <__ascii_mbtowc>:
 800921c:	b082      	sub	sp, #8
 800921e:	2900      	cmp	r1, #0
 8009220:	d100      	bne.n	8009224 <__ascii_mbtowc+0x8>
 8009222:	a901      	add	r1, sp, #4
 8009224:	1e10      	subs	r0, r2, #0
 8009226:	d006      	beq.n	8009236 <__ascii_mbtowc+0x1a>
 8009228:	2b00      	cmp	r3, #0
 800922a:	d006      	beq.n	800923a <__ascii_mbtowc+0x1e>
 800922c:	7813      	ldrb	r3, [r2, #0]
 800922e:	600b      	str	r3, [r1, #0]
 8009230:	7810      	ldrb	r0, [r2, #0]
 8009232:	1e43      	subs	r3, r0, #1
 8009234:	4198      	sbcs	r0, r3
 8009236:	b002      	add	sp, #8
 8009238:	4770      	bx	lr
 800923a:	2002      	movs	r0, #2
 800923c:	4240      	negs	r0, r0
 800923e:	e7fa      	b.n	8009236 <__ascii_mbtowc+0x1a>

08009240 <__malloc_lock>:
 8009240:	4770      	bx	lr

08009242 <__malloc_unlock>:
 8009242:	4770      	bx	lr

08009244 <_read_r>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	0005      	movs	r5, r0
 8009248:	0008      	movs	r0, r1
 800924a:	0011      	movs	r1, r2
 800924c:	2200      	movs	r2, #0
 800924e:	4c06      	ldr	r4, [pc, #24]	; (8009268 <_read_r+0x24>)
 8009250:	6022      	str	r2, [r4, #0]
 8009252:	001a      	movs	r2, r3
 8009254:	f7fd fa84 	bl	8006760 <_read>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d103      	bne.n	8009264 <_read_r+0x20>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d000      	beq.n	8009264 <_read_r+0x20>
 8009262:	602b      	str	r3, [r5, #0]
 8009264:	bd70      	pop	{r4, r5, r6, pc}
 8009266:	46c0      	nop			; (mov r8, r8)
 8009268:	200002e8 	.word	0x200002e8

0800926c <__ascii_wctomb>:
 800926c:	1e0b      	subs	r3, r1, #0
 800926e:	d004      	beq.n	800927a <__ascii_wctomb+0xe>
 8009270:	2aff      	cmp	r2, #255	; 0xff
 8009272:	d904      	bls.n	800927e <__ascii_wctomb+0x12>
 8009274:	238a      	movs	r3, #138	; 0x8a
 8009276:	6003      	str	r3, [r0, #0]
 8009278:	3b8b      	subs	r3, #139	; 0x8b
 800927a:	0018      	movs	r0, r3
 800927c:	4770      	bx	lr
 800927e:	700a      	strb	r2, [r1, #0]
 8009280:	2301      	movs	r3, #1
 8009282:	e7fa      	b.n	800927a <__ascii_wctomb+0xe>

08009284 <_init>:
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	46c0      	nop			; (mov r8, r8)
 8009288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800928a:	bc08      	pop	{r3}
 800928c:	469e      	mov	lr, r3
 800928e:	4770      	bx	lr

08009290 <_fini>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	46c0      	nop			; (mov r8, r8)
 8009294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009296:	bc08      	pop	{r3}
 8009298:	469e      	mov	lr, r3
 800929a:	4770      	bx	lr
